{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    l = []\n    for _ in range(N+1):\n        input().\n        \n\n\n","offset":102,"fileType":"python3","requestStartTime":1517907753337}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    l = []\n    for _ in range(N+1):\n        int(input().split())\n        input.\n        \n\n\n","offset":129,"fileType":"python3","requestStartTime":1517907772559}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    l = []\n    for _ in range(N+1):\n        int(input().split())\n        input().\n        \n\n\n","offset":131,"fileType":"python3","requestStartTime":1517907788749}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    l = []\n    for _ in range(N+1):\n        a = str(input().split())\n        l.\n        \n        \n\n\n","offset":129,"fileType":"python3","requestStartTime":1517907923205}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if(acid_name.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":103,"fileType":"python3","requestStartTime":1517908211211}}
{"body": {"column":51,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if(acid_name.startswith(\"hydro\") and acid_name.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":137,"fileType":"python3","requestStartTime":1517908232806}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if(acid_name.startswith(\"hydro\") and acid_name.endswith(\"ic\")):\n        x=\"non-metal acid\"\n    elif(acid_name.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":200,"fileType":"python3","requestStartTime":1517908300414}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = set()\nfor i in range(n_english):\n    english.\n\n","offset":82,"fileType":"python3","requestStartTime":1517908404144}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = set()\nfor i in range(n_english):\n    english.add(int(input()))\n   \nn_french = int(input())\nfrench = set()\nfor i in range(n_french):\n    french.\n\n\n\n","offset":180,"fileType":"python3","requestStartTime":1517908449899}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = set()\nfor i in range(n_english):\n    english.add(int(input()))\n   \nn_french = int(input())\nfrench = set()\nfor i in range(n_french):\n    french.add(int(input()))\n    \ntotal = english.\n\n\n\n","offset":219,"fileType":"python3","requestStartTime":1517908501656}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = set()\nfor i in range(n_english):\n    english.add(int(input()))\n   \nn_french = int(input())\nfrench = set()\nfor i in range(n_french):\n    french.add(int(input()))\n    \ntotal = english.\n\n\n\n","offset":219,"fileType":"python3","requestStartTime":1517908510996}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\nprint(english)\nenglish = \"\\t\".\n   \nn_french = int(input())\nfrench = set()\nfor i in range(n_french):\n    french.add(int(input()))\n    \ntotal = english.union(french)\nprint(total)\n\n\n\n","offset":80,"fileType":"python3","requestStartTime":1517908557707}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    unlocked = 0\n    islands = 0\n    last = 0\n    \n    for door in doors:\n        if door == 0:\n            unlocked += 1\n        elif last == 0:\n            islands += 1\n        last = door\n    print(\"{} {}\".)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":274,"fileType":"python3","requestStartTime":1517908601071}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.\n\nprint(english)\n\n\n\n","offset":139,"fileType":"python3","requestStartTime":1517908647608}}
{"body": {"column":41,"line":7,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.\n\nprint(english)\n\n\n\n","offset":167,"fileType":"python3","requestStartTime":1517908653130}}
{"body": {"column":30,"line":10,"wordToComplete":"r","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.r\n\nprint(english)\n\n\n\n\n","offset":234,"fileType":"python3","requestStartTime":1517908697258}}
{"body": {"column":61,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n#import ast\nimport json\nfrom collections import OrderedDict#, defaultdict, namedtuple\n\n#function for ordered dictionary\ndef ordict(x):\n     return [ordict(k)) for k,v in x.items() if isinstance(k.,list)]\n\n\n#[nesdi(k) for k in g.keys()]\n\n#function for multiple key value pairs in every 'get' observation\ndef nested(jload):\n    for k,v in jload.items():\n        if isinstance(v,dict):\n            return mkv(v)\n        else:\n            yield (k,v)\n            \ndef listhan_ineq(g,a):    \n    if isinstance(a[k],list):\n        return [ai for ai in a if all(k in a and g[k] in a[k] for k in g.keys())]\n    else:\n        return [ai for ai in a if all(k in a and g[k] == a[k] for k in g.keys())]\n\ndef listhan_notineq(d,a):    \n    if isinstance(a[k],list):\n        return [ai for ai in a if all(k in a and d[k] not in a[k] for k in d.keys())]\n    else:\n        return [ai for ai in a if all(k in a and d[k] != a[k] for k in d.keys())]\nadd=[]\nget=[]\ndelete=[]\nfor line in sys.stdin:\n    x = line.strip('\\n').split(\" \",1)\n    if x[0] == 'add':\n        addi=json.loads(x[1], object_pairs_hook=OrderedDict)\n        print ('addi_keys', [addi[kee] for kee in addi.keys()])\n        #add.append(json.loads(x[1], object_pairs_hook=OrderedDict))\n        add.append(addi)\n        #print (json.dumps(json.loads(x[1], object_pairs_hook=OrderedDict),separators=(',',':')))\n    elif x[0] == 'get':\n        get = json.loads(x[1], object_pairs_hook=OrderedDict)\n        \n        print ('get_keys', [get[kee] for kee in get.keys()])\n        match = [addi for addi in add if all(kee in addi and get[kee] == addi[kee] for kee in get.keys())]\n        for matchi in match:\n            print (json.dumps(matchi,separators=(',',':')))\n    elif x[0] == 'delete':\n        delete = json.loads(x[1], object_pairs_hook=OrderedDict)\n        add = [addi for addi in add if all(kee in addi and delete[kee] != addi[kee] for kee in delete.keys())]\n        \n#for k,v in mkv(add[0]):\n#    print (k,v)\n    \n\n\n\n\n    \n\n\n\n\n\n","offset":279,"fileType":"python3","requestStartTime":1517908698289}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".\n\n\n\n\n","offset":309,"fileType":"python3","requestStartTime":1517908718250}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.\n\n\n\n\n","offset":379,"fileType":"python3","requestStartTime":1517908732926}}
{"body": {"column":40,"line":19,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.\n\n\n\n\n","offset":406,"fileType":"python3","requestStartTime":1517908739901}}
{"body": {"column":28,"line":22,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.\n\n\n\n\n","offset":470,"fileType":"python3","requestStartTime":1517908750954}}
{"body": {"column":17,"line":29,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal = len(english) + len(french)\ntotal -= english.\n\n\n\n\n\n\n","offset":583,"fileType":"python3","requestStartTime":1517908813500}}
{"body": {"column":40,"line":3,"wordToComplete":"ENter credit card no.\"","code":"\nif __name__ = '__main__':\n    \n    n = int(input(\"ENter credit card no.\"))\n\n","offset":73,"fileType":"python3","requestStartTime":1517908855978}}
{"body": {"column":44,"line":3,"wordToComplete":"","code":"\nif __name__ = '__main__':\n    \n    n = int(input(\"ENter credit card no. \").)\n\n","offset":77,"fileType":"python3","requestStartTime":1517908860590}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal_set = english.\n\n\n\n\n\n\n","offset":551,"fileType":"python3","requestStartTime":1517908872768}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal_set = english.union(french)\ntotal = len(total_set)\ntotal += len(english.)\n\n\n\n\n\n\n","offset":609,"fileType":"python3","requestStartTime":1517908904383}}
{"body": {"column":22,"line":30,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal_set = english.union(french)\ntotal = len(total_set)\ntotal += len(english..)\n\n\n\n\n\n\n","offset":610,"fileType":"python3","requestStartTime":1517908904430}}
{"body": {"column":22,"line":28,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\nprint(len(set(english.)))\n\n\n\n\n\n\n","offset":553,"fileType":"python3","requestStartTime":1517908941354}}
{"body": {"column":45,"line":29,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\nprint(\n    len(english) + len(french) - len(english.)\n\n\n\n\n\n\n","offset":583,"fileType":"python3","requestStartTime":1517908976085}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal_set = english.\n\n\n\n\n\n\n","offset":551,"fileType":"python3","requestStartTime":1517909004674}}
{"body": {"column":19,"line":28,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal = set(french.)\nprint(len(total))\n\n\n\n\n\n\n\n","offset":550,"fileType":"python3","requestStartTime":1517909096996}}
{"body": {"column":17,"line":123,"wordToComplete":"","code":"import fileinput\n# Implement the class below, keeping the constructor's signature unchanged; it should take no arguments.\nimport json\n\nclass Position_New(object):\n    type = \"NEW\"\n    symbol = \"\"\n    order_id = 0\n    side = \"\"\n    quantity = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.symbol = msg_dict['symbol']\n        self.order_id = msg_dict['order_id']\n        self.side = msg_dict['side']\n        self.quantity = msg_dict['quantity']\n        self.time = msg_dict['time']\n\nclass Position_ORDER_ACK(object):\n    type = \"ORDER_ACK\"\n    order_id = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.time = msg_dict['time']\n \nclass Position_ORDER_REJECT(object):\n    type = \"ORDER_REJECT\"\n    order_id = 0\n    reason = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.reason = msg_dict['reason']       \n        self.time = msg_dict['time']\n \n\n\nclass Position_CANCEL(object):\n    type = \"CANCEL\"\n    order_id = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.time = msg_dict['time']\n        \nclass Position_CANCEL_REJECT(object):\n    type = \"CANCEL_REJECT\"\n    order_id = 0\n    reason = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.reason = msg_dict['reason']\n        self.time = msg_dict['time']\n        \n        \n \n \n\nclass Position_FILL(object):\n    type = \"FILL\"\n    order_id = 0\n    filled_quantity = 0\n    remaining_quantity = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.filled_quantity = msg_dict['filled_quantity'] \n        self.remaining_quantity = msg_dict['remaining_quantity']\n        self.time = msg_dict['time']\n  \n\nclass MarkingPositionMonitor:\n    order_list = {}\n    current_position = 0\n    #symbol = \"\"\n    \n    def __init__(self):\n        print (type(self))\n        pass\n    \n    def on_event(self, message):\n        msg_dict = json.loads(message)\n        msg_type = msg_dict['type']\n        order_id = msg_dict['order_id']\n        \n        if msg_type == 'NEW':\n            new_order = Position_New( message)\n            order_id = msg_dict['order_id']\n            self.order_list[ order_id] = new_order\n            if msg_dict['side'] == \"SELL\":\n                self.current_position -= int(msg_dict['quantity']) \n\n        if msg_type == 'ORDER_ACK':\n            order_id = msg_dict['order_id']\n     \n        if msg_type == 'CANCEL':\n            order_id = msg_dict['order_id']\n         \n        if msg_type == 'CANCEL_ACK':\n            order_id = msg_dict['order_id']\n            order_intended = self.order_list[order_id]\n            quantity = int(order_intended.quantity)\n            print quantity\n            self.\n            \n            \n        if msg_type == 'CANCEL_REJECT':\n            order_id = msg_dict['order_id']  \n            \n        if msg_type == 'ORDER_REJECT':\n            order_id = msg_dict['order_id']\n            \n        if msg_type == 'ORDER_ACK':\n            order_id = msg_dict['order_id']           \n \n        if msg_type == 'FILL':\n            order_id = msg_dict['order_id']   \n            \n        return self.current_position\n    \n\nif __name__ == '__main__':\n    omm = MarkingPositionMonitor()\n    for message in fileinput.input():\n        print(omm.on_event(message))\n        \n","offset":3349,"fileType":"python3","requestStartTime":1517909179586}}
{"body": {"column":10,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    maxNumber = doors.count(1)\n    #print(maxNumber)\n    count = 0\n    list1=[]\n    for i in range(len(doors)):\n        if(doors[i] ==1):\n            #print(\"one\")\n            count = count+1\n            if(i < len(doors)-1):\n                if(doors[i+1] == 1):\n                    doors[i+1] = 0\n                    print(\"now door list\",doors)\n\n    #print(\"count====\",count)\n    list1.\n    return str(count) + str(maxNumber)\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n    #print(\"5\",\"10\")\n\n","offset":453,"fileType":"python3","requestStartTime":1517909327976}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\nN = int(input())\npuzzle = [[] for _ in range (N)]\nperfect = [[] for _ in range (N)]\n\nc = 0\nfor x in range(N):\n    for y in range(N):\n        puzzle[x].append(int(input()))\n        perfect[x].append(c)\n        c+=1\n        \nt = N*N-1\n\nwhile (t > 0):\n    for (x in range(N)):\n        if (puzzle[x].)\n    \n    t = t - 1\n    \n    \n    \n\n","offset":298,"fileType":"python3","requestStartTime":1517909468676}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    if k in arr:\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":113,"fileType":"python3","requestStartTime":1517909526217}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    if k in arr:\n        return \"YES\"\n    else:\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":144,"fileType":"python3","requestStartTime":1517909594298}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    for i in range():\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":116,"fileType":"python3","requestStartTime":1517909705713}}
{"body": {"column":30,"line":140,"wordToComplete":"","code":"import fileinput\n# Implement the class below, keeping the constructor's signature unchanged; it should take no arguments.\nimport json\n\nclass Position_New(object):\n    type = \"NEW\"\n    symbol = \"\"\n    order_id = 0\n    side = \"\"\n    quantity = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.symbol = msg_dict['symbol']\n        self.order_id = msg_dict['order_id']\n        self.side = msg_dict['side']\n        self.quantity = msg_dict['quantity']\n        self.time = msg_dict['time']\n\nclass Position_ORDER_ACK(object):\n    type = \"ORDER_ACK\"\n    order_id = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.time = msg_dict['time']\n \nclass Position_ORDER_REJECT(object):\n    type = \"ORDER_REJECT\"\n    order_id = 0\n    reason = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.reason = msg_dict['reason']       \n        self.time = msg_dict['time']\n \n\n\nclass Position_CANCEL(object):\n    type = \"CANCEL\"\n    order_id = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.time = msg_dict['time']\n        \nclass Position_CANCEL_REJECT(object):\n    type = \"CANCEL_REJECT\"\n    order_id = 0\n    reason = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.reason = msg_dict['reason']\n        self.time = msg_dict['time']\n        \n        \n \n \n\nclass Position_FILL(object):\n    type = \"FILL\"\n    order_id = 0\n    filled_quantity = 0\n    remaining_quantity = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.filled_quantity = msg_dict['filled_quantity'] \n        self.remaining_quantity = msg_dict['remaining_quantity']\n        self.time = msg_dict['time']\n  \n\nclass MarkingPositionMonitor:\n    order_list = {}\n    current_position = 0\n    #symbol = \"\"\n    \n    def __init__(self):\n        print (type(self))\n        pass\n    \n    def on_event(self, message):\n        msg_dict = json.loads(message)\n        msg_type = msg_dict['type']\n        order_id = msg_dict['order_id']\n        \n        if msg_type == 'NEW':\n            new_order = Position_New( message)\n            order_id = msg_dict['order_id']\n            self.order_list[order_id] = new_order\n            if msg_dict['side'] == \"SELL\":\n                self.current_position -= int(msg_dict['quantity']) \n\n        if msg_type == 'ORDER_ACK':\n            order_id = msg_dict['order_id']\n     \n        if msg_type == 'CANCEL':\n            order_id = msg_dict['order_id']\n         \n        if msg_type == 'CANCEL_ACK':\n            order_id = msg_dict['order_id']\n            order_intended = self.order_list[order_id]\n            quantity = int(order_intended.quantity)\n            print (quantity)\n            self.current_position += quantity\n            \n            \n        if msg_type == 'CANCEL_REJECT':\n            order_id = msg_dict['order_id']  \n            \n        if msg_type == 'ORDER_REJECT':\n            order_id = msg_dict['order_id']\n            \n        if msg_type == 'ORDER_ACK':\n            order_id = msg_dict['order_id']           \n \n        if msg_type == 'FILL':\n            order_id = msg_dict['order_id']\n            order_intended = self.order_list[order_id]\n            quantity = int(order_intended.quantity)\n            print (quantity)\n            for order in self.\n            self.current_position += quantity\n               \n            \n        return self.current_position\n    \n\nif __name__ == '__main__':\n    omm = MarkingPositionMonitor()\n    for message in fileinput.input():\n        print(omm.on_event(message))\n        \n","offset":3934,"fileType":"python3","requestStartTime":1517909715502}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    for i in range(l,r):\n        if():\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":133,"fileType":"python3","requestStartTime":1517909717393}}
{"body": {"column":35,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    unlocked, pairs, singles = 0,. \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":100,"fileType":"python3","requestStartTime":1517909771819}}
{"body": {"column":18,"line":115,"wordToComplete":"","code":"import fileinput\n# Implement the class below, keeping the constructor's signature unchanged; it should take no arguments.\nimport json\n\nclass Position_New(object):\n    type = \"NEW\"\n    symbol = \"\"\n    order_id = 0\n    side = \"\"\n    quantity = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.symbol = msg_dict['symbol']\n        self.order_id = msg_dict['order_id']\n        self.side = msg_dict['side']\n        self.quantity = msg_dict['quantity']\n        self.time = msg_dict['time']\n\nclass Position_ORDER_ACK(object):\n    type = \"ORDER_ACK\"\n    order_id = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.time = msg_dict['time']\n \nclass Position_ORDER_REJECT(object):\n    type = \"ORDER_REJECT\"\n    order_id = 0\n    reason = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.reason = msg_dict['reason']       \n        self.time = msg_dict['time']\n \n\n\nclass Position_CANCEL(object):\n    type = \"CANCEL\"\n    order_id = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.time = msg_dict['time']\n        \nclass Position_CANCEL_REJECT(object):\n    type = \"CANCEL_REJECT\"\n    order_id = 0\n    reason = \"\"\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.reason = msg_dict['reason']\n        self.time = msg_dict['time']\n        \n        \n \n \n\nclass Position_FILL(object):\n    type = \"FILL\"\n    order_id = 0\n    filled_quantity = 0\n    remaining_quantity = 0\n    time = \"\"\n    \n    def __init__(self, message):\n        msg_dict = json.loads(message)\n        self.type = msg_dict['type']\n        self.order_id = msg_dict['order_id']\n        self.filled_quantity = msg_dict['filled_quantity'] \n        self.remaining_quantity = msg_dict['remaining_quantity']\n        self.time = msg_dict['time']\n  \n\nclass MarkingPositionMonitor:\n    order_list = {}\n    current_position = 0\n    #symbol = \"\"\n    \n    def __init__(self):\n        print (type(self))\n        pass\n    \n    def on_event(self, message):\n        msg_dict = json.loads(message)\n        msg_type = msg_dict['type']\n        order_id = msg_dict['order_id']\n        \n        if msg_type == 'NEW':\n            new_order = Position_New( message)\n            order_id = msg_dict['order_id']\n            self.order_list[order_id] = new_order\n            if msg_dict['side'] == \"SELL\":\n                self.current_position -= int(msg_dict['quantity']) \n\n        if msg_type == 'ORDER_ACK':\n            order_id = msg_dict['order_id']\n            order = self.order_list[order_id]\n            order.\n     \n        if msg_type == 'CANCEL':\n            order_id = msg_dict['order_id']\n         \n        if msg_type == 'CANCEL_ACK':\n            order_id = msg_dict['order_id']\n            order_intended = self.order_list[order_id]\n            quantity = int(order_intended.quantity)\n            print (quantity)\n            self.current_position += quantity\n            \n            \n        if msg_type == 'CANCEL_REJECT':\n            order_id = msg_dict['order_id']  \n            \n        if msg_type == 'ORDER_REJECT':\n            order_id = msg_dict['order_id']\n            \n        if msg_type == 'ORDER_ACK':\n            order_id = msg_dict['order_id']           \n \n        if msg_type == 'FILL':\n            order_id = msg_dict['order_id']\n            order_intended = self.order_list[order_id]\n            quantity = int(order_intended.quantity)\n            print (quantity)\n            self.current_position += quantity\n               \n            \n        return self.current_position\n    \n\nif __name__ == '__main__':\n    omm = MarkingPositionMonitor()\n    for message in fileinput.input():\n        print(omm.on_event(message))\n        \n","offset":3087,"fileType":"python3","requestStartTime":1517909787907}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    for i in range(l,r):\n        if(i%2 != 0):\n            list = list.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":166,"fileType":"python3","requestStartTime":1517909979370}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"\nN = int(input())\npuzzle = [[] for _ in range (N)]\nperfect = [[] for _ in range (N)]\n\nc = 0\nfor x in range(N):\n    for y in range(N):\n        puzzle[x].append(int(input()))\n        perfect[x].append(c)\n        c+=1\n        \nt = N*N-1\nloc = [0,0]\nperfloc = [0,0]\n\nwhile (t > 0):\n    for x in range(N):\n        if t in puzzle[x]:\n            loc = [x, puzzle[x].index(t)]\n            print(loc, t)\n        \n        if t in perfect[x]\n            loc = [x, perfect[x.]]\n    \n    \n    \n    \n    t = t - 1\n    \n    \n    \n\n","offset":465,"fileType":"python3","requestStartTime":1517909996251}}
{"body": {"column":50,"line":54,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport ast\nfrom traceback import print_exc\n\ndef put_nested_keys(doc_dict, level, key_levels, inv_index, count):\n    if level in key_levels.keys():\n        key_levels[level] |= set(doc_dict.keys())\n    else:\n        key_levels[level] = set(doc_dict.keys())\n    \n    for key in key_levels[level]:\n        if key in inv_index.keys():\n            inv_index[key].add(count)\n        else:\n            inv_index[key] = set({count})\n    \n    nested_exists = False\n    for key in doc_dict.keys():\n        if type(doc_dict[key])==dict:\n            nested_exists = True\n            level += 1\n            put_nested_keys(doc_dict[key], level, key_levels, inv_index, count)\n            level -= 1\n    return key_levels\n\ndef get_all_keys(doc_dict, all_keys):\n    all_keys |= set(doc_dict.keys())\n    for key in doc_dict.keys():\n        if type(doc_dict[key])==dict:\n            get_all_keys(doc_dict[key], all_keys)\n    return all_keys\n            \n\nif __name__==\"__main__\":\n    big_dict = {}\n    key_levels = {}\n    inv_index = {}\n    count = 0\n    while(1):\n        try:\n            command, doc = input().strip().split(\" \", 1)\n            doc_dict = json.loads(doc)\n            if command==\"add\":\n                big_dict[count] = doc_dict\n                put_nested_keys(doc_dict, 0, key_levels, inv_index, count)\n                count += 1\n            elif command==\"get\":\n                # print(\"Pata nahi\")\n                all_keys = set()\n                get_all_keys(doc_dict, all_keys)\n                relevant_docs = set(range(count))\n                for key in all_keys():\n                    relevant_docs = relevant_docs.\n            elif command==\"delete\":\n                count -= 1\n                \n        except TypeError:\n            # print_exc()\n            pass\n        except EOFError:\n            print(key_levels)\n            print(inv_index)\n            break\n        \n\n","offset":1707,"fileType":"python3","requestStartTime":1517910095568}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef introTutorial(V, arr):\n    return(arr.)\n\nif __name__ == \"__main__\":\n    V = int(input().strip())\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = introTutorial(V, arr)\n    print(result)\n\n\n","offset":72,"fileType":"python3","requestStartTime":1517910506428}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n#import ast\nimport json\nfrom collections import OrderedDict#, defaultdict, namedtuple\n\n#function for ordered dictionary\ndef ordict(x):\n     y = [ordict(v) if isinstance(v,dict) else {k: v} for k,v in x.items()]\n     return y.\n       \n       \n\n#[nesdi(k) for k in g.keys()]\n\n#function for multiple key value pairs in every 'get' observation\ndef nested(jload):\n    for k,v in jload.items():\n        if isinstance(v,dict):\n            return mkv(v)\n        else:\n            yield (k,v)\n            \ndef listhan_ineq(g,a):    \n    if isinstance(a[k],list):\n        return [ai for ai in a if all(k in a and g[k] in a[k] for k in g.keys())]\n    else:\n        return [ai for ai in a if all(k in a and g[k] == a[k] for k in g.keys())]\n\ndef listhan_notineq(d,a):    \n    if isinstance(a[k],list):\n        return [ai for ai in a if all(k in a and d[k] not in a[k] for k in d.keys())]\n    else:\n        return [ai for ai in a if all(k in a and d[k] != a[k] for k in d.keys())]\nadd=[]\nget=[]\ndelete=[]\nfor line in sys.stdin:\n    x = line.strip('\\n').split(\" \",1)\n    if x[0] == 'add':\n        addi=json.loads(x[1], object_pairs_hook=OrderedDict)\n        #print ('addi_keys_packed', [addi[kee] for kee in addi.keys()])\n        #print ('addi_keys_unpacked',ordict(addi))\n        #add.append(json.loads(x[1], object_pairs_hook=OrderedDict))\n        add.append(addi)\n        #print (json.dumps(json.loads(x[1], object_pairs_hook=OrderedDict),separators=(',',':')))\n    elif x[0] == 'get':\n        get = json.loads(x[1], object_pairs_hook=OrderedDict)\n        #print ('get_keys_packed', [get[kee] for kee in get.keys()])\n        #print ('get_keys_unpacked',ordict(get))\n        match = [addi for addi in add if all(kee in addi and get[kee] == addi[kee] for kee in ordict(get).keys())]\n        #match = [addi for addi in add if all(kee in addi and get[kee] == addi[kee] for kee in get.keys())]\n        for matchi in match:\n            print (json.dumps(matchi,separators=(',',':')))\n    elif x[0] == 'delete':\n        delete = json.loads(x[1], object_pairs_hook=OrderedDict)\n        add = [addi for addi in add if all(kee in addi and delete[kee] != addi[kee] for kee in delete.keys())]\n        \n#for k,v in mkv(add[0]):\n#    print (k,v)\n    \n\n\n\n\n    \n\n\n\n\n\n","offset":308,"fileType":"python3","requestStartTime":1517911030778}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    X=arr[n-1]\n    for i in range(n-1):\n        if arr[n-2-i]>X:\n            arr[n-1-i]=arr[n-2-i]\n            print(' '.)\n        else:\n            arr[n-1-i]=X\n            print(arr)\n            break\n            \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":179,"fileType":"python3","requestStartTime":1517911184783}}
{"body": {"column":68,"line":3,"wordToComplete":"","code":"\nn, m = map(int,input().split())\npattern = [('.|.'*(2*i + 1)).center(27, '-') for i in range(9//2)]\nprint('\\n'.join(pattern + ['WELCOME'.center(m, '-')] + list(pattern.))\n\n\n","offset":169,"fileType":"python3","requestStartTime":1517911323625}}
{"body": {"column":24,"line":41,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport ast\nfrom traceback import print_exc\n\ndef put_nested_keys(doc_dict, level, key_levels, inv_index, count):\n    if level in key_levels.keys():\n        key_levels[level] |= set(doc_dict.keys())\n    else:\n        key_levels[level] = set(doc_dict.keys())\n    \n    for key in key_levels[level]:\n        if key in inv_index.keys():\n            inv_index[key].add(count)\n        else:\n            inv_index[key] = set({count})\n    \n    nested_exists = False\n    for key in doc_dict.keys():\n        if type(doc_dict[key])==dict:\n            nested_exists = True\n            level += 1\n            put_nested_keys(doc_dict[key], level, key_levels, inv_index, count)\n            level -= 1\n    return key_levels\n\ndef get_all_keys(doc_dict, all_keys):\n    all_keys |= set(doc_dict.keys())\n    for key in doc_dict.keys():\n        if type(doc_dict[key])==dict:\n            get_all_keys(doc_dict[key], all_keys)\n    return all_keys\n            \ndef get_docs(doc_dict, inv_index, big_dict):\n    all_keys = set()\n    get_all_keys(doc_dict, all_keys)\n    relevant_docs = set(range(count))\n    for key in all_keys:\n        relevant_docs = relevant_docs.intersection(inv_index[key])\n    for i in relevant_docs:\n        curr_doc = json.big_dict[i]\n        if satisfies(curr_doc, doc_dict):\n            print(curr_doc)\n            \ndef satisfies(curr_doc, doc_dict):\n    bool_satisfies = True\n    for key in doc_dict.keys():\n        if type(curr_doc[key])==dict:\n            bool_satisfies = bool_satisfies and satisfies(curr_doc[key], doc_dict[key])\n        else:\n            return curr_doc[key]==doc_dict[key]\n    return bool_satisfies\n    \nif __name__==\"__main__\":\n    big_dict = {}\n    key_levels = {}\n    inv_index = {}\n    count = 0\n    while(1):\n        try:\n            command, doc = input().strip().split(\" \", 1)\n            doc_dict = json.loads(doc)\n            if command==\"add\":\n                big_dict[count] = doc\n                put_nested_keys(doc_dict, 0, key_levels, inv_index, count)\n                count += 1\n            elif command==\"get\":\n                # print(\"Pata nahi\")\n                # all_keys = set()\n                # get_all_keys(doc_dict, all_keys)\n                # relevant_docs = set(range(count))\n                # for key in all_keys:\n                #     relevant_docs = relevant_docs.intersection(inv_index[key])\n                # for i in relevant_docs:\n                #     curr_doc = big_dict[i]\n                get_docs(doc_dict, inv_index, big_dict)\n                    \n            elif command==\"delete\":\n                count -= 1\n                \n        except TypeError:\n            # print_exc()\n            pass\n        except EOFError:\n            # print(key_levels)\n            # print(inv_index)\n            break\n        \n\n","offset":1305,"fileType":"python3","requestStartTime":1517911434148}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    query_scores = student_masks[query_name]\n    print( ''.format(sum(query_scores)/len(query_scores)))\n\n","offset":295,"fileType":"python3","requestStartTime":1517911438129}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    query_scores = student_masks[query_name]\n    print( \".\".format(sum(query_scores)/len(query_scores)))\n\n","offset":294,"fileType":"python3","requestStartTime":1517911457018}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\nn = int(input())\ncount1 = 0\ncount2 = 0\n\ndata = input().split()\n\nfor i in range(n):\n    data[i] = int(data[i])\n\nfor i in range(n):\n    if( data[i] == 1 > ):\n        count1 += 1\n\n        \nprint(count1)\n\n\n","offset":154,"fileType":"python3","requestStartTime":1517911501752}}
{"body": {"column":16,"line":10,"wordToComplete":"0:.2f}\"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    query_scores = student_masks[query_name]\n    print( \"{0:.2f}\".format(sum(query_scores)/len(query_scores)))\n\n","offset":297,"fileType":"python3","requestStartTime":1517911583538}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n#class Node:\n #   def __init__(self,data,ne=None):\n#        self.data=data\n #       self.ne=ne\nn=int(input().strip())\nfor _ in range(n):\n    l=list(map(int,input().strip().split(' ')))\n    if l[0]==1:\n        d.\n    if l[0]==2:\n        k=k[:-1]\n    if l[0]==3:\n        print(max(k))\n    \n\n","offset":213,"fileType":"python3","requestStartTime":1517911667461}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#class Node:\n #   def __init__(self,data,ne=None):\n#        self.data=data\n #       self.ne=ne\nn=int(input().strip())\nfor _ in range(n):\n    l=list(map(int,input().strip().split(' ')))\n    if l[0]==1:\n        if node:\n            node.\n    if l[0]==2:\n        k=k[:-1]\n    if l[0]==3:\n        print(max(k))\n    \n\n","offset":237,"fileType":"python3","requestStartTime":1517911754307}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    return swap.\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":36,"fileType":"python3","requestStartTime":1517911849675}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    while True:\n        command = input()\n        command.\n\n","offset":109,"fileType":"python3","requestStartTime":1517912115592}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    for l in a:\n        if l not in b:\n            l.\n\na = input().strip()\nb = input().strip()\n\nprint(number_needed(a, b))\n\n\n","offset":80,"fileType":"python3","requestStartTime":1517912216883}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    result = []\n\n    while True:\n        command = input()\n        command_list = command.split(\" \")\n        command = command_list[0]\n        \n        if command == \"insert\":\n            result.\n\n","offset":245,"fileType":"python3","requestStartTime":1517912229418}}
{"body": {"column":19,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    max_op = doors.\n    print\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517912272246}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    count = 0\n    for l in a:\n        if l not in b:\n            b.\n            count = count + 1\n    for l in b:\n        if l not in a:\n            l.remove()\n            count = count + 1\n    return count\n\na = input().strip()\nb = input().strip()\n\nprint(number_needed(a, b))\n\n\n","offset":94,"fileType":"python3","requestStartTime":1517912357410}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    result = []\n\n    while True:\n        command = input()\n        command_list = command.split(\" \")\n        command = command_list[0]\n        \n        if command == \"insert\":\n            result.insert(int(command_list[1]), int(command_list[2]))\n            \n        elif command == \"print\":\n            print(result)\n        \n        elif command == \"remove\":\n            result.\n\n","offset":430,"fileType":"python3","requestStartTime":1517912421917}}
{"body": {"column":20,"line":20,"wordToComplete":"a","code":"\nif __name__ == '__main__':\n    N = int(input())\n    result = []\n\n    while True:\n        command = input()\n        command_list = command.split(\" \")\n        command = command_list[0]\n        \n        if command == \"insert\":\n            result.insert(int(command_list[1]), int(command_list[2]))\n            \n        elif command == \"print\":\n            print(result)\n        \n        elif command == \"remove\":\n            result.remove(int(command_list[1]))\n            \n        elif command == \"append\":\n            result.a\n\n","offset":526,"fileType":"python3","requestStartTime":1517912449925}}
{"body": {"column":19,"line":23,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    result = []\n\n    while True:\n        command = input()\n        command_list = command.split(\" \")\n        command = command_list[0]\n        \n        if command == \"insert\":\n            result.insert(int(command_list[1]), int(command_list[2]))\n            \n        elif command == \"print\":\n            print(result)\n        \n        elif command == \"remove\":\n            result.remove(int(command_list[1]))\n            \n        elif command == \"append\":\n            result.append(int(command_list[1]))\n            \n        elif command == \"sort\":\n            result.\n\n","offset":618,"fileType":"python3","requestStartTime":1517912468678}}
{"body": {"column":19,"line":26,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    result = []\n\n    while True:\n        command = input()\n        command_list = command.split(\" \")\n        command = command_list[0]\n        \n        if command == \"insert\":\n            result.insert(int(command_list[1]), int(command_list[2]))\n            \n        elif command == \"print\":\n            print(result)\n        \n        elif command == \"remove\":\n            result.remove(int(command_list[1]))\n            \n        elif command == \"append\":\n            result.append(int(command_list[1]))\n            \n        elif command == \"sort\":\n            result.sort()\n        \n        elif command == \"pop\":\n            result.\n\n","offset":684,"fileType":"python3","requestStartTime":1517912526145}}
{"body": {"column":19,"line":29,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    result = []\n\n    while True:\n        command = input()\n        command_list = command.split(\" \")\n        command = command_list[0]\n        \n        if command == \"insert\":\n            result.insert(int(command_list[1]), int(command_list[2]))\n            \n        elif command == \"print\":\n            print(result)\n        \n        elif command == \"remove\":\n            result.remove(int(command_list[1]))\n            \n        elif command == \"append\":\n            result.append(int(command_list[1]))\n            \n        elif command == \"sort\":\n            result.sort()\n        \n        elif command == \"pop\":\n            result.pop()\n            \n        elif command = \"reverse\":\n            result.\n\n","offset":756,"fileType":"python3","requestStartTime":1517912544122}}
{"body": {"column":24,"line":28,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\ntotal_set = set(english.)\n\n\n\n\n","offset":555,"fileType":"python3","requestStartTime":1517912759156}}
{"body": {"column":46,"line":28,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\nprint(len(english + len(french) - len(english.)))\n\n\n\n\n","offset":577,"fileType":"python3","requestStartTime":1517912787872}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ndef mutate_string(string, position, character):\n    l = list(string)\n    l[position] = character\n    string = ''.\n    return string \n\n# you can only change a list but not a string!\nif __name__ == '__main__':\n    s = input()\n    i, c = input().split()\n    s_new = mutate_string(s, int(i), c)\n    print(s_new)\n","offset":115,"fileType":"python3","requestStartTime":1517912897261}}
{"body": {"column":21,"line":32,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\ntotal = len(english) + len(french)\ntotal -= len(english.)\n\n\n\n\n","offset":742,"fileType":"python3","requestStartTime":1517912965612}}
{"body": {"column":14,"line":33,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\n\ntotal = len(english) + len(french)\nprint(english.)\n\n\n\n\n","offset":736,"fileType":"python3","requestStartTime":1517913054028}}
{"body": {"column":14,"line":34,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\n\ntotal = len(english) + len(french)\nprint(total)\nprint(english.)\n\n\n\n\n","offset":749,"fileType":"python3","requestStartTime":1517913086487}}
{"body": {"column":27,"line":35,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\n\ntotal = len(english) + len(french)\nprint(english)\nprint(french)\noverlap = 2 * (len(english.))\n\n\n\n\n","offset":778,"fileType":"python3","requestStartTime":1517913165306}}
{"body": {"column":18,"line":32,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\n\nnew_set = english.\n\n\n\n\n","offset":705,"fileType":"python3","requestStartTime":1517913258881}}
{"body": {"column":18,"line":34,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\n\nunion = english.union(french)\n# Union is the combination of the two sets (I think)\nprint(len(english.))\nprint(union)\n\n\n\n\n\n","offset":788,"fileType":"python3","requestStartTime":1517913338929}}
{"body": {"column":30,"line":35,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\n\nunion = english.union(french)\n# Union is the combination of the two sets (I think)\nprint(\n    len(union) - (len(english.))\n)\n\n\n\n\n\n","offset":807,"fileType":"python3","requestStartTime":1517913374828}}
{"body": {"column":49,"line":31,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nenglish = set(english)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\nfrench = set(french)\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\ntotal = sum(english) + sum(french) - sum(english.)\n\n\n\n\n\n","offset":735,"fileType":"python3","requestStartTime":1517913483106}}
{"body": {"column":26,"line":1,"wordToComplete":"","code":"\nla, lb = map(float, input.)\n\n","offset":28,"fileType":"python3","requestStartTime":1517913579769}}
{"body": {"column":28,"line":1,"wordToComplete":"","code":"\nla, lb = map(float, input().)\n\n","offset":30,"fileType":"python3","requestStartTime":1517913582320}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\ntotal = sum(english) + sum(french)\nenglish = set(english); french = set(french)\ntotal -= len(english.)\n\n\n\n\n\n","offset":742,"fileType":"python3","requestStartTime":1517913629050}}
{"body": {"column":10,"line":7,"wordToComplete":"3f}'","code":"\ndef exp_cost(constant, factor, mu):\n    return constant + factor*(mu + mu * mu)\n\nla, lb = map(float, input().split())\n\ne1, e2 = exp_cost(160, 40, la), exp_cost(128, 40, lb)\nprint('{:.3f}')\n\n","offset":185,"fileType":"python3","requestStartTime":1517913695135}}
{"body": {"column":23,"line":7,"wordToComplete":"","code":"\ndef exp_cost(constant, factor, mu):\n    return constant + factor*(mu + mu * mu)\n\nla, lb = map(float, input().split())\n\ne1, e2 = exp_cost(160, 40, la), exp_cost(128, 40, lb)\nprint('{:.3f}\\n{:.3f}'.)\n\n","offset":198,"fileType":"python3","requestStartTime":1517913701671}}
{"body": {"column":16,"line":34,"wordToComplete":"","code":"\nn_english = int(input())\nenglish = str(input())\n\nenglish = \"\\t\".join(english)\nenglish = list(english)\nfor value in english:\n    if value.isdigit() is False: english.remove(value)\n\nfor value in english:\n    if value == \" \": english.remove(value)\n\nn_french = int(input())\nfrench = str(input())\n\nfrench = \"\\t\".join(french)\nfrench = list(french)\n\nfor value in french:\n    if value.isdigit() is False: french.remove(value)\n\nfor value in french:\n    if value == \" \": french.remove(value)\n\n\n# Now we have the full sets of the two languages of newspapers\n# The next step is to find the total number of students who have at least one subscription\n\ntotal_list = french + english\nprint(total_list)\noverlap = int(0)\ncounter = []\nfor value in total_list:\n    if value not in counter:\n        counter.\n\n\n\n\n\n\n","offset":789,"fileType":"python3","requestStartTime":1517913712850}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    if head.\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":357,"fileType":"python3","requestStartTime":1517913858969}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    if head.next:\n        Insert(head.)\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":383,"fileType":"python3","requestStartTime":1517913863888}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    if head.next:\n        Insert(head.next, data)\n    else:\n        head.\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":418,"fileType":"python3","requestStartTime":1517913870504}}
{"body": {"column":13,"line":8,"wordToComplete":"Hello,World.'","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninput_string = input()\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint('Hello, World.')\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\n'Hello,World.'\n\n","offset":308,"fileType":"python3","requestStartTime":1517913976130}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        arr = arr.\n        arr.sorted(name, key=itemgetter('score'), reverse = True)\n        print(arr[2:])\narksheet.append([input(), float(input())])\n\n","offset":135,"fileType":"python3","requestStartTime":1517914409290}}
{"body": {"column":31,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    input_string = input()\n    input_array = input_string.\n    \n    array = list()\n    \n    if input() == 'print':\n        print(array)\n        \n     \n    \n    \n\n\n","offset":87,"fileType":"python3","requestStartTime":1517914453121}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    position_cnt = 0\n    temp = head\n    while True:\n        if position_cnt == position:\n            return Node(data, next_node=temp)\n        position_cnt += 1\n        temp = head.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":620,"fileType":"python3","requestStartTime":1517914550536}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    input_string = input()\n    lines = input_string.split(\"\\n\")\n    N = int(lines[0])\n    \n    array = list()\n    \n    for line in lines:\n        if line == 'print':\n            print(array)\n        if line == 'reverse':\n            array.\n        \n     \n    \n    \n\n\n","offset":268,"fileType":"python3","requestStartTime":1517914582817}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    input_string = input()\n    lines = input_string.split(\"\\n\")\n    N = int(lines[0])\n    \n    array = list()\n    \n    for line in lines:\n        if line == 'print':\n            print(array)\n        if line == 'reverse':\n            array.reverse()\n        if line == 'pop':\n            array.\n        \n     \n    \n    \n\n\n","offset":322,"fileType":"python3","requestStartTime":1517914595362}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    input_string = input()\n    lines = input_string.split(\"\\n\")\n    N = int(lines[0])\n    \n    array = list()\n    \n    for line in lines:\n        if line == 'print':\n            print(array)\n        if line == 'reverse':\n            array.reverse()\n        if line == 'pop':\n            array.pop()\n        if line == 'sort':\n            array.\n        \n     \n    \n    \n\n\n","offset":373,"fileType":"python3","requestStartTime":1517914612913}}
{"body": {"column":15,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    return '-'.\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":70,"fileType":"python3","requestStartTime":1517914623547}}
{"body": {"column":25,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    return '-'.join(line.)\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":80,"fileType":"python3","requestStartTime":1517914629369}}
{"body": {"column":21,"line":18,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    input_string = input()\n    lines = input_string.split(\"\\n\")\n    N = int(lines[0])\n    \n    array = list()\n    \n    for line in lines:\n        if line == 'print':\n            print(array)\n        if line == 'reverse':\n            array.reverse()\n        if line == 'pop':\n            array.pop()\n        if line == 'sort':\n            array.sort()\n        \n        words = line.\n        \n     \n    \n    \n\n\n","offset":410,"fileType":"python3","requestStartTime":1517914630472}}
{"body": {"column":55,"line":2,"wordToComplete":"Hello {a} {b}j! You just delved into python.\"","code":"\ndef print_full_name(a, b):\n    print(\"Hello {a} {b}j! You just delved into python.\")\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":84,"fileType":"python3","requestStartTime":1517914844218}}
{"body": {"column":54,"line":2,"wordToComplete":"","code":"\ndef print_full_name(a, b):\n    print(\"Hello {} {}! You just delved into python.\".)\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":83,"fileType":"python3","requestStartTime":1517915051877}}
{"body": {"column":15,"line":9,"wordToComplete":"1","code":"\n#!/bin/python3\n\nimport sys\n\ndef simpleArraySum(n, ar):\n    temp = 0\n    while (n>0):\n        temp += ar[n-1]\n        n = n.1\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = simpleArraySum(n, ar)\nprint(result)\n\n\n","offset":126,"fileType":"python3","requestStartTime":1517915801760}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\ndef average(array):\n    # your code goes here\n    s = set(array)\n    l = s.\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = average(arr)\n    print(result)\n","offset":77,"fileType":"python3","requestStartTime":1517916372270}}
{"body": {"column":27,"line":30,"wordToComplete":"","code":"\nfrom dateutil import parser\nimport re\n\nregex = r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\dT\\d\\d\\:\\d\\d\\:\\d\\dZ\\t\"\n\ni = 0\nstartTime = 0\nendTime = 0\ncount = 0\ncounter = 0\np = re.compile(regex)\n\nbuff = \"\"\nlast = False\nwhile True:\n    try:\n        line = input()\n    except:\n        break\n    if i == 0:\n        startTime = parser.parse(line)\n    elif i == 1:\n        endTime = parser.parse(line)\n    elif i == 2:\n        count = int(line)\n    else:\n        findTime = p.findall(line)\n        if len(findTime) > 0:\n            if last and len(buff) > 0:\n                print(buff.)\n            counter+=1\n            messageTime = parser.parse(findTime[0])\n            if messageTime >= startTime and messageTime < endTime:\n                last = True\n                print(line)\n                buff = \"\"\n            else:\n                last = False\n                buff = \"\"\n        else:\n            buff += line + \"\\n\"\n    i+=1\n\n","offset":556,"fileType":"python3","requestStartTime":1517916422945}}
{"body": {"column":8,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    for x in range(0,3):\n        \n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":98,"fileType":"python3","requestStartTime":1517916533589}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a = [a0, a1, a2]\n    b = [b0, b1, b2]\n    for i in range(0, len(a)):\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":137,"fileType":"python3","requestStartTime":1517916611622}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a = [a0, a1, a2]\n    b = [b0, b1, b2]\n    for i in range(0, len(a)):\n        if a[i] > b[i]: \n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":161,"fileType":"python3","requestStartTime":1517916645257}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":216,"fileType":"python3","requestStartTime":1517916638003}}
{"body": {"column":27,"line":2,"wordToComplete":"","code":"\nimport calendar\nmonth, day, year = input().\n\n","offset":45,"fileType":"python3","requestStartTime":1517916639353}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":226,"fileType":"python3","requestStartTime":1517916649339}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score:\n            return True\n        if a.\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":270,"fileType":"python3","requestStartTime":1517916667434}}
{"body": {"column":12,"line":8,"wordToComplete":"0.","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a = [a0, a1, a2]\n    b = [b0, b1, b2]\n    res = 0.\n    res_b = 0\n    for i in range(0, len(a)):\n        if a[i] > b[i]:\n            \n        else if a[i] == b[i]:\n            pass\n        else:\n            \n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":119,"fileType":"python3","requestStartTime":1517916694976}}
{"body": {"column":12,"line":8,"wordToComplete":"0.","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a = [a0, a1, a2]\n    b = [b0, b1, b2]\n    res = 0.\n    for i in range(0, len(a)):\n        if a[i] > b[i]:\n            \n        else if a[i] == b[i]:\n            pass\n        else:\n            \n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":119,"fileType":"python3","requestStartTime":1517916702434}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score:\n            return 1\n        if a.score > b.\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":277,"fileType":"python3","requestStartTime":1517916703945}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score:\n            return 1\n        if a.score > b.score:\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":283,"fileType":"python3","requestStartTime":1517916705234}}
{"body": {"column":34,"line":11,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score or a.:\n            return 1\n        if a.score > b.score:\n            return 0\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":237,"fileType":"python3","requestStartTime":1517916722308}}
{"body": {"column":43,"line":11,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score or a.name > b.:\n            return 1\n        if a.score > b.score:\n            return 0\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":246,"fileType":"python3","requestStartTime":1517916727018}}
{"body": {"column":34,"line":13,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score or a.name > b.name:\n            return 1\n        if a.score > b.score or a.:\n            return -1\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":307,"fileType":"python3","requestStartTime":1517916742739}}
{"body": {"column":43,"line":13,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def __repr__(self):\n        pass\n\n    def comparator(a, b):\n        if a.score < b.score or a.name > b.name:\n            return 1\n        if a.score > b.score or a.name < b.:\n            return -1\n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":316,"fileType":"python3","requestStartTime":1517916746409}}
{"body": {"column":24,"line":38,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport bisect\n\ndef searchInsert(nums, target):\n        \n        i=0\n        while i<len(nums):\n        \n            if nums[0]>target:\n                rind = 0\n                break\n            elif nums[-1]<target:\n                rind=len(nums)\n                break\n            elif nums[i]==target or nums[i]>target:\n                rind = i\n                break\n            i+=1\n        return rind\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    i=0\n    j=1\n    \n    d = dict()\n    \n    while j<len(scores):\n        if scores[i] not in d.keys():\n            d[scores[i]] = i\n            \n        if scores[i]==scores[j]:\n            scores.remove(scores[j])\n        else:\n            i+=1\n            j+=1\n    rev_scores = scores.\n    for i in range(len(alice)):\n        if alice[i] in d:\n            print(d[alice[i]]+1)\n        else:\n            position=searchInsert(scores, alice[i])\n            print(position+1)\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":791,"fileType":"python3","requestStartTime":1517916746659}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass myBook(Book):\n    def __init(self,title,author,price):\n        super().\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":313,"fileType":"python3","requestStartTime":1517916767262}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass myBook(Book):\n    def __init(self,title,author,price):\n        super().__init__(self,title,author)\n        self.\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":354,"fileType":"python3","requestStartTime":1517916778846}}
{"body": {"column":27,"line":13,"wordToComplete":"Title: self.'","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass myBook(Book):\n    def __init(self,title,author,price):\n        super().__init__(self,title,author)\n        self.price=price\n    def display:\n        print('Title: self.')\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":410,"fileType":"python3","requestStartTime":1517916811825}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass myBook(Book):\n    def __init(self,title,author,price):\n        super().__init__(self,title,author)\n        self.price=price\n    def display:\n        print('Title: '+self.)\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":412,"fileType":"python3","requestStartTime":1517916817089}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self.title,author,price):\n        super().__init__(self,title,author)\n        self.price=price\n    def display():\n        print('Title: '+self.title)\n        print('Author: '+self.author)\n        print('Price: '+self.price)\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":278,"fileType":"python3","requestStartTime":1517916893629}}
{"body": {"column":28,"line":44,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport bisect\n\ndef searchInsert(nums, target):\n        \n        i=0\n        while i<len(nums):\n        \n            if nums[0]>target:\n                rind = 0\n                break\n            elif nums[-1]<target:\n                rind=len(nums)\n                break\n            elif nums[i]==target or nums[i]>target:\n                rind = i\n                break\n            i+=1\n        return rind\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    i=0\n    j=1\n    \n    d = dict()\n    \n    while j<len(scores):\n        if scores[i] not in d.keys():\n            d[scores[i]] = i\n            \n        if scores[i]==scores[j]:\n            scores.remove(scores[j])\n        else:\n            i+=1\n            j+=1\n    rev_scores = scores.sort()\n    \n    for i in range(len(alice)):\n        if alice[i] in d:\n            print(d[alice[i]]+1)\n        else:\n            position=bisect.(rev_scores, alice[i])\n            position = len(scores)-position\n            print(position)\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":936,"fileType":"python3","requestStartTime":1517916917464}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    mn = 0\n    mx = len(list(filter(lambda x:x==1,doors)))\n    x = []\n    for k,v in enumerate(doors) :\n        if v == 1 : \n            x.\n    \n    return mn,mx\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":204,"fileType":"python3","requestStartTime":1517917011054}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nT = input(int())\ni = int(0)\n\nwhile i < T:\n\n","offset":43,"fileType":"python3","requestStartTime":1517917300397}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef introTutorial(V, arr):\n    print(V)\n    print(arr)\n    print(arr.)\n\nif __name__ == \"__main__\":\n    V = int(input().strip())\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = introTutorial(V, arr)\n    print(result)\n\n\n","offset":99,"fileType":"python3","requestStartTime":1517917328842}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nm = int(input())\na = set(map(int,input().))\n\n","offset":43,"fileType":"python3","requestStartTime":1517917361247}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nm = int(input())\na = set(map(int,input().split(' ')))\nn = int(input())\nb = set(map(int,input().split(' ')))\nlst = list(a.)\n\n\n","offset":123,"fileType":"python3","requestStartTime":1517917425774}}
{"body": {"column":47,"line":1,"wordToComplete":"r'^[a-z][1-9][^a-z][^A-Z][A-Z].$'","code":"\nRegex_Pattern = r'^[a-z][1-9][^a-z][^A-Z][A-Z].$'\t# Do not delete 'r'.\n\n\n\nimport re\n\nprint(str(bool(re.search(Regex_Pattern, input()))).lower())\n","offset":49,"fileType":"python3","requestStartTime":1517917431603}}
{"body": {"column":4,"line":6,"wordToComplete":"","code":"\nm = int(input())\na = set(map(int,input().split(' ')))\nn = int(input())\nb = set(map(int,input().split(' ')))\nlst = list(a.difference(b))\nlst.\n\n\n","offset":142,"fileType":"python3","requestStartTime":1517917441279}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, math\n\ndef diagonalDifference(a):\n    n = math.sqrt(len())\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":76,"fileType":"python3","requestStartTime":1517917483858}}
{"body": {"column":4,"line":7,"wordToComplete":"","code":"\nm = int(input())\na = set(map(int,input().split(' ')))\nn = int(input())\nb = set(map(int,input().split(' ')))\nlst = list(a.difference(b))\nlst.extend((b.difference(a)))\nlst.\n\n\n","offset":172,"fileType":"python3","requestStartTime":1517917520414}}
{"body": {"column":20,"line":1,"wordToComplete":"r\"(.)\"","code":"\nRegex_Pattern = r\"(.)\"\t# Do not delete 'r'.\n\n\n\n\n\nimport re\n\nTest_String = input()\n\nmatch = re.findall(Regex_Pattern, Test_String)\n\nprint(\"Number of matches :\", len(match))\n","offset":22,"fileType":"python3","requestStartTime":1517917847089}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    return string.upper\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":44,"fileType":"python3","requestStartTime":1517917859445}}
{"body": {"column":26,"line":5,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n\n","offset":32,"fileType":"python3","requestStartTime":1517917996551}}
{"body": {"column":35,"line":1,"wordToComplete":"r\"(?![aeiouAEIOU]).\"","code":"\nRegex_Pattern = r\"(?![aeiouAEIOU]).\"\t# Do not delete 'r'.\n\n\n\n\n\nimport re\n\nTest_String = input()\n\nmatch = re.findall(Regex_Pattern, Test_String)\n\nprint(\"Number of matches :\", len(match))\n","offset":37,"fileType":"python3","requestStartTime":1517918055074}}
{"body": {"column":47,"line":6,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n    m, k, d = [int(entry) for entry in input().]\n\n","offset":80,"fileType":"python3","requestStartTime":1517918038350}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n    while True:\n    m, k, d = [int(entry) for entry in input().split(' ')]\n    \n    print(m,k,d)\n\n","offset":48,"fileType":"python3","requestStartTime":1517918128047}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(0, length):\n        for y in range(0, length):\n            \n    return abs(left_d-right.)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":215,"fileType":"python3","requestStartTime":1517918257375}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    \n    minOp = 0\n    maxOp = 0\n    d = {0:[], 1:[]}\n    for i in doors:\n        d[i].\n        \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":181,"fileType":"python3","requestStartTime":1517918233536}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n    while True:\n        m, k, d = [int(entry) for entry in input().split(' ')]\n        for i in range(k):\n        \n        \n\n","offset":138,"fileType":"python3","requestStartTime":1517918274404}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n    while True:\n        m, k, d = [int(entry) for entry in input().split(' ')]\n        for i in range(k):\n            print(*input., sep='\\n')\n        \n        \n\n","offset":164,"fileType":"python3","requestStartTime":1517918321656}}
{"body": {"column":6,"line":4,"wordToComplete":"","code":"\nn = int(input())\ns= set()\nfor _ in range(n):\n    s.\n    \n\n","offset":53,"fileType":"python3","requestStartTime":1517918379182}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(0, length):\n        for y in range(0, length):\n            if x%y == 0:\n                \n            elif x == y:\n                \n    return abs(left_d-right-d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":240,"fileType":"python3","requestStartTime":1517918413294}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(0, length):\n        for y in range(0, length):\n            if x%y == 0:\n                left_d += a[x][y]\n            elif x == y:\n                left_d += a[x][y]\n                right_d += a[x][y]\n                \n            else:\n                \n                \n    return abs(left_d-right-d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":378,"fileType":"python3","requestStartTime":1517918539664}}
{"body": {"column":13,"line":1,"wordToComplete":"","code":"\nX = (input().)\nimg = input().split(' ')\n\n\n","offset":15,"fileType":"python3","requestStartTime":1517918563948}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    return string.\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":44,"fileType":"python3","requestStartTime":1517918476480}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nclass Person:\n    age = int()    \n    \n    def __init__(self, age, initialAge):\n        self.\n        # Add some more code to run some checks on initialAge\n        if age < 0:\n            age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            initialAge = age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":95,"fileType":"python3","requestStartTime":1517918634892}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\nclass Person:\n    age = int()    \n    \n    def __init__(self, age, initialAge):\n        self.age = age\n        # Add some more code to run some checks on initialAge\n        if self.age < 0:\n            age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            initialAge = age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":183,"fileType":"python3","requestStartTime":1517918645779}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(0, length):\n        for y in range(0, length):\n            if x%y == 0:\n                left_d += a[x][y]\n            elif x == y:\n                left_d += a[x][y]\n                right_d += a[x][y]\n            elif (x-length+1)%y == 0:\n                \n    return abs(left_d-right-d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":364,"fileType":"python3","requestStartTime":1517918667362}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\nclass Person:\n    age = int()    \n    \n    def __init__(self, age, initialAge):\n        self.age = age\n        # Add some more code to run some checks on initialAge\n        if self.age < 0:\n            self.age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            initialAge = age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":209,"fileType":"python3","requestStartTime":1517918648603}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nclass Person:\n    age = int()    \n    \n    def __init__(self, age, initialAge):\n        self.age = age\n        # Add some more code to run some checks on initialAge\n        if self.age < 0:\n            self.age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            initialAge = self.age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":318,"fileType":"python3","requestStartTime":1517918653107}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\nclass Person:\n    age = int()\n    initialAge = int()\n    \n    def __init__(self, age, initialAge):\n        self.age = age\n        # Add some more code to run some checks on initialAge\n        if self.age < 0:\n            self.age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            self,.initialAge = self.age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":325,"fileType":"python3","requestStartTime":1517918689027}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\nclass Person:\n    age = int()\n    initialAge = int()\n    \n    def __init__(self, age, initialAge):\n        self.age = age\n        # Add some more code to run some checks on initialAge\n        if self.age < 0:\n            self.age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            self.initialAge = self.age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":324,"fileType":"python3","requestStartTime":1517918690412}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nclass Person:\n    age = int()\n    initialAge = int()\n    \n    def __init__(self, age, initialAge):\n        self.age = age\n        self.\n        # Add some more code to run some checks on initialAge\n        if self.age < 0:\n            self.age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            self.initialAge = self.age\n        \n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if age < 13:\n            print(\"You are young.\")\n        elif age >= 13 and self.age < 18:\n            print(\"You are a teenager.\")\n        else:\n            print(\"You are old.\")\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":137,"fileType":"python3","requestStartTime":1517918699371}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    for i in grades:\n        n = i . 5\n        p = 0\n        if(n > 3) \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":85,"fileType":"python3","requestStartTime":1517918748033}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(1, length+1):\n        for y in range(1, length+1):\n            if x%y == 0:\n                print(a[x.])\n                left_d += a[x-1][y-1]\n\n                \n    return abs(left_d-right_d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":229,"fileType":"python3","requestStartTime":1517918888078}}
{"body": {"column":23,"line":1,"wordToComplete":"","code":"\nX = input().split(' ').\nY = input().split(' ')\n\n\n\n","offset":25,"fileType":"python3","requestStartTime":1517918935734}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    for i in grades:\n        n_g = []\n        n = i / 5\n        p = 0\n        if((n+1 * 5) - i  > 3):\n            n_g.\n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":167,"fileType":"python3","requestStartTime":1517918859599}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input() for i in range(k)]\n    data_refined = {\n        str(entry[0]) :\n        }\n    print (*data, sep='\\n')\n        \n        \n\n","offset":189,"fileType":"python3","requestStartTime":1517918975587}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    for i in grades:\n        n_g = []\n        n = i / 5\n        p = 0\n        if(((n+1 * 5) - i)  < 3):\n            n_g.\n            \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":169,"fileType":"python3","requestStartTime":1517918910951}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    for i in grades:\n        n_g = []\n        n = i / 5\n        p = 0\n        if(((n+1 * 5) - i)  < 3):\n            n_g.append((n+1 * 5))\n        else:\n            n_g.\n            \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":217,"fileType":"python3","requestStartTime":1517918925230}}
{"body": {"column":44,"line":3,"wordToComplete":"","code":"\nX_l = list(map(int, input().split(' ')))\nX_s = set()\n[x for x in X_l if x not in X_s and not X_s.]\nY_l = list(map(int, input().split(' ')))\n\n\n\n","offset":99,"fileType":"python3","requestStartTime":1517919266991}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\n\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input(). for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(entry[2]-entry[3]),\n            float(entry[3]-entry[4]),\n            float(entry[4]-entry[5]),\n        ]  \n        for entry in data_raw\n        ]\n    \n    print (*evaluate, sep='\\n')\n        \n        \n\n","offset":126,"fileType":"python3","requestStartTime":1517919252152}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    mn = 0\n    mx = len(list(filter(lambda x:x==1,doors)))\n    if mx == 0 :\n        return 0,.\n    if mx == 1 :\n        return 1,1\n    x = []\n    i = 0\n    for k,v in enumerate(doors) :\n        if v == 1 :  x.append(k)\n    \n    while i < len(x)-1 :\n        if x[i+1] - x[i] == 1 :\n            mn += 1\n            i += 2\n        else :\n            mn += 1\n            i += 2\n    return mn,mx\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":159,"fileType":"python3","requestStartTime":1517919362354}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    n_g = []\n    for i in grades:\n        n = int(i // 5)\n        if(i < 38):\n            n_g.\n        if((((n+1) * 5) - i) < 3):\n            n_g.append((n+1) * 5)\n        else:\n            n_g.append(i)\n    return n_g\n            \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":143,"fileType":"python3","requestStartTime":1517919368318}}
{"body": {"column":5,"line":1,"wordToComplete":"","code":"\nmath.\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ]  \n        for entry in data_raw\n        ]\n    \n    decision = [\n        [\n            entry[0],\n            entry[1],\n            \n        ]\n    ]\n    \n    print (*evaluate, sep='\\n')\n        \n        \n\n","offset":7,"fileType":"python3","requestStartTime":1517919440303}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    alice = 0\n    bob = 0\n    if a0 >\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":131,"fileType":"python3","requestStartTime":1517919466400}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ]  \n        for entry in data_raw\n        ]\n    \n    decision = [\n        [\n            entry[0],\n            entry[1],\n            math.\n        ]\n    ]\n    \n    print (*evaluate, sep='\\n')\n        \n        \n\n","offset":568,"fileType":"python3","requestStartTime":1517919449375}}
{"body": {"column":30,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(1, length+1):\n        for y in range(1, length+1):\n            if x%y == 0:\n                if (x == y):\n                    \n                elif (x == y):\n                    left_d += a[x-1][y-1]\n                else:\n                    right_d += a[x-1][y-1]\n\n    return abs(left_d-right_d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":283,"fileType":"python3","requestStartTime":1517919490885}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\nX_l = list(map(int, input().split(' ')))\nX_s = set()\n[x for x in X_l if x not in X_s and not X_s.add(x)]\nY_l = list(map(int, input().split(' ')))\n[y for y in Y_l if y not in Y_s and not Y_s.add(y)]\n\nreturn 'YES' if X_s.\n\n\n","offset":221,"fileType":"python3","requestStartTime":1517919487009}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    alice = 0\n    bob = 0\n    if a0 > b0:\n        alice += 1\n    elif b0 >\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":168,"fileType":"python3","requestStartTime":1517919496377}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    \n    minOp = 0\n    maxOp = 0\n    d = {0:[], 1:[]}\n    for i in range(len(doors)):\n        d[doors[i]].append(i)\n    \n    maxOp = len(d[1])\n    s = 0\n    e = maxOp - 1\n    \n    while s <= e:\n        if s+1 >(d[1][s] - d[1][s+1] == -1):\n            s+=1\n        \n        s+=1\n        minOp += 1\n        \n    return minOp,maxOp\n    \n        \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, list(result))))\n\n\n\n\n","offset":304,"fileType":"python3","requestStartTime":1517919507383}}
{"body": {"column":23,"line":30,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decision = sorted([\n        [\n            entry[0],\n            entry[1],\n            math.fsum(entry[2], entry[3], entry[4],) if entry[2] > 0 or entry[4] <0\n        ]\n        ],\n        key = lambda x:\n    \n    print (*evaluate, sep='\\n')\n        \n        \n\n","offset":714,"fileType":"python3","requestStartTime":1517919607719}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(1, length+1):\n        for y in range(1, length+1):\n            if x%y == 0:\n                if (x == y):\n                    print('hej')\n                    left_d += a[x-1][y-1]\n                if (-x == -y):\n                    print(a[x-1][y.])\n                    right_d += a[x-1][y-1]\n\n    return abs(right_d-left_d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":373,"fileType":"python3","requestStartTime":1517919699099}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    left_d = 0\n    right_d = 0\n    length = len(a)\n    for x in range(1, length+1):\n        for y in range(1, length+1):\n            if x%y == 0:\n                if (x == y):\n                    print('hej')\n                    left_d += a[x-1][y-1]\n                if (-x == -y):\n                    print(a[x-1][y.])\n                    right_d += a[x-1][y-1]\n\n    return abs(right_d-left_d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":373,"fileType":"python3","requestStartTime":1517919700082}}
{"body": {"column":29,"line":33,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decide = sorted([\n        [\n            entry[0],\n            entry[1],\n            fsum([entry[2], entry[3], entry[4]]) if (entry[2] > 0 or entry[4] <0) else 0 \n        ] for entry in evaluate\n        ],\n        key = lambda x: x[-1]\n    )\n    \n    for entry in decide[0:3]:\n    \n    print (*decide, sep='\\n')\n        \n        \n\n","offset":787,"fileType":"python3","requestStartTime":1517919818199}}
{"body": {"column":24,"line":34,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decide = sorted([\n        [\n            entry[0],\n            entry[1],\n            fsum([entry[2], entry[3], entry[4]]) if (entry[2] > 0 or entry[4] <0) else 0 \n        ] for entry in evaluate\n        ],\n        key = lambda x: x[-1]\n    )\n    \n    for entry in decide[0:3]:\n        if entry[2] < 0:\n    \n    print (*decide, sep='\\n')\n        \n        \n\n","offset":812,"fileType":"python3","requestStartTime":1517919838735}}
{"body": {"column":35,"line":24,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef check_range(k,right):\n    \nn,q = input().strip().split(' ')\nn,q = [int(n),int(q)]\ns = input().strip()\n\n    \nfor a0 in range(q):\n    left,right = input().strip().split(' ')\n    left,right = [int(left),int(right)]\n    substring_list = []\n    if right >= n or left < 0:\n        print(0)\n        break\n    for i in range(left,right+1):\n        for j in range(i,right+1):\n            if check_range(j,right):\n                if s[i:j] not in substring_list:\n                    substring_list.\n        \n\n\n","offset":523,"fileType":"python3","requestStartTime":1517920280430}}
{"body": {"column":20,"line":21,"wordToComplete":"root.","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        \n        str = \"root.\nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":546,"fileType":"python3","requestStartTime":1517920315046}}
{"body": {"column":28,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            return str(root.)\n        str = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":606,"fileType":"python3","requestStartTime":1517920376028}}
{"body": {"column":47,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            return str(root.data) + \" \" + self.\n        str = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":625,"fileType":"python3","requestStartTime":1517920410483}}
{"body": {"column":47,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            return str(root.data) + \" \" + root.\n        str = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":625,"fileType":"python3","requestStartTime":1517920433665}}
{"body": {"column":47,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            return str(root.data) + \" \" + solf.\n        str = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":625,"fileType":"python3","requestStartTime":1517920443751}}
{"body": {"column":47,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            return str(root.data) + \" \" + self.\n        str = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":625,"fileType":"python3","requestStartTime":1517920449894}}
{"body": {"column":63,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            return str(root.data) + \" \" + self.levelOrder(root.)\n        str = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":641,"fileType":"python3","requestStartTime":1517920453957}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    # Complete this function\n    a.\n    for row in range(a):\n        \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":92,"fileType":"python3","requestStartTime":1517920483982}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef divisibleSumPairs(n, k, ar):\n    count = 0\n    point = 0\n    for i in ar:\n        while point <>\n    \nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\nar = list(map(int, input().strip().split(' ')))\nresult = divisibleSumPairs(n, k, ar)\nprint(result)\n\n\n","offset":130,"fileType":"python3","requestStartTime":1517920554544}}
{"body": {"column":54,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            string = str(root.data) + \" \" + root.left..levelOrder(root.left)\n        \n        print stringstr = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":632,"fileType":"python3","requestStartTime":1517920653239}}
{"body": {"column":72,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            string = str(root.data) + \" \" + root.left.data + \" \" + root..levelOrder(root.left)\n        \n        print stringstr = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":650,"fileType":"python3","requestStartTime":1517920662207}}
{"body": {"column":78,"line":23,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n        #Write your code here\n        if root is None:\n            return \"\"\n        else:\n            string = str(root.data) + \" \" + root.left.data + \" \" + root.right..levelOrder(root.left)\n        \n        print stringstr = str(root.data)\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":656,"fileType":"python3","requestStartTime":1517920665710}}
{"body": {"column":35,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef divisibleSumPairs(n, k, ar):\n    count = 0\n    point = 0\n    for i in ar:\n        while point < n-1:\n            if (i + ar[point+ar[i].]) % k == 0:\n                count += 1\n                point += 1\n            else:\n                point += 1\n    return count\n    \nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\nar = list(map(int, input().strip().split(' ')))\nresult = divisibleSumPairs(n, k, ar)\nprint(result)\n\n\n","offset":170,"fileType":"python3","requestStartTime":1517920699445}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef divisibleSumPairs(n, k, ar):\n    count = 0\n    point = 0\n    for i in ar:\n        while point < n-1:\n            if (i + ar[point+ar.) % k == 0:\n                count += 1\n                point += 1\n            else:\n                point += 1\n    return count\n    \nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\nar = list(map(int, input().strip().split(' ')))\nresult = divisibleSumPairs(n, k, ar)\nprint(result)\n\n\n","offset":167,"fileType":"python3","requestStartTime":1517920727004}}
{"body": {"column":22,"line":1,"wordToComplete":"","code":"\nfor line in fileinput.\n\n","offset":24,"fileType":"python3","requestStartTime":1517920782565}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    primary:\n\n    return abs(right_d-left_d)\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":69,"fileType":"python3","requestStartTime":1517921026331}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\nclass Node():\n    __init__(self, c):\n        self.\n\nn = int(input().strip())\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n\n\n","offset":52,"fileType":"python3","requestStartTime":1517921189296}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass Node():\n    __init__(self, c):\n        self.children = []\n        self.\n\nn = int(input().strip())\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n\n\n","offset":79,"fileType":"python3","requestStartTime":1517921197546}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nclass Node():\n    __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.\n\nn = int(input().strip())\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n\n\n","offset":100,"fileType":"python3","requestStartTime":1517921211438}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    primary_diag = []\n    primary_c = 0\n    secondary_diag = []\n    secondary_c = len(a)-1\n    \n    for elem in a:\n        primary_diag.\n\n    return abs(sum(primary_diag)-sum(secondary_diag))\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":193,"fileType":"python3","requestStartTime":1517921120010}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    primary_diag = []\n    primary_c = 0\n    secondary_diag = []\n    secondary_c = len(a)-1\n    \n    for elem in a:\n        primary_diag.append(i[prim_m])\n        secondary_diag.\n\n    return abs(sum(primary_diag)-sum(secondary_diag))\n    \n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":234,"fileType":"python3","requestStartTime":1517921142091}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    maximum = doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":85,"fileType":"python3","requestStartTime":1517921309295}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.\n        \n\n\n","offset":256,"fileType":"python3","requestStartTime":1517921446806}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport heapq\n\nlower_list = []  # Max heap, negative values\n\nupper_list = []  # Min heap, positive values (Standard implementation)\n\ndef peek(l):\n    return abs(l[0])\n\ndef pop(l):\n    return abs(heapq.heappop(l))\n\ndef is_empty(l):\n    return len(l) == 0\n\ndef balance():\n    while not is_empty(lower_list) and not is_empty(upper_list) and peek(lower_list) > peek(upper_list):\n        lower_head = pop(lower_list)\n        upper_head = pop(upper_list)\n        heapq.\n\ndef append(value):\n    if len(lower_list) <= len(upper_list):\n        heapq.heappush(lower_list, -float(value))\n    else:\n        heapq.heappush(upper_list, float(value))\n    balance()\n        \n        \ndef print_median():\n    if len(lower_list) == len(upper_list):\n        print((peek(lower_list) + peek(upper_list))/2)\n    elif len(lower_list) > len(upper_list):\n        print(peek(lower_list))\n    elif len(lower_list) < len(upper_list):\n        print(peek(upper_list))\n    else:\n        print('Something is wrong when printing')\n        \n\n\nn = int(input().strip())\na = []\na_i = 0\n\nfirst_value = int(input().strip())\nsecond_value = int(input().strip())\n\nlower_list.append(min(float(first_value), float(second_value)))\nprint_median()\nupper_list.append(max(float(first_value), float(second_value)))\nprint_median()\nfor a_i in range(n - 2):\n    a_t = int(input().strip())\n    append(a_t)\n    print_median()\n\n\n","offset":491,"fileType":"python3","requestStartTime":1517921338582}}
{"body": {"column":14,"line":24,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport heapq\n\nlower_list = []  # Max heap, negative values\n\nupper_list = []  # Min heap, positive values (Standard implementation)\n\ndef peek(l):\n    return abs(l[0])\n\ndef pop(l):\n    return abs(heapq.heappop(l))\n\ndef is_empty(l):\n    return len(l) == 0\n\ndef balance():\n    while not is_empty(lower_list) and not is_empty(upper_list) and peek(lower_list) > peek(upper_list):\n        lower_head = pop(lower_list)\n        upper_head = pop(upper_list)\n        heapq.heappush(upper_list, lower_head)\n        heapq.\n\ndef append(value):\n    if len(lower_list) <= len(upper_list):\n        heapq.heappush(lower_list, -float(value))\n    else:\n        heapq.heappush(upper_list, float(value))\n    balance()\n        \n        \ndef print_median():\n    if len(lower_list) == len(upper_list):\n        print((peek(lower_list) + peek(upper_list))/2)\n    elif len(lower_list) > len(upper_list):\n        print(peek(lower_list))\n    elif len(lower_list) < len(upper_list):\n        print(peek(upper_list))\n    else:\n        print('Something is wrong when printing')\n        \n\n\nn = int(input().strip())\na = []\na_i = 0\n\nfirst_value = int(input().strip())\nsecond_value = int(input().strip())\n\nlower_list.append(min(float(first_value), float(second_value)))\nprint_median()\nupper_list.append(max(float(first_value), float(second_value)))\nprint_median()\nfor a_i in range(n - 2):\n    a_t = int(input().strip())\n    append(a_t)\n    print_median()\n\n\n","offset":538,"fileType":"python3","requestStartTime":1517921357146}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef palindromeIndex(s):\n    rInx=0;\n    lInx=len(s)-1;\n    while(rInx<lInx):\n        if(s[rInx]!=s[lInx]):\n            checkPal(s.);\n        \n        \n        \nq = int(input().strip())\nfor a0 in range(q):\n    s = input().strip()\n    result = palindromeIndex(s)\n    print(result)\n\n\n","offset":160,"fileType":"python3","requestStartTime":1517921378624}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":206,"fileType":"python3","requestStartTime":1517921512878}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif contact[0] in self.\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":252,"fileType":"python3","requestStartTime":1517921557185}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif contact[0] in [y.self.children]\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":250,"fileType":"python3","requestStartTime":1517921576098}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if (head==None):\n            head=self.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":339,"fileType":"python3","requestStartTime":1517921464377}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            self.\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":298,"fileType":"python3","requestStartTime":1517921607033}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if (head==None):\n            head=node(data)\n        elif(head.)\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":363,"fileType":"python3","requestStartTime":1517921564739}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if (head==None):\n            head=node(data)\n        elif(head.next==None):\n            head.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":393,"fileType":"python3","requestStartTime":1517921596693}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if (head==None):\n            head=Node(data)\n        elif(head.next==None):\n            head.next=Node(data)\n        else:\n            self.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":440,"fileType":"python3","requestStartTime":1517921675644}}
{"body": {"column":29,"line":16,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if (head==None):\n            head=Node(data)\n        elif(head.next==None):\n            head.next=Node(data)\n        else:\n            self.insert(head.)\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":452,"fileType":"python3","requestStartTime":1517921683792}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            for z in self.\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":307,"fileType":"python3","requestStartTime":1517921839552}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            for z in self.children:\n                if (z.)\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":339,"fileType":"python3","requestStartTime":1517921847662}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            for z in self.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            self.\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":533,"fileType":"python3","requestStartTime":1517921934269}}
{"body": {"column":26,"line":18,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            for z in self.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            self.children.\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":542,"fileType":"python3","requestStartTime":1517921937348}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxOps(doors):\n    return doors.\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":66,"fileType":"python3","requestStartTime":1517921855099}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            for z in self.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            self.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            self.children.append(new_node)\n            add_word(new_node, contact[1:])\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":435,"fileType":"python3","requestStartTime":1517921978559}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    def add_word(self, contact):\n        if (len(contact) == 0):\n            self.is_end = True\n        elif (contact[0] in [y.chr for y in self.children]):\n            for z in self.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            self.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            self.children.append(new_node)\n            self.add_word(new_node, contact[1:])\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        x.add_word(contact)\n        \n\n\n","offset":581,"fileType":"python3","requestStartTime":1517921992317}}
{"body": {"column":45,"line":11,"wordToComplete":"The total meal cost is {} dollars.totalCost)","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    totalCost = int(meal_cost+(meal_cost*tip_percent/100)+(meal_cost*tax_percent/100)\n    print(\"The total meal cost is {} dollars.totalCost)\n\n\n","offset":310,"fileType":"python3","requestStartTime":1517921950948}}
{"body": {"column":46,"line":11,"wordToComplete":"The total meal cost is {} dollars..totalCost)","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    totalCost = int(meal_cost+(meal_cost*tip_percent/100)+(meal_cost*tax_percent/100)\n    print(\"The total meal cost is {} dollars..totalCost)\n\n\n","offset":311,"fileType":"python3","requestStartTime":1517921951108}}
{"body": {"column":48,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    totalCost = int(meal_cost+(meal_cost*tip_percent/100)+(meal_cost*tax_percent/100)\n    print(\"The total meal cost is {} dollars..\".totalCost)\n\n\n","offset":313,"fileType":"python3","requestStartTime":1517921954028}}
{"body": {"column":13,"line":27,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            add_word(new_node, contact[1:])\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n        \n\n\n","offset":761,"fileType":"python3","requestStartTime":1517922114990}}
{"body": {"column":35,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    for counter in range (0, doors.):\n        \n    return \n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":100,"fileType":"python3","requestStartTime":1517922011732}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef twoCharaters(s):\n    # Complete this function\n    for i in range(len(s)-1):\n        if(s[i] == s[i+1]):\n            s.\n    \n    \n    \nif __name__ == \"__main__\":\n    l = int(input().strip())\n    s = input().strip()\n    result = twoCharaters(s)\n    print(result)\n\n\n","offset":152,"fileType":"python3","requestStartTime":1517922091950}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n\n\n","offset":174,"fileType":"python3","requestStartTime":1517922116295}}
{"body": {"column":17,"line":20,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        add_word(x, contact)\n        \n\n\n","offset":594,"fileType":"python3","requestStartTime":1517922242334}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n\n\n","offset":200,"fileType":"python3","requestStartTime":1517922131039}}
{"body": {"column":13,"line":27,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n        \n\n\n","offset":766,"fileType":"python3","requestStartTime":1517922254893}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.\n\n\n","offset":214,"fileType":"python3","requestStartTime":1517922136088}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n        \n\n\n","offset":453,"fileType":"python3","requestStartTime":1517922269344}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.\n\n\n","offset":239,"fileType":"python3","requestStartTime":1517922150564}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.\n\n\n","offset":265,"fileType":"python3","requestStartTime":1517922155838}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n#import ast\nimport json\nfrom collections import OrderedDict#, defaultdict, namedtuple\nfrom itertools import chain\n\n#function for ordered dictionary \ndef ordict(x):\n    #y = [ordict(v) if isinstance(v,dict) else {k: v} for k,v in x.items()]\n    #return y\n    d=[]\n    for k,v in x.items():\n        if isinstance(v,dict):\n            ordict(v)\n        else: \n            d.([{k: v}])\n    \n\n\n#flattening the list\ndef hlist(x):\n    [li for li in x if isinstance(li,dict)]\n\ndef listhan_ineq(g,a):    \n    if isinstance(a[k],list):\n        return [ai for ai in a if all(k in a and g[k] in a[k] for k in g.keys())]\n    else:\n        return [ai for ai in a if all(k in a and g[k] == a[k] for k in g.keys())]\n\ndef listhan_notineq(d,a):    \n    if isinstance(a[k],list):\n        return [ai for ai in a if all(k in a and d[k] not in a[k] for k in d.keys())]\n    else:\n        return [ai for ai in a if all(k in a and d[k] != a[k] for k in d.keys())]\n    \nadd=[]\nget=[]\ndelete=[]\nfor line in sys.stdin:\n    x = line.strip('\\n').split(\" \",1)\n    if x[0] == 'add':\n        addi=json.loads(x[1], object_pairs_hook=OrderedDict)\n        #print ('addi_keys_packed', [addi[kee] for kee in addi.keys()])\n        print ('addi_keys_unpacked')\n        ordict(addi)\n        #add.append(json.loads(x[1], object_pairs_hook=OrderedDict))\n        add.append(addi)\n        #print (json.dumps(json.loads(x[1], object_pairs_hook=OrderedDict),separators=(',',':')))\n    elif x[0] == 'get':\n        get = json.loads(x[1], object_pairs_hook=OrderedDict)\n        #print ('get_keys_packed', [get[kee] for kee in get.keys()])\n        print ('get_dict_unpacked')\n        ordict(get)\n        #match = [addi for addi in add if all(it in ordict(addi) for it in ordict(get))]\n        #match = [addi for addi in add if all(kee in addi and get[kee] == addi[kee] for kee in get.keys())]\n        #for matchi in match:\n        #    print (json.dumps(matchi,separators=(',',':')))\n    elif x[0] == 'delete':\n        delete = json.loads(x[1], object_pairs_hook=OrderedDict)\n        add = [addi for addi in add if all(kee in addi and delete[kee] != addi[kee] for kee in delete.keys())]\n        \n#for k,v in mkv(add[0]):\n#    print (k,v)\n    \n\n\n\n\n    \n\n\n\n\n\n","offset":454,"fileType":"python3","requestStartTime":1517922177959}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_words(node):\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        Node.\n        \n\n\n","offset":890,"fileType":"python3","requestStartTime":1517922356487}}
{"body": {"column":13,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reformatDate(dates):\n    clean_data = []\n    date_map = {\n        \"Jan\":\"01\",\n        \"Feb\":\"02\",\n        \"Mar\":\"03\",\n        \"Apr\":\"04\",\n        \"May\":\"05\",\n        \"Jun\":\"06\",\n        \"Jul\":\"07\",\n        \"Aug\":\"08\",\n        \"Sep\":\"09\",\n        \"Oct\":\"10\",\n        \"Nov\":\"11\",\n        \"Dec\":\"12\"\n    }\n    for date in dates:\n        date.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    dates_cnt = 0\n    dates_cnt = int(input())\n    dates_i = 0\n    dates = []\n    while dates_i < dates_cnt:\n        try:\n            dates_item = str(input())\n        except:\n            dates_item = None\n        dates.append(dates_item)\n        dates_i += 1\n\n\n    res = reformatDate(dates);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":415,"fileType":"python3","requestStartTime":1517922282995}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef twoCharaters(s):\n    # Complete this function\n    for i in range(len(s)-1):\n        if(s[i] == s[i+1]):\n            s.replace(s[i],\"\")\n            print(s)\n            i -=1\n    return (len(s))\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    l = int(input().strip())\n    s = input().strip()\n    print(s.)\n    result = twoCharaters(s)\n    print(result)\n\n\n","offset":340,"fileType":"python3","requestStartTime":1517922365752}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\nfor a in range(n-1):\n    temp = node(int(input()))\n    cur = root\n    if temp.\n    \n\n\n","offset":399,"fileType":"python3","requestStartTime":1517922373880}}
{"body": {"column":23,"line":19,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\nfor a in range(n-1):\n    temp = node(int(input()))\n    cur = root\n    if temp.data < cur.\n    \n\n\n","offset":410,"fileType":"python3","requestStartTime":1517922378400}}
{"body": {"column":37,"line":24,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_words(node, contact):\n        if (contact == '') and (node.)\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":728,"fileType":"python3","requestStartTime":1517922510129}}
{"body": {"column":30,"line":28,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reformatDate(dates):\n    clean_data = []\n    month_dict = {\n        \"Jan\":\"01\",\n        \"Feb\":\"02\",\n        \"Mar\":\"03\",\n        \"Apr\":\"04\",\n        \"May\":\"05\",\n        \"Jun\":\"06\",\n        \"Jul\":\"07\",\n        \"Aug\":\"08\",\n        \"Sep\":\"09\",\n        \"Oct\":\"10\",\n        \"Nov\":\"11\",\n        \"Dec\":\"12\"\n    }\n    for date in dates:\n        segment = date.split(\" \")\n        year = segment[2]\n        month = month_dict[segment[1]]\n        day = segment[0][:-2].\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    dates_cnt = 0\n    dates_cnt = int(input())\n    dates_i = 0\n    dates = []\n    while dates_i < dates_cnt:\n        try:\n            dates_item = str(input())\n        except:\n            dates_item = None\n        dates.append(dates_item)\n        dates_i += 1\n\n\n    res = reformatDate(dates);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":533,"fileType":"python3","requestStartTime":1517922449625}}
{"body": {"column":43,"line":26,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_words(node, contact):\n        if ((contact == '') and (node.is_end)):\n            return 1\n        elif ((contact == '') and not node.)\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":803,"fileType":"python3","requestStartTime":1517922596763}}
{"body": {"column":36,"line":28,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_words(node, contact):\n        if ((contact == '') and (node.is_end)):\n            return 1\n        elif ((contact == '') and (not node.is_end)):\n            return 0\n        elif (not (contact[0] in [y.]))\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":871,"fileType":"python3","requestStartTime":1517922636190}}
{"body": {"column":54,"line":28,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_words(node, contact):\n        if ((contact == '') and (node.is_end)):\n            return 1\n        elif ((contact == '') and (not node.is_end)):\n            return 0\n        elif (not (contact[0] in [y.chr for y in node.]))\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":889,"fileType":"python3","requestStartTime":1517922639149}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reformatDate(dates):\n    ans = []\n    month_dict = {\n        \"Jan\":\"01\",\n        \"Feb\":\"02\",\n        \"Mar\":\"03\",\n        \"Apr\":\"04\",\n        \"May\":\"05\",\n        \"Jun\":\"06\",\n        \"Jul\":\"07\",\n        \"Aug\":\"08\",\n        \"Sep\":\"09\",\n        \"Oct\":\"10\",\n        \"Nov\":\"11\",\n        \"Dec\":\"12\"\n    }\n    for date in dates:\n        segment = date.split(\" \")\n        year = segment[2]\n        month = month_dict[segment[1]]\n        day = segment[0][:-2].zfill(2)\n        ans. = year+\"-\"+month+\"-\"+day\n        return \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    dates_cnt = 0\n    dates_cnt = int(input())\n    dates_i = 0\n    dates = []\n    while dates_i < dates_cnt:\n        try:\n            dates_item = str(input())\n        except:\n            dates_item = None\n        dates.append(dates_item)\n        dates_i += 1\n\n\n    res = reformatDate(dates);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":547,"fileType":"python3","requestStartTime":1517922532865}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = node(int(input()))\n    t1 = cur.\n    if temp.data < cur.data\n    \n\n\n","offset":398,"fileType":"python3","requestStartTime":1517922592325}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            Node.\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n    \n    @staticmethod\n    def count_children(node)\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":739,"fileType":"python3","requestStartTime":1517922755079}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = map(int,(input().)\n    t1 = cur.pop(0)\n    if temp\n    \n\n\n","offset":383,"fileType":"python3","requestStartTime":1517922632677}}
{"body": {"column":11,"line":21,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = map(int,input().split(\" \"))\n    t1 = cur.pop(0)\n    if temp[0] > -1:\n        t1.\n    \n\n\n","offset":446,"fileType":"python3","requestStartTime":1517922662434}}
{"body": {"column":26,"line":29,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.\n    \n    @staticmethod\n    def count_children(node)\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":888,"fileType":"python3","requestStartTime":1517922788009}}
{"body": {"column":22,"line":30,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.)\n    \n    @staticmethod\n    def count_children(node)\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":920,"fileType":"python3","requestStartTime":1517922791216}}
{"body": {"column":17,"line":33,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.\n    \n    @staticmethod\n    def count_children(node)\n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":1016,"fileType":"python3","requestStartTime":1517922803873}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = map(int,input().split(\" \"))\n    t1 = cur.pop(0)\n    if temp[0] > -1:\n        t1.left = temp[0]\n    if temp[1] > -1:\n    \n\n\n","offset":481,"fileType":"python3","requestStartTime":1517922696376}}
{"body": {"column":11,"line":23,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = map(int,input().split(\" \"))\n    t1 = cur.pop(0)\n    if temp[0] > -1:\n        t1.left = temp[0]\n    if temp[1] > -1:\n        t1.\n    \n\n\n","offset":493,"fileType":"python3","requestStartTime":1517922701017}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = map(int,input().split(\" \"))\n    t1 = cur.pop(0)\n    if temp[0] > -1:\n        t1.left = temp[0]\n        cur.\n    if temp[1] > -1:\n        t1.right = temp[1]\n    \n\n\n","offset":473,"fileType":"python3","requestStartTime":1517922717483}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor a in range(n-1):\n    temp = map(int,input().split(\" \"))\n    t1 = cur.pop(0)\n    if temp[0] > -1:\n        t1.left = temp[0]\n        cur.append(t1.)\n    if temp[1] > -1:\n        t1.right = temp[1]\n    \n\n\n","offset":483,"fileType":"python3","requestStartTime":1517922723459}}
{"body": {"column":17,"line":38,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.)\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":1154,"fileType":"python3","requestStartTime":1517922944409}}
{"body": {"column":22,"line":40,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":1205,"fileType":"python3","requestStartTime":1517922969914}}
{"body": {"column":17,"line":41,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            Node.\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":1232,"fileType":"python3","requestStartTime":1517922974529}}
{"body": {"column":24,"line":41,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_words(contact))\n        \n\n\n","offset":1239,"fileType":"python3","requestStartTime":1517922980495}}
{"body": {"column":17,"line":29,"wordToComplete":"","code":"\ndef inOrder(root):\n    if root.left != None:\n        inOrder(root.left)\n    print str(root.data),\n    if root.right != None:\n        inOrder(root.right)\n\nclass node (data):\n    __init__(self, data):\n        self.data = data\n        self.right = None\n        self.left = None\n\nn = int(input())\nroot = node(int(input()))\ncur = [root]\nfor _ in range(n-1):\n    temp = map(int,input().split(\" \"))\n    t1 = cur.pop(0)\n    if temp[0] > -1:\n        t1.left = temp[0]\n        cur.append(t1.left)\n    if temp[1] > -1:\n        t1.right = temp[1]\n        cur.append(t1.right)\n\nnodes = [root]\nt = int(input())\nfor _ in range t:\n    \n\n\n","offset":616,"fileType":"python3","requestStartTime":1517922861413}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport re\n\ndef acidNaming(acid_name):\n    if(acid_name.)\n    \n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517922886273}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n        self.\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.count_children(z)\n        return ans\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_prefixes(x, contact))\n        \n\n\n","offset":132,"fileType":"python3","requestStartTime":1517923160798}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n        self.word_count = 0\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n            self.\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.count_children(z)\n        return ans\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_prefixes(x, contact))\n        \n\n\n","offset":283,"fileType":"python3","requestStartTime":1517923208382}}
{"body": {"column":19,"line":2,"wordToComplete":"","code":"\npopulation = input()\nnumbers = [input().\nprint (population)\n\n\n","offset":42,"fileType":"python3","requestStartTime":1517923220545}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n        self.word_count = 0\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n            node.word_count = 1\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            node.\n            Node.add_word(new_node, contact[1:])\n        else:\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.count_children(z)\n        return ans\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_prefixes(x, contact))\n        \n\n\n","offset":513,"fileType":"python3","requestStartTime":1517923352855}}
{"body": {"column":17,"line":21,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n        self.word_count = 0\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n            node.word_count = 1\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            node.word_count += 1\n            Node.add_word(new_node, contact[1:])\n        else:\n            node.\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n     \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.count_children(node)\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.count_children(z)\n        return ans\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_prefixes(x, contact))\n        \n\n\n","offset":609,"fileType":"python3","requestStartTime":1517923396269}}
{"body": {"column":35,"line":3,"wordToComplete":"","code":"\npopulation = input()\nnumbers = [int(i) for i in input().split()]\nweights = [int(i) for i in input().]\nprint (numbers)\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517923281433}}
{"body": {"column":23,"line":4,"wordToComplete":"","code":"\npopulation = input()\nnumbers = [int(i) for i in input().split()]\nweights = [int(i) for i in input().split()]\nfor i in range(numbers.)\nprint (weights)\n\n\n","offset":134,"fileType":"python3","requestStartTime":1517923314965}}
{"body": {"column":24,"line":29,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n        self.word_count = 0\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n            node.word_count = 1\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            node.word_count += 1\n            Node.add_word(new_node, contact[1:])\n        else:\n            node.word_count += 1\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n    \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return Node.\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.count_children(z)\n        return ans\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_prefixes(x, contact))\n        \n\n\n","offset":871,"fileType":"python3","requestStartTime":1517923457648}}
{"body": {"column":24,"line":29,"wordToComplete":"","code":"\nclass Node():\n    def __init__(self, c):\n        self.children = []\n        self.chr = c\n        self.is_end = False\n        self.word_count = 0\n    \n    @staticmethod\n    def add_word(node, contact):\n        if (len(contact) == 0):\n            node.is_end = True\n            node.word_count = 1\n        elif (contact[0] in [y.chr for y in node.children]):\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            node.word_count += 1\n            Node.add_word(new_node, contact[1:])\n        else:\n            node.word_count += 1\n            new_node = Node(contact[0])\n            node.children.append(new_node)\n            Node.add_word(new_node, contact[1:])\n    \n    @staticmethod\n    def count_prefixes(node, contact):\n        if (contact == ''):\n            return node.\n        elif (not (contact[0] in [y.chr for y in node.children])):\n            return 0\n        else:\n            for z in node.children:\n                if (z.chr == contact[0]):\n                    new_node = z\n                    break\n            return Node.count_prefixes(new_node, contact[1:])\n    \n    @staticmethod\n    def count_children(node):\n        ans = 0\n        if (node.is_end):\n            ans = 1\n        for z in node.children:\n            ans += Node.count_children(z)\n        return ans\n        \n        \n\nn = int(input().strip())\nx = Node('/')\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    if (op == 'add'):\n        Node.add_word(x, contact)\n    elif (op == 'find'):\n        print(Node.count_prefixes(x, contact))\n        \n\n\n","offset":871,"fileType":"python3","requestStartTime":1517923463212}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    total = [0, 0]\n    \n    if a0 >\n    scores = [y for x in [(a0, b0), (a1, b1), (a2, b2)] ]\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n\n","offset":129,"fileType":"python3","requestStartTime":1517923437811}}
{"body": {"column":20,"line":9,"wordToComplete":"list,int) ->'''","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    '''(list,int) ->'''\n    for i in range(len(arr)):\n        if arr[i]==k:\n            print('YES')\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":117,"fileType":"python3","requestStartTime":1517952492394}}
{"body": {"column":32,"line":9,"wordToComplete":"cat solution.'","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef check():\n    bashCommand = 'cat solution.'\n    import subprocess\n    process = subprocess.Popen( bashCommand.split(), stdout = subprocess.PIPE )\n    output, error = process.communicate()\n    print( output )\n    return 0\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = check()\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":117,"fileType":"python3","requestStartTime":1517923549829}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    list(doors)\n    y = doors.(1)\n    i = 0\n    x = 0\n    while i < len(doors):\n        if door[i] == 1:\n            x += 1\n            i  += 1\n        i  += 1\n    return x,y\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":95,"fileType":"python3","requestStartTime":1517923574106}}
{"body": {"column":9,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\nimport sys\n\ndef revisedRussianRoulette(doors):\n    min_ = 0\n    max_ = 0\n    another_doors = []\n    another_doors = doors[:]\n    for i in range(len(doors)):\n        if(i+1 == len(doors)):\n            if(doors[i] == 1):\n                min_+=1\n            break\n        if(doors[i] == 1 and doors[i+1] == 1):\n            if(doors[i+1] == 1): min_ +=1\n            doors[i] = 0\n            doors[i+1] = 0\n        elif(doors[i] == 1):\n            min_+=1\n    another_doors = another_doors[::-1]    \n    for j in another_doors:\n        if(j == 1):\n            max_+=1\n    max_ = str(max_)\n    max_.\n    string = str(min_) + str(max_)\n    return string\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n    \n\n\n\n\n","offset":610,"fileType":"python3","requestStartTime":1517923608919}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"\nN = int(input())\n\n# print(N)\n\nval_stack = []\nmax_stack = []\ncurr_max = 0\n\nfor n in range(N):\n    vals_tup = list(map(int, input().strip().split()))\n    # print(vals_tup)\n    \n    command = vals_tup[0]\n    \n    if command == 1:\n        stack.append(vals_tup[1])\n        \n        if \n        \n        if len(maxx) == 0:\n            maxx.append(vals_tup[1])\n        \n    elif command == 2:\n        val_stack.pop()\n        max_stack.\n    else:\n        print(max(stack))\n    \n    \n\n","offset":431,"fileType":"python3","requestStartTime":1517923614453}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"\nN = int(input())\n\n# print(N)\n\nval_stack = []\nmax_stack = []\ncurr_max = 0\n\nfor n in range(N):\n    vals_tup = list(map(int, input().strip().split()))\n    # print(vals_tup)\n    \n    command = vals_tup[0]\n    \n    if command == 1:\n        value = vals_tup[1]\n        \n        if value > \n        \n        stack.append(vals_tup[1])\n        \n        if \n        \n        if len(maxx) == 0:\n            maxx.append(vals_tup[1])\n        \n    elif command == 2:\n        val_stack.pop()\n        max_stack.pop()\n    else:\n        print(max(stack))\n    \n    \n\n","offset":285,"fileType":"python3","requestStartTime":1517923629825}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef check():\n    bashCommand = 'cat solution.py'\n    import subprocess\n    process = subprocess.Popen( bashCommand.split(), stdout = subprocess.PIPE )\n    output, error = process.communicate()\n    print( output )\n    pos = output.\n    import collections\n    char = collections.Counter( output )\n    print( char[ord( '\\n' )] )\n    return 0\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = check()\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":302,"fileType":"python3","requestStartTime":1517923708065}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef check():\n    bashCommand = 'cat solution.py'\n    import subprocess\n    process = subprocess.Popen( bashCommand.split(), stdout = subprocess.PIPE )\n    output, error = process.communicate()\n    print( output )\n    start = output.find( 'def check():')\n    end = output.\n    import collections\n    char = collections.Counter( output )\n    print( char[ord( '\\n' )] )\n    return 0\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = check()\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":343,"fileType":"python3","requestStartTime":1517923743747}}
{"body": {"column":18,"line":21,"wordToComplete":"","code":"\nN = int(input())\n\n# print(N)\n\nval_stack = []\nmax_stack = []\ncurr_max = 0\n\nfor n in range(N):\n    vals_tup = list(map(int, input().strip().split()))\n    # print(vals_tup)\n    \n    command = vals_tup[0]\n    \n    if command == 1:\n        value = vals_tup[1]\n        \n        if len(max_stack) == 0 or value > max_stack[-1]:\n            curr_max = value\n        \n        val_stack.\n        max_stack.append(curr_max)\n        \n    elif command == 2:\n        val_stack.pop()\n        max_stack.pop()\n        if len(max_stack) == 0:\n            curr_max = 0\n        else:\n            curr_max = max_stack[-1]\n            \n    else:\n        print(curr_max)\n    \n    \n\n","offset":379,"fileType":"python3","requestStartTime":1517923803861}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    # Complete this function\n    mas = []\n    for i in range(len(grades)):\n        if grades[i] < 38:\n            mas.append(grades[i])\n        else:\n            if grades[i] % 5 == 3 or grades[i] % 5 == 4:\n                mas.\n            if int(str(grades[i])[0]+\"5\") - grades[i] < 3:\n                mas.append(int(str(grades[i])[0]+\"5\"))\n            elif int(str(grades[i])[0]+\"0\") - grades[i] < 3:\n                mas.append(int(str(grades[i])[0]+\"0\"))\n            else:\n                mas.append(grades[i])\n    return mas\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":276,"fileType":"python3","requestStartTime":1517923872926}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    # Complete this function\n    mas = []\n    for i in range(len(grades)):\n        if grades[i] < 38:\n            mas.append(grades[i])\n        else:\n            if grades[i] % 5 == 3 or grades[i] % 5 == 4:\n                mas.append(grades[i] + 5 - grades[i] % 5)\n            else: \n                mas.\n            if int(str(grades[i])[0]+\"5\") - grades[i] < 3:\n                mas.append(int(str(grades[i])[0]+\"5\"))\n            elif int(str(grades[i])[0]+\"0\") - grades[i] < 3:\n                mas.append(int(str(grades[i])[0]+\"0\"))\n            else:\n                mas.append(grades[i])\n    return mas\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":353,"fileType":"python3","requestStartTime":1517923914845}}
{"body": {"column":18,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    inputs = vars.\n    total = [0, 0]\n    \n    \n    if a > b:\n        total[0] = total[0]+1\n    elif a < b:\n        total[1] = total[1]+1\n    \n    scores = [y for x in [(a0, b0), (a1, b1), (a2, b2)] ]\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n\n","offset":112,"fileType":"python3","requestStartTime":1517923993924}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    inputs = vars().\n    total = [0, 0]\n    \n    \n    if a > b:\n        total[0] = total[0]+1\n    elif a < b:\n        total[1] = total[1]+1\n    \n    scores = [y for x in [(a0, b0), (a1, b1), (a2, b2)] ]\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n\n","offset":114,"fileType":"python3","requestStartTime":1517923999315}}
{"body": {"column":44,"line":4,"wordToComplete":"","code":"\nN = int(input())\n\nfor n in N:\n    px, py, qx, qy = tuple(map(int, input().))\n\n","offset":76,"fileType":"python3","requestStartTime":1517924085419}}
{"body": {"column":52,"line":4,"wordToComplete":"","code":"\nN = int(input())\n\nfor n in N:\n    px, py, qx, qy = tuple(map(int, input().strip().))\n\n","offset":84,"fileType":"python3","requestStartTime":1517924086922}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    # Complete this function\n    \n    for i in range(len(arr)):\n        arr[i].\n        #arr[i] = int(arr[i])\n    arr.sort()\n    return arr\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":130,"fileType":"python3","requestStartTime":1517924110016}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    # Complete this function\n    lst = []\n    for i in range(len(arr)):\n        lst.\n        #arr[i] = int(arr[i])\n    arr.sort()\n    return arr\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":135,"fileType":"python3","requestStartTime":1517924186594}}
{"body": {"column":4,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\narr.\n\n","offset":125,"fileType":"python3","requestStartTime":1517924204538}}
{"body": {"column":11,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\narr.sort().\n\n","offset":132,"fileType":"python3","requestStartTime":1517924210001}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    ar.\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":98,"fileType":"python3","requestStartTime":1517924232142}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    _max = ar.\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":105,"fileType":"python3","requestStartTime":1517924240685}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    name=[]\n    score=[]\n    student=[]\n    for _ in range(int(input())):\n        name.append(input())\n        score.append(float(input()))\n    sec_low=sorted(score)[1]\n    for s,n in zip(score,name):\n        if s==sec_low:\n            student.\n\n\n","offset":273,"fileType":"python3","requestStartTime":1517924243115}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    _max = ar.max()\n    return ar.\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":125,"fileType":"python3","requestStartTime":1517924251806}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    mini = 0\n    cpt = 0;\n    for cpt in range(0, len(doors)):\n        if doors[cpt] == 1:\n            mini += 1\n            cpt += 1\n    return mini, doors.count(1)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":90,"fileType":"python3","requestStartTime":1517924346956}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef check():\n    bashCommand = 'cat solution.py'\n    import subprocess\n    process = subprocess.Popen( bashCommand.split(), stdout = subprocess.PIPE )\n    output, error = process.communicate()\n    #print( output )\n    outStr = str( output )\n    start = outStr.find( 'def check():')\n    end = outStr.rfind( 'if __name__ ==')\n    funcStr = outStr[start : end]\n    print( 'funcStr:', funcStr )\n    import collections\n    #char = collections.Counter( output )\n    #print( char[ord( '\\n' )] )\n    char = collections.Counter( funcStr )\n    #print( char )\n    b = bytes( funcStr )\n    ordCount = collections.\n    return 0\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = check()\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":673,"fileType":"python3","requestStartTime":1517924547202}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    count_max = 0\n    while i>\n    for i in range(len(doors)):\n        if doors[i]==1:\n            count_max = count_max+1\n            i+=1\n    count_min = round(count_max/2)    \n    return count_min,count_max\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":124,"fileType":"python3","requestStartTime":1517924939008}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"import math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.\n    def __add__(self, no):\n        \n    def __sub__(self, no):\n        \n    def __mul__(self, no):\n\n    def __truediv__(self, no):\n\n    def mod(self):\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n","offset":91,"fileType":"python3","requestStartTime":1517925009751}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"import math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.\n    def __add__(self, no):\n        \n    def __sub__(self, no):\n        \n    def __mul__(self, no):\n\n    def __truediv__(self, no):\n\n    def mod(self):\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\nif __name__ == '__main__':\n    c = map(float, input().split())\n    d = map(float, input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\\n')\n","offset":116,"fileType":"python3","requestStartTime":1517925014725}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    k=[0]*2\n    h = [a0,a1,a2]\n    v = [b0,b1,b2]\n    for i in zip(h,v):\n        if (h > v):\n            k[0] = k[0] + 1\n        if (v>)\n    return(k)\n    # Complete this function\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":200,"fileType":"python3","requestStartTime":1517925045956}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bonAppetit(n, k, b, ar):\n    # Complete this function\n    tot = 0\n    for i in range(n):\n        if (i != k):\n            tot += ar[i]\n    tot = tot / 2\n    if (tot == b):\n        \n\nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\nar = list(map(int, input().strip().split(' ')))\nb = int(input().strip())\nresult = bonAppetit(n, k, b, ar)\nprint(result)\n\n\n","offset":205,"fileType":"python3","requestStartTime":1517925373066}}
{"body": {"column":41,"line":34,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nt = int(input().strip())\nfor _ in range(t):\n    row_lookup,col_lookup = [int(x) for x in input().strip().split(' ')]\n    lookup = []\n    \n    for _ in range(row_lookup):\n        new_line = str(input().strip())\n        lookup.append(new_line)\n    \n    row_pattern,col_pattern = [int(x) for x in input().strip().split(' ')]\n    pattern = []\n    \n    for _ in range(row_pattern):\n        new_line = str(input().strip())\n        pattern.append(new_line)\n    \n    last_lookup = row_lookup-1\n    last_pattern = row_pattern-1\n    \n    i = 0\n    answer = \"NO\"\n    for i in range(row_lookup):\n        for j in range(row_pattern):\n            if j == last_pattern and pattern[j] in lookup[i]:\n                answer = \"YES\"\n                i = last_lookup\n                break\n            if pattern[j] in lookup[i]:\n                i += 1\n                col_matching = lookup[i].\n                continue\n            else:\n                break\n        if i == last_lookup:\n            break\n    print(answer)\n    \n\n","offset":902,"fileType":"python3","requestStartTime":1517925460760}}
{"body": {"column":2,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input([1,2]))\nN.\n\n","offset":57,"fileType":"python3","requestStartTime":1517925542364}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef digitSum(n, k):\n    # Complete this function\n    total = n.\n    while len(n) > 1:\n        total\n\nif __name__ == \"__main__\":\n    n, k = input().strip().split(' ')\n    n, k = [str(n), int(k)]\n    result = digitSum(n, k)\n    print(result)\n\n\n","offset":93,"fileType":"python3","requestStartTime":1517925583981}}
{"body": {"column":13,"line":32,"wordToComplete":"","code":"\ns = int(input())\np = int(input())\nc = int(input())\nn = int(input())\nm = p\n\nboard_left = \"r\"*p\nboard_right = \"b\"*p\nspaces = \"_\"*(s-2*p)\nboard = board_left+spaces+board_right\n\nround = 0\n\nwhile round<=n:\n    print(board)\n    if m>p: m-=p\n    round+=1\n    ##from left\n    #find player\n    p_count = 0\n    p_pos = 0\n    while p_count<m:\n        if board[p_pos]!=\"_\":\n            p_count+=1\n            player = board[p_pos]\n            last_pos = p_pos\n        p_pos+=1\n    print (player,last_pos)\n    \n    ##make move if possible\n    #empty space in front?\n    if p_pos>\n    \n    \n    ##from right\n    \n    \n    m+=c\n    \n\n\n","offset":568,"fileType":"python3","requestStartTime":1517925630443}}
{"body": {"column":7,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef simpleArraySum(n, ar):\n    ar.\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = simpleArraySum(n, ar)\nprint(result)\n\n\n","offset":64,"fileType":"python3","requestStartTime":1517925848965}}
{"body": {"column":22,"line":8,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor _ in range(n):\n    op, val = input().\n\n","offset":105,"fileType":"python3","requestStartTime":1517925876260}}
{"body": {"column":12,"line":10,"wordToComplete":"d.\"","code":"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor _ in range(n):\n    op, val = input().split()\n    \n    eval(\"d.\")\n\n","offset":130,"fileType":"python3","requestStartTime":1517925890019}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor _ in range(n):\n    op, val = input().split()\n    \n    eval(\"d.{}\".)\n\n","offset":134,"fileType":"python3","requestStartTime":1517925893570}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor _ in range(n):\n    th = input().\n    \n    eval(\"d.{}({})\".format(op, val))\n    \nfor i in d:\n    print(i, end = \" \")\n\n","offset":100,"fileType":"python3","requestStartTime":1517926037238}}
{"body": {"column":71,"line":10,"wordToComplete":"d.\"","code":"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor _ in range(n):\n    th = input().split()\n    \n    eval(\"d.{}({})\".format(th[0], th[1])) if len(th) == 2 else eval(\"d.\")\n    \nfor i in d:\n    print(i, end = \" \")\n\n","offset":184,"fileType":"python3","requestStartTime":1517926078428}}
{"body": {"column":77,"line":10,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nd = deque()\n\nfor _ in range(n):\n    th = input().split()\n    \n    eval(\"d.{}({})\".format(th[0], th[1])) if len(th) == 2 else eval(\"d.{}()\".)\n    \nfor i in d:\n    print(i, end = \" \")\n\n","offset":190,"fileType":"python3","requestStartTime":1517926087277}}
{"body": {"column":43,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ng = int(input().strip())\nfor a0 in range(g):\n    n,m,x = input().strip().split(' ')\n    n,m,x = [int(n),int(m),int(x)]\n    a = list(map(int, input().strip().split(' ')))\n    b = list(map(int, input().strip().split(' ')))\n    # your code goes here\n    x = 0\n    y = 0\n    z = 0\n    total = 0\n    \n    while total <= x:\n        if a[x] <= b[y] and (total+a[x]) > :\n            x += 1\n            z += 1\n            total += \n    print(x)\n\n\n","offset":392,"fileType":"python3","requestStartTime":1517926150996}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\narr = []\nfor arr_i in range(6):\n    arr_t = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n    arr.append(arr_t)\n\narr_sum = 0\nfor i in range(4):\n    for j in range(4):\n        sumres  =   arr[ i ][j+1] + arr[ i ][j+2] + arr[ i ][j+1]   \\\n                                  + arr[i+1][j+1]                   \\\n                    arr[i+2][ j ] + arr[i+2][j+1] + arr[i+2][j+2]\n        arr_sum .\n\n","offset":434,"fileType":"python3","requestStartTime":1517926151911}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\narr = []\nfor arr_i in range(6):\n    arr_t = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n    arr.append(arr_t)\n\narr_sum = 0\nfor i in range(4):\n    for j in range(4):\n        sumres  =   arr[ i ][j+1] + arr[ i ][j+2] + arr[ i ][j+1]   \\\n                                  + arr[i+1][j+1]                   \\\n                    arr[i+2][ j ] + arr[i+2][j+1] + arr[i+2][j+2]\n        arr_sum.\n\n","offset":433,"fileType":"python3","requestStartTime":1517926152701}}
{"body": {"column":25,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().)\n\n","offset":58,"fileType":"python3","requestStartTime":1517926249343}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.\n\n","offset":77,"fileType":"python3","requestStartTime":1517926262319}}
{"body": {"column":25,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.array([input().])\n\n","offset":92,"fileType":"python3","requestStartTime":1517926287712}}
{"body": {"column":33,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.array([input().strip().])\n\n","offset":100,"fileType":"python3","requestStartTime":1517926293313}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.array([input().strip().split() for _ in range(n,p)], int)\narr1 = np.\n\n","offset":145,"fileType":"python3","requestStartTime":1517926337232}}
{"body": {"column":25,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.array([input().strip().split() for _ in range(n,p)], int)\narr1 = np.array([input().])\n\n","offset":160,"fileType":"python3","requestStartTime":1517926343367}}
{"body": {"column":33,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.array([input().strip().split() for _ in range(n,p)], int)\narr1 = np.array([input().strip().])\n\n","offset":168,"fileType":"python3","requestStartTime":1517926345703}}
{"body": {"column":15,"line":1,"wordToComplete":"","code":"\nword = input().# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":17,"fileType":"python3","requestStartTime":1517926349782}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m,p = map(int, input().split())\narray= np.array([input().strip().split() for _ in range(n,p)], int)\narr1 = np.array([input().strip().split() for _ in range(m,p)], int)\nprint(np.)\n\n","offset":212,"fileType":"python3","requestStartTime":1517926364754}}
{"body": {"column":7,"line":2,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninput(.)\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":50,"fileType":"python3","requestStartTime":1517926383303}}
{"body": {"column":17,"line":2,"wordToComplete":"","code":"\nword = input()\nwordLower = word.# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":34,"fileType":"python3","requestStartTime":1517926401840}}
{"body": {"column":25,"line":3,"wordToComplete":"","code":"\nfor i in range(int(input())):\n    n = int(input())\n    list(map(int,input().))\n\n","offset":78,"fileType":"python3","requestStartTime":1517926405124}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input()\ninputString.\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":77,"fileType":"python3","requestStartTime":1517926417033}}
{"body": {"column":39,"line":7,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().])\n    \n\n","offset":121,"fileType":"python3","requestStartTime":1517926470101}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input(.\ninputString.lower()\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nprint(inputString)\n\n","offset":64,"fileType":"python3","requestStartTime":1517926505676}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().\ninputString.lower()\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nprint(inputString)\n\n","offset":65,"fileType":"python3","requestStartTime":1517926535726}}
{"body": {"column":15,"line":2,"wordToComplete":"","code":"\n# read in word and convert to lower case\nword = input().\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":58,"fileType":"python3","requestStartTime":1517926550348}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    while d[1] >\n    \n\n","offset":147,"fileType":"python3","requestStartTime":1517926582459}}
{"body": {"column":34,"line":8,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    while d[1] >= d[-1] or d[-1] >\n    \n\n","offset":165,"fileType":"python3","requestStartTime":1517926614716}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    while d[0] >= d[-1] or d[-1] >= d[0]:\n        if d[0] >\n    \n\n","offset":190,"fileType":"python3","requestStartTime":1517926630940}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    while d[0] >= d[-1] or d[-1] >= d[0]:\n        if d[0] >= d[-1]:\n            d.\n    \n\n","offset":213,"fileType":"python3","requestStartTime":1517926645026}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\n# read in word and convert to lower case\nword = str(input())\nLC = word.\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":73,"fileType":"python3","requestStartTime":1517926654739}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    while d[0] >= d[-1] or d[-1] >= d[0]:\n        if d[0] >= d[-1]:\n            d.popleft()\n        elif d[-1] >\n    \n\n","offset":243,"fileType":"python3","requestStartTime":1517926661289}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    while d[0] >= d[-1] or d[-1] >= d[0]:\n        if d[0] >= d[-1]:\n            d.popleft()\n        elif d[-1] >= d[0]:\n            d.\n    \n\n","offset":265,"fileType":"python3","requestStartTime":1517926670408}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\noutputString = \n# for each letter in the word\nFor eachChar in inputString\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter == a :\n        # convert the letter to uppercase and replace\n        eachChar.\n# print the output string\nprint(inputString)\n\n","offset":392,"fileType":"python3","requestStartTime":1517926669853}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\noutputString = \n# for each letter in the word\nFor eachChar in inputString\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter == a :\n        # convert the letter to uppercase and replace\n        char.er()\n# print the output string\nprint(inputString)\n\n","offset":388,"fileType":"python3","requestStartTime":1517926679821}}
{"body": {"column":34,"line":7,"wordToComplete":"","code":"\ninput = input()\ninputString = input.lower() # read in word and convert to lower case\nvowels = \"aeiouy\"\n\nfor k in inputString:\n    if k in vowels:\n        inputString = inputstring.\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":182,"fileType":"python3","requestStartTime":1517926735197}}
{"body": {"column":15,"line":2,"wordToComplete":"","code":"\n# read in word and convert to lower case\nword = input().\nLowerCase = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":58,"fileType":"python3","requestStartTime":1517926755438}}
{"body": {"column":25,"line":4,"wordToComplete":"","code":"\nqtd = raw_input()\nfor x in range(0,qtd):\n    raw_input = input()\n    splitted = raw_input.\n\n","offset":92,"fileType":"python3","requestStartTime":1517926780520}}
{"body": {"column":43,"line":7,"wordToComplete":"","code":"\ninput = input()\ninputString = input.lower() # read in word and convert to lower case\nvowels = \"aeiouy\"\n\nfor k in inputString:\n    if k in vowels:\n        inputString = inputstring.replace(.)\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":191,"fileType":"python3","requestStartTime":1517926850127}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nqtd = raw_input()\nphones = {}\nqueries = list()\nfor x in range(0,qtd):\n    raw_input = input()\n    splitted = raw_input.split(\" \")\n    phones[splitted[0]] = splitted[1]\n\nfor x in range(0,qtd):\n    raw_input = input()\n    queries.\n\n","offset":230,"fileType":"python3","requestStartTime":1517926910745}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    k=[0]*2\n    h = [a0,a1,a2]\n    v = [b0,b1,b2]\n    for a in zip(h,v):\n        return a.\n        \n    # Complete this function\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":155,"fileType":"python3","requestStartTime":1517926997843}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\n\"\"\"Q2) A single line of five space separated lowercase letters will be entered. Output the number of alphabet positions between the alphabetically least and the alphabetically greatest letter in the list. For example if the letters b and h are these least and greatest alphabetically then the output will be 6 because you have to count on six letters starting from b to reach h.\"\"\"\n\nletters = input().\n\n","offset":403,"fileType":"python3","requestStartTime":1517927028658}}
{"body": {"column":43,"line":7,"wordToComplete":"","code":"\ninput = input()\ninputString = input.lower() # read in word and convert to lower case\nvowels = \"aeiouy\"\n\nfor letter in inputString:\n    if letter in vowels:\n        inputString = inputstring.replace(.)\nprint(inputString)\n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":201,"fileType":"python3","requestStartTime":1517927032641}}
{"body": {"column":50,"line":7,"wordToComplete":"","code":"\ninput = input()\ninputString = input.lower() # read in word and convert to lower case\nvowels = \"aeiouy\"\n\nfor letter in inputString:\n    if letter in vowels:\n        inputString = inputstring.replace(letter).\nprint(inputString)\n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":208,"fileType":"python3","requestStartTime":1517927079628}}
{"body": {"column":11,"line":13,"wordToComplete":"","code":"\n\"\"\"Q2) A single line of five space separated lowercase letters will be entered. Output the number of alphabet positions between the alphabetically least and the alphabetically greatest letter in the list. For example if the letters b and h are these least and greatest alphabetically then the output will be 6 because you have to count on six letters starting from b to reach h.\"\"\"\n\nletters = input().split()\n\nletter1 = letters[0]\nletter2 = letters[1]\nletter3 = letters[2]\nletter4 = letters[3]\nletter5 = letters[4]\n\nletterlist = [letter1,letter2,letter3,letter4,letter5]\n\nletterlist.\n\n","offset":585,"fileType":"python3","requestStartTime":1517927115440}}
{"body": {"column":6,"line":16,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    f = max(d[0], d[-1])\n    while len(d) and (f >= d[-1] or f >= d[0]):\n        if d[0] >= d[-1]:\n            f = d[0]\n            d.popleft()\n        elif d[-1] >= d[0]:\n            f = d[-1]\n            d.pop()\n    d.\n    print(\"Yes\") if not len(d) else print(\"No\")\n    \n\n","offset":351,"fileType":"python3","requestStartTime":1517927176912}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \n# read in word and convert to lower case\nword = input().strip()\nLowerCase = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor L in LowerCase:\n    if L is in vowels:\n        replace(L.)\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":271,"fileType":"python3","requestStartTime":1517927184767}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\nn = raw_input()\nphone_book = {}\nfor i in range(0,int(n)):\n    new_input = raw_input().split()\n    phone_book[new_input[0]] = new_input[1]\n    \nwhile True:\n    try:\n        test_input = raw_input()\n    if test_input in phone_book:\n        print(test_input + '=' + phone_book[test_input])\n    else:\n        print(\"Not found\")\n        \n\n","offset":174,"fileType":"python3","requestStartTime":1517927249810}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"\nn = raw_input()\nphone_book = {}\nfor i in range(0,int(n)):\n    new_input = raw_input().split()\n    phone_book[new_input[0]] = new_input[1]\n    \nwhile True:\n    try:\n        test_input = raw_input()\n        if test_input in phone_book:\n        print(test_input + '=' + phone_book[test_input])\n    else:\n        print(\"Not found\")\n        \n\n","offset":244,"fileType":"python3","requestStartTime":1517927250201}}
{"body": {"column":8,"line":12,"wordToComplete":"else","code":"\nn = raw_input()\nphone_book = {}\nfor i in range(0,int(n)):\n    new_input = raw_input().split()\n    phone_book[new_input[0]] = new_input[1]\n    \nwhile True:\n    try:\n        test_input = raw_input()\n        if test_input in phone_book:\n            print(test_input + '=' + phone_book[test_input])\n    else:\n        print(\"Not found\")\n        \n\n","offset":305,"fileType":"python3","requestStartTime":1517927250399}}
{"body": {"column":8,"line":13,"wordToComplete":"","code":"\nn = raw_input()\nphone_book = {}\nfor i in range(0,int(n)):\n    new_input = raw_input().split()\n    phone_book[new_input[0]] = new_input[1]\n    \nwhile True:\n    try:\n        test_input = raw_input()\n        if test_input in phone_book:\n            print(test_input + '=' + phone_book[test_input])\n        else:\n        print(\"Not found\")\n        \n\n","offset":319,"fileType":"python3","requestStartTime":1517927250595}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"\nn = raw_input()\nphone_book = {}\nfor i in range(0,int(n)):\n    new_input = raw_input().split()\n    phone_book[new_input[0]] = new_input[1]\n    \nwhile True:\n    try:\n        test_input = raw_input()\n        if test_input in phone_book:\n            print(test_input + '=' + phone_book[test_input])\n        else:\n            print(\"Not found\")\n        \n\n","offset":323,"fileType":"python3","requestStartTime":1517927250789}}
{"body": {"column":67,"line":7,"wordToComplete":"","code":"\ninput = input()\ninputString = input.lower() # read in word and convert to lower case\nvowels = \"aeiouy\"\n\nfor letter in inputString:\n    if letter in vowels:\n        inputString = inputString.replace(inputString, inputString.).upper()\nprint(inputString)\n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":225,"fileType":"python3","requestStartTime":1517927298576}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    arr.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":59,"fileType":"python3","requestStartTime":1517927315313}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    k=[0]*2\n    h = [a0,a1,a2]\n    v = [b0,b1,b2]\n    for a in zip(h,v):\n        a.\n    # Complete this function\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":148,"fileType":"python3","requestStartTime":1517927400548}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    f = max(d[0], d[-1])\n    while len(d) and (f >= d[-1] or f >= d[0]):\n        if d[0] >= d[-1] and f >:\n            f = d[0]\n            print(f, \"lef\")\n            d.popleft()\n        elif d[-1] >= d[0]:\n            f = d[-1]\n            print(f, \"pop\")\n            d.pop()\n    print(\"Yes\") if len(d) else print(\"No\")\n    \n\n","offset":236,"fileType":"python3","requestStartTime":1517927412718}}
{"body": {"column":38,"line":14,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nvowels = [a, e , i , o , u, y]\ninputstring = input(\"\")\nif inputstring in vowels, inputstring.\nprint(inputstring)\n\n","offset":415,"fileType":"python3","requestStartTime":1517927418500}}
{"body": {"column":34,"line":14,"wordToComplete":"","code":"\nfrom collections import deque\n\nn = int(input())\n\nfor _ in range(n):\n    input()\n    d = deque([int(x) for x in input().split()])\n    f = max(d[0], d[-1])\n    while len(d) and (f >= d[-1] or f >= d[0]):\n        if d[0] >= d[-1] and f >= d[0]:\n            f = d[0]\n            print(f, \"lef\")\n            d.popleft()\n        elif d[-1] >= d[0] and f >:\n            f = d[-1]\n            print(f, \"pop\")\n            d.pop()\n    print(\"Yes\") if len(d) else print(\"No\")\n    \n\n","offset":351,"fileType":"python3","requestStartTime":1517927429631}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \n# read in word and convert to lower case\nword = input().strip()\nLowerCase = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor _ in LowerCase:\n    if _ is in vowels:\n        word = input.\n       \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":274,"fileType":"python3","requestStartTime":1517927463011}}
{"body": {"column":8,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nres = []\nfor i in range(len(arr) - 1, 0, -1) :\n    res.\n\n\n","offset":176,"fileType":"python3","requestStartTime":1517927503493}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \n# read in word and convert to lower case\nword = input().strip()\nLowerCase = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor _ in LowerCase:\n    if _ is in vowels:\n        word = input(replace(.)\n       \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":283,"fileType":"python3","requestStartTime":1517927510875}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nvowels = [a, e , i , o , u, y]\ninputstring = input(\"\").\n\n\n","offset":377,"fileType":"python3","requestStartTime":1517927524582}}
{"body": {"column":43,"line":10,"wordToComplete":"If QUERY, calculates matrix[0][0][0].","code":"\ndef cubeSummation(query, matrix):\n    # get UPDATE or QUERY\n    q = query.split(' ')\n    \n    # If UPDATE, just set value and return\n    if q[0] == 'UPDATE':\n        matrix[(int(q[1])-1)][(int(q[2])-1)][(int(q[3])-1)] = int(q[4])\n        return int(q[4])\n    \n    # If QUERY, calculates matrix[0][0][0].\n    ret = 0\n    for i in range(int(q[6])):\n        ret += matrix[int(q[i])][int(q[i])][int(q[i])\n                                             \n    return ret\n        \n    \n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for i in range(t):\n        arr = list(map(int, input().strip().split(' ')))\n        n = arr[0]\n        m = arr[1]\n        matrix = [[[0 for k in range(n)] for j in range(n)] for i in range(n)]\n        result = 0\n        for j in range(m):\n            print (cubeSummation((input().strip()), matrix))\n\n\n","offset":305,"fileType":"python3","requestStartTime":1517927535372}}
{"body": {"column":44,"line":10,"wordToComplete":"If QUERY, calculates matrix[0][0][0] .","code":"\ndef cubeSummation(query, matrix):\n    # get UPDATE or QUERY\n    q = query.split(' ')\n    \n    # If UPDATE, just set value and return\n    if q[0] == 'UPDATE':\n        matrix[(int(q[1])-1)][(int(q[2])-1)][(int(q[3])-1)] = int(q[4])\n        return int(q[4])\n    \n    # If QUERY, calculates matrix[0][0][0] .\n    ret = 0\n    for i in range(int(q[6])):\n        ret += matrix[int(q[i])][int(q[i])][int(q[i])\n                                             \n    return ret\n        \n    \n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for i in range(t):\n        arr = list(map(int, input().strip().split(' ')))\n        n = arr[0]\n        m = arr[1]\n        matrix = [[[0 for k in range(n)] for j in range(n)] for i in range(n)]\n        result = 0\n        for j in range(m):\n            print (cubeSummation((input().strip()), matrix))\n\n\n","offset":306,"fileType":"python3","requestStartTime":1517927535840}}
{"body": {"column":45,"line":10,"wordToComplete":"If QUERY, calculates matrix[0][0][0] ..","code":"\ndef cubeSummation(query, matrix):\n    # get UPDATE or QUERY\n    q = query.split(' ')\n    \n    # If UPDATE, just set value and return\n    if q[0] == 'UPDATE':\n        matrix[(int(q[1])-1)][(int(q[2])-1)][(int(q[3])-1)] = int(q[4])\n        return int(q[4])\n    \n    # If QUERY, calculates matrix[0][0][0] ..\n    ret = 0\n    for i in range(int(q[6])):\n        ret += matrix[int(q[i])][int(q[i])][int(q[i])\n                                             \n    return ret\n        \n    \n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for i in range(t):\n        arr = list(map(int, input().strip().split(' ')))\n        n = arr[0]\n        m = arr[1]\n        matrix = [[[0 for k in range(n)] for j in range(n)] for i in range(n)]\n        result = 0\n        for j in range(m):\n            print (cubeSummation((input().strip()), matrix))\n\n\n","offset":307,"fileType":"python3","requestStartTime":1517927535985}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nres = []\nfor i in range(len(arr) - 1, -1, -1) :\n    res.append(arr[i])\nprint(' '.res)\n\n\n","offset":202,"fileType":"python3","requestStartTime":1517927550989}}
{"body": {"column":46,"line":10,"wordToComplete":"If QUERY, calculates matrix[0][0][0] ...","code":"\ndef cubeSummation(query, matrix):\n    # get UPDATE or QUERY\n    q = query.split(' ')\n    \n    # If UPDATE, just set value and return\n    if q[0] == 'UPDATE':\n        matrix[(int(q[1])-1)][(int(q[2])-1)][(int(q[3])-1)] = int(q[4])\n        return int(q[4])\n    \n    # If QUERY, calculates matrix[0][0][0] ...\n    ret = 0\n    for i in range(int(q[6])):\n        ret += matrix[int(q[i])][int(q[i])][int(q[i])\n                                             \n    return ret\n        \n    \n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for i in range(t):\n        arr = list(map(int, input().strip().split(' ')))\n        n = arr[0]\n        m = arr[1]\n        matrix = [[[0 for k in range(n)] for j in range(n)] for i in range(n)]\n        result = 0\n        for j in range(m):\n            print (cubeSummation((input().strip()), matrix))\n\n\n","offset":308,"fileType":"python3","requestStartTime":1517927536850}}
{"body": {"column":17,"line":40,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(entry[2])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decide = sorted([\n        [\n            entry[0],\n            entry[1],\n            entry[2],\n            fsum([entry[3], entry[4], entry[5]]) if (entry[3] > 0 or entry[5] <0) else 0 \n        ] for entry in evaluate\n        ],\n        key = lambda x: x[-1]\n    )\n    \n    call = []\n    \n    for entry in decide[0:3]:\n        if entry[3] < 0 and m//entry[2] > 0:\n            m -= (m//entry[2])*entry[2]\n            call.('{0} BUY {1}'.format(\n                entry[0],\n                int(m//entry[2])\n                ))\n    \n    \n    \n    #print (*decide, sep='\\n')\n        \n        \n\n","offset":960,"fileType":"python3","requestStartTime":1517927596377}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nres = []\nfor i in range(len(arr) - 1, -1, -1) :\n    res.append(arr[i])\nprint(' ,'.)\n\n\n","offset":203,"fileType":"python3","requestStartTime":1517927647397}}
{"body": {"column":22,"line":47,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n\nif __name__ == '__main__':\n\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(entry[2])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decide = sorted([\n        [\n            entry[0],\n            entry[1],\n            entry[2],\n            fsum([entry[3], entry[4], entry[5]]) if (entry[3] > 0 or entry[5] <0) else 0 \n        ] for entry in evaluate\n        ],\n        key = lambda x: x[-1]\n    )\n    \n    call = []\n    \n    for entry in decide[0:3]:\n        if entry[3] < 0 and m//entry[2] > 0:\n            m -= (m//entry[2])*entry[2]\n            call.append('{0} BUY {1}'.format(\n                entry[0],\n                int(m//entry[2])\n                ))\n    \n    \n    print(len(call))\n    for entry in call:\n    \n    #print (*decide, sep='\\n')\n        \n        \n\n","offset":1120,"fileType":"python3","requestStartTime":1517927616264}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.\n\n","offset":75,"fileType":"python3","requestStartTime":1517927721111}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    k=[0]*2\n    h = [a0,a1,a2]\n    v = [b0,b1,b2]\n    for a in zip(h,v):\n        a = list(a).\n        return a\n    # Complete this function\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":158,"fileType":"python3","requestStartTime":1517927721586}}
{"body": {"column":15,"line":5,"wordToComplete":"insert","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert\n\n","offset":81,"fileType":"python3","requestStartTime":1517927728191}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0,5)\n    list.\n    print(list)\n\n","offset":96,"fileType":"python3","requestStartTime":1517927783932}}
{"body": {"column":18,"line":6,"wordToComplete":"1.","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0,5)\n    list.insert(1.)\n    print(list)\n\n","offset":105,"fileType":"python3","requestStartTime":1517927788474}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\n\nprev = ''\nlargest = 0\nfor letter in bin(n):\n    if letter.\n\n","offset":115,"fileType":"python3","requestStartTime":1517927789158}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    k=[0]*2\n    h = [a0,a1,a2]\n    v = [b0,b1,b2]\n    for a in zip(h,v):\n        a = list(a)\n        a.\n        return a\n    # Complete this function\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":168,"fileType":"python3","requestStartTime":1517927790148}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.\n    print(list)\n\n","offset":120,"fileType":"python3","requestStartTime":1517927800219}}
{"body": {"column":9,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.\n\n","offset":158,"fileType":"python3","requestStartTime":1517927818300}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.\n\n","offset":177,"fileType":"python3","requestStartTime":1517927824314}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.\n\n","offset":196,"fileType":"python3","requestStartTime":1517927830714}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.append(1)\n    list.\n\n","offset":215,"fileType":"python3","requestStartTime":1517927840746}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\noutputString = inputString\nvowels = a,e,i,o,u\n# for letter in inputString\nfor char in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter == vowels :\n        # convert the letter to uppercase and replace\n        replace().\n# print the output string\nprint(inputString)\n\n","offset":424,"fileType":"python3","requestStartTime":1517927845720}}
{"body": {"column":9,"line":13,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.append(1)\n    list.sort()\n    list.\n\n","offset":231,"fileType":"python3","requestStartTime":1517927846748}}
{"body": {"column":9,"line":14,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.append(1)\n    list.sort()\n    print(list)\n    list.\n\n","offset":247,"fileType":"python3","requestStartTime":1517927858989}}
{"body": {"column":9,"line":15,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.append(1)\n    list.sort()\n    print(list)\n    list.pop()\n    list.\n\n","offset":262,"fileType":"python3","requestStartTime":1517927863631}}
{"body": {"column":55,"line":3,"wordToComplete":"","code":"\nfrom math import fsum\n\ndef printTransactions (m, k , d, name, owned, prieces):\n\n\n\"\"\"\nif __name__ == '__main__':\n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    data_raw     = [input().split(' ') for i in range(k)]\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(entry[2])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decide = sorted([\n        [\n            entry[0],\n            entry[1],\n            entry[2],\n            fsum([entry[3], entry[4], entry[5]]) if (entry[3] > 0 or entry[5] <0) else 0 \n        ] for entry in evaluate\n        ],\n        key = lambda x: x[-1]\n    )\n    \n    call = []\n    \n    for entry in decide[0:3]:\n        if (entry[3] < 0 and (m//entry[2]) > 0):\n            \n            call.append('{0} BUY {1}'.format(\n                entry[0],\n                int(m//entry[2])\n                ))\n            \n            m -= (m//entry[2])*entry[2]\n    \n    \n    print(len(call))\n    for entry in call:\n        print(entry)\n    \n\"\"\"\n        \n        \n\n","offset":80,"fileType":"python3","requestStartTime":1517927944140}}
{"body": {"column":0,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\n\nprev = ''\nlargest = 0\ncurrent_total = 0\nfor letter in bin(n):\n    if letter == '1' and prev == '1':\n        current_total += 1\n    elif letter == '1' and prev != '1':\n        prev = '1'\n        current_total = 1\n    else:\n        prev = letter\n        current_total = 0\nif current_total > largest:\n            largest = current_total\nprint(largest)\n\n","offset":327,"fileType":"python3","requestStartTime":1517927979156}}
{"body": {"column":4,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\n\nprev = ''\nlargest = 0\ncurrent_total = 0\nfor letter in bin(n):\n    if letter == '1' and prev == '1':\n        current_total += 1\n    elif letter == '1' and prev != '1':\n        prev = '1'\n        current_total = 1\n    else:\n        prev = letter\n        current_total = 0\n    if current_total > largest:\n            largest = current_total\nprint(largest)\n\n","offset":331,"fileType":"python3","requestStartTime":1517927979812}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \n# read in word and convert to lower case\nword = input().strip()\neachChar = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor eachChar in word:\n    if eachChar in vowels:\n        word = string.replace.upper)\n       \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nprint(word)\n\n","offset":280,"fileType":"python3","requestStartTime":1517928080965}}
{"body": {"column":41,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hurdleRace(k, height):\n    return(k-max(height) if max(height) >)\n\nif __name__ == \"__main__\":\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    height = list(map(int, input().strip().split(' ')))\n    result = hurdleRace(k, height)\n    print(result)\n\n\n","offset":98,"fileType":"python3","requestStartTime":1517928090148}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    min = 0\n    max = 0\n    seg = 0\n    for d in doors:\n        if d == 1:\n            max += 1\n            seg += 1\n        else:\n            min += math.\n    \n    return (min, max)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":261,"fileType":"python3","requestStartTime":1517928247056}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    min = 0\n    max = 0\n    seg = 0\n    for d in doors:\n        if d == 1:\n            max += 1\n            seg += 1\n        else:\n            min += math.\n    \n    return (min, max)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":261,"fileType":"python3","requestStartTime":1517928259756}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nfrom math import fsum\n\n\n    \n    \n#!/usr/bin/py\ndef printTransactions(m, k, d, name, owned, prices):    \n    m, k, d      = [int(entry) for entry in input().split(' ')]\n    \n    data_raw     = zip(name.)\n    \n    evaluate     = [\n        [\n            str(entry[0]),\n            int(entry[1]),\n            float(entry[2])\n        ] + sorted([\n            float(float(entry[2])-float(entry[3])),\n            float(float(entry[3])-float(entry[4])),\n            float(float(entry[4])-float(entry[5])),\n        ])\n        \n        for entry in data_raw\n        ]\n    \n    decide = sorted([\n        [\n            entry[0],\n            entry[1],\n            entry[2],\n            fsum([entry[3], entry[4], entry[5]]) if (entry[3] > 0 or entry[5] <0) else 0 \n        ] for entry in evaluate\n        ],\n        key = lambda x: x[-1]\n    )\n    \n    call = []\n    \n    for entry in decide[0:3]:\n        if (entry[3] < 0 and (m//entry[2]) > 0):\n            \n            call.append('{0} BUY {1}'.format(\n                entry[0],\n                int(m//entry[2])\n                ))\n            \n            m -= (m//entry[2])*entry[2]\n    \n    \n    print(len(call))\n    for entry in call:\n        print(entry)\n    \n    \n    \n    \n\n\nif __name__ == '__main__':\n    m, k, d = [float(i) for i in raw_input().strip().split()]\n    k = int(k)\n    d = int(d)\n    names = []\n    owned = []\n    prices = []\n    for data in range(k):\n        temp = raw_input().strip().split()\n        names.append(temp[0])\n        owned.append(int(temp[1]))\n        prices.append([float(i) for i in temp[2:7]])\n\n    printTransactions(m, k, d, names, owned, prices)    \n\n        \n\n","offset":204,"fileType":"python3","requestStartTime":1517928251252}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list = [N]\n    list.\n    list.insert(0 ,5)\n    list.insert(1, 10)\n    list.insert(0, 6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.append(1)\n    list.sort()\n    print(list)\n    list.pop()\n    list.reverse()\n    print(list)\n\n","offset":75,"fileType":"python3","requestStartTime":1517928287870}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  bestAverageGrade(scores):\n    names = []\n    for i in scores:\n        if names.\n    return scores\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_scores_rows = 0\n_scores_cols = 0\n_scores_rows = int(input())\n_scores_cols = int(input())\n\n_scores = []\nfor _scores_i in range(_scores_rows):\n    _scores_temp = [str(_scores_t) for _scores_t in input().strip().split(' ')]\n    _scores.append(_scores_temp)\n\nres = bestAverageGrade(_scores)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":156,"fileType":"python3","requestStartTime":1517924743966}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef sockMerchant(n, ar):\n    # Complete this function\n    ar.\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":91,"fileType":"python3","requestStartTime":1517928358066}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\na = int(input())\n\ns = set()\n\nfor i in range(0, a):\n    a.\n    \n\n","offset":59,"fileType":"python3","requestStartTime":1517928370062}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\na = int(input())\n\ns = set()\n\nfor i in range(0, a):\n    s.\n    \n\n","offset":59,"fileType":"python3","requestStartTime":1517928371845}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef sockMerchant(n, ar):\n    # Complete this function\n    ar.sort()\n    count = 0\n    for el in ar:\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":129,"fileType":"python3","requestStartTime":1517928378147}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        letter.\n# print the output string\nprint(inputString)\n\n","offset":394,"fileType":"python3","requestStartTime":1517928412102}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        letter.upper\n        .replace(letter)\n# print the output string\nprint(inputString)\n\n","offset":409,"fileType":"python3","requestStartTime":1517928433470}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    max_ = doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":82,"fileType":"python3","requestStartTime":1517928468979}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \nimport string\n# read in word and convert to lower case\nword = input().strip()\neachChar = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor eachChar in word:\n    if eachChar in vowels:\n        word = word.\n       \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nprint(word)\n\n","offset":292,"fileType":"python3","requestStartTime":1517928527828}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \nimport string\n# read in word and convert to lower case\nword = input().strip()\neachChar = word.lower\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor eachChar in word:\n    if eachChar in vowels:\n        word = word.replace(vowels.)\n       \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nprint(word)\n\n","offset":307,"fileType":"python3","requestStartTime":1517928544436}}
{"body": {"column":12,"line":4,"wordToComplete":"0.","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n    list=[0.]\n    list.int(insert(1, 10))\n    list.int(insert(0, 6))\n    print(list)\n    list.remove(6)\n    list.int(append(9))\n    list.int(append(1))\n    list.sort()\n    print(list)\n    list.pop()\n    list.reverse()\n    print(list)\n\n","offset":63,"fileType":"python3","requestStartTime":1517928648841}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nvowels = [a, e , i , o , u, y]\nvowels2 = [A, E , I , O , U, Y]\ninputstring = input(\"\")\nif inputstring == vowels,\n   inputsring.\nprint(inputstring)\n\n\n","offset":449,"fileType":"python3","requestStartTime":1517928664043}}
{"body": {"column":22,"line":6,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \n\ncount = int(input())\nfor i in range(0, count):\n    command = input().\n\n","offset":125,"fileType":"python3","requestStartTime":1517928709192}}
{"body": {"column":55,"line":2,"wordToComplete":"Hello {0} {1}! You just delved into python.\"","code":"\ndef print_full_name(a, b):\n    print (\"Hello {0} {1}! You just delved into python.\")\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":84,"fileType":"python3","requestStartTime":1517928811587}}
{"body": {"column":57,"line":2,"wordToComplete":"","code":"\ndef print_full_name(a, b):\n    print (\"Hello {0} {1}! You just delved into python.\".)\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":86,"fileType":"python3","requestStartTime":1517928812833}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \n\ncount = int(input())\nfor i in range(0, count):\n    command = input().split()\n    if(command[0] == pop):\n        s.\n\n","offset":170,"fileType":"python3","requestStartTime":1517928749870}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"] \nimport string\n# read in word and convert to lower case\nword = input().strip()\neachChar = word.\n# start with an empty output string\noutputString = \" \"\n# for each letter in the word\nfor eachChar in word:\n    if eachChar in vowels:\n        outputString= word.replace(vowels.)\n       \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nprint(word)\n\n","offset":132,"fileType":"python3","requestStartTime":1517928796546}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \n\ncount = int(input())\nfor i in range(0, count):\n    command = input().split()\n    if(command[0] == 'pop'):\n        s.pop()\n    elif(command[0] == 'remove'):\n        s.\n\n","offset":222,"fileType":"python3","requestStartTime":1517928804382}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \n\ncount = int(input())\nfor i in range(0, count):\n    command = input().split()\n    if(command[0] == 'pop'):\n        s.pop()\n    elif(command[0] == 'remove'):\n        s.remove(int(command[1]))\n    elif(command[0] == 'discard'):\n        s.\n\n","offset":291,"fileType":"python3","requestStartTime":1517928859821}}
{"body": {"column":18,"line":4,"wordToComplete":"","code":"\nimport string\n# read in word and convert to lower case\nword = input()\nalphabet = string.\n\n# start with an empty output string\n\n# for each letter in the word\n\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n\n","offset":90,"fileType":"python3","requestStartTime":1517928886920}}
{"body": {"column":8,"line":13,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \n\ncount = int(input())\nfor i in range(0, count):\n    command = input().split()\n    if(command[0] == 'pop'):\n        s.pop()\n    elif(command[0] == 'remove'):\n        s.remove(int(command[1]))\n    elif(command[0] == 'discard'):\n        s.discard(int(command[1]))\nprint(s.)\n    \n\n","offset":324,"fileType":"python3","requestStartTime":1517928936925}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n\n    def cross(self, no):\n        no.\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n","offset":157,"fileType":"python3","requestStartTime":1517929035651}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n\n    def cross(self, no):\n        no.\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n","offset":157,"fileType":"python3","requestStartTime":1517929036061}}
{"body": {"column":17,"line":4,"wordToComplete":"","code":"\nimport string\n# read in word and convert to lower case\nword = input()\nLowerCase = word.\nvowels = \"aeiou\"\n\n\n# start with an empty output string\noutputString = \" \"\n\n# for each letter in the word\nfor Char in word:\n    if Char in vowels:\n        \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n\n","offset":89,"fileType":"python3","requestStartTime":1517929098244}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ndef count_substring(string, sub_string):\n    return string.\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":61,"fileType":"python3","requestStartTime":1517929207925}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\nvowels2 = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]\ninputstring = input(\"\")\nfor char in inputstring:\n    if char = vowel.\n\nprint(inputstring)\n\n\n","offset":472,"fileType":"python3","requestStartTime":1517929155935}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    # Complete this function\n    dimen =  a.\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":101,"fileType":"python3","requestStartTime":1517929116345}}
{"body": {"column":30,"line":1,"wordToComplete":"","code":"\nstring, sub_string = (input().)\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":32,"fileType":"python3","requestStartTime":1517929326882}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ns = input().strip()\nn = int(input().strip())\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    for c in s:\n\n\n","offset":166,"fileType":"python3","requestStartTime":1517929261112}}
{"body": {"column":46,"line":1,"wordToComplete":"","code":"\nstring, sub_string = (input().strip(),input().)\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":48,"fileType":"python3","requestStartTime":1517929333317}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ns = input().strip()\nn = int(input().strip())\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    for c in s:\n        print(c.int(c))\n\n\n","offset":183,"fileType":"python3","requestStartTime":1517929288496}}
{"body": {"column":19,"line":2,"wordToComplete":"","code":"import textwrap\ndef wrap(string, max_width):\n    print(textwrap.)\n    return \nif __name__ == '__main__':\n    string, max_width = input(), int(input())\n    result = wrap(string, max_width)\n    print(result)\n","offset":65,"fileType":"python3","requestStartTime":1517929301544}}
{"body": {"column":17,"line":2,"wordToComplete":"","code":"\n# read in word and convert to lower case\nstring = input().\n# start with an empty output string\noutput = string \n# for each letter in the wor\nvowels = [a,e,i,o,u,y\n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":60,"fileType":"python3","requestStartTime":1517929328849}}
{"body": {"column":41,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef pattern_in_lookup(pattern,lookup):\n    if pattern == lookup:\n        return True\n    \n    row_lookup = len(lookup)\n    col_lookup = len(lookup[0])\n    \n    row_pattern = len(pattern)\n    col_pattern = len(pattern[0])\n    \n    if row_lookup < row_pattern or col_lookup < col_pattern:\n        return False\n    \n    last_lookup_row = row_lookup-1\n    last_pattern_row = row_pattern-1\n    \n    answer = False\n    for i in range(row_lookup):\n        for j in range(row_pattern):\n            if pattern[j] in lookup[i]:\n                col_matching = lookup[i].\n                new_lookup = []\n                for _ in range(i,row_lookup):\n                    new_line = lookup[i][:]\n                    lookup.append(new_line)\n            else:\n                break\n        if i == last_lookup:\n            break\n    if answer:\n        return \"YES\"\n    return \"NO\"\n\nt = int(input().strip())\nfor _ in range(t):\n    row_lookup,col_lookup = [int(x) for x in input().strip().split(' ')]\n    \n    lookup = []\n    for _ in range(row_lookup):\n        new_line = str(input().strip())\n        lookup.append(new_line)\n    \n    row_pattern,col_pattern = [int(x) for x in input().strip().split(' ')]\n    \n    pattern = []\n    for _ in range(row_pattern):\n        new_line = str(input().strip())\n        pattern.append(new_line)\n        \n    final = pattern_in_lookup(pattern,lookup)\n    print(final)\n    \n    ###\n    for i in range(row_lookup):\n        for j in range(row_pattern):\n            if j == last_pattern_row and pattern[j] in lookup[i]:\n                answer = \"YES\"\n                i = last_lookup_row\n                break\n            if pattern[j] in lookup[i]:\n                i += 1\n                continue\n            else:\n                break\n        if i == last_lookup:\n            break\n\n","offset":589,"fileType":"python3","requestStartTime":1517929371298}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        replace(letter, letter.)\n        \n# print the output string\nprint(inputString)\n\n","offset":410,"fileType":"python3","requestStartTime":1517929460131}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        .,replace(letter, letter.upper())\n        \n# print the output string\nprint(inputString)\n\n","offset":389,"fileType":"python3","requestStartTime":1517929473240}}
{"body": {"column":30,"line":1,"wordToComplete":"","code":"\nstring, sub_string = (input().)\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":32,"fileType":"python3","requestStartTime":1517929558962}}
{"body": {"column":46,"line":1,"wordToComplete":"","code":"\nstring, sub_string = (input().strip(),input().)\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":48,"fileType":"python3","requestStartTime":1517929563688}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        letter.replace(\"\",\"\").\n        \n# print the output string\nprint(inputString)\n\n","offset":409,"fileType":"python3","requestStartTime":1517929561044}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        letter.replace(\"\",\".\")\n        \n# print the output string\nprint(inputString)\n\n","offset":407,"fileType":"python3","requestStartTime":1517929601273}}
{"body": {"column":6,"line":14,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nA = lower.input()\nPrint\nLower.\n\nvowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n\n\n\n\n\n\n","offset":352,"fileType":"python3","requestStartTime":1517929650935}}
{"body": {"column":6,"line":4,"wordToComplete":"","code":"\nn = int(input())\nl = []\nfor _ in range(int(input())):\n    l.\nprint(sum([i for i in range(int(input()))]))\n\n\n","offset":62,"fileType":"python3","requestStartTime":1517929657317}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    ans = [0, doors.]\n    for i in range(len(doors)):\n        if doors[i] == 1:\n            doors[min(i + 1), len(doors) - 1] = 0\n            ans[0] += 1\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":85,"fileType":"python3","requestStartTime":1517929703348}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    a = n.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":75,"fileType":"python3","requestStartTime":1517929740314}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().\n\n\n","offset":45,"fileType":"python3","requestStartTime":1517929822769}}
{"body": {"column":30,"line":11,"wordToComplete":"vowel.\"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        letter.replace(\"vowel.\",\"vowel.upper\")\n        \n# print the output string\nprint(inputString)\n\n","offset":409,"fileType":"python3","requestStartTime":1517929760223}}
{"body": {"column":2,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ns = input().strip()\nn = int(input().strip())\nw=[]\nc=s[0]\nw.(ord(c)-96)\nfor i in range(1,len(s)):\n        print(c, )\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    \n\n\n","offset":90,"fileType":"python3","requestStartTime":1517929772171}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":126,"fileType":"python3","requestStartTime":1517929814530}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\n_ = int(input())\nprint(sum(input().))\n\n\n","offset":37,"fileType":"python3","requestStartTime":1517929842299}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        inputString.\n        \n# print the output string\nprint(inputString)\n\n","offset":399,"fileType":"python3","requestStartTime":1517930068715}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        letter.\n        \n# print the output string\nprint(inputString)\n\n","offset":394,"fileType":"python3","requestStartTime":1517930088075}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        inputString.\n        \n# print the output string\nprint(inputString)\n\n","offset":399,"fileType":"python3","requestStartTime":1517930112882}}
{"body": {"column":6,"line":2,"wordToComplete":"","code":"\nn = int(input())\nif (n>)\n\n","offset":25,"fileType":"python3","requestStartTime":1517930112178}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        inputString.replace(\"\",\".\")\n        \n# print the output string\nprint(inputString)\n\n","offset":412,"fileType":"python3","requestStartTime":1517930123219}}
{"body": {"column":23,"line":2,"wordToComplete":"","code":"\nvowels=['a','e','i','o','u']\ncharlist=input().lower.\n\n\n\n\n\n\n\n\n\n\n","offset":54,"fileType":"python3","requestStartTime":1517930167054}}
{"body": {"column":18,"line":6,"wordToComplete":"","code":"\nimport string\n# read in word and convert to lower case\nword = input()\nLowerCase = word.lower\nvowels = \"aeiou\"\nReplace = \"aeiou\".\n\n# start with an empty output string\noutputString = \" \"\n\n# for each letter in the word\nfor Char in word:\n    if Char in vowels:\n        outputString = \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n\n","offset":130,"fileType":"python3","requestStartTime":1517930178587}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(n, p):\n    # Complete this function\n    f = 0\n    r = 0\n    while(true):\nn = int(input().strip())\np = int(input().strip())\nresult = solve(n, p)\nprint(result)\n\n\n","offset":112,"fileType":"python3","requestStartTime":1517930188706}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nn = int(input())\nif (n%2)==0:\n    if(n>)\nelse if()\n\n","offset":41,"fileType":"python3","requestStartTime":1517930201020}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    print (s.)\n\n\n","offset":66,"fileType":"python3","requestStartTime":1517930281664}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        replace(inputString,\"\",\".\")\n        \n# print the output string\nprint(inputString)\n\n","offset":412,"fileType":"python3","requestStartTime":1517930223454}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    print (s.isalnum())\n    print (s.)\n\n\n","offset":90,"fileType":"python3","requestStartTime":1517930303095}}
{"body": {"column":28,"line":14,"wordToComplete":"","code":"\nimport string\n# read in word and convert to lower case\nword = input()\nLowerCase = word.lower\nvowels = \"aeiou\"\nReplace = \"aeiou\".replace(\"AEIOU\")\n\n# start with an empty output string\noutputString = \" \"\n\n# for each letter in the word\nfor Char in word:\n    if Char in vowels:\n        outputString = word.\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n\n","offset":303,"fileType":"python3","requestStartTime":1517930238070}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        # convert the letter to uppercase and replace\n        .replace(inputString,\"\",\".upper\")\n        \n# print the output string\nprint(inputString)\n\n","offset":388,"fileType":"python3","requestStartTime":1517930238270}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\nn = int(input())\nif (n%2)==0:\n    if(n>=2)&&(n<=5):\n        print(\"Not Weird\")\n    else if (n>)\nelse if()\n\n","offset":96,"fileType":"python3","requestStartTime":1517930263787}}
{"body": {"column":18,"line":4,"wordToComplete":"","code":"\n# read in word and convert to lower case\nstring = input().lower()\n# start with an empty output string\nalphabet = string.\nvowels = [a,e,i,o,u,y]\n# for each letter in the word\nfor currentChar in string: \n      if currentChar in vowels:\n            replace(vowels).upper()\nprint(outputstring)\n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":122,"fileType":"python3","requestStartTime":1517930371583}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n            str.\n        # convert the letter to uppercase and replace\n        str.replace(inputString,\"\",\"\")\n        \n# print the output string\nprint(inputString)\n\n","offset":341,"fileType":"python3","requestStartTime":1517930412448}}
{"body": {"column":64,"line":33,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nt = int(input().strip())\nfor _ in range(t):\n    row_lookup,col_lookup = [int(x) for x in input().strip().split(' ')]\n    lookup = []\n    for _ in range(row_lookup):\n        new_line = str(input().strip())\n        lookup.append(new_line)\n    \n    row_pattern,col_pattern = [int(x) for x in input().strip().split(' ')]\n    pattern = []\n    for _ in range(row_pattern):\n        new_line = str(input().strip())\n        pattern.append(new_line)\n    \n    last_lookup_row = row_lookup-1\n    last_pattern_row = row_pattern-1\n    \n    answer = \"NO\"\n    for i in range(row_lookup):\n        start_lookup_col = 0\n        for j in range(row_pattern):\n            #if j == last_pattern_row and pattern[j] in lookup[i]:\n            #    answer = \"YES\"\n            #    i = last_lookup_row\n            #    break\n            if pattern[j] in lookup[i][start_lookup_col:]:\n                #check smaller lookup here\n                start_lookup_col = lookup[i][start_lookup_col:].\n                new_lookup\n                i += 1\n                continue\n            else:\n                break\n        if i == last_lookup_row:\n            break\n    print(answer)\n    \n\n","offset":994,"fileType":"python3","requestStartTime":1517930423827}}
{"body": {"column":40,"line":12,"wordToComplete":"str.\"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor letter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if letter in vowels :\n        str.upper\n        # convert the letter to uppercase and replace\n        str.replace(inputString,\"\",\"str.\")\n        \n# print the output string\nprint(inputString)\n\n","offset":437,"fileType":"python3","requestStartTime":1517930444132}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    kt = True\n    for i in range(len(s)):\n        if s[i].\n\n\n","offset":111,"fileType":"python3","requestStartTime":1517930520799}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    kt = True\n    for i in range(len(s)):\n        if s[i].isalnum() == False: kt = False\n        if s[i].\n\n\n","offset":158,"fileType":"python3","requestStartTime":1517930560909}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    kt = True\n    for i in range(len(s)):\n        if s[i].isalnum() == False: kt = False\n        if s[i].isalpha() == False: kt = False\n        is s[i].\n\n\n","offset":205,"fileType":"python3","requestStartTime":1517930586856}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    kt = True\n    for i in range(len(s)):\n        if s[i].isalnum() == False: kt = False\n        if s[i].isalpha() == False: kt = False\n        is s[i].isdigit() == False: kt = False\n        if s[i].\n\n\n","offset":252,"fileType":"python3","requestStartTime":1517930606495}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input().strip()\n    kt = True\n    for i in range(len(s)):\n        if s[i].isalnum() == False: kt = False\n        if s[i].isalpha() == False: kt = False\n        is s[i].isdigit() == False: kt = False\n        if s[i].islower() == False: kt = False\n        if s[i].\n\n\n","offset":299,"fileType":"python3","requestStartTime":1517930627612}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"import numpy\ndef arrays(arr):\n    # complete this function\n    # use numpy.array \n    print(numpy.)\n\narr = input().strip().split(' ')\nresult = arrays(arr)\nprint(result)\n","offset":99,"fileType":"python3","requestStartTime":1517930658925}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef gameOfThrones(s):\n    d = {}\n    len_s = len(s)\n    for e in s:\n        if e not in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    odd = 0\n    even = 0\n    for e in d:\n        if d[e]%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if len_s%2 == 0:\n        if odd >\n        \n            \n\ns = input().strip()\nresult = gameOfThrones(s)\nprint(result)\n\n\n","offset":337,"fileType":"python3","requestStartTime":1517930780468}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    grade = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"%.\")\n\n","offset":323,"fileType":"python3","requestStartTime":1517930834785}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef gameOfThrones(s):\n    d = {}\n    len_s = len(s)\n    for e in s:\n        if e not in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    odd = 0\n    even = 0\n    for e in d:\n        if d[e]%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if len_s%2 == 0:\n        if odd > 0:\n            print(\"NO\")\n    else:\n        if odd >\n        \n            \n\ns = input().strip()\nresult = gameOfThrones(s)\nprint(result)\n\n\n","offset":391,"fileType":"python3","requestStartTime":1517930833688}}
{"body": {"column":42,"line":9,"wordToComplete":"","code":"\n# read in word and convert to lower case\nstring = input().lower()\n# start with an empty output string\noutputstring = \"\"\nvowels = \"aeiouy\"\n# for each letter in the word\nfor currentChar in string: \n      if currentChar in alphabet:\n            outputstring = vowels.upper().\nprint(outputstring)\n        # convert the letter to uppercase and replace\n    \n# print the output string\n\n","offset":274,"fileType":"python3","requestStartTime":1517930935530}}
{"body": {"column":47,"line":12,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor eachLetter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if eachLetter in vowels :\n        \n        # convert the letter to uppercase and replace\n        str.replace(inputString,\"eachletter\",\".\")\n        \n# print the output string\nprint(inputString)\n\n","offset":443,"fileType":"python3","requestStartTime":1517931034280}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    print(a.)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":69,"fileType":"python3","requestStartTime":1517931040152}}
{"body": {"column":11,"line":13,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nWord = input()\nprint(Word.)\n\n\nVowels = [\"a,e,i,o,u\"]\nfor l in Word:\n    if l in Vowels:\n        l.upper\nprint(Word)\n\n\n\n\n\n\n","offset":348,"fileType":"python3","requestStartTime":1517931275716}}
{"body": {"column":33,"line":3,"wordToComplete":"","code":"\nT = int(input())\nfor t in T:\n    l, b = list(map(int, input().))\n\n","offset":64,"fileType":"python3","requestStartTime":1517931322554}}
{"body": {"column":22,"line":39,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ncrosses = []\n\ndef growPluses(cell, grid, n, m):\n    global crosses\n    (i, j) = cell\n    if i > 0 and i < n-1 and j > 0 and j < m-1 and grid[i+1][j] == 'G' and grid[i][j+1] == 'G' and grid[i-1][j] == 'G' and grid[i][j-1] == 'G':\n        crosses += [[cell, (i+1, j), (i-1, j), (i, j+1), (i, j-1)]]\n    else:\n        return 1\n    u = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n    p = 2\n    while True:\n        for ce in u:\n            (a, b) = ce\n            if a > i and (a >= n-1 or grid[a+1][b] != 'G'):\n                return c\n            if a < i and (a <= 0 or grid[a-1][b] != 'G'):\n                return c\n            if b < j and (b <= 0 or grid[a][b+1] != 'G'):\n                return c\n            if b > j and (b >= m-1 or grid[a][b-1] != 'G'):\n                return c\n        o = [cell]\n        for t in range(1, p):\n            o += [(i+t, j), (i-t, j), (i, t+1), (i, t-1)]\n        crosses += [o]\n        u = [(i+p, j), (i-p, j), (i, j+p), (i, j-p)]\n        p+=1\n\ndef testSolution(s):\n    se = set()\n    for i in s:\n        for j in i:\n            if j in se:\n                break;\n\ndef twoPluses(grid, n, m):\n    c = 1\n    global crosses\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if grid[i][j] == 'G':\n                growPluses((i, j), grid, n, m)\n    \n    return c\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    grid = []\n    grid_i = 0\n    for grid_i in range(n):\n       grid_t = str(input().strip())\n       grid.append(grid_t)\n    result = twoPluses(grid, n, m)\n    print(result)\n\n\n","offset":1125,"fileType":"python3","requestStartTime":1517931389213}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"\n# read in word and convert to lower case\n\n# start with an empty output string\n\n# for each letter in the word\n    \n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # convert the letter to uppercase and replace\n    \n# print the output string\nvowels = [a, e, i, o. \"u\", \"y\"]\ninputstring = input(\"\")\nfor char in inputstring:\n    if char in vowels:\n        inputstring.replace(char, vowels.upper())\n\nprint(inputstring)\n\n\n","offset":343,"fileType":"python3","requestStartTime":1517931413309}}
{"body": {"column":15,"line":43,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ncrosses = []\n\ndef growPluses(cell, grid, n, m):\n    global crosses\n    (i, j) = cell\n    if i > 0 and i < n-1 and j > 0 and j < m-1 and grid[i+1][j] == 'G' and grid[i][j+1] == 'G' and grid[i-1][j] == 'G' and grid[i][j-1] == 'G':\n        crosses += [[cell, (i+1, j), (i-1, j), (i, j+1), (i, j-1)]]\n    else:\n        return 1\n    u = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n    p = 2\n    while True:\n        for ce in u:\n            (a, b) = ce\n            if a > i and (a >= n-1 or grid[a+1][b] != 'G'):\n                return c\n            if a < i and (a <= 0 or grid[a-1][b] != 'G'):\n                return c\n            if b < j and (b <= 0 or grid[a][b+1] != 'G'):\n                return c\n            if b > j and (b >= m-1 or grid[a][b-1] != 'G'):\n                return c\n        o = [cell]\n        for t in range(1, p):\n            o += [(i+t, j), (i-t, j), (i, t+1), (i, t-1)]\n        crosses += [o]\n        u = [(i+p, j), (i-p, j), (i, j+p), (i, j-p)]\n        p+=1\n\ndef testSolution(s):\n    se = set()\n    for i in s:\n        fit = True\n        for j in i:\n            if j in se:\n                fit = False\n                break\n        if fit:\n            se.\n\ndef twoPluses(grid, n, m):\n    c = 1\n    global crosses\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if grid[i][j] == 'G':\n                growPluses((i, j), grid, n, m)\n    \n    return c\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    grid = []\n    grid_i = 0\n    for grid_i in range(n):\n       grid_t = str(input().strip())\n       grid.append(grid_t)\n    result = twoPluses(grid, n, m)\n    print(result)\n\n\n","offset":1203,"fileType":"python3","requestStartTime":1517931422441}}
{"body": {"column":29,"line":2,"wordToComplete":"","code":"\nm = int(input())\nmlist = list(map(int,input().))\n\n","offset":48,"fileType":"python3","requestStartTime":1517931430280}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor eachLetter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if eachLetter in vowels :\n        \n        # convert the letter to uppercase and replace\n        letter.\n        \n# print the output string\nprint(inputString)\n\n","offset":411,"fileType":"python3","requestStartTime":1517931440121}}
{"body": {"column":33,"line":2,"wordToComplete":"","code":"\nm = int(input())\nmlist = list(map(int,raw_input().))\n\n","offset":52,"fileType":"python3","requestStartTime":1517931448756}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor eachLetter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if eachLetter in vowels :\n        \n        # convert the letter to uppercase and replace\n        letter.upper\n        letter.\n        \n# print the output string\nprint(inputString)\n\n","offset":432,"fileType":"python3","requestStartTime":1517931450072}}
{"body": {"column":43,"line":13,"wordToComplete":"letter.\"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor eachLetter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if eachLetter in vowels :\n        \n        # convert the letter to uppercase and replace\n        letter.upper\n        letter.replace(inputString,\"letter.\")\n        \n# print the output string\nprint(inputString)\n\n","offset":460,"fileType":"python3","requestStartTime":1517931465712}}
{"body": {"column":33,"line":4,"wordToComplete":"","code":"\nm = int(input())\nmlist = list(map(int,raw_input().split()))\nn = int(input())\nnlist = list(map(int,raw_input().))\n\n","offset":112,"fileType":"python3","requestStartTime":1517931474088}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    s = doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":108,"fileType":"python3","requestStartTime":1517931477676}}
{"body": {"column":5,"line":7,"wordToComplete":"","code":"\nm = int(input())\nmlist = list(map(int,raw_input().split()))\nn = int(input())\nnlist = list(map(int,raw_input().split()))\nmset = set(mlist)\nnset = set(nlist)\nmset.\n\n","offset":163,"fileType":"python3","requestStartTime":1517931495038}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    stud_avg = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(stud_avg.)\n\n\n","offset":332,"fileType":"python3","requestStartTime":1517931536701}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr.\n    \n\n\n","offset":94,"fileType":"python3","requestStartTime":1517931541113}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nmini=3\nmaxi=0\n\nn=int(input())\nfor i in range(0,n+1):\n    a=list.\nfor i in range(0,n+1):\n    if(a[i]=='0'):\n        mini+=1\n    else:\n        a[i]=0\n        a[i+1]=0\n        maxi+=1\n    print(mini, maxi)\n\n\n\n","offset":93,"fileType":"python3","requestStartTime":1517931552189}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if head == None:\n            head = Node(data)\n        elif head.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":365,"fileType":"python3","requestStartTime":1517931558512}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if head == None:\n            head = Node(data)\n        elif head.next == None:\n            head.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":396,"fileType":"python3","requestStartTime":1517931603391}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n        if head == None:\n            head = Node(data)\n        elif head.next == None:\n            head.next = Node(data)\n        else:\n            self.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":445,"fileType":"python3","requestStartTime":1517931625142}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n# read in word and convert to lower case\ninputString = input().lower()\n\n# start with an empty output string\nvowels = \"aeiou\"\n# for letter in inputString\nfor eachLetter in inputString :\n    # if the letter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      if eachLetter in vowels :\n        letter.upper\n      \n    else:\n        letter.\n        \n      \n        \n# print the output string\nprint(inputString)\n\n","offset":386,"fileType":"python3","requestStartTime":1517931730338}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    mi,ma = 0\n    list1 = []\n    for i in range(len(doors)):\n        if doors[i] == 1 and doors[i+1] == 1:\n            mi = mi+1\n            list1.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":241,"fileType":"python3","requestStartTime":1517931742576}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    mi = 0\n    list1 = []\n    for i in range(len(doors)):\n        if doors[i] == 1 and doors[i+1] == 1 and i not in list1:\n            mi = mi+1\n            list1.append(i,i+1)\n    return m1,doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":291,"fileType":"python3","requestStartTime":1517931811801}}
{"body": {"column":29,"line":163,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\n# import ast\nfrom traceback import print_exc\n\ndef put_nested_keys(doc_dict, level, key_levels, count):\n    # if level in key_levels.keys():\n    #     for key in doc_dict.keys():\n            # if key not in key_levels[level].keys():\n            #     key_levels[level][key] = set({count})\n            # else:\n            #     key_levels[level][key].add(count)\n    # else:\n        # key_levels[level] = dict.fromkeys(doc_dict.keys())\n        # for key in key_levels[level].keys():\n        #     key_levels[level][key] = set({count})\n    \n    # for key in key_levels[level]:\n    #     if key in inv_index.keys():\n    #         inv_index[key].add(count)\n    #     else:\n    #         inv_index[key] = set({count})\n    \n    for key in doc_dict.keys():\n        if level in key_levels.keys():\n            if key not in key_levels[level].keys():\n                key_levels[level][key] = set({count})\n            else:\n                key_levels[level][key].add(count)\n                \n            if type(doc_dict[key])==dict:\n                level += 1\n                put_nested_keys(doc_dict[key], level, key_levels, count)\n                level -= 1\n            elif type(doc_dict[key])==list:\n                for i in doc_dict[key]:\n                    if i not in key_levels[level].keys():\n                        key_levels[level][i] = set({count})\n                    else:\n                        key_levels[level][i].add(count)\n        else:\n            key_levels[level] = dict.fromkeys(doc_dict.keys())\n            for key in key_levels[level].keys():\n                key_levels[level][key] = set({count})\n                \n                # if i in inv_index.keys():\n                #     inv_index[i].add(count)\n                # else:\n                #     inv_index[i] = set({count})\n    # return key_levels\n    \ndef get_all_leaf_nodes(data):\n    class Namespace(object):\n        pass\n    ns = Namespace()\n    ns.results = []\n\n    def inner(data):\n        if isinstance(data, dict):\n            for item in data.values():\n                inner(item)\n        elif isinstance(data, list) or isinstance(data, tuple):\n            for item in data:\n                inner(item)\n        else:\n            ns.results.append(data)\n\n    inner(data)\n    return ns.results\n    \ndef add_docs(doc_dict, inv_index, count):\n    for key in doc_dict.keys():\n        if type(doc_dict[key])==dict:\n            if key in inv_index.keys():\n                inv_index[key].add(count)\n            else:\n                inv_index[key] = set({count})\n            add_docs(doc_dict[key], inv_index, count)\n        elif type(doc_dict[key])==list:            \n            for i in doc_dict[key]:\n                if i in inv_index.keys():\n                    inv_index[i].add(count)\n                else:\n                    inv_index[i] = set({count})\n        else:\n            if key in inv_index.keys():\n                inv_index[key].add(count)\n            else:\n                inv_index[key] = set({count})\n\ndef get_rel_docs_inv(doc_dict, inv_index, relevant_docs):\n    for key in doc_dict.keys():\n        if key in inv_index.keys():\n            if type(doc_dict[key])==dict:\n                relevant_docs = relevant_docs.intersection(inv_index[key])\n                temp = get_rel_docs_inv(doc_dict[key], inv_index, relevant_docs)\n                relevant_docs = relevant_docs.intersection(temp)\n            elif type(doc_dict[key])==list:\n                # relevant_docs = relevant_docs.intersection(inv_index[key])\n                for i in doc_dict[key]:\n                    relevant_docs = relevant_docs.intersection(inv_index[i])\n            else:\n                relevant_docs = relevant_docs.intersection(inv_index[key])\n    return relevant_docs\n\ndef get_rel_docs(doc_dict, key_levels, relevant_docs, level):\n    # for key in doc_dict.keys():\n    #     if key in inv_index.keys():\n    #         if type(doc_dict[key])==dict:\n    #             relevant_docs = relevant_docs.intersection(inv_index[key])\n    #             temp = get_rel_docs(doc_dict[key], inv_index, relevant_docs)\n    #             relevant_docs = relevant_docs.intersection(temp)\n    #         elif type(doc_dict[key])==list:\n    #             # relevant_docs = relevant_docs.intersection(inv_index[key])\n    #             for i in doc_dict[key]:\n    #                 relevant_docs = relevant_docs.intersection(inv_index[i])\n    #         else:\n    #             relevant_docs = relevant_docs.intersection(inv_index[key])\n    \n    if level in key_levels.keys():\n        for key in doc_dict.keys():\n            if key in key_levels[level].keys():\n                if type(doc_dict[key])==dict:\n                    nested_exists = True\n                    relevant_docs = relevant_docs.intersection(key_levels[level][key])\n                    level += 1\n                    temp = get_rel_docs(doc_dict[key], key_levels, relevant_docs, level)\n                    relevant_docs = relevant_docs.intersection(temp)\n                    level -= 1\n                elif type(doc_dict[key])==list:\n                    for i in doc_dict[key]:\n                        if i in key_levels[level].keys():\n                            relevant_docs = relevant_docs.intersection(key_levels[level][key])\n                else:\n                    relevant_docs = relevant_docs.intersection(key_levels[level][key])\n    return relevant_docs\n        \ndef get_docs(doc_dict, key_levels, big_dict):\n    # all_keys = set()\n    # get_all_keys(doc_dict, big_dict)\n    relevant_docs = set(big_dict.keys())\n    # relevant_docs = get_rel_docs_inv(doc_dict, inv_index, set(big_dict.keys()))\n    relevant_docs = get_rel_docs(doc_dict, key_levels, relevant_docs, 0)\n    # print(relevant_docs)\n    for i in relevant_docs:\n        curr_doc = json.loads(big_dict[i])\n        l1 = get_all_leaf_nodes(curr_doc)\n        l2 = get_all_leaf_nodes(doc_dict)\n        l1_notlist = [i for i in l1 if type(i)!=list]\n        l1_list = [i for i in l1 if type(i)==list]\n        l2_notlist = [i for i in l2 if type(i)!=list]\n        l2_list = [i for i in l2 if type(i)==list]\n        \n        # if satisfies(curr_doc, doc_dict):\n        # if set(l2_notlist).issubset(l1_notlist):\n            # print(big_dict[i])\n        print(get_all_leaf_nodes(curr_doc), get_all_leaf_nodes(doc_dict))\n\ndef list_pof_list(l1, l2):\n    for l2_ in l2:\n        there = False\n        for l1_ in l1:\n            there = set(l2_).\n        \n        \ndef delete_docs(doc_dict, key_levels, big_dict):\n    # relevant_docs = get_rel_docs_inv(doc_dict, inv_index, set(big_dict.keys()))\n    relevant_docs = get_rel_docs(doc_dict, key_levels, set(big_dict.keys()), 0)\n    for i in relevant_docs:\n        curr_doc = json.loads(big_dict[i])\n        if satisfies(curr_doc, doc_dict):\n            del big_dict[i]\n            \ndef satisfies(curr_doc, doc_dict, bool_satisfies=True):\n    for key in doc_dict.keys():\n        bool_satisfies = bool_satisfies and (key in curr_doc.keys())\n        # if (key in curr_doc.keys()):\n        bool_satisfies = bool_satisfies and (type(doc_dict[key])==type(curr_doc[key]))\n        if not bool_satisfies:\n            return bool_satisfies\n        # if (type(doc_dict[key])==type(curr_doc[key])):\n        if type(doc_dict[key])!=dict and type(doc_dict[key])!=list:\n            bool_satisfies = bool_satisfies and (curr_doc[key]==doc_dict[key])\n        elif type(doc_dict[key])==list:\n            for i in doc_dict[key]:\n                bool_satisfies = bool_satisfies and (i in curr_doc[key])\n                if not bool_satisfies:\n                    return bool_satisfies\n        elif type(doc_dict[key])==dict:\n            bool_satisfies = bool_satisfies and satisfies(curr_doc[key], doc_dict[key], bool_satisfies)\n    return bool_satisfies\n    \nif __name__==\"__main__\":\n    big_dict = {}\n    inv_index = {}\n    key_levels = {}\n    levelled_inv_index = {}\n    count = 0\n    while(1):\n        try:\n            command, doc = input().strip().split(\" \", 1)\n            doc_dict = json.loads(doc)\n            if command==\"add\":\n                big_dict[count] = doc\n                # add_docs(doc_dict, inv_index, count)\n                put_nested_keys(doc_dict, 0, key_levels, count)\n                count += 1\n            elif command==\"get\":\n                # print(key_levels.keys())\n                get_docs(doc_dict, key_levels, big_dict)\n            elif command==\"delete\":\n                delete_docs(doc_dict, key_levels, big_dict)\n        \n        except EOFError:\n            # print(key_levels)\n            break\n        \n\n","offset":6499,"fileType":"python3","requestStartTime":1517931856311}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    list = map(int,input().)\n\n\n","offset":77,"fileType":"python3","requestStartTime":1517931873958}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    mi = 0\n    mx = doors.count(1)\n    list1 = []\n    for i in range(len(doors)):\n        if doors[i] == 1 and doors[i+1] == 1:\n            if i not in list1:\n                mi = mi+1\n                list1.append(i)\n                list1.\n    return mi,mx\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":333,"fileType":"python3","requestStartTime":1517931882347}}
{"body": {"column":27,"line":10,"wordToComplete":"0.0","code":"\n#!/bin/python3\n\nimport sys\n\ndef feeOrUpfront(n, k, x, d, p):\n    sum = 0;\n    loss = 0;\n    for i in range(n) : \n        sum += p[i];\n        loss += max(k,x*0.0)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, k, x, d = input().strip().split(' ')\n        n, k, x, d = [int(n), int(k), int(x), int(d)]\n        p = list(map(int, input().strip().split(' ')))\n        result = feeOrUpfront(n, k, x, d, p)\n        print(result)\n\n\n","offset":163,"fileType":"python3","requestStartTime":1517931931664}}
{"body": {"column":6,"line":6,"wordToComplete":"3.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ni = 3\nd = 3.\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517931975225}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n\nfor i in range (1,N+1):\n    l = input()\n    tab=[]\n    if 'insert' in l:\n        pos = l[7]\n        add = pos[9]\n        tab.\n    if 'print' in l: \n        print(tab)\n\n","offset":177,"fileType":"python3","requestStartTime":1517932023998}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n\nfor i in range (1,N+1):\n    l = input()\n    tab=[]\n    if 'insert' in l:\n        pos = l[7]\n        add = pos[9]\n        tab.\n    if 'print' in l: \n        print(tab)\n\n","offset":177,"fileType":"python3","requestStartTime":1517932037320}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    list = map(int,input().split())\n    m = max(list)\n    list.\n\n","offset":113,"fileType":"python3","requestStartTime":1517932047469}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\n\nfor i in range (1,N+1):\n    l = input()\n    tab=[]\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9])\n        tab.insert(pos, add)\n        print(tab)\n    if 'print' in l: \n        print(tab)\n        tab=[]\n    if 'pop' in l:\n        tab.pop()\n    if 'remove' in l:\n        tab.\n\n","offset":348,"fileType":"python3","requestStartTime":1517932238235}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\ntab=[]\nfor i in range (1,N+1):\n    l = input()\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9])\n        tab.insert(pos, add)\n        print(tab)\n    if 'print' in l: \n        print(tab)\n        tab=[]\n    if 'pop' in l:\n        tab.pop()\n    if 'remove' in l:\n        rem=int(l[7])\n        tab.remove(rem)\n    if 'sort' in l:\n        tab.\n\n","offset":409,"fileType":"python3","requestStartTime":1517932314841}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\ntab=[]\nfor i in range (1,N+1):\n    l = input()\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9])\n        tab.insert(pos, add)\n        print(tab)\n    if 'print' in l: \n        print(tab)\n        tab=[]\n    if 'pop' in l:\n        tab.pop()\n    '''if 'remove' in l:\n        rem=int(l[7])\n        tab.remove(rem)\n    if 'sort' in l:\n        tab.sort()\n        '''\n    else: \n        tab.\n\n","offset":454,"fileType":"python3","requestStartTime":1517932341012}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nmini=3\nmaxi=0\n\nn=int(input())\na=list(input())\nfor i in range(0,n,2):\n    if(a[i]==0):\n        mini+=0\n    else:\n        maxi=a.\nprint(mini, maxi)\n\n    \n\n\n","offset":156,"fileType":"python3","requestStartTime":1517932341492}}
{"body": {"column":12,"line":9,"wordToComplete":"1.","code":"\nfrom itertools import groupby\nfrom itertools import combinations\n\nn = int(input())\nletters = sorted(list(input().split()))\nk = int(input())\ncnt_a=[len(list(g)) for i, g in groupby(letters)][0]\nif (k>len(letters)-cnt_a):\n    print 1.\nprint(\"%.3f\" % (1.0-len(list(combinations(letters[cnt_a:],k)))/len(list(combinations(letters,k)))))\n\n","offset":234,"fileType":"python3","requestStartTime":1517932398538}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    l = map(int,input().)\n    print(l)\n    for i in l:\n        print(i)\n    m = max(list)\n    list.remove(m)\n    print(max(list))\n\n","offset":74,"fileType":"python3","requestStartTime":1517932436761}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ndef count_substring(string, sub_string):\n    return string.[]\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":61,"fileType":"python3","requestStartTime":1517932467350}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    odd=[]\n    if l%2==1:\n        odd.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":133,"fileType":"python3","requestStartTime":1517932504154}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    total_sum=0\n    my_sum=0\n    for i in range(len(doors)):\n        if(doors[i]==doors[i-1] and doors[i]==1):\n            total_sum+=1\n            my_sum+=1\n            doors[i]=0\n            doors[i-1]=0\n        elif(doors[i]==1):\n            total_sum+=1\n    a=(\"%d%d\"%(my_sum,total_sum))\n    print (a)\n    return a\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n    print(result.)\n\n\n\n\n","offset":624,"fileType":"python3","requestStartTime":1517932534960}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    odd=[]\n    if l%2==1:\n        odd.append(l)\n        while odd[-1]<r:\n            odd.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":184,"fileType":"python3","requestStartTime":1517932552971}}
{"body": {"column":32,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    l = map(int,input().strip().split())\n    m = max(l)\n    l.remove(m)\n    print(max(l))\n\n","offset":82,"fileType":"python3","requestStartTime":1517932572675}}
{"body": {"column":19,"line":28,"wordToComplete":"end","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    total_sum=0\n    my_sum=0\n    for i in range(len(doors)):\n        if(doors[i]==doors[i-1] and doors[i]==1):\n            total_sum+=1\n            my_sum+=1\n            doors[i]=0\n            doors[i-1]=0\n        elif(doors[i]==1):\n            total_sum+=1\n    a=(\"%d %d\"%(my_sum,total_sum))\n    print (a)\n    return a\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    a=result.split(\" \")\n    print (\" \".join(map(str, result)))\n    for i in a:\n        print(i,end)\n\n\n\n\n","offset":667,"fileType":"python3","requestStartTime":1517932621350}}
{"body": {"column":17,"line":28,"wordToComplete":"e","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    total_sum=0\n    my_sum=0\n    for i in range(len(doors)):\n        if(doors[i]==doors[i-1] and doors[i]==1):\n            total_sum+=1\n            my_sum+=1\n            doors[i]=0\n            doors[i-1]=0\n        elif(doors[i]==1):\n            total_sum+=1\n    a=(\"%d %d\"%(my_sum,total_sum))\n    print (a)\n    return a\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    a=result.split(\" \")\n    print (\" \".join(map(str, result)))\n    for i in a:\n        print(i,e)\n\n\n\n\n","offset":665,"fileType":"python3","requestStartTime":1517932625213}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\ntab=[]\nfor i in range (1,N+1):\n    l = input()\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9])\n        tab.insert(pos, add)\n    if 'print' in l: \n        print(tab)\n        tab=[]\n    if 'pop' in l:\n        tab.pop()\n    if 'remove' in l:\n        rem=int(l[7])\n        tab.remove(rem)\n    if 'sort' in l:\n        tab.sort()\n    if 'reverse' in l:\n        tab.\n\n","offset":432,"fileType":"python3","requestStartTime":1517932653014}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    stud_avg = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(stud_avg.)\n\n\n","offset":332,"fileType":"python3","requestStartTime":1517932686116}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    \n    list = []\n    \n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        list.\n\n\n","offset":154,"fileType":"python3","requestStartTime":1517932690059}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    stud_avg = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(stud_avg.format('.'))\n\n\n","offset":341,"fileType":"python3","requestStartTime":1517932694459}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    odd=[]\n    if l%2==1:\n        odd.append(l)\n        while odd[-1]<r:\n            odd.append(l+2)\n            l+=2\n    if l%2==0:\n        odd.\n    return odd\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":240,"fileType":"python3","requestStartTime":1517932717026}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    stud_avg = sum(student_marks[query_name])/len(student_marks[query_name])\n    print(format(stud_avg, '.'))\n\n\n","offset":342,"fileType":"python3","requestStartTime":1517932721770}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    odd=[]\n    if l%2==1:\n        odd.append(l)\n        while odd[-1]<r:\n            odd.append(l+2)\n            l+=2\n    if l%2==0:\n        odd.append(l+1)\n        while odd[-1]<r:\n            odd.\n    return odd\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":293,"fileType":"python3","requestStartTime":1517932731461}}
{"body": {"column":12,"line":18,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\ntab=[]\nfor i in range (1,N+1):\n    l = input()\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9])\n        tab.insert(pos, add)\n    elif 'print' in l: \n        print(tab)\n    \n    elif 'remove' in l:\n        rem=int(l[7])\n        tab.remove(rem)\n    else: \n        tab.\n'''    if 'sort' in l:\n        tab.sort()\n    if 'reverse' in l:\n        tab.reverse()\n    if 'pop' in l:\n        tab.pop()\n        \n        '''\n\n","offset":338,"fileType":"python3","requestStartTime":1517932742798}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\ntab=[]\nfor i in range (1,N+1):\n    l = input()\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9])\n        tab.insert(pos, add)\n    if 'print' in l: \n        print(tab)\n    \n    if 'append' in l:\n        app=int(l[7])\n        tab.\n    \n    if 'remove' in l:\n        rem=int(l[7])\n        tab.remove(rem)\n    if 'sort' in l:\n        tab.sort()\n    if 'reverse' in l:\n        tab.reverse()\n        \n\n","offset":299,"fileType":"python3","requestStartTime":1517932820283}}
{"body": {"column":34,"line":38,"wordToComplete":"","code":"import fileinput\n\n\ndef merge_sorted_businesses(trendy_businesses, favorite_businesses):\n    \"\"\"\n    Merges two already sorted lists of businesses (sorted based on number of reviews)\n    and returns a sorted list of all businesses in descending order based on\n    number of reviews.\n\n    Args:\n        trendy_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n        favorite_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n\n    Input:\n    # trendy_businesses:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 103, 'num_reviews': 900},\n    ]\n    # favorite_businesses:\n    [\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    Expected Returned Value:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 103, 'num_reviews': 900},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    \"\"\"\n    ## TODO: COMPLETE ME\n    trBusind = 0\n    favBusind = 0\n    \n    for trendy in trendy_business.\n\n\n\nif __name__ == '__main__':\n    lines = list(fileinput.input())\n    trendy_len = int(lines[0].split(' ')[0])\n    favorite_len = int(lines[0].split(' ')[1])\n\n    trendy_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[1:trendy_len+1]\n    ]\n\n    favorite_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[trendy_len+1:]\n    ]\n\n    all_businesses = merge_sorted_businesses(trendy_businesses, favorite_businesses)\n    for business in all_businesses:\n        print(\"{0} {1}\".format(business['business_id'], business['num_reviews']))\n","offset":1224,"fileType":"python3","requestStartTime":1517932818178}}
{"body": {"column":42,"line":39,"wordToComplete":"","code":"import fileinput\n\n\ndef merge_sorted_businesses(trendy_businesses, favorite_businesses):\n    \"\"\"\n    Merges two already sorted lists of businesses (sorted based on number of reviews)\n    and returns a sorted list of all businesses in descending order based on\n    number of reviews.\n\n    Args:\n        trendy_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n        favorite_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n\n    Input:\n    # trendy_businesses:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 103, 'num_reviews': 900},\n    ]\n    # favorite_businesses:\n    [\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    Expected Returned Value:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 103, 'num_reviews': 900},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    \"\"\"\n    ## TODO: COMPLETE ME\n    trBusind = 0\n    favBusind = 0\n    \n    for trendy in trendy_business.keys():\n        for favorite in favorite_business.\n\n\n\nif __name__ == '__main__':\n    lines = list(fileinput.input())\n    trendy_len = int(lines[0].split(' ')[0])\n    favorite_len = int(lines[0].split(' ')[1])\n\n    trendy_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[1:trendy_len+1]\n    ]\n\n    favorite_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[trendy_len+1:]\n    ]\n\n    all_businesses = merge_sorted_businesses(trendy_businesses, favorite_businesses)\n    for business in all_businesses:\n        print(\"{0} {1}\".format(business['business_id'], business['num_reviews']))\n","offset":1274,"fileType":"python3","requestStartTime":1517932829403}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    \n    student_list = []\n    \n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        list.append([name, score])\n        \n    lowest = Math.\n    \n    for student in student_list:\n        \n    print(list)\n\n\n","offset":211,"fileType":"python3","requestStartTime":1517932849239}}
{"body": {"column":29,"line":36,"wordToComplete":"","code":"import fileinput\n\n\ndef merge_sorted_businesses(trendy_businesses, favorite_businesses):\n    \"\"\"\n    Merges two already sorted lists of businesses (sorted based on number of reviews)\n    and returns a sorted list of all businesses in descending order based on\n    number of reviews.\n\n    Args:\n        trendy_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n        favorite_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n\n    Input:\n    # trendy_businesses:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 103, 'num_reviews': 900},\n    ]\n    # favorite_businesses:\n    [\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    Expected Returned Value:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 103, 'num_reviews': 900},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    \"\"\"\n    ## TODO: COMPLETE ME\n    new_list = {}\n    trendy = trendy_business.\n    while \n    if trendy_business[trendy] > favorite_business[favorite]:\n        new_list[trendy] = \n\n\n\nif __name__ == '__main__':\n    lines = list(fileinput.input())\n    trendy_len = int(lines[0].split(' ')[0])\n    favorite_len = int(lines[0].split(' ')[1])\n\n    trendy_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[1:trendy_len+1]\n    ]\n\n    favorite_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[trendy_len+1:]\n    ]\n\n    all_businesses = merge_sorted_businesses(trendy_businesses, favorite_businesses)\n    for business in all_businesses:\n        print(\"{0} {1}\".format(business['business_id'], business['num_reviews']))\n","offset":1197,"fileType":"python3","requestStartTime":1517932944448}}
{"body": {"column":33,"line":37,"wordToComplete":"","code":"import fileinput\n\n\ndef merge_sorted_businesses(trendy_businesses, favorite_businesses):\n    \"\"\"\n    Merges two already sorted lists of businesses (sorted based on number of reviews)\n    and returns a sorted list of all businesses in descending order based on\n    number of reviews.\n\n    Args:\n        trendy_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n        favorite_businesses: Sorted list of dictionaries containing business_id and num_reviews.\n\n    Input:\n    # trendy_businesses:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 103, 'num_reviews': 900},\n    ]\n    # favorite_businesses:\n    [\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    Expected Returned Value:\n    [\n        {'business_id': 100, 'num_reviews': 1000},\n        {'business_id': 203, 'num_reviews': 950},\n        {'business_id': 103, 'num_reviews': 900},\n        {'business_id': 201, 'num_reviews': 800},\n        {'business_id': 202, 'num_reviews': 700},\n    ]\n    \"\"\"\n    ## TODO: COMPLETE ME\n    new_list = {}\n    trendy = trendy_business.keys()\n    favorite = favorite_business.\n    while \n    if trendy_business[trendy] > favorite_business[favorite]:\n        new_list[trendy] = \n\n\n\nif __name__ == '__main__':\n    lines = list(fileinput.input())\n    trendy_len = int(lines[0].split(' ')[0])\n    favorite_len = int(lines[0].split(' ')[1])\n\n    trendy_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[1:trendy_len+1]\n    ]\n\n    favorite_businesses = [\n        {\n            'business_id': int(line.split(' ')[0]),\n            'num_reviews': int(line.split(' ')[1]),\n        }\n        for line in lines[trendy_len+1:]\n    ]\n\n    all_businesses = merge_sorted_businesses(trendy_businesses, favorite_businesses)\n    for business in all_businesses:\n        print(\"{0} {1}\".format(business['business_id'], business['num_reviews']))\n","offset":1237,"fileType":"python3","requestStartTime":1517932959228}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n\ntab=[]\nfor i in range (1,N+1):\n    l = input()\n    if 'insert' in l:\n        pos = int(l[7])\n        add = int(l[9:])\n        tab.insert(pos, add)\n    if 'print' in l: \n        print(tab)\n    \n    if 'pop' in l:\n        tab.\n    if 'append' in l:\n        app=int(l[7])\n        tab.append(app)    \n    if 'remove' in l:\n        rem=int(l[7])\n        tab.remove(rem)\n    if 'sort' in l:\n        tab.sort()\n    if 'reverse' in l:\n        tab.reverse()\n        \n\n","offset":275,"fileType":"python3","requestStartTime":1517932977664}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"\nclass Calculator(self, n, p):\n    self.\nmyCalculator=Calculator()\nT=int(input())\nfor i in range(T):\n    n,p = map(int, input().split())\n    try:\n        ans=myCalculator.power(n,p)\n        print(ans)\n    except Exception as e:\n        print(e)   \n","offset":41,"fileType":"python3","requestStartTime":1517933004583}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nclass Calculator(self, n, p):\n    self.n = n\n    self.\nmyCalculator=Calculator()\nT=int(input())\nfor i in range(T):\n    n,p = map(int, input().split())\n    try:\n        ans=myCalculator.power(n,p)\n        print(ans)\n    except Exception as e:\n        print(e)   \n","offset":56,"fileType":"python3","requestStartTime":1517933008079}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\n\nmemory = []\n\nfor i in range(int(input())):\n    n = int(input())\n    if n <= len(memory):\n        print(sum(memory[0: n]))\n    else:\n        for i in range(len(memory) + 1, n + 1):\n            memory.\n\n","offset":202,"fileType":"python3","requestStartTime":1517933044549}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\nclass Calculator:\n    def __init__(self, n, p)\n        self.n = n\n        self.p = p\n    \n    def power(self):\n        return self.\nmyCalculator=Calculator()\nT=int(input())\nfor i in range(T):\n    n,p = map(int, input().split())\n    try:\n        ans=myCalculator.power(n,p)\n        print(ans)\n    except Exception as e:\n        print(e)   \n","offset":133,"fileType":"python3","requestStartTime":1517933083086}}
{"body": {"column":30,"line":7,"wordToComplete":"","code":"\nclass Calculator:\n    def __init__(self, n, p)\n        self.n = n\n        self.p = p\n    \n    def power(self):\n        return self.n ** self.\nmyCalculator=Calculator()\nT=int(input())\nfor i in range(T):\n    n,p = map(int, input().split())\n    try:\n        ans=myCalculator.power(n,p)\n        print(ans)\n    except Exception as e:\n        print(e)   \n","offset":143,"fileType":"python3","requestStartTime":1517933087206}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"\ndef count_substring(string, sub_string):\n    if string.\n    return count_substring(string[1:], sub_string)\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":57,"fileType":"python3","requestStartTime":1517933094923}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef getWays(n, c):\n    ways = 0\n    c.\n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\nc = list(map(int, input().strip().split(' ')))\n# Print the number of ways of making change for 'n' units using coins having the values given by 'c'\nways = getWays(n, c)\n\n\n","offset":68,"fileType":"python3","requestStartTime":1517933115369}}
{"body": {"column":15,"line":3,"wordToComplete":"","code":"\ndef count_substring(string, sub_string):\n    if string.find(sub_string) != -1:\n        string.\n    return count_substring(string[1:], sub_string)\nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":96,"fileType":"python3","requestStartTime":1517933116322}}
{"body": {"column":27,"line":5,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertion_sort(arr, x):\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        x, s = input().strip().split(' ')\n        x, s = [int(x), str(s)]\n\n\n","offset":57,"fileType":"python3","requestStartTime":1517933219654}}
{"body": {"column":39,"line":21,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    \n    student_list = []\n    \n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        student_list.append([name, score])\n        \n    # sorted_student_list = sorted(student_list, key=lambda student: student[1])\n    \n    lowest_score = float('inf')\n    second_lowest_score = float('inf')\n    for student in student_list:\n        [name, score] = student\n        if score < lowest_score:\n            lowest_score = score\n        elif score < second_lowest_score\n            second_lowest_score = score\n            \n    result_student_list = student_list.\n        \n    print(sorted_student_list)\n\n\n","offset":622,"fileType":"python3","requestStartTime":1517933364360}}
{"body": {"column":17,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    integer_list = map(int, input().split())\n    integer_list.\n    tup = tuple(*integer_list)\n    print(hash(tup))\n\n\n","offset":112,"fileType":"python3","requestStartTime":1517933438660}}
{"body": {"column":73,"line":22,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    \n    student_list = []\n    \n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        student_list.append([name, score])\n        \n    sorted_student_list = sorted(student_list, key=lambda student: student[1])\n    \n    lowest_score = float('inf')\n    second_lowest_score = float('inf')\n    for student in sorted_student_list:\n        [name, score] = student\n        if score < lowest_score:\n            lowest_score = score\n        elif score < second_lowest_score:\n            second_lowest_score = score\n            \n    result_list = list(filter(lambda student: student[1] == second_lowest_score, student_list))\n    sorted_result_list = sorted(result_list, key=lambda student: student.)\n        \n    print(result_student_list)\n\n\n","offset":758,"fileType":"python3","requestStartTime":1517933579189}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    print(isalnum.)\n\n\n","offset":63,"fileType":"python3","requestStartTime":1517933602557}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    print(i.for i in s)\n    print(s.isalpha())\n    print(s.isdigit())\n    print(s.islower())\n    print(s.isupper())\n\n\n","offset":57,"fileType":"python3","requestStartTime":1517933769614}}
{"body": {"column":21,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    l = list(str(N))\n    s = input().split(' ')\n    for x in range(s.):\n        print(s[x])\n        \n\n\n","offset":119,"fileType":"python3","requestStartTime":1517933822633}}
{"body": {"column":23,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    current_max = -sys.\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":75,"fileType":"python3","requestStartTime":1517933971361}}
{"body": {"column":46,"line":1,"wordToComplete":"r'[123][120][xs0][30Aa][sxu][.]'","code":"\nRegex_Pattern = r'[123][120][xs0][30Aa][sxu][.]'\t# Do not delete 'r'.\n\n\n\nimport re\n\nprint(str(bool(re.search(Regex_Pattern, input()))).lower())\n","offset":48,"fileType":"python3","requestStartTime":1517934153724}}
{"body": {"column":47,"line":1,"wordToComplete":"r'[123][120][xs0][30Aa][sxu][\\.]'","code":"\nRegex_Pattern = r'[123][120][xs0][30Aa][sxu][\\.]'\t# Do not delete 'r'.\n\n\n\nimport re\n\nprint(str(bool(re.search(Regex_Pattern, input()))).lower())\n","offset":49,"fileType":"python3","requestStartTime":1517934156964}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"\nimport string\ndef print_rangoli(size):\n    alpha = string.\nif __name__ == '__main__':\n    n = int(input())\n    print_rangoli(n)\n","offset":60,"fileType":"python3","requestStartTime":1517934282447}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef _max_subarray(arr):\n    # Kadane's algorithm\n    current_max = -sys.maxsize\n    max_by_position = 0\n    \n    for element in arr:\n        max_by_position = max(element, max_by_position + element)\n        current_max = max(current_max, max_by_position)\n        \n    return current_max    \n\ndef _max_subsequence(arr):\n    current_max = -sys.\n\ndef maxSubarray(arr):\n    return _max_subarray(arr), _max_subsequence(arr)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":372,"fileType":"python3","requestStartTime":1517934438821}}
{"body": {"column":29,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    def apply(func):\n        for i in s:\n            if func(i) == True:\n                return True\n        return False\n    for i in map(apply, (str.isalnum, isalpha, isdigit, islower, isupper)):\n        print(i)\n        \n    \n\n\n\n","offset":196,"fileType":"python3","requestStartTime":1517934495468}}
{"body": {"column":42,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    def apply(func):\n        for i in s:\n            if func(i) == True:\n                return True\n        return False\n    for i in map(apply, (str.isalnum, str.isalpha, isdigit, islower, isupper)):\n        print(i)\n        \n    \n\n\n\n","offset":209,"fileType":"python3","requestStartTime":1517934497972}}
{"body": {"column":55,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    def apply(func):\n        for i in s:\n            if func(i) == True:\n                return True\n        return False\n    for i in map(apply, (str.isalnum, str.isalpha, str.isdigit, islower, isupper)):\n        print(i)\n        \n    \n\n\n\n","offset":222,"fileType":"python3","requestStartTime":1517934500262}}
{"body": {"column":68,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    def apply(func):\n        for i in s:\n            if func(i) == True:\n                return True\n        return False\n    for i in map(apply, (str.isalnum, str.isalpha, str.isdigit, str.islower, isupper)):\n        print(i)\n        \n    \n\n\n\n","offset":235,"fileType":"python3","requestStartTime":1517934502173}}
{"body": {"column":81,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    def apply(func):\n        for i in s:\n            if func(i) == True:\n                return True\n        return False\n    for i in map(apply, (str.isalnum, str.isalpha, str.isdigit, str.islower, str.isupper)):\n        print(i)\n        \n    \n\n\n\n","offset":248,"fileType":"python3","requestStartTime":1517934504867}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  countSteps(n):\n    posb = 0\n    pos = []\n    \n    for i in range(100):\n        pos.\n        \n        \ndef listSum (lists):\n    sums = 0\n    for i in lists:\n        sums += i\n    return sums\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_n = int(input());\n\nres = countSteps(_n)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":160,"fileType":"python3","requestStartTime":1517934623575}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    \n    n = int(input())\n    arr = map(int, input().split())\n    max_ = arr[0]\n    \n    for score in arr:\n        if score >\n        \n    print(runner_up)\n\n        \n    \n\n\n","offset":154,"fileType":"python3","requestStartTime":1517934771939}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef getWays(target, coins):\n    dp = [0] * (target+1)\n    dp[0] = 1\n    for i in range(len(coins)):\n        for j in range(1,target+1):\n            if coins[i] > target:\n                break\n            if coins[i] > \n            dp[j] = dp[j] + dp[j-coins[i]]\n    return dp[target]\n    \n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\nc = list(map(int, input().strip().split(' ')))\n# Print the number of ways of making change for 'n' units using coins having the values given by 'c'\nways = getWays(n, c)\n\n\n","offset":248,"fileType":"python3","requestStartTime":1517934821159}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    str_list = string.\n    return \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":48,"fileType":"python3","requestStartTime":1517934819221}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\ndef capitalize(string):\n    str_list = string.split(' ')\n    str_list = [word[0].]\n    return \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":83,"fileType":"python3","requestStartTime":1517934870861}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    \n    \n    marks = student_marks[query_name]\n    average = sum(marks) / marks.\n\n\n","offset":317,"fileType":"python3","requestStartTime":1517934877089}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    str_list = string.split(' ')\n    str_list = [word[0].upper() + word[1:] for word in str_list]\n    return \" \".\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":139,"fileType":"python3","requestStartTime":1517934902493}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nn = str(input().)\n\n","offset":18,"fileType":"python3","requestStartTime":1517934913141}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    seen = {}\n    used = DefaultDict(list)\n    for name in names:\n        initials = get_initials(parts)\n        if initials in seen:\n            del used[initials]\n            dupes = seen[initials]\n            dupes.append[name]\n            disambiguated = disambiguate(dupes)\n            for k, v in disambiguated:\n                seen[k] = v\n                used.append(v)\n    for k in used:\n        print(k)\n\ndef get_initials(name):\n    parts = name.split(' ')\n    initials = parts[0][0] + parts[-1][0]\n    \ndef disambiguate(names):\n    for name in names:\n        parts = naem.\n        \n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":675,"fileType":"python3","requestStartTime":1517934964359}}
{"body": {"column":3,"line":3,"wordToComplete":"","code":"\nn = str(input().strip())\nli=[]\nli.\n\n","offset":36,"fileType":"python3","requestStartTime":1517935019492}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef _max_subarray(arr):\n    # Kadane's algorithm\n    current_max = -sys.maxsize\n    max_by_position = 0\n    \n    for element in arr:\n        max_by_position = max(element, max_by_position + element)\n        current_max = max(current_max, max_by_position)\n        \n    return current_max    \n\ndef _max_subsequence(arr):\n    current_max = -sys.\n    max_sums = [x for x in arr]\n    \n    for j in range(n):\n        current_max = max(arr[j], current_max + max(arr[j], 0))\n\n    return current_max\n\ndef maxSubarray(arr):\n    return _max_subarray(arr), _max_subsequence(arr)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":372,"fileType":"python3","requestStartTime":1517935161582}}
{"body": {"column":17,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\nfrom collections import defaultdict\n# Complete the function below.\n\ndef generate(names):\n    seen = {}\n    used = defaultdict(list)\n    for name in names:\n        initials = get_initials(name)\n        if initials in seen:\n            del used[initials]\n            dupes = seen[initials]\n            dupes.append[name]\n            disambiguated = disambiguate(dupes)\n            for k, v in disambiguated:\n                seen[k] = v\n                used.append(v)\n        else:\n            seen[initials]\n            used.\n    for k in used:\n        print(k)\n\ndef get_initials(name):\n    parts = name.split(' ')\n    initials = parts[0][0] + parts[-1][0]\n    \ndef disambiguate(names):\n    firsts, lasts = zip(*(s.split(' ') for s in names))\n        \n        \n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":563,"fileType":"python3","requestStartTime":1517935597249}}
{"body": {"column":29,"line":25,"wordToComplete":"","code":"\n#Body\n\"\"\"\n Get Node data of the Nth Node from the end.\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the node data of the linked list in the below method.\n\"\"\"\n\n\n# New version going twice through the list\n# More straightforward than trailing node method\ndef GetNode(head, position):\n    result = current = head\n    len = 0\n    while head:\n        head = head.next\n        len += 1\n    while len - position > 0:\n    return result.data\n\n\n\n\n\"\"\"\n# New version 'cause the list may be pretty long \n# storing it in a list is not the most memory efficient\ndef GetNode(head, position):\n    result = current = head\n    distance = 0\n    while head:\n        head = head.next\n        if distance > position:\n            #always push to next node once having passed #position nodes\n            result = result.next\n        distance += 1\n    return result.data\n\"\"\"\n\n\n\"\"\"\ndef GetNode(head, position):\n    #l = []\n    trail_node = head\n    distance = 0\n    while head:\n        head = head.next\n        distance += 1\n        if distance > position;\n            trail_node = trail_node.next\n\n    #We're at the tail now\n    if position == 0:\n        return head.data\n    return l[-position]\n\"\"\"\n\n","offset":570,"fileType":"python3","requestStartTime":1517935627512}}
{"body": {"column":8,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    arr.\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":88,"fileType":"python3","requestStartTime":1517935771015}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    z = max(arr)\n    \n    while max(arr) == z\n        arr.\n    \n    \n     \n    \n\n\n","offset":144,"fileType":"python3","requestStartTime":1517935975033}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef checksum(number):\n    number.\n    # Write your code here.\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    number_size = int(input())\n\n    number = []\n    for _ in range(number_size):\n        number_item = int(input())\n        number.append(number_item)\n\n    res = checksum(number)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":105,"fileType":"python3","requestStartTime":1517935993911}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    z = max(arr)\n    \n    while max(arr) == z:\n        arr.remove(z)\n    \n    print(max(arr))\n    \n    \n     \n    \n\n\n","offset":132,"fileType":"python3","requestStartTime":1517936009042}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nsum = {} # vector of size n with num of coins of each used for each sum\n\ndef getWays(n, c, i):\n    # Complete this function\n    if n == 0:\n        return 1\n    if len(c) == 0 or n < 0:\n        return 0\n    \n    ways = 0\n    \n    for i in range(len(c)):\n        this_ways = getWays(n-c[i],c[i:],i)\n        if this_ways > 0:\n            sum[n-c[i]].\n        \n    return ways\n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\nc = list(map(int, input().strip().split(' ')))\n# Print the number of ways of making change for 'n' units using coins having the values given by 'c'\nprint(getWays(n, c, 0))\n\n\n","offset":377,"fileType":"python3","requestStartTime":1517936077747}}
{"body": {"column":11,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nsum = {} # vector of size n with num of coins of each used for each sum\n\ndef getWays(n, c, i):\n    # Complete this function\n    if n == 0:\n        return 1\n    if len(c) == 0 or n < 0:\n        return 0\n    try:\n        return sum[n]\n    except:\n    \n    ways = 0\n    \n    for i in range(len(c)):\n        this_ways = getWays(n-c[i],c[i:],i)\n        if this_ways > 0:\n            sum[n-c[i]] = this_ways\n         \n    return ways\n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\nc = list(map(int, input().strip().split(' ')))\n# Print the number of ways of making change for 'n' units using coins having the values given by 'c'\nprint(getWays(n, c, 0))\n\n\n","offset":274,"fileType":"python3","requestStartTime":1517936159842}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\ndef Transfom(s):\n    return s\n\nstdin.\n\n","offset":123,"fileType":"python3","requestStartTime":1517936433502}}
{"body": {"column":4,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\ndef Transfom(s):\n    return s\n\nsys.stdin.re\n\n","offset":121,"fileType":"python3","requestStartTime":1517936438628}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\ndef Transfom(s):\n    return s\n\ncases = int(sys.stdin.readline())\n\nfor i in range(0,cases):\n\n","offset":176,"fileType":"python3","requestStartTime":1517936476517}}
{"body": {"column":7,"line":5,"wordToComplete":"","code":"\nli=[]\nS = str(input().strip())\nli.append(S)\nfor i in range(0,n-1):\n    li.\n    \n    \n\n\n\n\n","offset":76,"fileType":"python3","requestStartTime":1517936406163}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\ndef Transfom(s):\n    \n    for c = \n    return s\n\ncases = int(sys.stdin.readline())\n\nfor i in range(0,cases):\n    sys.stdin.readline() #not needed in Python \n    s = sys.stdin.readline()\n    result_s = Transfom(s)\n    sys.stdout.\n    \n    \n\n","offset":314,"fileType":"python3","requestStartTime":1517936619380}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    \n    for i in range(N):\n        if command==\"insert\":\n            N.\n\n\n","offset":122,"fileType":"python3","requestStartTime":1517936591959}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    \n    for i in range(N):\n        if command==\"insert\":\n            N.\n\n\n","offset":122,"fileType":"python3","requestStartTime":1517936594470}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\ndef generatePaldindromes():\n    A = {}\n    for i in range(10, 1000):\n        f = str(i)\n        l = f[::-1]\n        if len(f) % 2 != 0: A[int(f + l)] = None\n        else: A.{A[int(f + str(j) + l)] = None for j in range(0, 10)]       \n    return A\n\ndef getMaxPalindrom(A, n):\n    maxVal = 0\n    highest = 1000\n    for i in range(100, 1000):\n        if i > highest: break\n        for j in range(100, 1000):\n            m = i * j\n            if m > n: \n                highest = j\n                break\n            if m in A and m > maxVal: maxVal = m\n    return maxVal            \n\nt = int(input().strip())\nA = generatePaldindromes()\nfor a0 in range(t):\n    n = int(input().strip())\n    p = getMaxPalindrom(A, n)\n    print(p)\n\n","offset":175,"fileType":"python3","requestStartTime":1517936596140}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.\n    return ' '.join(map(string.capitalize(), string.split(' ')))\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":42,"fileType":"python3","requestStartTime":1517936928812}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    ar.\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":98,"fileType":"python3","requestStartTime":1517936696219}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\nli=[]\nS = str(input().strip())\nli.append(S)\nfor i in range(0,n-1):\n    m=li.index(li[i])\n    if (m%2==0):\n        m.\n        \n    \n    \n\n\n\n\n","offset":118,"fileType":"python3","requestStartTime":1517936716363}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    ar.sort()\n    a=ar[-1]\n    print(ar.)\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":131,"fileType":"python3","requestStartTime":1517936736430}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\nli=[]\nS = str(input().strip())\nli.append(S)\nfor i in range(0,n-1):\n    m=li.index(li[i])\n    if (m%2==0):\n        n.\n      \n        \n    \n    \n\n\n\n\n","offset":118,"fileType":"python3","requestStartTime":1517936740008}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom datetime imort *\ndef plusMinus(arr):\n    # Complete this function\n    return datetime.\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":120,"fileType":"python3","requestStartTime":1517936821953}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x.\n    return ' '.join(map(string.capitalize(), string.split(' ')))\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":85,"fileType":"python3","requestStartTime":1517937249586}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nli=[]\nS = str(input().strip())\nli.append(S)\nfor i in range(0,n-1):\n    m=li.index(li[i])\n    if (m%2==0):\n        x=li.\n      \n        \n    \n    \n\n\n\n\n","offset":121,"fileType":"python3","requestStartTime":1517937054664}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nli=[]\nodd[]\nev[]\nS = str(input().strip())\nli.append(S)\nfor i in range(0,n-1):\n    m=li.index(li[i])\n    if (m%2==0):\n        x=ev.\n      \n        \n    \n    \n\n\n\n\n","offset":132,"fileType":"python3","requestStartTime":1517937072537}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x.startswith(^[a-zA-Z]):\n            x.\n    return ' '.join(map(string.capitalize(), string.split(' ')))\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":122,"fileType":"python3","requestStartTime":1517937330728}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x.startswith(^[a-zA-Z]):\n            x.capitalize()\n    return ' '.\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":150,"fileType":"python3","requestStartTime":1517937356033}}
{"body": {"column":24,"line":24,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nsum = {} # vector of size n with num of coins of each used for each sum\n\ndef getWays(n, c, i_vect):\n    # Complete this function\n    if n == 0:\n        return 1\n    if len(c) == 0 or n < 0:\n        return 0\n    try:\n        return len(sum[n])\n    except:\n        pass\n    \n    ways = 0\n    \n    for i in range(len(c)):\n        i_vect[i] += 1\n        this_ways = getWays(n-c[i],c[i:],i_vect)\n        if this_ways > 0 and n-c[i] > 0 and i_vect not in sum[n-c[i]]:\n            sum[n-c[i]]. = this_ways\n            print(sum)\n            print(n-c[i])\n            print(this_ways)\n        ways += this_ways\n        i_vect[i] -= 1\n    \n    return ways\n\nn, m = input().strip().split(' ')\nn, m = [int(n), int(m)]\nc = list(map(int, input().strip().split(' ')))\n# Print the number of ways of making change for 'n' units using coins having the values given by 'c'\nprint(getWays(n, c, [0] * len(c)))\n\n\n","offset":516,"fileType":"python3","requestStartTime":1517937200590}}
{"body": {"column":31,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\ndef Transfom(s):\n    ocurrences = {} \n    g = ''\n    for c in s:\n        count = 0\n        if c in ocurrences.keys():\n            count = ocurrences[c]\n        \n        new_letter = chr((ord(c) - ord('a') + count)%(ord('z')-ord('a')+1) + ord('a'))\n        \n        g+=new_letter\n        ocurrences[c] = count+1\n        \n    return g\n\ncases = int(sys.stdin.readline())\n\nfor i in range(0,cases):\n    n = sys.stdin.readline() \n    s = sys.stdin.readline()[0:]\n    g = Transfom(s)\n    sys.stdout.write(g+'\\n')\n    \n    \n\n","offset":541,"fileType":"python3","requestStartTime":1517937435726}}
{"body": {"column":31,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\ndef Transfom(s):\n    ocurrences = {} \n    g = ''\n    for c in s:\n        count = 0\n        if c in ocurrences.keys():\n            count = ocurrences[c]\n        \n        new_letter = chr((ord(c) - ord('a') + count)%(ord('z')-ord('a')+1) + ord('a'))\n        \n        g+=new_letter\n        ocurrences[c] = count+1\n        \n    return g\n\ncases = int(sys.stdin.readline())\n\nfor i in range(0,cases):\n    n = sys.stdin.readline() \n    s = sys.stdin.readline()[0:]\n    g = Transfom(s)\n    sys.stdout.write(g+'\\n')\n    \n    \n\n","offset":541,"fileType":"python3","requestStartTime":1517937448498}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x[0].\n    return ' '.join(name)\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":88,"fileType":"python3","requestStartTime":1517937576105}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\nli=[]\nodd[]\nev[]\nS = str(input().strip())\nli.append(S)\nfor i in range(0,n-1,2):\n    ev.\n   \n      \n        \n    \n    \n\n\n\n\n","offset":89,"fileType":"python3","requestStartTime":1517937339428}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x[0].isalpah():\n            x.\n    return ' '.join(name)\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":113,"fileType":"python3","requestStartTime":1517937591175}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    a=[]\n    for i in range(len(s)-2,len(s)-1):\n        a.\n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":140,"fileType":"python3","requestStartTime":1517937359498}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nnum = int(input())\nnums = []\nfor i in range(num):\n    temp = int(input())\n    nums.\n\ndef sort(A):\n    quicksort(A,1,n)\n\ndef quicksort(A, low, high):\n    if (low < high):\n        pivotLocation = Partition(A,low,high)\n        quicksort(A,low, pivotLocation - 1)\n        quicksort(A, pivotLocation+1, high)\n\n\n","offset":85,"fileType":"python3","requestStartTime":1517937368312}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    a=[]\n    for i in s:\n        if(i.)\n        a.append()\n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":120,"fileType":"python3","requestStartTime":1517937403688}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x[0].isalpha():\n            x.x.capitalize()\n    return ' '.join(name)\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":113,"fileType":"python3","requestStartTime":1517937717342}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    for x in name:\n        if x[0].isalpha():\n            x.replace(x,x.capitalize())\n    return ' '.join(name)\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":113,"fileType":"python3","requestStartTime":1517937751351}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    a=[]\n    for i\n    for i in s:\n        a.\n        if(i.isalpha()):\n            a.append(i)\n    if(a=='pm'):\n        \n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":127,"fileType":"python3","requestStartTime":1517937518923}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    a=[]\n    for i\n    for i in s:\n        a.append(i.)\n        if(i.isalpha()):\n            a.append(i)\n    if(a=='pm'):\n        \n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":136,"fileType":"python3","requestStartTime":1517937538907}}
{"body": {"column":20,"line":3,"wordToComplete":"","code":"\nimport sys\n\ncount = int(input().)\ncontacts = {}\nfor i in range(count):\n    name, num = input().strip().split(' ')\n    contacts[name]=num\nwhile(True):\n    try:\n        fname = input().strip()\n        if fname in contacts:\n            print('{}={}'.format(fname, contacts[fname]))\n        else:\n            print('Not found.')\n    except EOFError:\n        break\n        \n\n\n","offset":34,"fileType":"python3","requestStartTime":1517937542742}}
{"body": {"column":21,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        \n\n\n","offset":71,"fileType":"python3","requestStartTime":1517937545164}}
{"body": {"column":21,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        \n\n\n","offset":71,"fileType":"python3","requestStartTime":1517937549311}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    a=[]\n    for i\n    for i in range(len(s)):\n        a.append(i.s.)\n        if(i.isalpha()):\n            a.append(i)\n    if(a=='pm'):\n        \n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":150,"fileType":"python3","requestStartTime":1517937571242}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    na=[]\n    for x in name:\n        if x[0].isalpha():\n            na.x.replace(x,x.capitalize())\n    return ' '.join(name)\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":124,"fileType":"python3","requestStartTime":1517937839508}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        if n%2 != 0:\n\n\n","offset":92,"fileType":"python3","requestStartTime":1517937615327}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\ndef capitalize(string):\n    name=string.split(\" \")\n    na=[]\n    for x in name:\n        if x[0].isalpha():\n            na.append(x.capitalize())\n        else:\n            na.\n    return ' '.join(name)\n            \n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":176,"fileType":"python3","requestStartTime":1517937873917}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nnum = int(input())\nnums = []\nfor i in range(num):\n    temp = int(input())\n    nums.append(temp)\n\n\n\ndef sort(A):\n    quicksort(A,1,A.)\n\ndef quicksort(A, low, high):\n    if (low < high):\n        pivotLocation = Partition(A,low,high)\n        quicksort(A,low, pivotLocation - 1)\n        quicksort(A, pivotLocation+1, high)\n\ndef partition(A,low,high):\n    pivot = A[low];\n    leftwall = low;\n    for i in range(low+1, high):\n        if (A[i] < pivot):\n            leftwall = leftwall+1\n            swap(A[i],A[leftwall])\n    swap(A[low],A[leftwall])\n    return leftwall\n    \n    \nsort(nums)\n\n","offset":134,"fileType":"python3","requestStartTime":1517937658558}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        if n%2 != 0 && 2 <= n <= 20 & n%2 == 0:\n            print(\"Weird\")\n        else\n            print(\"Not Weird\")\n    else\n        print(\"Not allowed\"):\n\n\n","offset":229,"fileType":"python3","requestStartTime":1517937731595}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        if n%2 != 0 && 2 <= n <= 20 & n%2 == 0:\n            print(\"Weird\")\n        else\n            print(\"Not Weird\")\n    else:\n        print(\"Not allowed\")\n\n\n","offset":200,"fileType":"python3","requestStartTime":1517937733178}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        if n%2 != 0 && 2 <= n <= 20 & n%2 == 0:\n            print(\"Weird\")\n        else:\n            print(\"Not Weird\")\n    else:\n        print(\"Not allowed\")\n\n\n","offset":160,"fileType":"python3","requestStartTime":1517937735094}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nx = int(input())\ne = list(map(int, input().))\n\n","offset":45,"fileType":"python3","requestStartTime":1517937831610}}
{"body": {"column":34,"line":2,"wordToComplete":"","code":"\nx = int(input())\ne = list(map(int, input().strip().))\n\n","offset":53,"fileType":"python3","requestStartTime":1517937833688}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nx = int(input())\ne = list(map(int, input().strip().split()))\nprint (e.)\n\n","offset":72,"fileType":"python3","requestStartTime":1517937865199}}
{"body": {"column":6,"line":3,"wordToComplete":"","code":"\nx = int(input())\ne = list(map(int, input().strip().split()))\nr = e.\n\n","offset":69,"fileType":"python3","requestStartTime":1517937878872}}
{"body": {"column":25,"line":56,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\nimport datetime\nimport calendar\n\ndef twice_age(day1, day2):\n    date1 = parse_date(day1)\n    date2 = parse_date(day2)\n    \n    if date1 < date2:\n        older = date1\n        younger = date2\n    else:\n        older = date2\n        younger = date1\n    print(younger)\n    print(older)\n    \n    ## target_date - older = 2 * (target_date - younger)\n    ## target_date - older = 2 * target_date - 2 * younger\n    ## 2 * younger - older = target_date\n    \n    year = 2 * younger.year - older.year   \n    month = 2 * younger.month - older.month    \n    day = 2 * younger.day - older.day\n    return create_real_date(year, month, day)\n\ndef parse_date(date_string):\n    year, month, day = [int(j) for j in date_string.split('-')]\n    return datetime.date(year, month, day)\n\ndef create_real_date(year, month, day):\n    \n    while month < 1:\n        year -= 1\n        month += 12\n        \n    while month > 12:\n        year += 1\n        month -= 12\n    \n    while day < 1:\n        month -= 1\n        day -= calendar.monthrange(year, month + 1)\n        while month < 1:\n            year -= 1\n            month += 12\n        while month > 12:\n            year += 1\n            month -=12\n    \n    while day > calendar.\n    \n    return \"%s-%s-%s\" % (year, month, day)\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    day1 = input()\n\n    day2 = input()\n\n    res = twice_age(day1, day2)\n\n    f.write(res + \"\\n\")\n\n    f.close()\n\n","offset":1275,"fileType":"python3","requestStartTime":1517937890048}}
{"body": {"column":11,"line":4,"wordToComplete":"2.","code":"\nx = int(input())\ne = list(map(int, input().strip().split()))\nr = e.count(1)\nprint (r/2.)\n\n","offset":89,"fileType":"python3","requestStartTime":1517937897795}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            age = initialAge\n        else:\n            self.age = initialAge\n            age = 0\n            print (\"Age is not valid, setting age to 0\")\n        return age   \n            \n    def amIOld(self):\n        if age < 13:\n            print (\"You are young\")\n        elif age >= 13 or age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":149,"fileType":"python3","requestStartTime":1517937984748}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            age = initialAge\n        else:\n            self._age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0\")\n        return age   \n            \n    def amIOld(self):\n        if age < 13:\n            print (\"You are young\")\n        elif age >= 13 or age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":184,"fileType":"python3","requestStartTime":1517937989107}}
{"body": {"column":14,"line":3,"wordToComplete":"","code":"\ndef capitalize(string):\n    rex=[]\n    s1=string.\n    res = []\n    sl = string.split(' ')\n    for sle in sl:\n        if len(sle) == 0:\n        res.append('')\n    else:\n        res.append(sle[0].upper() + sle[1:])\n    return ' '.join(res)\n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":51,"fileType":"python3","requestStartTime":1517938236296}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self._age = initialAge\n            self._age = 0\n            print (\"Age is not valid, setting age to 0\")\n        return age   \n            \n    def amIOld(self):\n        if age < 13:\n            print (\"You are young\")\n        elif age >= 13 or age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":106,"fileType":"python3","requestStartTime":1517937996784}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self._age = initialAge\n            self._age = 0\n            print (\"Age is not valid, setting age to 0\")\n        return age   \n            \n    def amIOld(self):\n        if age < 13:\n            print (\"You are young\")\n        elif age >= 13 or age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":106,"fileType":"python3","requestStartTime":1517938005071}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self._age = initialAge\n        else:\n            self._age = initialAge\n            self._age = 0\n            print (\"Age is not valid, setting age to 0\")\n        return age   \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young\")\n        elif age >= 13 or age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":329,"fileType":"python3","requestStartTime":1517938012129}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self._age = initialAge\n        else:\n            self._age = initialAge\n            self._age = 0\n            print (\"Age is not valid, setting age to 0\")\n        return age   \n            \n    def amIOld(self):\n        if self._age < 13:\n            print (\"You are young\")\n        elif self.age >= 13 or age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":394,"fileType":"python3","requestStartTime":1517938018871}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\ndef capitalize(string):\n    rex=[]\n    s1=string.split(\" \")\n    for word in s1:\n        if len(word)==0:\n            res.\n    res = []\n    sl = string.split(' ')\n    for sle in sl:\n        if len(sle) == 0:\n        res.append('')\n    else:\n        res.append(sle[0].upper() + sle[1:])\n    return ' '.join(res)\n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":123,"fileType":"python3","requestStartTime":1517938271110}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\ndef capitalize(string):\n    res=[]\n    s1=string.split(\" \")\n    for word in s1:\n        if len(word)==0:\n            res.append(\"\")\n        else:\n            res.\n    res = []\n    sl = string.split(' ')\n    for sle in sl:\n        if len(sle) == 0:\n        res.append('')\n    else:\n        res.append(sle[0].upper() + sle[1:])\n    return ' '.join(res)\n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":164,"fileType":"python3","requestStartTime":1517938294214}}
{"body": {"column":31,"line":8,"wordToComplete":"","code":"\ndef capitalize(string):\n    res=[]\n    s1=string.split(\" \")\n    for word in s1:\n        if len(word)==0:\n            res.append(\"\")\n        else:\n            res.append(word[0].)\n    res = []\n    sl = string.split(' ')\n    for sle in sl:\n        if len(sle) == 0:\n        res.append('')\n    else:\n        res.append(sle[0].upper() + sle[1:])\n    return ' '.join(res)\n    \n    \n    \n\n   \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":179,"fileType":"python3","requestStartTime":1517938301470}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef fibonacciModified(t1, t2, n):\n    if n == 1:\n        return t1 + (t2 * t2)\n    else:\n\n\nt1, t2, n = input().strip().split(' ')\nt1, t2, n = [int(t1), int(t2), int(n)]\nresult = fibonacciModified(t1, t2, n)\nprint(result)\n\n\n","offset":118,"fileType":"python3","requestStartTime":1517938129993}}
{"body": {"column":30,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hackerrankInString(s):\n    ex = 'hackerrank'\n    ex1 = list(ex)\n    ex2 = list(s)\n    re = list\n    for n in ex1: \n        for k in ex2:\n            if(n == k):\n                re.append(ex2.)\n    print(l)\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        s = input().strip()\n        result = hackerrankInString(s)\n        print(result)\n\n\n","offset":225,"fileType":"python3","requestStartTime":1517938153955}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 100:\n        if n%2 != 0 or 2 <= n <= 20 and n%2 == 0:\n            print(\"Weird\")\n        elif:\n        else:\n            print(\"Not Weird\")\n    else:\n        print(\"Not allowed\")\n\n\n","offset":162,"fileType":"python3","requestStartTime":1517938161756}}
{"body": {"column":37,"line":15,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = age + 3\n        amIOld(self)\n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":396,"fileType":"python3","requestStartTime":1517938214002}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        afterAge = self.age + 3\n        \n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":683,"fileType":"python3","requestStartTime":1517938231369}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.\n        \n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":672,"fileType":"python3","requestStartTime":1517938287702}}
{"body": {"column":55,"line":9,"wordToComplete":"Age is not valid, setting age to 0.\"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0.\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\n        \n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":251,"fileType":"python3","requestStartTime":1517938331531}}
{"body": {"column":39,"line":16,"wordToComplete":"You are a teenager.\"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0.\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager.\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\n        \n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":446,"fileType":"python3","requestStartTime":1517938332237}}
{"body": {"column":34,"line":14,"wordToComplete":"You are young.\"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0.\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young.\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager.\")\n        else:\n            print (\"You are old\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\n        \n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":358,"fileType":"python3","requestStartTime":1517938333333}}
{"body": {"column":32,"line":18,"wordToComplete":"You are old.\"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        \n        if initialAge >= 0 :\n            self.age = initialAge\n        else:\n            self.age = initialAge\n            self.age = 0\n            print (\"Age is not valid, setting age to 0.\")\n        \n            \n    def amIOld(self):\n        if self.age < 13:\n            print (\"You are young.\")\n        elif self.age >= 13 and self.age < 18:\n            print (\"You are a teenager.\")\n        else:\n            print (\"You are old.\")\n      # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\n        \n        \n        \n            \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":496,"fileType":"python3","requestStartTime":1517938335356}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hackerrankInString(s):\n    ex = 'hackerrank'\n    ex1 = list(ex)\n    ex2 = list(s)\n    re = list()\n    for n in ex1): \n        for k in ex2:\n            if(n == k):\n                re.\n                for el in range(ex2):\n                    \n    print(re)\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        s = input().strip()\n        result = hackerrankInString(s)\n        print(result)\n\n\n","offset":217,"fileType":"python3","requestStartTime":1517938378679}}
{"body": {"column":30,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hackerrankInString(s):\n    ex = 'hackerrank'\n    ex1 = list(ex)\n    ex2 = list(s)\n    re = list()\n    for n in ex1): \n        for k in ex2:\n            if(n == k):\n                re.append(ex2.)\n                for el in range(ex2):\n                    \n    print(re)\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        s = input().strip()\n        result = hackerrankInString(s)\n        print(result)\n\n\n","offset":228,"fileType":"python3","requestStartTime":1517938384350}}
{"body": {"column":24,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 20:\n        for i in 1 to n:\n\n\n","offset":95,"fileType":"python3","requestStartTime":1517938394520}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hackerrankInString(s):\n    ex = 'hackerrank'\n    ex1 = list(ex)\n    ex2 = list(s)\n    re = list()\n    for n in ex1: \n        for k in ex2:\n            if(n == k):\n                re.append(ex2.index(k))\n                for el in range(ex2.index(k)):\n                    ex2.\n    print(re)\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        s = input().strip()\n        result = hackerrankInString(s)\n        print(result)\n\n\n","offset":308,"fileType":"python3","requestStartTime":1517938421955}}
{"body": {"column":29,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 20:\n        for i in range(1, n):\n\n\n","offset":100,"fileType":"python3","requestStartTime":1517938434455}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hackerrankInString(s):\n    ex = 'hackerrank'\n    ex1 = list(ex)\n    ex2 = list(s)\n    re = list()\n    for n in ex1: \n        for k in ex2:\n            if(n == k):\n                re.append(ex2.index(k))\n                for el in range(ex2.index(k)):\n                    ex2.\n    print(re)\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        s = input().strip()\n        result = hackerrankInString(s)\n        print(result)\n\n\n","offset":308,"fileType":"python3","requestStartTime":1517938436444}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 20:\n        for i in range(1, n):\n            print(i^2)\n    else:\n\n\n","offset":133,"fileType":"python3","requestStartTime":1517938464956}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if 1 <= n <= 20:\n        for i in range(1, n):\n            print(i^2)\n    else:\n\n\n","offset":133,"fileType":"python3","requestStartTime":1517938467831}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hackerrankInString(s):\n    ex = 'hackerrank'\n    ex1 = list(ex)\n    ex2 = list(s)\n    re = list()\n    for n in ex1: \n        for k in ex2:\n            if(n == k):\n                re.append(ex2.index(k))\n                for el in range(ex2.index(k)):\n                    ex2.\n    print(re)\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        s = input().strip()\n        result = hackerrankInString(s)\n        print(result)\n\n\n","offset":308,"fileType":"python3","requestStartTime":1517938478539}}
{"body": {"column":27,"line":5,"wordToComplete":"","code":"\nimport math\n\n\ndef is_prime(n):\n    for i in range(2, math.)\n\np = int(input().strip())\nfor a0 in range(p):\n    n = int(input().strip())\n    \n    \n\n","offset":60,"fileType":"python3","requestStartTime":1517938603832}}
{"body": {"column":41,"line":8,"wordToComplete":"but well we have the different costs.","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs.\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":170,"fileType":"python3","requestStartTime":1517938609651}}
{"body": {"column":15,"line":15,"wordToComplete":"n","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    p1 = head\n    p2 = head.n\n    pass\n    \n\n\n","offset":330,"fileType":"python3","requestStartTime":1517938708369}}
{"body": {"column":92,"line":15,"wordToComplete":"we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first.","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first.\n    \n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":589,"fileType":"python3","requestStartTime":1517938873427}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    p1 = head\n    p2 = None\n    if p1:\n        p2 = head.next_node\n    found = False\n    while (p1 != None and p2 != None and found = False):\n        if p1.\n    pass\n    \n\n\n","offset":457,"fileType":"python3","requestStartTime":1517938888215}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    p1 = head\n    p2 = None\n    if p1:\n        p2 = head.next_node\n    found = False\n    while (p1 != None and p2 != None and found = False):\n        if p1 is p2:\n            found = True\n        p1 = p1.\n    pass\n    \n\n\n","offset":505,"fileType":"python3","requestStartTime":1517938936525}}
{"body": {"column":17,"line":23,"wordToComplete":"n","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    p1 = head\n    p2 = None\n    if p1:\n        p2 = head.next_node\n    found = False\n    while (p1 != None and p2 != None and found = False):\n        if p1 is p2:\n            found = True\n        p1 = p1.next\n        p2 = p2.n\n    pass\n    \n\n\n","offset":527,"fileType":"python3","requestStartTime":1517938940589}}
{"body": {"column":22,"line":23,"wordToComplete":"n","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    p1 = head\n    p2 = None\n    if p1:\n        p2 = head.next_node\n    found = False\n    while (p1 != None and p2 != None and found = False):\n        if p1 is p2:\n            found = True\n        p1 = p1.next\n        p2 = p2.next.n\n    pass\n    \n\n\n","offset":532,"fileType":"python3","requestStartTime":1517938941143}}
{"body": {"column":67,"line":18,"wordToComplete":"Let's suppose we have made the most expensive cut all the time.","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive cut all the time.\n    \n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":716,"fileType":"python3","requestStartTime":1517938971931}}
{"body": {"column":65,"line":19,"wordToComplete":"suppose we have another cut sequence where we didn't do that.","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":824,"fileType":"python3","requestStartTime":1517939036640}}
{"body": {"column":106,"line":26,"wordToComplete":"Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. ","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    c1 < c2 < c3 < c4\n    c1 < c2 < c3 < c5 < \n    \n    if after that the sequence of vertical and stays the same then \n    \n    Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. \n    \n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":1061,"fileType":"python3","requestStartTime":1517939157373}}
{"body": {"column":31,"line":3,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n    # Write your logic here\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":69,"fileType":"python3","requestStartTime":1517939275238}}
{"body": {"column":53,"line":33,"wordToComplete":"And here we should be doing the two H cuts first.","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    c1 < c2 < c3 < c4\n    c1 < c2 < c3 < c5 < \n    \n    if after that the sequence of vertical and stays the same then \n    \n    Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. \n    How do we choose to cut vertically or horizontally? Maybe we do the most expensive first? Doesn't seem\n    like it because we could have \n    \n    H 100 300000\n    V 101\n    \n    And here we should be doing the two H cuts first.\n    \n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":1294,"fileType":"python3","requestStartTime":1517939391600}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":154,"fileType":"python3","requestStartTime":1517939439808}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"users=[]  ## start with an empty list\nuser =input()  ## read first value in\nwhile user != '':  ## keep going til you read an empty space (ie no more input)\n    users += [user] ## add the value read in to the users list\n    user =input()    ## read the next value...\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfor user in users:\n    print (user.)\n\n","offset":372,"fileType":"python3","requestStartTime":1517939440377}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"users=[]  ## start with an empty list\nuser =input()  ## read first value in\nwhile user != '':  ## keep going til you read an empty space (ie no more input)\n    users += [user] ## add the value read in to the users list\n    user =input()    ## read the next value...\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfor user in users:\n    print (user).\n\n","offset":373,"fileType":"python3","requestStartTime":1517939469291}}
{"body": {"column":25,"line":6,"wordToComplete":"0.","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0.\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":180,"fileType":"python3","requestStartTime":1517939473425}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0:\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":180,"fileType":"python3","requestStartTime":1517939474459}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"users=[]  ## start with an empty list\nuser =input()  ## read first value in\nwhile user != '':  ## keep going til you read an empty space (ie no more input)\n    users += [user] ## add the value read in to the users list\n    user =input()    ## read the next value...\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfor user in users:\n    print (user.\n    \n\n","offset":372,"fileType":"python3","requestStartTime":1517939507956}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0:\n            return leap\n        else\n            leap = True\n            return leap\n    else:\n        return leap\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":275,"fileType":"python3","requestStartTime":1517939527499}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0:\n            return leap\n        else:\n            leap = True\n            return leap\n    else:\n        return leap\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":218,"fileType":"python3","requestStartTime":1517939529369}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\nimport datetime\n# Complete the function below.\n\ndef twice_age(day1, day2):\n    d1 = datetime().\n    d2 = datetime(day2)\n    print(d1)\n    print(d2)\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    day1 = input()\n\n    day2 = input()\n\n    res = twice_age(day1, day2)\n\n    f.write(res + \"\\n\")\n\n    f.close()\n\n","offset":135,"fileType":"python3","requestStartTime":1517939611588}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    list = []\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        list.\n        \n\n\n","offset":144,"fileType":"python3","requestStartTime":1517939621831}}
{"body": {"column":29,"line":7,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n            leap = True\n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":210,"fileType":"python3","requestStartTime":1517939657471}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                leap = True\n            else:\n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":256,"fileType":"python3","requestStartTime":1517939685695}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if 1900 <= year <= 10 ** 5:\n        raise ValueError('Year must be between 1900 and 100000')\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                leap = True\n            else:\n                leap = False\n        else:\n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":299,"fileType":"python3","requestStartTime":1517939719658}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self, title, author, price):\n        Book.\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":315,"fileType":"python3","requestStartTime":1517939749724}}
{"body": {"column":34,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    c1 < c2 < c3 < c4\n    c1 < c2 < c3 < c5 < \n    \n    if after that the sequence of vertical and stays the same then \n    \n    Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. \n    How do we choose to cut vertically or horizontally? Maybe we do the most expensive first? Doesn't seem\n    like it because we could have \n    \n    H 100 300000\n    V 101\n    \n    And here we should be doing the two H cuts first. We should sum the H cuts and the V cuts and choose the one\n    with the biggest value\n    \n    \"\"\"\n    cost_y = sorted(cost_y)\n    cost_x = sorted(cost_x)\n    \n    cost_v = sum(cost_y)\n    cost_h = sum(cost_x)\n\n    h_cuts = 0\n    v_cuts = 0 # number of cuts left\n    \n    result = 0\n    while cost_v + cost_h > 0: # cost left\n        if cost_v < cost_h:\n            biggest_cost = cost_y.\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":1683,"fileType":"python3","requestStartTime":1517939774892}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self, title, author, price):\n        Book.__init__(self, title, author)\n        self.\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":358,"fileType":"python3","requestStartTime":1517939769578}}
{"body": {"column":33,"line":14,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self, title, author, price):\n        Book.__init__(self, title, author)\n        self.price = price\n        \n    def display():\n        print(\"Title: %s\" % self.)\n\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":433,"fileType":"python3","requestStartTime":1517939834462}}
{"body": {"column":13,"line":54,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    c1 < c2 < c3 < c4\n    c1 < c2 < c3 < c5 < \n    \n    if after that the sequence of vertical and stays the same then \n    \n    Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. \n    How do we choose to cut vertically or horizontally? Maybe we do the most expensive first? Doesn't seem\n    like it because we could have \n    \n    H 100 300000\n    V 101\n    \n    And here we should be doing the two H cuts first. We should sum the H cuts and the V cuts and choose the one\n    with the biggest value\n    \n    \"\"\"\n    cost_y = sorted(cost_y)\n    cost_x = sorted(cost_x)\n    \n    cost_v = sum(cost_y)\n    cost_h = sum(cost_x)\n\n    h_cuts = 0\n    v_cuts = 0 # number of cuts left\n    \n    result = 0\n    while cost_v + cost_h > 0: # cost left\n        if cost_v > cost_h:\n            biggest_cost = cost_y.pop()\n            cost_v -= biggest_cost\n            v_cuts += 1\n            \n            result += biggest_cost * h_cuts\n        else:\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":1818,"fileType":"python3","requestStartTime":1517939850936}}
{"body": {"column":34,"line":55,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    c1 < c2 < c3 < c4\n    c1 < c2 < c3 < c5 < \n    \n    if after that the sequence of vertical and stays the same then \n    \n    Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. \n    How do we choose to cut vertically or horizontally? Maybe we do the most expensive first? Doesn't seem\n    like it because we could have \n    \n    H 100 300000\n    V 101\n    \n    And here we should be doing the two H cuts first. We should sum the H cuts and the V cuts and choose the one\n    with the biggest value\n    \n    \"\"\"\n    cost_y = sorted(cost_y)\n    cost_x = sorted(cost_x)\n    \n    cost_v = sum(cost_y)\n    cost_h = sum(cost_x)\n\n    h_cuts = 0\n    v_cuts = 0 # number of cuts left\n    \n    result = 0\n    while cost_v + cost_h > 0: # cost left\n        if cost_v > cost_h:\n            biggest_cost = cost_y.pop()\n            cost_v -= biggest_cost\n            v_cuts += 1\n            \n            result += biggest_cost * h_cuts\n        else:\n            biggest_cost = cost_x.\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":1853,"fileType":"python3","requestStartTime":1517939855407}}
{"body": {"column":9,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    total_cost = meal_cost + ((tip_percent/100) * meal_cost) + ((tax_percent/100) * meal_cost)\n    print((tip_percent/100) * meal_cost)\n    print((tax_percent/100)*meal_cost)\n    print(int(10.25+1.74+0.51))\n    \n    math.\n    \n    if str(total_cost)[-1] == 5:\n        total_cost = math.ceil(total_cost)\n        \n    print('The total meal cost is', total_cost, 'dollars.')\n\n","offset":412,"fileType":"python3","requestStartTime":1517939974261}}
{"body": {"column":27,"line":34,"wordToComplete":"with the biggest value.","code":"\n#!/bin/python3\n\nimport sys\n\ndef boardCutting(cost_y, cost_x):\n    \"\"\"\n    probably we have a generic way of cutting this stuff\n    but well we have the different costs. We definitely have to\n    make all the cuts so the first cut must be the one with the least\n    cost?\n    \n    Making a vertical (resp horizontal) cut increases the cost of all horizontal (resp vertical) cuts left\n    \n    So do we prefer to make a horizontal cut or a vertical cut? Not the one with the least cost because if\n    we have one cut with cost 1 and one cut with cost 40 we prefer to make the 40 one first. We may want to do\n    the most expensive cuts first? \n    \n    Let's suppose we have made the most expensive (considering how many cuts it crosses) cut every time. Then\n    suppose we have another cut sequence where we didn't do that.\n    \n    c1 < c2 < c3 < c4\n    c1 < c2 < c3 < c5 < \n    \n    if after that the sequence of vertical and stays the same then \n    \n    Once we have decided whether to cut vertically or horizontally we have to cut the most expensive one. \n    How do we choose to cut vertically or horizontally? Maybe we do the most expensive first? Doesn't seem\n    like it because we could have \n    \n    H 100 300000\n    V 101\n    \n    And here we should be doing the two H cuts first. We should sum the H cuts and the V cuts and choose the one\n    with the biggest value.\n    \n    \n    \"\"\"\n    cost_y = sorted(cost_y)\n    cost_x = sorted(cost_x)\n    \n    cost_v = sum(cost_y)\n    cost_h = sum(cost_x)\n\n    h_cuts = 0\n    v_cuts = 0 # number of cuts left\n    \n    result = 0\n    while cost_v + cost_h > 0: # cost left\n        if cost_v > cost_h:\n            biggest_cost = cost_y.pop()\n            cost_v -= biggest_cost\n            v_cuts += 1\n            \n            result += biggest_cost * h_cuts\n        \n        if cost_v == cost_h and cost_y[-1] > \n        else:\n            biggest_cost = cost_x.pop()\n            cost_h -= biggest_cost\n            h_cuts += 1\n            result += biggest_cost * v_cuts\n            \n    return result\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        m, n = input().strip().split(' ')\n        m, n = [int(m), int(n)]\n        cost_y = list(map(int, input().strip().split(' ')))\n        cost_x = list(map(int, input().strip().split(' ')))\n        result = boardCutting(cost_y, cost_x)\n        print(result)\n\n\n","offset":1381,"fileType":"python3","requestStartTime":1517939982954}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    total_cost = meal_cost + ((tip_percent/100) * meal_cost) + ((tax_percent/100) * meal_cost)\n    print((tip_percent/100) * meal_cost)\n    print((tax_percent/100)*meal_cost)\n    print(int(10.25+1.74+0.51))\n    \n    total_cost = math.\n    \n    if str(total_cost)[-1] == 5:\n        total_cost = math.ceil(total_cost)\n        \n    print('The total meal cost is', total_cost, 'dollars.')\n\n","offset":425,"fileType":"python3","requestStartTime":1517939997355}}
{"body": {"column":46,"line":2,"wordToComplete":"s","code":"\nif __name__ == \"__main__\":\n    N, doors = input(), list(map(int,input().s))\n\n\n\n\n","offset":75,"fileType":"python3","requestStartTime":1517940064957}}
{"body": {"column":54,"line":2,"wordToComplete":"s","code":"\nif __name__ == \"__main__\":\n    N, doors = input(), list(map(int,input().strip().s))\n\n\n\n\n","offset":83,"fileType":"python3","requestStartTime":1517940065920}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(1,n):\n        print(i, end=\"\")\n\n\n","offset":74,"fileType":"python3","requestStartTime":1517940071562}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"users = []\nuserName = input()\nwhile userName != '':\n    users.append(userName)\n    userName = input()\n# Enter your code here:\nprefix = cnfs\nfor user in users:\n    names=users.lower().\nprint(userNames)\n","offset":184,"fileType":"python3","requestStartTime":1517940121340}}
{"body": {"column":46,"line":4,"wordToComplete":"Maximum count unlocks one door at a time.","code":"\nif __name__ == \"__main__\":\n    N, doors = input(), list(map(int,input().strip().split()))\n    \n    #Maximum count unlocks one door at a time.\n\n\n\n\n","offset":143,"fileType":"python3","requestStartTime":1517940209576}}
{"body": {"column":61,"line":11,"wordToComplete":"Minimum count needs to find all sets of two consecutive.","code":"\nif __name__ == \"__main__\":\n    N, doors = input(), list(map(int,input().strip().split()))\n    \n    maxi, mini = 0, 0\n    \n    #Maximum count unlocks one door at a time.\n    for door in doors:\n        if door == 1:\n            maxi += 1\n            \n    #Minimum count needs to find all sets of two consecutive.\n\n\n\n\n","offset":312,"fileType":"python3","requestStartTime":1517940239066}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nif __name__ == \"__main__\":\n    N, doors = input(), list(map(int,input().strip().split()))\n    \n    maxi, mini = 0, 0\n    \n    #Maximum count unlocks one door at a time.\n    for door in doors:\n        if door == 1:\n            maxi += 1\n            \n    #Minimum count needs to find all sets of two consecutive.\n    idx = 0\n    while idx < doors.\n\n\n\n\n","offset":347,"fileType":"python3","requestStartTime":1517940261824}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"users = []\nuserName = input()\nwhile userName != '':\n    users.append(userName)\n    userName = input()\n# Enter your code here:\nprefix = cnfs\nuserNames = []\nfor user in users:\n    names = user.lower().split()\n    firstName = names[0]\n    lastName = names[1]\n    userNames.\n    \nprint(userNames)\n","offset":271,"fileType":"python3","requestStartTime":1517940286026}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    print(range(1:, end=\"\")\n\n\n","offset":68,"fileType":"python3","requestStartTime":1517940328843}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":126,"fileType":"python3","requestStartTime":1517940352973}}
{"body": {"column":54,"line":5,"wordToComplete":"Age is not valid, setting age to 0.'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0.')\n        self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":192,"fileType":"python3","requestStartTime":1517940451172}}
{"body": {"column":55,"line":5,"wordToComplete":"Age is not valid, setting age to 0..'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n        self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":193,"fileType":"python3","requestStartTime":1517940451299}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.\n        self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":213,"fileType":"python3","requestStartTime":1517940468636}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":397,"fileType":"python3","requestStartTime":1517940638420}}
{"body": {"column":33,"line":12,"wordToComplete":"You are young.'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young.')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":438,"fileType":"python3","requestStartTime":1517940662181}}
{"body": {"column":34,"line":12,"wordToComplete":"You are young..'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":439,"fileType":"python3","requestStartTime":1517940662312}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":460,"fileType":"python3","requestStartTime":1517940674076}}
{"body": {"column":22,"line":13,"wordToComplete":"a","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    nums = list(range(l, r))\n    odd_nums = []\n    for n in nums:\n        if n % 2 != 0:\n            odd_nums.a\n        \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":206,"fileType":"python3","requestStartTime":1517940738260}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":477,"fileType":"python3","requestStartTime":1517940776983}}
{"body": {"column":31,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    for i in range(n+1, 1, -1):\n    print(\" \"*)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":79,"fileType":"python3","requestStartTime":1517940789941}}
{"body": {"column":38,"line":14,"wordToComplete":"You are a teenager.'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager.')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":523,"fileType":"python3","requestStartTime":1517940797663}}
{"body": {"column":39,"line":14,"wordToComplete":"You are a teenager..'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager..')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":524,"fileType":"python3","requestStartTime":1517940797805}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\ndef steps(n, size):\n    if size == n:\n        return 1\n    elif size >\n    else:\n        return steps(n,size+1)\n\ns = int(input().strip())\nfor a0 in range(s):\n    n = int(input().strip())\n\n\n","offset":72,"fileType":"python3","requestStartTime":1517940813425}}
{"body": {"column":31,"line":16,"wordToComplete":"You are old.'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager..')\n        else:\n            print('You are old.')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":572,"fileType":"python3","requestStartTime":1517940818923}}
{"body": {"column":32,"line":16,"wordToComplete":"You are old..'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager..')\n        else:\n            print('You are old..')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":573,"fileType":"python3","requestStartTime":1517940820033}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\nimport numpy as np\nfrom sklearn import ensemble\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    startDate=startDate.split('-')\n    daystart=int(startDate[2])\n    endDate=endDate.split('-')\n    dayend=int(endDate[2])\n    numberOfDays=(dayend-daystart)+1\n    rows=24\n    cols=numberOfDays\n    datamatrix=[[temperature[i] for i in range(len(temperature)) ] for y in range(cols)]\n    model=ensemble.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":484,"fileType":"python3","requestStartTime":1517941046054}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager..')\n        else:\n            print('You are old..')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":674,"fileType":"python3","requestStartTime":1517940903196}}
{"body": {"column":40,"line":20,"wordToComplete":"","code":"\nfrom math import *\n\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\nXY = []\nXsq = []\nYsq = []\n\nfor i in range(0, 10):\n    XY.append(phys[i] * hist[i])\n    Xsq.append(phys[i] * phys[i])\n    Ysq.append(hist[i] * hist[i])\n    \nXsum = sum(phys)\nYsum = sum(hist)\nXYsum = sum(XY)\nXsqsum = sum(Xsq)\nYsqsum = sum(Ysq)\n\nr = (10 * XYsum - (Xsum * Ysum)) / math.sqrt()\n\n","offset":392,"fileType":"python3","requestStartTime":1517940979908}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"\nfrom itertools import product\ndef list_pro(a,b):\n    return list(product(a,b)).\n\nprint(list_pro((1,2)(3,4)))\n\n","offset":81,"fileType":"python3","requestStartTime":1517940989348}}
{"body": {"column":32,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom datetime import datetime\nimport dateutil.parser\nimport sys\narray = []\nd = {}\nfor line in sys.stdin:\n    array.append(line)\n    d = {line.split(\\t)[0],line.}\narray = [a.replace('\\n','') for a in array]\n    \nrange_start = dateutil.parser.parse(array[0]).replace(tzinfo=None)\nrange_end = dateutil.parser.parse(array[1]).replace(tzinfo=None)\nnum_of_lines = int(array[2])\n\narray.remove(array[0])\narray.remove(array[1])\narray.remove(array[2])\n\n#print(range_start, range_end, num_of_lines)\n\n#print(array)\n\narray2 = []\nfor x in array:\n    date = dateutil.parser.parse(x.split('\\t')[0]).replace(tzinfo=None)\n    array2.append(date)    \n\n\nfor date in array2:\n    if range_start <= date <= range_end:\n        print('hello')\n        print(date)\n\n\n\n","offset":232,"fileType":"python3","requestStartTime":1517941004973}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0..')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young..')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager..')\n        else:\n            print('You are old..')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":674,"fileType":"python3","requestStartTime":1517941014299}}
{"body": {"column":23,"line":20,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0.')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young.')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager.')\n        else:\n            print('You are old.')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        new_age = self.\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":680,"fileType":"python3","requestStartTime":1517941176167}}
{"body": {"column":25,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    maximum = 0\n    minimum = 0\n    for i in range(0, len(g_from)):\n        curr_min = g_from[i]\n        curr_node = g_to.g_to[i]\n        while (curr_node in g_to):\n            curr_node = g_to[i]\n        if (curr_node - curr_min > maximum - minimum):\n            maximum = curr_node\n            minimum = curr_min\n    return maximum - minimum\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":416,"fileType":"python3","requestStartTime":1517941235302}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if n >\n\n\n","offset":60,"fileType":"python3","requestStartTime":1517970065217}}
{"body": {"column":13,"line":21,"wordToComplete":"","code":"\nfrom math import *\n\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\nXY = []\nXsq = []\nYsq = []\n\nfor i in range(0, 10):\n    XY.append(phys[i] * hist[i])\n    Xsq.append(phys[i] * phys[i])\n    Ysq.append(hist[i] * hist[i])\n    \nXsum = sum(phys)\nYsum = sum(hist)\nXYsum = sum(XY)\nXsqsum = sum(Xsq)\nYsqsum = sum(Ysq)\n\nnumer = ((10 * XYsum) - (Xsum * Ysum))\ndenom = math.sqrt((10*Xsqsum - Xsum**2)(10*Ysqsum - Ysum**2))\n\nresult = numer / denom\nprint(result)\n\n","offset":404,"fileType":"python3","requestStartTime":1517941323259}}
{"body": {"column":23,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    maximum = 0\n    minimum = 0\n    for i in range(0, len(g_from)):\n        components = []\n        curr_min = g_from[i]\n        curr_max = g_to[i]\n        while (curr_max in g_from):\n            components.\n            curr_max = g_to[g_from.index(curr_max)]\n        if (curr_max - curr_min > maximum - minimum):\n            maximum = curr_max\n            minimum = curr_min\n    return maximum - minimum\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":501,"fileType":"python3","requestStartTime":1517941543477}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    if a >\n\n\n","offset":81,"fileType":"python3","requestStartTime":1517970389285}}
{"body": {"column":37,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    if a >= 1 and a <= 10**10 and b >\n\n\n","offset":108,"fileType":"python3","requestStartTime":1517970405575}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    for vote in votes:\n        votes.\n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":155,"fileType":"python3","requestStartTime":1517941812514}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if n >\n\n\n","offset":60,"fileType":"python3","requestStartTime":1517970630313}}
{"body": {"column":30,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    for vote in votes:\n        if vote not in canidates:\n            votes.count(vote)\n            print(vote, votes.)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":235,"fileType":"python3","requestStartTime":1517941880922}}
{"body": {"column":21,"line":1,"wordToComplete":"","code":"\ndef checkPrime(,slef.n):\n    \n\nT = int(input())\nfor i in range(T):\n    \n\n","offset":23,"fileType":"python3","requestStartTime":1517941897371}}
{"body": {"column":20,"line":1,"wordToComplete":"","code":"\ndef checkPrime(self.n):\n    \n\nT = int(input())\nfor i in range(T):\n    \n\n","offset":22,"fileType":"python3","requestStartTime":1517941899179}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    for vote in votes:\n        if vote not in canidates:\n            votes.count(vote)\n            canidates.\n            print(vote, votes.count(vote))\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":227,"fileType":"python3","requestStartTime":1517941923176}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    for vote in votes:\n        if vote not in canidates:\n            tally = votes.count(vote)\n            canidates.append(vote)\n            canidates.\n            print(vote, votes.count(vote))\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":270,"fileType":"python3","requestStartTime":1517941963244}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = {}\n    for vote in votes:\n        if vote not in canidates.:\n            tally = votes.count(vote)\n            canidates.append(vote)\n            canidates.append(tally)\n    print(canidates)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":174,"fileType":"python3","requestStartTime":1517942138701}}
{"body": {"column":28,"line":3,"wordToComplete":"","code":"\nimport math as m\ndef checkPrime(n):\n    for i in range(int(math.))\n\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    checkPrime(n)\n\n","offset":66,"fileType":"python3","requestStartTime":1517942140263}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if year >\n    if year%4 == 0:\n        leap = True\n    if year%100 == 0:\n        leap = False\n    if year%400 == 0:\n        leap = True\n    \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":51,"fileType":"python3","requestStartTime":1517971004426}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\nfrom heapq import heappush, heappop\n\nstack = []\ncur_max = int.\n\nn = int(input())\nfor i in range(n):\n    #query = list(map(int, input().split()))\n    query = input().split()\n    if query[0] == '1':\n        item = int(query[1])\n        stack.append(item)\n    if query[0] == '2':\n        stack.pop()\n    if query[0] == '3':\n        print(max(stack))\n\n","offset":64,"fileType":"python3","requestStartTime":1517942291917}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    \nvisited = [False]*N\n    \ndef visit_friends(i):\n    visited[i] = True  \n    for j in friends[i][i:]:\n        visit_friends[i]\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":229,"fileType":"python3","requestStartTime":1517942350836}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = {}\n    highestTally = 0\n    winner = []\n    for vote in votes:\n        if vote not in canidates.values():\n            tally = votes.count(vote)\n            if(tally >= highestTally):\n                canidates.\n            canidates[vote] = tally\n    print(canidates)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":324,"fileType":"python3","requestStartTime":1517942407506}}
{"body": {"column":21,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if n <= 9 and n >\n\n\n","offset":71,"fileType":"python3","requestStartTime":1517971311599}}
{"body": {"column":36,"line":3,"wordToComplete":"","code":"\ndef print_formatted(number):\n    for i in range(1,number):\n        n = [i, format(number, 'o').]\nif __name__ == '__main__':\n    n = int(input())\n    print_formatted(n)\n","offset":97,"fileType":"python3","requestStartTime":1517942514812}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0.')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young.')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager.')\n        else:\n            print('You are old.')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.new_age = self.age+1\n        \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":670,"fileType":"python3","requestStartTime":1517942519306}}
{"body": {"column":23,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    highestTally = 0\n    winner = []\n    for vote in votes:\n        if vote not in canidates:\n            tally = votes.count(vote)\n            if(tally > highestTally):\n                winner = []\n                winner.append(vote)\n            elif(tally >= highestTally):\n                winner.\n    print(canidates)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":416,"fileType":"python3","requestStartTime":1517942543645}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    highestTally = 0\n    winner = []\n    for vote in votes:\n        if vote not in canidates:\n            canidates.\n            tally = votes.count(vote)\n            if(tally > highestTally):\n                winner = []\n                winner.append(vote)\n            elif(tally >= highestTally):\n                winner.append(vote)\n    print(canidates)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":234,"fileType":"python3","requestStartTime":1517942571032}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\nimport sys\nfrom math import sqrt\n\nfor line in sys.stdin.\nfib = (((1+sqrt(5))**x) - ((1-sqrt(5))**x))/(2**x*sqrt(5))\n\n","offset":58,"fileType":"python3","requestStartTime":1517942583975}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\ndef print_formatted(number):\n    for i in range(1,number):\n        n. = [i, format(number, 'o'), format(number, 'X'), format(number, 'b')]\n        \nif __name__ == '__main__':\n    n = int(input())\n    print_formatted(n)\n","offset":71,"fileType":"python3","requestStartTime":1517942626013}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    highestTally = 0\n    winner = []\n    for vote in votes:\n        if vote not in canidates:\n            tally = votes.count(vote)\n            canidates.append(vote)\n            canidates.\n            \n            if(tally > highestTally):\n                winner = []\n                winner.append(vote)\n            elif(tally >= highestTally):\n                winner.append(vote)\n                \n    print(canidates)\n    print(winner)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":307,"fileType":"python3","requestStartTime":1517942654507}}
{"body": {"column":31,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    canidates = []\n    highestTally = 0\n    winner = []\n    for vote in votes:\n        if vote not in canidates:\n            tally = votes.count(vote)\n            canidates.append(vote)\n            canidates.append(tally)\n            \n            if(tally > highestTally):\n                highestTally = tally\n                winner = []\n                winner.append(vote)\n            elif(tally >= highestTally):\n                winner.append(vote)\n    if(len(winner) > 1):\n        sorted(winner, key=str.)\n    print(canidates)\n    print(winner)\n        \n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":606,"fileType":"python3","requestStartTime":1517942776536}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = list(map(int, input().))\n\n\n","offset":70,"fileType":"python3","requestStartTime":1517942815820}}
{"body": {"column":30,"line":4,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = list(map(int, input().split(' ')))\nw_val = list(map(int, input().))\n\n\n","offset":113,"fileType":"python3","requestStartTime":1517942832804}}
{"body": {"column":7,"line":6,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = list(map(int, input().split(' ')))\nw_val = list(map(int, input().split(' ')))\n\nw = np.\n\n\n","offset":134,"fileType":"python3","requestStartTime":1517942850214}}
{"body": {"column":7,"line":5,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = list(map(int, input().split(' ')))\nw_val = list(map(int, input().split(' ')))\nx = np.\nw = np.sum(w_val)\n\n\n","offset":133,"fileType":"python3","requestStartTime":1517942861084}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    for x in alice:\n        total += x\n        rank.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":181,"fileType":"python3","requestStartTime":1517942894555}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge<0:\n            print('Age is not valid, setting age to 0.')\n            self.age = 0\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age<13:\n            print('You are young.')\n        elif self.age>=13 and self.age<18:\n            print('You are a teenager.')\n        else:\n            print('You are old.')\n        \n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age = self.+1\n        \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":681,"fileType":"python3","requestStartTime":1517942912903}}
{"body": {"column":25,"line":8,"wordToComplete":"","code":"users=[]  ## start with an empty list\nuser =input()  ## read first value in\nwhile user != '':  ## keep going til you read an empty space (ie no more input)\n    users += [user] ## add the value read in to the users list\n    user =input()    ## read the next value...\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ncount=0:\nwhile count <len(theList):\n    print(theList[count].)\n    count += 1 \n\n","offset":398,"fileType":"python3","requestStartTime":1517942921993}}
{"body": {"column":11,"line":3,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = np.list(map(int, input().split(' ')))\nw_val = list(map(int, input().split(' ')))\nx = np.\nw = np.sum(w_val)\n\n\n","offset":51,"fileType":"python3","requestStartTime":1517942972860}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = np.array(list(map(int, input().split(' '))))\nw_val = np.list(map(int, input().split(' ')))\nx = np.\nw = np.sum(w_val)\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517942978117}}
{"body": {"column":7,"line":5,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = np.array(list(map(int, input().split(' '))))\nw_val = np.array(list(map(int, input().split(' '))))\nx = np.a * b\nw = np.sum(w_val)\n\n\n","offset":153,"fileType":"python3","requestStartTime":1517942991694}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\nimport numpy as np\nnum = int(input())\nx_val = np.array(list(map(int, input().split(' '))))\nw_val = np.array(list(map(int, input().split(' '))))\nx = np.sum(a * b)\nw = np.sum(w_val)\nprint(':.')\n\n\n","offset":191,"fileType":"python3","requestStartTime":1517943009426}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        y = scores[len(scores) // 2]\n        if x >\n    for x in alice:\n        total += x\n        rank.append(findRank(x, scores))\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":209,"fileType":"python3","requestStartTime":1517943013430}}
{"body": {"column":30,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n            \ndef longestChain(words):\n    chain_words = {word:set() for word in words}\n    library = set(words)\n    def truncate(word):\n        if word not in chain_words.keys():\n            truncated = set()\n            for i in range(len(word)):\n                new_word = word[:i] + word[(i+1):]\n                if new_word in library:\n                    truncated.\n            chain_words[word] = set([word[:i] + word[(i+1):] for i in range(len(word))])\n        return chain_words[word]\n            \n    sorted_words = sorted([(word, len(word)) for word in words], key=lambda x: x[1])\n    max_length = sorted_words[-1][1]\n    words_by_length = {i: set() for i in range(1, 1 + max_length)}\n    for word in sorted_words:\n        words_by_length[len(word)].add(word)\n        \n    def subchain(sorted_words, i):\n        \n            \n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":441,"fileType":"python3","requestStartTime":1517943084303}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    ones = doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = ''.join(input().split())\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":82,"fileType":"python3","requestStartTime":1517943089633}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nnum = int(input())\nx_val = list(map(int, input().split(' ')))\nw_val = list(map(int, input().split(' ')))\nx_temp = [a * b for a, b in zip(x_val, w_val)]\nx = sum(x_temp)\nw = sum(w_val)\nprint(':.1f'.format(x/w))\n\n\n","offset":198,"fileType":"python3","requestStartTime":1517943143380}}
{"body": {"column":30,"line":12,"wordToComplete":"https://jsonmock.\"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    address=\"https://jsonmock.\"\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = str(input())\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":246,"fileType":"python3","requestStartTime":1517943166857}}
{"body": {"column":41,"line":12,"wordToComplete":"https://jsonmock.hackerrank.\"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    address=\"https://jsonmock.hackerrank.\"\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = str(input())\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":257,"fileType":"python3","requestStartTime":1517943173642}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    address=\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr\n    Request.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = str(input())\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":307,"fileType":"python3","requestStartTime":1517943211101}}
{"body": {"column":6,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    address=\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr\n    r=Request.get_full_url(address)\n    r.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = str(input())\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":337,"fileType":"python3","requestStartTime":1517943247161}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input()).\n    check = {True: \"Weird\", False: \"Not Weird\"}\n    print (check[n%2==0 and (n in range(2,6) or n>20)])\n\n\n\n\n","offset":50,"fileType":"python3","requestStartTime":1517943274393}}
{"body": {"column":18,"line":5,"wordToComplete":"a","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.a\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":157,"fileType":"python3","requestStartTime":1517943299365}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n        else:\n            self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":252,"fileType":"python3","requestStartTime":1517943333484}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        if self.\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":307,"fileType":"python3","requestStartTime":1517943350246}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        if self.age < 13:\n            print()\n            elif self.\n                \n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":359,"fileType":"python3","requestStartTime":1517943368268}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        if self.age < 13:\n            print()\n            elif self.age >\n                \n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":364,"fileType":"python3","requestStartTime":1517943371531}}
{"body": {"column":40,"line":12,"wordToComplete":"a","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        if self.age < 13:\n            print()\n            elif self.age >13 and self.a\n                \n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":377,"fileType":"python3","requestStartTime":1517943378302}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    address=\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr\n    r=Request.(address)\n    return address\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = str(input())\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":309,"fileType":"python3","requestStartTime":1517943394807}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef introTutorial(V, arr):\n    return arr.\n\nif __name__ == \"__main__\":\n    V = int(input().strip())\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = introTutorial(V, arr)\n    print(result)\n\n\n","offset":72,"fileType":"python3","requestStartTime":1517943420694}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        if (x >)\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores, 0))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517943437777}}
{"body": {"column":23,"line":20,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initalAge < 0:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        if self.age < 13:\n            print('You are young.'')\n        elif self.age >=13 and self.age < 18:\n            print('You are a teenager.')\n        else:\n            print('You are old.')\n                \n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n                  self.\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":695,"fileType":"python3","requestStartTime":1517943457901}}
{"body": {"column":12,"line":4,"wordToComplete":"0.","code":"\nt=int(input())\nfor a0 in range(t):\n    n=int(input())\n    l=2*n+0.\n\n","offset":68,"fileType":"python3","requestStartTime":1517943591534}}
{"body": {"column":20,"line":4,"wordToComplete":"0.","code":"\nt=int(input())\nfor a0 in range(t):\n    n=int(input())\n    l=(2*n+0.25)**0.\n\n","offset":76,"fileType":"python3","requestStartTime":1517943598846}}
{"body": {"column":26,"line":4,"wordToComplete":"0.","code":"\nt=int(input())\nfor a0 in range(t):\n    n=int(input())\n    l=(2*n+0.25)**(0.5)-0.\n\n","offset":82,"fileType":"python3","requestStartTime":1517943604538}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    for name in names:\n        initials = name.\n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":157,"fileType":"python3","requestStartTime":1517943611235}}
{"body": {"column":14,"line":1,"wordToComplete":"","code":"\ns,n = input().\n\n","offset":16,"fileType":"python3","requestStartTime":1517943618040}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    for name in names:\n        initials = ''.name.split()\n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":155,"fileType":"python3","requestStartTime":1517943620833}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    maxDoors = 0\n    minDoors = 0\n    \n    for i in range(0, doors.):\n        if(doors[i] == 1):\n            maxDoors = maxDoors + 1\n            minDoors = minDoors + 1\n            i = i + 1\n            if(doors[i] == 1):\n                maxDoors = maxDoors + 1\n    \n    return [minDoors, maxDoors]\n                \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":161,"fileType":"python3","requestStartTime":1517943698534}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        scores.\n        i = 0\n        while (i < len(scores) and x < scores[i]):\n            i += 1\n        return i + 1\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517943741928}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"\nfrom itertools import permutations\ns,n = input().split()\nls = sorted(list(permutations(s,int(n))))\nprint(''.ls)\n\n","offset":110,"fileType":"python3","requestStartTime":1517943764105}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot\n            last.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":198,"fileType":"python3","requestStartTime":1517943773061}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot\n            right.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":199,"fileType":"python3","requestStartTime":1517943780156}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom urllib.request import Request\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    address=\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr\n    r=Request(address)\n    j = json. \n    return r\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = str(input())\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":331,"fileType":"python3","requestStartTime":1517943784505}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        scores.insert(0, math.)\n        i = 0\n        while (i < len(scores) and x < scores[i]):\n            i += 1\n        return i + 1\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":200,"fileType":"python3","requestStartTime":1517943793679}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot\n            right.append(arr[i])\n        else:\n            left.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":245,"fileType":"python3","requestStartTime":1517943794834}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        scores.insert(0, math.inf)\n        scores.\n        i = 0\n        while (i < len(scores) and x < scores[i]):\n            i += 1\n        return i + 1\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":220,"fileType":"python3","requestStartTime":1517943797519}}
{"body": {"column":28,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot\n            right.append(arr[i])\n        else:\n            left.append(arr.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":256,"fileType":"python3","requestStartTime":1517943798314}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        scores.insert(0, math.inf)\n        scores..\n        i = 0\n        while (i < len(scores) and x < scores[i]):\n            i += 1\n        return i + 1\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":221,"fileType":"python3","requestStartTime":1517943801183}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    scores = list(set(scores))\n    def findRank(x, scores):\n        scores.insert(0, math.inf)\n        scores.append(-math.)\n        i = 0\n        while (i < len(scores) and x < scores[i]):\n            i += 1\n        return i + 1\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":233,"fileType":"python3","requestStartTime":1517943804942}}
{"body": {"column":25,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    for name in names:\n        num_letters = 0\n        initials = ''.join(a[num_letters] for a in name.split())\n        if initials in results:\n            intials = ''.\n            \n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":279,"fileType":"python3","requestStartTime":1517943810157}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    for name in names:\n        num_letters = 0\n        parsed_name = name.\n        initials = ''.join(a[num_letters] for a in name.split())\n        if initials in results:\n            \n            \n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":184,"fileType":"python3","requestStartTime":1517943828156}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    for name in names:\n        num_letters = 0\n        name = name.\n        initials = ''.join(a[num_letters] for a in name.split())\n        if initials in results:\n            \n            \n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":177,"fileType":"python3","requestStartTime":1517943834260}}
{"body": {"column":9,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot:\n            right.append(arr[i])\n        else:\n            left.append(arr[i])\n    left.\n    return arr       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":270,"fileType":"python3","requestStartTime":1517943884507}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot:\n            right.append(arr[i])\n        else:\n            left.append(arr[i])\n    left.append(pivot).\n    return arr       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":284,"fileType":"python3","requestStartTime":1517943895071}}
{"body": {"column":9,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]>pivot:\n            right.append(arr[i])\n        else:\n            left.append(arr[i])\n    left.append(pivot)\n    left.\n    return arr       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = quickSort(arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":293,"fileType":"python3","requestStartTime":1517943904545}}
{"body": {"column":21,"line":31,"wordToComplete":"","code":"\n'''\nThinking: What if I kept 2 lists, one being a 'priority' list, one the stack\nthe priority stack would just hold a tuple of (priority, index in stack)\n\nwhenever you add something to the stack, you also add the index\n\n\nNEVERMIND, you dont need to delete the element with the maximum priotiy, just print it\n    this means heap\n\nThen you would know how to delete from stack, pop from stack nad get highest priority\n'''\nfrom heapq import heappush, heappop, heapify\n\nstack = []\npriority_heap = []\n\nnum = int(input())\n\nfor i in range(num):\n    cmd = input().split()\n    \n    if cmd[0] == '1':\n        stack.append(int(cmd[1]))\n        heappush(priority_heap, int(cmd[1]))\n        \n    elif cmd[0] == '2':\n        # pop\n        a = stack[len(stack) - 1]\n        stack.pop()\n        prority_heap.\n    \n    elif cmd[0] == '3':\n        #print\n        print(priority_heap[0])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n","offset":793,"fileType":"python3","requestStartTime":1517943912599}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\nfrom itertools import permutations\ns,n = input().split()\nls = sorted(list(permutations(s,int(n))))\n\nprint([\"\". for i in ls])\n\n","offset":112,"fileType":"python3","requestStartTime":1517943936124}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\nfrom itertools import permutations\ns,n = input().split()\nls = sorted(list(permutations(s,int(n))))\n\nprint([''. for i in ls])\n\n","offset":112,"fileType":"python3","requestStartTime":1517943937613}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        num_letters = 0\n        name_parts = name.split()\n        initials = ''.join(a[num_letters] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.\n        new = dedupe_names(name, results[initials])\n        \n            \n            \n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":388,"fileType":"python3","requestStartTime":1517943972016}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        num_letters = 0\n        name_parts = name.split()\n        initials = ''.join(a[num_letters] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.\n        \n            \n            \n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":575,"fileType":"python3","requestStartTime":1517944020902}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        num_letters = 0\n        name_parts = name.split()\n        initials = ''.join(a[num_letters] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    return results.\n        \n            \n            \n\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":607,"fileType":"python3","requestStartTime":1517944031646}}
{"body": {"column":21,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        num_letters = 0\n        name_parts = name.split()\n        initials = ''.join(a[num_letters] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    return results.keys()\n\ndef dedupe_names(name1, name2):\n    initial1 = name1.\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":668,"fileType":"python3","requestStartTime":1517944073357}}
{"body": {"column":23,"line":1,"wordToComplete":"","code":"\nk,m = map(int, input().)\n\n","offset":25,"fileType":"python3","requestStartTime":1517944076038}}
{"body": {"column":31,"line":1,"wordToComplete":"","code":"\nk,m = map(int, input().strip().split())\n\n","offset":33,"fileType":"python3","requestStartTime":1517944081982}}
{"body": {"column":14,"line":3,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().\n\n","offset":52,"fileType":"python3","requestStartTime":1517944127206}}
{"body": {"column":7,"line":6,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().split()\nls = []\nfor in range(n):\n    ls.\n\n","offset":92,"fileType":"python3","requestStartTime":1517944167490}}
{"body": {"column":29,"line":6,"wordToComplete":"","code":"\nk,m = map(int, input().strip().split())\n\nlists = []\n\nfor _ in range(k):\n    n = list(map(int,input().))\n\n","offset":103,"fileType":"python3","requestStartTime":1517944173209}}
{"body": {"column":37,"line":6,"wordToComplete":"","code":"\nk,m = map(int, input().strip().split())\n\nlists = []\n\nfor _ in range(k):\n    n = list(map(int,input().strip().))\n\n","offset":111,"fileType":"python3","requestStartTime":1517944175712}}
{"body": {"column":18,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    return results.keys()\n\ndef dedupe_names(name1, name2):\n    num_letters = 0\n    name1 = name1.\n    while True:\n        initial1 = ''.join(name1.split())\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":651,"fileType":"python3","requestStartTime":1517944176170}}
{"body": {"column":18,"line":28,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    return results.keys()\n\ndef dedupe_names(name1, name2):\n    num_letters = 0\n    name1 = name1.split()\n    name2 = name2.\n    while True:\n        initial1 = ''.join(name1.split())\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":677,"fileType":"python3","requestStartTime":1517944180177}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\nk,m = map(int, input().strip().split())\n\nlists = []\n\nfor _ in range(k):\n    n = list(map(int,input().strip().split()))\n    lists.\n\n","offset":131,"fileType":"python3","requestStartTime":1517944183550}}
{"body": {"column":13,"line":7,"wordToComplete":"app","code":"\nk,m = map(int, input().strip().split())\n\nlists = []\n\nfor _ in range(k):\n    n = list(map(int,input().strip().split()))\n    lists.app\n\n","offset":134,"fileType":"python3","requestStartTime":1517944184316}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    newScores = []\n    for sc in scores:\n        if (sc not in newScores):\n            newScores.\n    scores.insert(0, math.inf)\n    scores.append(-1 * math.inf)\n    print (scores)\n    def findRank(x, scores):\n        i = 0\n        while (x < scores[i]):\n            i += 1\n        return i\n    for x in alice:\n        total += x\n        rank.append(findRank(total, scores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":207,"fileType":"python3","requestStartTime":1517944284117}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef counterGame(n):\n    # Complete this function\n    if n == 1:\n        return 'Richard'\n    \n    x = bin(n)[2:]\n    winner = 0\n    while (len(x) > 1):\n        if x[1:].\n        \n        \n    if (no_of_steps % 2) == 0:\n        return 'Richard'\n    else:\n        return 'Louise'\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        result = counterGame(n)\n        print(result)\n\n\n","offset":199,"fileType":"python3","requestStartTime":1517944344154}}
{"body": {"column":23,"line":2,"wordToComplete":"","code":"\nn=int(input())\na=list(map(int,input().))\n\n","offset":40,"fileType":"python3","requestStartTime":1517944361247}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    newScores = []\n    scores = list.sort(list(set(scores)))\n    newScores.insert(0, math.inf)\n    newScores.append(-1 * math.inf)\n    def findRank(x, scores):\n        i = 0\n        while (x < scores[i]):\n            i += 1\n        return i\n    for x in alice:\n        total += x\n        rank.append(findRank(total, newScores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":147,"fileType":"python3","requestStartTime":1517944380744}}
{"body": {"column":18,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    print(results.)\n    return results.keys()\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(name1[0], name2[0])\n    min_last = min(name1[1], name2[1])\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":572,"fileType":"python3","requestStartTime":1517944422609}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxDifference(a):\n    maxValue = max(a)\n    maxIndex = a.\n    minValue\n    print(a)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a_cnt = 0\n    a_cnt = int(input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        a_item = int(input())\n        a.append(a_item)\n        a_i += 1\n\n\n    res = maxDifference(a);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":133,"fileType":"python3","requestStartTime":1517944424908}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    newScores = (list(set(scores)))\n    newScores = list.sort(newScores)\n    newScores.insert(0, math.inf)\n    newScores.append(-1 * math.inf)\n    def findRank(x, scores):\n        i = 0\n        while (x < scores[i]):\n            i += 1\n        return i\n    for x in alice:\n        total += x\n        rank.append(findRank(total, newScores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":167,"fileType":"python3","requestStartTime":1517944450179}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    newScores = (list(set(scores)))\n    newScores = list..sort(newScores)\n    newScores.insert(0, math.inf)\n    newScores.append(-1 * math.inf)\n    def findRank(x, scores):\n        i = 0\n        while (x < scores[i]):\n            i += 1\n        return i\n    for x in alice:\n        total += x\n        rank.append(findRank(total, newScores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":168,"fileType":"python3","requestStartTime":1517944450447}}
{"body": {"column":18,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    print(results.)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(name1[0], name2[0])\n    min_last = min(name1[1], name2[1])\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":572,"fileType":"python3","requestStartTime":1517944488102}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    newScores = list.(list(set(scores)))\n    list.sort(newScores)\n    newScores.insert(0, math.inf)\n    newScores.append(-1 * math.inf)\n    def findRank(x, scores):\n        i = 0\n        while (x < scores[i]):\n            i += 1\n        return i\n    for x in alice:\n        total += x\n        rank.append(findRank(total, newScores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":131,"fileType":"python3","requestStartTime":1517944552541}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.\n    result = [\"%s\\n\" % x for x in results.keys()]\n    print(result)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(name1[0], name2[0])\n    min_last = min(name1[1], name2[1])\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":578,"fileType":"python3","requestStartTime":1517944565969}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef climbingLeaderboard(scores, alice):\n    total = 0\n    rank = []\n    newScores = (list(set(scores)))\n    newScores = list.\n    newScores = newScores[::-1]\n    newScores.insert(0, math.inf)\n    newScores.append(-1 * math.inf)\n    def findRank(x, scores):\n        i = 0\n        while (x < scores[i]):\n            i += 1\n        return i\n    for x in alice:\n        total += x\n        rank.append(findRank(total, newScores))\n    return rank\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":167,"fileType":"python3","requestStartTime":1517944587858}}
{"body": {"column":6,"line":11,"wordToComplete":"","code":"\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(1,2**n):\n    b=bin(i)[2:]\n    l=len(b)\n    s=[]\n    count=0\n    for j in range(l):\n        if b[j]=='1':\n            count+=a[j]\n    s.\n\n","offset":200,"fileType":"python3","requestStartTime":1517944598866}}
{"body": {"column":17,"line":7,"wordToComplete":"0.","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    new_arr = arr\n    positive = 0.\n    zeroes = 0\n    negative = 0 \n    total = len(new_arr)\n    for num in new_arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        elif num == 0:\n            zeroes += 1\n    print(positive/total)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":85,"fileType":"python3","requestStartTime":1517944602478}}
{"body": {"column":15,"line":8,"wordToComplete":"0.","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    new_arr = arr\n    positive = 0.0\n    zeroes = 0.\n    negative = 0 \n    total = len(new_arr)\n    for num in new_arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        elif num == 0:\n            zeroes += 1\n    print(positive/total)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517944604237}}
{"body": {"column":17,"line":9,"wordToComplete":"0.","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    new_arr = arr\n    positive = 0.0\n    zeroes = 0.0\n    negative = 0. \n    total = len(new_arr)\n    for num in new_arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        elif num == 0:\n            zeroes += 1\n    print(positive/total)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":121,"fileType":"python3","requestStartTime":1517944605982}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().split()\nls = []\nfor i in range(1,int(n)+1):\n    print(*''.sorted(list(combinations(s,i))), sep='\\n')\n    \n\n    \n\n\n","offset":110,"fileType":"python3","requestStartTime":1517944642183}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        results.\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":149,"fileType":"python3","requestStartTime":1517944667789}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().split()\nfor i in range(1,int(n)+1):\n    ls = sorted(list(combinations(s,i)))\n    print(\"\"., sep='\\n')\n    \n\n    \n\n\n","offset":142,"fileType":"python3","requestStartTime":1517944705484}}
{"body": {"column":50,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        results.append(''.join(a[0] for a in name.))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":183,"fileType":"python3","requestStartTime":1517944715896}}
{"body": {"column":28,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            index = results.\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":248,"fileType":"python3","requestStartTime":1517944805718}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    N = len(friends)\n    to_visit = set(range(N))\n\n    def visit_friends(person):\n        visited[i] = True  \n        for j in range(N):\n            if j != i:\n                if friends[i][j] == \"Y\":\n                    visit_friends(j)\n                \n    circles = 0\n    while unvisited:\n        person = unvisited.pop()\n        circles += 1\n        friends = friends[person]\n        while friends:\n            f = friends.\n            if not visited[f]:\n                friends += f.friends\n                visited[f] = True\n           \n    return circles\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":527,"fileType":"python3","requestStartTime":1517944822962}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n   \n    i=0\n    counter2=0\n    \n    if len(doors)==1:\n        if doors[0]==0:\n            return \"00\"\n        else:\n            return \"11\"\n        \n    if len(doors)==2:\n        if doors==[0,1]:\n        \n        elif doors==[1,0]:\n    if doors[i]==0 and doors[i+1]==1:\n        counter2+=2\n        while i < len(doors)-1:\n            i+=1\n            while i < len (doors)-1 and doors[i+1]!=0:\n                #print(doors[i+1])\n                counter2+=1\n                i+=1\n                \n                \n            \n\n            \n\n\n\n    elif doors[i]==1 and doors[i+1]==0:\n        counter2+=2\n        while i < len(doors)-1:\n\n            i+=1\n            while i < len (doors)-1 and doors[i+1]!=0:\n                #print(doors[i+1])\n                counter2+=1\n                i+=1\n                \n                \n            \n\n            \n\n\n\n    elif doors[i]==1 and doors[i+1]==0:\n        while i < len(doors)-1:\n            \n            while i < len (doors)-1 and doors[i+1]!=0:\n                #print(doors[i+1])\n                counter2+=1\n                i+=1\n                \n                \n            \n\n            i+=1\n\n\n    else:\n        counter2+=2\n        while i < len(doors)-1:\n            \n            while i < len (doors)-1 and doors[i+1]!=0:\n                #print(doors[i+1])\n                counter2+=1\n                i+=1\n                \n                \n            \n\n            i+=1\n        \n    \n    print(int(counter2/2),doors.count(1))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result=revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n","offset":296,"fileType":"python3","requestStartTime":1517944833963}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().split()\nfor i in range(1,int(n)+1):\n    ls = sorted(list(combinations(s,i)))\n    st = [''.join(i) for i in ls]\n    print(st, sep='\\n')\n    \n\n    \n\n\n","offset":142,"fileType":"python3","requestStartTime":1517944841849}}
{"body": {"column":38,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            index = results.find(initials)\n            match = results[index]\n            for index, letter in name.\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":336,"fileType":"python3","requestStartTime":1517944846829}}
{"body": {"column":46,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            index = results.find(initials)\n            match = results[index]\n            for index, letter in name:\n                if name[:index] != match[:index]:\n                    name_parts = name[:index].\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":433,"fileType":"python3","requestStartTime":1517944954674}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    new_node=Node(data)\n    if head.\n\n\n\n\n","offset":378,"fileType":"python3","requestStartTime":1517944982492}}
{"body": {"column":38,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            index = results.find(initials)\n            match = results[index]\n            # compare first names\n            for index, letter in name.:\n                if name[:index] != match[:index]:\n\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":370,"fileType":"python3","requestStartTime":1517945016128}}
{"body": {"column":43,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            index = results.find(initials)\n            match = results[index]\n            # compare first names\n            name1_first, name1_last = name.\n            for index, letter in name.:\n                if name[:index] != match[:index]:\n\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":375,"fileType":"python3","requestStartTime":1517945039103}}
{"body": {"column":53,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            # compare first names\n            name1_first, name1_last = name.split()\n            index = results.find(initials)\n            name2_first, name2_last = results[index].\n            for index, letter in name.:\n                if name[:index] != match[:index]:\n\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":401,"fileType":"python3","requestStartTime":1517945067510}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().split()\n\nfor i in range(1,int(n)+1):\n    ls = sorted(list(combinations(s,i)))\n    print(ls)\n    st = sorted([''.])\n    \n    #st = sorted([sorted(''.join(i)) for i in ls])\n    #print(*st, sep='\\n')\n    \n\n    \n\n\n","offset":164,"fileType":"python3","requestStartTime":1517945155983}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    new_node=Node(data)\n    if head.next==None\n      return new_node\n    new_node.\n\n\n\n\n","offset":424,"fileType":"python3","requestStartTime":1517945156026}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    new_node=Node(data)\n    if head.next==None\n      return new_node\n    new_node.\n\n\n\n\n","offset":424,"fileType":"python3","requestStartTime":1517945173721}}
{"body": {"column":24,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            name1_first, name1_last = name.split()\n            index = results.find(initials)\n            name2_first, name2_last = results[index].split()\n            stop = None\n            # compare first names\n            for j, letter in name1_first:\n                if name[:j] != match[:j]:\n                    stop = j\n                    break\n            if stop:\n                results[index] = name2_first[:stop] + name2_last[0]\n                results.\n                    \n\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":685,"fileType":"python3","requestStartTime":1517945177529}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\nfrom itertools import combinations\n\ns,n = input().split()\n\nfor i in range(1,int(n)+1):\n    ls = sorted(list(combinations(s,i)))\n    print(ls)\n    st = [''.list(map(sorted, ls))\n    print(st)\n    #st = sorted([sorted(''.join(i)) for i in ls])\n    #print(*st, sep='\\n')\n    \n\n    \n\n\n","offset":157,"fileType":"python3","requestStartTime":1517945227957}}
{"body": {"column":25,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":501,"fileType":"python3","requestStartTime":1517945251435}}
{"body": {"column":35,"line":2,"wordToComplete":"","code":"\nfor _ in range(int(input())):\n    print([int(x) for x in input().])\n\n","offset":67,"fileType":"python3","requestStartTime":1517945279858}}
{"body": {"column":43,"line":2,"wordToComplete":"","code":"\nfor _ in range(int(input())):\n    print([int(x) for x in input().split().])\n\n","offset":75,"fileType":"python3","requestStartTime":1517945281153}}
{"body": {"column":23,"line":23,"wordToComplete":"like","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    # Dict of \n    tu_followees_likes = {}\n    for lg_edge in like\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":637,"fileType":"python3","requestStartTime":1517945326045}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nfor _ in range(int(input())):\n    s =set()\n    for __ in range(int(input())):\n        s.\n\n","offset":90,"fileType":"python3","requestStartTime":1517945358203}}
{"body": {"column":24,"line":34,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials in results:\n            name1_first, name1_last = name.split()\n            index = results.find(initials)\n            name2_first, name2_last = results[index].split()\n            # compare first names\n            for j, letter in name1_first:\n                if name1_first[:j] != name2_first[:j]:\n                    stop = j\n                    solution1_1 = name1_first[:stop] + name1_last[0]\n                    solution1_2 = name2_first[:stop] + name2_last[0]\n                    break\n            \n            # compare last names\n            for j, letter in name1_last:\n                if name1_last[:j] != name2_last[:j]:\n                    stop = j\n                    solution2_1 = name1_first[0] + name1_last[:stop]\n                    solution2_2 = name2_first[0] + name2_last[:stop]\n                    break\n            \n            if solution1_1 < solution2_1:\n                results[index] = solution1_2\n                results.\n                \n                    \n\n            \n              \n        results.append(initials))\n    for each in results:\n       print(each)\n\ndef generate1(names):\n    results = {}\n    to_delete = set()\n    for name in names:\n        name_parts = name.split()\n        initials = ''.join(a[0] for a in name_parts)\n        if initials not in results:\n            results[initials] = name\n            continue\n        to_delete.add(initials)\n        new1, new2 = dedupe_names(name, results[initials])\n        results[new1] = name\n        results[new2] = results[initials]\n    for each in to_delete:\n        results.delete(each)\n    for each in results.keys():\n        print(each)\n\ndef dedupe_names(name1, name2):\n    first = last = 0\n    name1 = name1.split()\n    name2 = name2.split()\n    min_first = min(len(name1[0]), len(name2[0]))\n    min_last = min(len(name1[1]), len(name2[1]))\n    while True:\n        first = min(first + 1, min_first)\n        if first == min_first:\n            last = min(last + 1, min_last)\n        initial1 = name1[first] + name2[last]\n        initial2 = name2[first] + name2[last]\n        if initial1 != initial2:\n            break\n    return initial1, initial2\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":1156,"fileType":"python3","requestStartTime":1517945405528}}
{"body": {"column":32,"line":1,"wordToComplete":"","code":"\nn, x = [int(x) for x in input().]\n\n","offset":34,"fileType":"python3","requestStartTime":1517945418677}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    studentDict = {}\n    scores = []\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        studentDict[name] = score\n        scores.append(score)\n    #\n    scores.sort()\n    secLowest = []\n    for key in studentDict:\n        if studentDict[key] == scores[1]:\n            secLowest.key\n    print(secLowest)\n    for elm in secLowest:\n        print(elm)\n        \n\n","offset":352,"fileType":"python3","requestStartTime":1517945446270}}
{"body": {"column":33,"line":2,"wordToComplete":"","code":"\nn, x = [int(x) for x in input().split()]\ngrid = [[int(x) for x in input().]\n\n","offset":76,"fileType":"python3","requestStartTime":1517945481463}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    studentDict = {}\n    scores = []\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        studentDict[name] = score\n        scores.append(score)\n    #\n    scores.sort()\n    secLowest = []\n    for key in studentDict:\n        if studentDict[key] == scores[1]:\n            secLowest.append(key)\n    secLowest.\n    for elm in secLowest:\n        print(elm)\n        \n\n","offset":378,"fileType":"python3","requestStartTime":1517945490166}}
{"body": {"column":21,"line":6,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    for word in ransom:\n        if word not in magazine:\n            return False:\n        else:\n            magazine.\n    \n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":155,"fileType":"python3","requestStartTime":1517945493592}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials not in results:\n            results.\n        else:\n            name1_first, name1_last = name.split()\n            index = results.find(initials)\n            name2_first, name2_last = results[index].split()\n            # compare first names\n            for j, letter in name1_first:\n                if name1_first[:j] != name2_first[:j]:\n                    stop = j\n                    solution1_1 = name1_first[:stop] + name1_last[0]\n                    solution1_2 = name2_first[:stop] + name2_last[0]\n                    break\n            \n            # compare last names\n            for j, letter in name1_last:\n                if name1_last[:j] != name2_last[:j]:\n                    stop = j\n                    solution2_1 = name1_first[0] + name1_last[:stop]\n                    solution2_2 = name2_first[0] + name2_last[:stop]\n                    break\n            \n            if solution1_1 < solution2_1:\n                results[index] = solution1_2\n                results.append(solution1_1)\n            else:\n                results[index] = solution2_2\n                results.append(solution2_1)\n    for each in results:\n       print(each)\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":244,"fileType":"python3","requestStartTime":1517945513403}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\narr = arr[::-1]\nfor x in arr:\n    print(x,end=\" \").\n\n","offset":173,"fileType":"python3","requestStartTime":1517945515077}}
{"body": {"column":17,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, pos):\n    new_node=Node(data)\n    if head==None:\n        return new_node\n    if pos==0:\n        new_node.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":532,"fileType":"python3","requestStartTime":1517945548835}}
{"body": {"column":54,"line":26,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    tu_followees_likes = {}\n    # Key: tweet_id\n    # Val: count of likes from followees of targetUser\n    for lg_edge in likeGraph_edges:\n        if lg_edge[0] in tu_followees_likes:\n            tu_followees_likes[] = tu_followees_likes. # increments count of likes by 1\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":809,"fileType":"python3","requestStartTime":1517945568597}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef generate(names):\n    results = []\n    for name in names:\n        initials = ''.join(a[0] for a in name.split())\n        if initials not in results:\n            results.append(initials)\n        else:\n            name1_first, name1_last = name.split()\n            index = results.index(initials)\n            print(results.)\n            name2_first, name2_last = results[index].split()\n            # compare first names\n            for j, letter in name1_first:\n                if name1_first[:j] != name2_first[:j]:\n                    stop = j\n                    solution1_1 = name1_first[:stop] + name1_last[0]\n                    solution1_2 = name2_first[:stop] + name2_last[0]\n                    break\n            \n            # compare last names\n            for j, letter in name1_last:\n                if name1_last[:j] != name2_last[:j]:\n                    stop = j\n                    solution2_1 = name1_first[0] + name1_last[:stop]\n                    solution2_2 = name2_first[0] + name2_last[:stop]\n                    break\n            \n            if solution1_1 < solution2_1:\n                results[index] = solution1_2\n                results.append(solution1_1)\n            else:\n                results[index] = solution2_2\n                results.append(solution2_1)\n    for each in results:\n       print(each)\n\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":396,"fileType":"python3","requestStartTime":1517945572048}}
{"body": {"column":11,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\narr = arr[::-1]\nresult = \"\"\nfor x in arr:\n    result. x\n    \nprint(result)\n\n","offset":175,"fileType":"python3","requestStartTime":1517945572997}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\nM = input()\na = input().\n\n","offset":26,"fileType":"python3","requestStartTime":1517945588543}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\nM = input()\na = input().split\n\nN = input()\nb = input.\n\n","offset":55,"fileType":"python3","requestStartTime":1517945597764}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nM = input()\na = input().split\n\nN = input()\nb = input().\n\n","offset":57,"fileType":"python3","requestStartTime":1517945598743}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\narr = arr[::-1]\nprint(arr.)\n\n","offset":148,"fileType":"python3","requestStartTime":1517945642584}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef camelcase(s):\n    tot = 1\n    for i in s:\n        if i==i.\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    result = camelcase(s)\n    print(result)\n\n\n","offset":92,"fileType":"python3","requestStartTime":1517945663347}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\narr = arr[::-1]\nprint(\" \".\n\n","offset":148,"fileType":"python3","requestStartTime":1517945667248}}
{"body": {"column":29,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    \n    N = len(friends)\n    visited = [False]*N\n    circles = 0\n    \n    def get_friends(i):\n        f = []\n        for yn, j in enumerate(friends[i]):\n            if yn == 'Y':\n                f += [j]\n        return f\n        \n    for person in range(N):\n        if not visited[i]:\n            visited[i] = True\n            circles += 1\n            cf = get_friends(iperson)\n            print(cf)\n            while cf:\n                f = cf.pop()\n                if not visited[f]:\n                    cf += get_friends(f)\n                    visited[f] = True\n\n    return circles\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":470,"fileType":"python3","requestStartTime":1517945692844}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\nM = input()\na = input().split\na = set(map(int, a))\nN = input()\nb = input().split\nb = set(map(int, b))\n\nboth = a.\n\n","offset":114,"fileType":"python3","requestStartTime":1517945668042}}
{"body": {"column":7,"line":9,"wordToComplete":"","code":"\nM = input()\na = input().split\na = set(map(int, a))\nN = input()\nb = input().split\nb = set(map(int, b))\n\nboth = a.union(b);\nao = a.\n\n","offset":131,"fileType":"python3","requestStartTime":1517945674788}}
{"body": {"column":11,"line":6,"wordToComplete":"","code":"\nfirst_line = input().split()\nupperbound = int(first_line[0])\nnums = [0, upperbound]\n\nsecond_line = input().split()\nsecond_ine.\n\n","offset":128,"fileType":"python3","requestStartTime":1517945707057}}
{"body": {"column":7,"line":10,"wordToComplete":"","code":"\nM = input()\na = input().split\na = set(map(int, a))\nN = input()\nb = input().split\nb = set(map(int, b))\n\nboth = a.union(b);\nao = a.difference(both)\nbo = b.\n\n","offset":155,"fileType":"python3","requestStartTime":1517945683589}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"\nM = input()\na = input().split\na = set(map(int, a))\nN = input()\nb = input().split\nb = set(map(int, b))\n\nboth = a.union(b);\nao = a.difference(both)\nbo = b.difference(both)\nunique = a.\n\n","offset":183,"fileType":"python3","requestStartTime":1517945691196}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nM = input()\na = input().split\na = set(map(int, a))\nN = input()\nb = input().split\nb = set(map(int, b))\n\nboth = a.union(b);\nao = a.difference(both)\nbo = b.difference(both)\nunique = ao.\n\n","offset":184,"fileType":"python3","requestStartTime":1517945692465}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, pos):\n    new_node=Node(data)\n    if head==None:\n        return new_node\n    if pos==0:\n        new_node.next=head\n        return new_node\n    tmp=head\n    for i in range(pos):\n        new_node.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":621,"fileType":"python3","requestStartTime":1517945720858}}
{"body": {"column":22,"line":3,"wordToComplete":"","code":"\nprice = {}\nfor _ in range(int(input())):\n    name, p = input().\n\n","offset":65,"fileType":"python3","requestStartTime":1517945741373}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if acid_name.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":103,"fileType":"python3","requestStartTime":1517945752403}}
{"body": {"column":7,"line":13,"wordToComplete":"","code":"\nM = input()\na = input().split\na = set(map(int, a))\nN = input()\nb = input().split\nb = set(map(int, b))\n\nboth = a.union(b);\nao = a.difference(both)\nbo = b.difference(both)\nunique = ao.update(bo);\nunique = list(unique)\nunique.\n\n","offset":225,"fileType":"python3","requestStartTime":1517945733289}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if acid_name.endsWith(\"ic\"):\n        if acid_name.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":140,"fileType":"python3","requestStartTime":1517945773413}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\nfrom roman import fromRoman\n\ns = input()\n\ntry:\n    if 0 < fromRoman(s) < 4000:\n        print(\"True\")\n    else:\nexcept:\n    print(\"False\")\n    \n    \n\"\"\"\n\nimport re\n\ns = input()\n\n\nthousands = r\"M{0,3}\"\nhundreds = r\"C?D?C{0,3}\"\ndizains = r\"X?L?X{0,3}\"\ndigits = r\"I?V?I{0,3}\"\n#hundred = '(C[MD]|D?C{0,3})'\n#ten = '(X[CL]|L?X{0,3})'\n#digit = '(I[VX]|V?I{0,3})'\npattern = r\"^\" + thousands+hundreds+dizains+digits+\"$\"\nprint(bool(re.match(pattern, s)))\n\"\"\"\n\n\n\n","offset":112,"fileType":"python3","requestStartTime":1517945775402}}
{"body": {"column":26,"line":7,"wordToComplete":"","code":"\nprice = {}\nfor _ in range(int(input())):\n    name, p = input().split()\n    price[name]=int(p)\n    \nfor _ in range(int(input())):\n    money, item = input().\n    \n\n","offset":157,"fileType":"python3","requestStartTime":1517945788414}}
{"body": {"column":97,"line":7,"wordToComplete":"Find the number of ways that X can be represented as the sum of squares of unique numbers. ","code":"\n#!/bin/python3\n\nimport sys\n\ndef powerSum(X, N):\n    # Complete this function\n    # Find the number of ways that X can be represented as the sum of squares of unique numbers. \n\nif __name__ == \"__main__\":\n    X = int(input().strip())\n    N = int(input().strip())\n    result = powerSum(X, N)\n    print(result)\n\n\n","offset":176,"fileType":"python3","requestStartTime":1517945836333}}
{"body": {"column":38,"line":11,"wordToComplete":"You need {} cents more.\"","code":"\nprice = {}\nfor _ in range(int(input())):\n    name, p = input().split()\n    price[name]=int(p)\n    \nfor _ in range(int(input())):\n    money, item = input().split()\n    money= int(money)\n    left = money - price[item]\n    if left < 0:\n        print(\"You need {} cents more.\")\n    \n\n","offset":273,"fileType":"python3","requestStartTime":1517945836527}}
{"body": {"column":40,"line":11,"wordToComplete":"","code":"\nprice = {}\nfor _ in range(int(input())):\n    name, p = input().split()\n    price[name]=int(p)\n    \nfor _ in range(int(input())):\n    money, item = input().split()\n    money= int(money)\n    left = money - price[item]\n    if left < 0:\n        print(\"You need {} cents more.\".)\n    \n\n","offset":275,"fileType":"python3","requestStartTime":1517945837488}}
{"body": {"column":46,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    tu_followees_likes = {}\n    # Key: tweet_id\n    # Val: count of likes from followees of targetUser\n    for lg_edge in likeGraph_edges:\n        # Trading cost of runtime/space for readibility/maintenance by using intermediate variables\n        followee = lg_edge[0]\n        tweet_id = lg_edge[1]\n        if followee in tu_followees:\n            tu_followees_likes[tweet_id] = tu_followees_likes.get(tweet_id, 0) + 1 # increments count of likes by 1\n    \n    for tweet_id, likes in tu_followees_likes.\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":1074,"fileType":"python3","requestStartTime":1517945849156}}
{"body": {"column":38,"line":13,"wordToComplete":"You have {} cents left.\"","code":"\nprice = {}\nfor _ in range(int(input())):\n    name, p = input().split()\n    price[name]=int(p)\n    \nfor _ in range(int(input())):\n    money, item = input().split()\n    money= int(money)\n    left = money - price[item]\n    if left < 0:\n        print(\"You need {} cents more.\".format(abs(left)))\n    else:\n        print(\"You have {} cents left.\")\n    \n\n","offset":342,"fileType":"python3","requestStartTime":1517945850264}}
{"body": {"column":40,"line":13,"wordToComplete":"","code":"\nprice = {}\nfor _ in range(int(input())):\n    name, p = input().split()\n    price[name]=int(p)\n    \nfor _ in range(int(input())):\n    money, item = input().split()\n    money= int(money)\n    left = money - price[item]\n    if left < 0:\n        print(\"You need {} cents more.\".format(abs(left)))\n    else:\n        print(\"You have {} cents left.\".)\n    \n\n","offset":344,"fileType":"python3","requestStartTime":1517945851792}}
{"body": {"column":23,"line":32,"wordToComplete":"min","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    tu_followees_likes = {}\n    # Key: tweet_id\n    # Val: count of likes from followees of targetUser\n    for lg_edge in likeGraph_edges:\n        # Trading cost of runtime/space for readibility/maintenance by using intermediate variables\n        followee = lg_edge[0]\n        tweet_id = lg_edge[1]\n        if followee in tu_followees:\n            tu_followees_likes[tweet_id] = tu_followees_likes.get(tweet_id, 0) + 1 # increments count of likes by 1\n    \n    for tweet_id, likes in tu_followees_likes.items():\n        if likes >= min\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":1106,"fileType":"python3","requestStartTime":1517945856387}}
{"body": {"column":24,"line":32,"wordToComplete":"minT","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    tu_followees_likes = {}\n    # Key: tweet_id\n    # Val: count of likes from followees of targetUser\n    for lg_edge in likeGraph_edges:\n        # Trading cost of runtime/space for readibility/maintenance by using intermediate variables\n        followee = lg_edge[0]\n        tweet_id = lg_edge[1]\n        if followee in tu_followees:\n            tu_followees_likes[tweet_id] = tu_followees_likes.get(tweet_id, 0) + 1 # increments count of likes by 1\n    \n    for tweet_id, likes in tu_followees_likes.items():\n        if likes >= minT\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":1107,"fileType":"python3","requestStartTime":1517945858791}}
{"body": {"column":25,"line":32,"wordToComplete":"minLi","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    tu_followees_likes = {}\n    # Key: tweet_id\n    # Val: count of likes from followees of targetUser\n    for lg_edge in likeGraph_edges:\n        # Trading cost of runtime/space for readibility/maintenance by using intermediate variables\n        followee = lg_edge[0]\n        tweet_id = lg_edge[1]\n        if followee in tu_followees:\n            tu_followees_likes[tweet_id] = tu_followees_likes.get(tweet_id, 0) + 1 # increments count of likes by 1\n    \n    for tweet_id, likes in tu_followees_likes.items():\n        if likes >= minLi\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":1108,"fileType":"python3","requestStartTime":1517945862726}}
{"body": {"column":23,"line":33,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n# followGraph_edges is a list of tuples (userId, userId)\n# likeGraph_edges is also a list of tuples (userId, tweetId)\n\ndef getRecommendedTweets(followGraph_edges, likeGraph_edges, targetUser, minLikeThreshold):\n    rec_tweets = []\n    \n    # List of followees of targetUser\n    tu_followees = []    \n    for fg_edge in followGraph_edges:\n        # fg_edge[0] --> follower\n        # fg_edge[1] --> followee\n        if fg_edge[0] == targetUser:\n            tu_followees.append(fg_edge[1])\n            \n    tu_followees_likes = {}\n    # Key: tweet_id\n    # Val: count of likes from followees of targetUser\n    for lg_edge in likeGraph_edges:\n        # Trading cost of runtime/space for readibility/maintenance by using intermediate variables\n        followee = lg_edge[0]\n        tweet_id = lg_edge[1]\n        if followee in tu_followees:\n            tu_followees_likes[tweet_id] = tu_followees_likes.get(tweet_id, 0) + 1 # increments count of likes by 1\n    \n    for tweet_id, likes in tu_followees_likes.items():\n        if likes >= minLikeThreshold:\n            rec_tweets.\n            \n    return rec_tweets\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_followGraph_nodes, _followGraph_edges = map(int, input().split())\n\n_followGraph_from = [0] * _followGraph_edges\n_followGraph_to = [0] * _followGraph_edges\n\nfor _followGraph_i in range(_followGraph_edges):\n    _followGraph_from[_followGraph_i], _followGraph_to[_followGraph_i] = map(int, input().split())\n\n_likeGraph_nodes, _likeGraph_edges = map(int, input().split())\n\n_likeGraph_from = [0] * _likeGraph_edges\n_likeGraph_to = [0] * _likeGraph_edges\n\nfor _likeGraph_i in range(_likeGraph_edges):\n    _likeGraph_from[_likeGraph_i], _likeGraph_to[_likeGraph_i] = map(int, input().split())\n\n_targetUser = int(input());\n_minLikeThreshold = int(input());\nfollowGraph = []\nlikeGraph = []\nfor i in range(_followGraph_edges):\n    followGraph.append((_followGraph_from[i], _followGraph_to[i]))\n\nfor i in range(_likeGraph_edges):\n    likeGraph.append((_likeGraph_from[i], _likeGraph_to[i]))\n\nres = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold)\n\nif res == None:\n    f.write(\"Null Result\")\nelse:\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\nf.close()\n\n","offset":1144,"fileType":"python3","requestStartTime":1517945870477}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef formingMagicSquare(s):\n    c=s[1,1]\n    b=c+s[0,0]\n    a=c+s[2,2]\n    n=s.\n    for x=1 in range(4):\n        for y=1 in range(4):\n            3*(x+y-1+(3/2)\n    \n   \n    k=list(valueCount.keys())\n    v=list(valueCount.values())\n    valueCount.pop(k[v.index(max(v))])\n    v=list(valueCount.values())\n    return sum(v)\n            \n            \n        \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":108,"fileType":"python3","requestStartTime":1517945899153}}
{"body": {"column":7,"line":13,"wordToComplete":"","code":"\nM = input()\na = input().split()\na = list(map(int,a))\naset = set(a)\nN = input()\nb = input().split()\nbset = set(map(int, b))\n\nboth = aset.union(bset);\nao = aset.difference(both)\nbo = bset.difference(both)\nunique = ao;\nunique.\nunique = list(unique)\nunique.sort()\nfor i in range(len(unique)):\n    print(unique[i])\n\n","offset":225,"fileType":"python3","requestStartTime":1517946055297}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self,price):\n        super(Book).__init__()\n        price= self.price\n        \n        print('Title:' sel.title)\n        print('Author:' author)\n        print('Title:' title)\n        \n        \ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":379,"fileType":"python3","requestStartTime":1517946141355}}
{"body": {"column":28,"line":13,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self,price):\n        super(Book).__init__()\n        price= self.price\n        \n        print('Title:' self.title)\n        print('Author:' author)\n        print('Title:' title)\n        \n        \ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":380,"fileType":"python3","requestStartTime":1517946142741}}
{"body": {"column":29,"line":14,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self,price):\n        super(Book).__init__()\n        price= self.price\n        \n        print('Title:' self.title)\n        print('Author:' self.author)\n        print('Title:' title)\n        \n        \ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":416,"fileType":"python3","requestStartTime":1517946144770}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self,price):\n        super(Book).__init__()\n        price= self.price\n        \n        print('Title:' self.title)\n        print('Author:' self.author)\n        print('Title:' self.title)\n        \n        \ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":452,"fileType":"python3","requestStartTime":1517946146815}}
{"body": {"column":19,"line":33,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef initial_unfairness(K, packets):\n    packets  = sorted(packets)\n    diff = []\n    initial_diff = []\n    for i in range(K):\n        for j in range(1,K):\n            diff_1 = (packets[j] - packets[i])\n            if diff_1 not in initial_diff:\n                initial_diff.append(abs(diff_1))\n    return (sum(initial_diff))\n\ndef next_unfairness(k,packets,subpackets):\n    return (k-1)*packets[0]- 2*(sum(subpackets)) + (k-1) * (packets[-1])\n\ndef angryChildren(N, K, packets):\n    # Complete this function\n    #print (K, sorted(packets))\n    packets  = sorted(packets)\n    unfairness = []\n    \n    #determine the initial unfairness\n    initial_diff = initial_unfairness(K, packets)\n    unfairness.append(initial_diff)\n    \n    #begin calculating unfairness for all subgroups.\n    for i in range(len(packets)):\n        subpackets = packets[1:N-1]\n        next_ = next_unfairness(K,packets,subpackets)\n        unfairness.\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    K = int(input().strip())\n    packets = []\n    packets_i = 0\n    for packets_i in range(N):\n       packets_t = int(input().strip())\n       packets.append(packets_t)\n    result = angryChildren(N, K, packets)\n    print(result)\n\n\n\n","offset":949,"fileType":"python3","requestStartTime":1517946221598}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef breakingRecords(score):\n    new_score = score \n    highs = 0\n    lows = 0 \n    high_score = new_score[0]\n    low_score = new_score[0]\n    for i in range(1, len(new_score)):\n        if new_score[i] >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    score = list(map(int, input().strip().split(' ')))\n    result = breakingRecords(score)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":232,"fileType":"python3","requestStartTime":1517946224412}}
{"body": {"column":12,"line":1,"wordToComplete":"","code":"\nm,n = input.\n\n","offset":14,"fileType":"python3","requestStartTime":1517946203913}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\nm,n = input().split()\ntests = list(input().)\n\n","offset":45,"fileType":"python3","requestStartTime":1517946256266}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef getMinimumUniqueSum(arr):\n    for numbers in arr:\n        nums = [int(n) for n in numbers.split()]\n        count = 0\n        for num in range(nums[0], nums[1]+1):\n            if math.sqrt(num).is_integer():\n                count+=1\n        print(count)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_cnt = 0\n    arr_cnt = int(input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        try:\n            arr_item = str(input())\n        except:\n            arr_item = None\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = getMinimumUniqueSum(arr);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":271,"fileType":"python3","requestStartTime":1517946310771}}
{"body": {"column":20,"line":2,"wordToComplete":"","code":"import textwrap\ndef wrap(string, max_width):\n    return textwrap.\nif __name__ == '__main__':\n    string, max_width = input(), int(input())\n    result = wrap(string, max_width)\n    print(result)\n","offset":66,"fileType":"python3","requestStartTime":1517946370096}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef getMinimumUniqueSum(arr):\n    return_list = []\n    for numbers in arr:\n        nums = [int(n) for n in numbers.split()]\n        count = 0\n        for num in range(nums[0], nums[1]+1):\n            if math.sqrt(num).is_integer():\n                count+=1\n        return_list.(count)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_cnt = 0\n    arr_cnt = int(input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        try:\n            arr_item = str(input())\n        except:\n            arr_item = None\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = getMinimumUniqueSum(arr);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":361,"fileType":"python3","requestStartTime":1517946373363}}
{"body": {"column":56,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            cost=cost+abs(s[x-1][y-1] - n*((x+y-1+(math.n/2))%n)+((x+2*y-2)%n)+1)\n    return cost\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":260,"fileType":"python3","requestStartTime":1517946392095}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    return s.\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":33,"fileType":"python3","requestStartTime":1517946422169}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef designerPdfViewer(h, word):\n    m = 0\n    for l in word:\n        if h[ord(l)-97]>\n\nif __name__ == \"__main__\":\n    h = list(map(int, input().strip().split(' ')))\n    word = input().strip()\n    result = designerPdfViewer(h, word)\n    print(result)\n\n\n","offset":115,"fileType":"python3","requestStartTime":1517946424726}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\nm,n = input().split()\ntests = list(input().split())\ntests = list(map(int, tests))\na = set(input().)\n\n","offset":100,"fileType":"python3","requestStartTime":1517946411665}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nm,n = input().split()\ntests = list(input().split())\ntests = list(map(int, tests))\na = set(input().split)\nb = set(input().)\n\n","offset":123,"fileType":"python3","requestStartTime":1517946415760}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef longestChain(words):\n    \n    get_subwords(sw):\n        for j in len(sw):\n            if sw[j:].\n\n    for w in words:\n        subwords = [w]\n        while subwords:\n            sw = subwords.pop()\n            subwords += [get_subwords(sw)]\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":172,"fileType":"python3","requestStartTime":1517946447154}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line.\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":64,"fileType":"python3","requestStartTime":1517946487118}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\nfrom collections import OrderedDict\n\ndef build_initial_list(indices, names):\n    new_initials = []\n    for index in indices:\n        new_initials.\n\ndef generate(names):\n    initial_map = {}\n    initials_output = OrderedDict()\n    for index, name in enumerate(names):\n        first, last = name.split(\" \")\n        initials = \"{}{}\".format(first[0], last[0])\n        initials_output[index] = initials\n        if initials not in initial_map:\n            initial_map[initials] = []\n        initial_map[initials].append(index)\n\n    for initials, indices in initial_map.items():\n        if len(indices) == 1:\n            continue\n\n        new_initials = build_initial_list(inidices, names)\n        for index, initial in enumerate(new_initials):\n            initials_output[indices[index]] = initial\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":218,"fileType":"python3","requestStartTime":1517946533615}}
{"body": {"column":27,"line":34,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\nfrom collections import OrderedDict\n\ndef build_initial_list(indices, names):\n    new_initials = []\n    for index in indices:\n        new_initials.append(names[index])\n    return new_initials\n\ndef generate(names):\n    initial_map = {}\n    initials_output = OrderedDict()\n    for index, name in enumerate(names):\n        first, last = name.split(\" \")\n        initials = \"{}{}\".format(first[0], last[0])\n        initials_output[index] = initials\n        if initials not in initial_map:\n            initial_map[initials] = []\n        initial_map[initials].append(index)\n\n    for initials, indices in initial_map.items():\n        if len(indices) == 1:\n            continue\n\n        new_initials = build_initial_list(inidices, names)\n        for index, initial in enumerate(new_initials):\n            initials_output[indices[index]] = initial\n    return initials_output.\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":936,"fileType":"python3","requestStartTime":1517946558262}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(n):\n    x = []\n    for i in range(n):\n        if (i+n)==(n|i):\n            x.\n\nn = int(input().strip())\nresult = solve(n)\nprint(result)\n\n\n","offset":117,"fileType":"python3","requestStartTime":1517946687048}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef books_collections(book):\n    #Start your code below (tip: Make sure to indent your code)\n    book = book.\n    print(book.capitalize)\n    \n    \n    #if the input string “book” equals “Calculus” return “I have my Calculus book.” */\n    return ('I have my ' + book + ' book.')\n\n    #else if the input string “book” equals “History” return “I have my History book.” */\n    return ('I have my ' + book + ' book.')\n\n    #else if the input string “book” equals “Circuits” return \"I have my Circuits book.\" */\n    return ('I have my ' + book + ' book.')\n    \n    #for everything else return \" I have my ____ book.\" */\n    return ('I have my ' + book + ' book.')\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        book = str(input())\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":567,"fileType":"python3","requestStartTime":1517946688219}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nN = input()\nunique = {}\nfor i in range(N)\n    unique.\n\n\n","offset":55,"fileType":"python3","requestStartTime":1517946661340}}
{"body": {"column":30,"line":2,"wordToComplete":"","code":"\nX = int(input())\nshoes = list(map(int, input().))\nfor i in range(N):\n    \n\n","offset":49,"fileType":"python3","requestStartTime":1517946697895}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"from abc import ABCMeta, abstractmethod\nclass Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\n#Write MyBook class\nclass MyBook(Book):\n    def __init__(self.title,author,price):\n        super(Book).__init__()\n        price= self.price\n        \n    def display():\n        print('Title:'+ title)\n        print('Author:'+ author)\n        print('Price:'+ price)\n       \n        \n        \ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()\n","offset":278,"fileType":"python3","requestStartTime":1517946700523}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\nn = input()\nfor _ in range(n):\n\n","offset":32,"fileType":"python3","requestStartTime":1517946736315}}
{"body": {"column":5,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    .\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":131,"fileType":"python3","requestStartTime":1517946764601}}
{"body": {"column":6,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    ..\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":132,"fileType":"python3","requestStartTime":1517946764847}}
{"body": {"column":7,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    ...\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":133,"fileType":"python3","requestStartTime":1517946765148}}
{"body": {"column":1,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    ...\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n.\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":457,"fileType":"python3","requestStartTime":1517946769000}}
{"body": {"column":2,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    ...\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n..\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":458,"fileType":"python3","requestStartTime":1517946769351}}
{"body": {"column":3,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    ...\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n...\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":459,"fileType":"python3","requestStartTime":1517946769591}}
{"body": {"column":7,"line":5,"wordToComplete":"","code":"\nimport re\n\nn = input()\nfor _ in range(n):\n    re.\n\n","offset":51,"fileType":"python3","requestStartTime":1517946769560}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nimport re\n\nn = input()\n\ndef rep (s):\n\nfor _ in range(n):\n    \n    \n    re.search()\n\n","offset":38,"fileType":"python3","requestStartTime":1517946794724}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef findOoptions(x, n):\n    a = []\n    for i in range(x/2 + 1):\n        a.\n        \n\ndef powerSum(X, N):\n    # Complete this function\n    # TODO: is this test case right? \n    if N == 1:\n        return 1\n    a = findOptions(X, N)\n    \n\nif __name__ == \"__main__\":\n    X = int(input().strip())\n    N = int(input().strip())\n    result = powerSum(X, N)\n    print(result)\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517946807296}}
{"body": {"column":17,"line":55,"wordToComplete":"","code":"\nfrom collections import deque\nn = int(input().strip())\n\nclass Node:\n    def __init__(self):\n        self.children = dict()\n        self.isEnd = False\n        self.isBegin = False\n    \n    def setIsBegin():\n        self.isBegin = True    \n    \n    def setIsEnd():\n        self.isEnd = True\n        \ndef add(root, word):\n    while(len(word) > 0):\n        w = word.popleft()\n        #print(w)\n        #print(word)\n        #print(root.children)\n        if  len(root.children) == 0 and  w not in root.children.keys()  :\n            root.children[w] = Node() \n            root = root.children[w]\n            #print(w, root.children.keys())\n            add(root, word)\n            #print(root.children)\n        else:\n            #print('exist')\n            root = root.children[w]\n           # print(w, root.children.keys())\n            add(root, word)\n    if len(word) == 0:\n        root.setIsEnd\n    #print(word,root.children.keys())    \n\ndef count(root):\n    num =0\n    if(root == None):\n        return 0 \n    else:\n        #print(root.children.keys()) \n        #while(len(root.children) > 0 ):\n        if root.isEnd == True:\n            return 1\n        else:\n            return len(root.children.items())\n    return num        \n            \n\n    \ndef search(root, sub):\n    num = 0\n    \n    if len(sub) >.popleft():\n        s = sub.popleft()\n    #print(len(root.children))\n    if root != None and len(root.children) != 0 and s in root.children.keys():\n        root = root.children[s]\n        #print(s, root.children.keys(), sub)\n        return search(root, sub)            \n    else:\n        return None\n    return root    \n    #count(num,root)\n    #print(root.children.keys())\n    #for c,n in root.children.items(): \n     #       num = num +1\n    #return num     \n\n\n        \n    \n    \n       \n        \n        \n        \nroot = Node()\nroot.setIsBegin\n#print(root.children)\n\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    c = deque(list(contact))\n    #print(c)\n    if op =='add':\n        add(root, c)\n    else:\n        print(count(search(root,c)))    \n   \n    #def addChild(char, Node){\n        #if self.children[char] != None:\n           # children[char] = Node\n    #}\n       \n\n","offset":1304,"fileType":"python3","requestStartTime":1517946809215}}
{"body": {"column":19,"line":6,"wordToComplete":"","code":"\nimport re\n\nn = input()\n\ndef rep (s, s2):\n    if s == \" && \":\nfor _ in range(n):\n    \n    \n    re.search()\n\n","offset":62,"fileType":"python3","requestStartTime":1517946831238}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\nimport re\n\nn = input()\n\ndef rep (s):\n    if s == \" && \":\n        return \" and \"\n    if s == \" || \":\nfor _ in range(n):\n    \n    \n    re.search()\n\n","offset":101,"fileType":"python3","requestStartTime":1517946854639}}
{"body": {"column":44,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    rightSquare = [[c-b,c+a+b,c-a],[c-a-b,b.],[]]\n'''\n    n=len(s)\n    cost=0\n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n'''\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":170,"fileType":"python3","requestStartTime":1517946907405}}
{"body": {"column":16,"line":90,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\n# user hash: stores words the user has searched\nuserHash = {}\n\ndef recordQuery(user, searchTerm):\n\n    # insert search term into userHash\n    # one transaction\n    if user not in userHash.keys():\n        userHash[user] = [searchTerm]\n    else:\n        userHash[user].append(searchTerm)\n\n\ndef calculateRelatedHash(user, searchTerm):\n\n    wordHash = {}\n\n    # for every OTHER user, check if it contains search term. if yes, create key for each term\n    for otherUser in userHash.keys():\n\n        if user != otherUser:\n\n            # first check if searchTerm is in there\n            otherUserTerms = userHash[otherUser]\n\n            if searchTerm in otherUserTerms:\n\n\n                for term in userHash[otherUser]:\n\n                    # retail != retail\n                    if term != searchTerm:\n\n                        # add key for term\n                        if term not in wordHash.keys():\n\n                            wordHash[term] = 1\n\n                        else:\n\n                            wordHash[term] = wordHash[term] + 1\n\n    # now you should have a dictionary where each term is mapped to number of occurrences\n    return wordHash\n\n\ndef calculateRelated(user, searchTerm):\n\n    relatedHash = calculateRelatedHash(user, searchTerm)\n\n    max = 0\n    current = []\n\n    # find max value in hash and the keys that result in max value\n    for key in relatedHash.keys():\n\n        if relatedHash[key] > max:\n            max = relatedHash[key]\n            current = [key]\n        elif relatedHash[key] == max:\n            current.append(key)\n\n    return [max, current]\n\n\ndef findRelatedQueries(user, searchQuery):\n\n    recordQuery(user, searchQuery)\n\n    temp = calculateRelated(user, searchQuery)\n\n    relScore = temp[0]\n\n    relQueries = temp[1]\n\n    relQueriesString = ''\n\n    for element in relQueries:\n\n        relQueriesString = relQueriesString + element + ' '\n\n    retValue =  str(relScore) + \" \" + relQueriesString\n    retValue.strip()\n    return retValue\n\nfor line in sys.\n\n\n\n","offset":2080,"fileType":"python3","requestStartTime":1517947047282}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \nN = int(input())\nfor i in range(N)\n    if (input().=='1')\n\n","offset":106,"fileType":"python3","requestStartTime":1517947022964}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef longestChain(words):\n    \n    def get_subwords(word):\n        #print(word)\n        subwords = []\n        #print(subwords)\n        for j in range(len(word)):\n            new_word =  word[j:].join(word[j+1:])\n            #print()\n            #print(j)\n            print(new_word)\n            print(new_word in words)\n            if new_word in words:\n                subwords += new_word\n        print(subwords)\n        raise Exception\n        return subwords\n                \n\n    #print(words)\n    for w in words:\n        subwords = [w]\n        #print(subwords)\n        while subwords:\n            sw = subwords.pop()\n            #print(sw)\n            subwords += [get_subwords(sw)]\n            print(subwords)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":284,"fileType":"python3","requestStartTime":1517947054227}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \nN = int(input())\nfor i in range(N)\n    if input().split()[0]=='pop':\n        s.\n    \n    if input().split()[0]=='remove':\n    \n    if input().split()[0]=='discard':\n\n","offset":134,"fileType":"python3","requestStartTime":1517947058181}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \nN = int(input())\nfor i in range(N)\n    if input().split()[0]=='pop':\n        s.pop()\n    \n    if input().split()[0]=='remove':\n        s.\n    if input().split()[0]=='discard':\n\n","offset":192,"fileType":"python3","requestStartTime":1517947061643}}
{"body": {"column":7,"line":6,"wordToComplete":"2.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ni2 = 2\nd2 = 2.\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517947107377}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nn = int(input())\ns = set(map(int, input().split())) \nN = int(input())\nfor i in range(N)\n    inp = input().\n    if input().split()[0]=='pop':\n        s.pop()\n    \n    if input().split()[0]=='remove':\n        s.remove(int())\n    if input().split()[0]=='discard':\n\n","offset":108,"fileType":"python3","requestStartTime":1517947087555}}
{"body": {"column":28,"line":25,"wordToComplete":"items from the index.\"\"\"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents\n        self.docs = []\n\n        # Keeps track of number of documents\n        self.num_docs = 0\n\n\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.num_docs += 1\n\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            print(stack)\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            value = doc_node[curr_key]\n            if isinstance(value, dict):\n                keys = []\n                for _key in value.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if value in index_node[curr_key]:\n                    set_list.append(set(index_node[curr_key][value]))\n        get_or_delete = []\n        if len(set_list > 0):\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = \"DELETED\"\n            elif self.docs[item] != \"DELETED\":\n                print(self.docs[item])\n\n\n    def modify_index(self, doc):\n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            print(stack)\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            value = doc_node[curr_key]\n            if isinstance(value, dict):\n                keys = []\n                for _key in value.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                if value not in index_node[curr_key]:\n                    index_node[curr_key][value] = []\n                index_node[curr_key][value].append(self.num_docs)\n\n    def run(self):\n        for line in input():\n            cmd, data = line.split(' ')\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(data, False)\n            elif cmd == 'delete':\n                self.get_or_delete(data, True)\nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":698,"fileType":"python3","requestStartTime":1517947155636}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\nfrom collections import OrderedDict\n\ndef build_initial_list(indices, names):\n    new_initials = []\n    firsts = []\n    lasts = []\n    for name in names:\n        first, last = name.\n\ndef generate(names):\n    initial_map = {}\n    initials_output = OrderedDict()\n    for index, name in enumerate(names):\n        first, last = name.split(\" \")\n        initials = \"{}{}\".format(first[0], last[0])\n        initials_output[index] = initials\n        if initials not in initial_map:\n            initial_map[initials] = []\n        initial_map[initials].append(index)\n\n    for initials, indices in initial_map.items():\n        if len(indices) == 1:\n            continue\n\n        new_initials = build_initial_list(indices, names)\n        for index, initial in enumerate(new_initials):\n            initials_output[indices[index]] = initial\n\n    for initials in initials_output.values():\n        print(initials)\nif __name__ == '__main__':\n    names_size = int(input())\n\n    names = []\n    for _ in range(names_size):\n        names_item = input()\n        names.append(names_item)\n\n    generate(names)\n\n","offset":252,"fileType":"python3","requestStartTime":1517947195903}}
{"body": {"column":7,"line":2,"wordToComplete":"","code":"\nfor _ in range(int(input())):\n    re.\n\n","offset":39,"fileType":"python3","requestStartTime":1517947217133}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\ninput()\nEng = set(input.)\n\n","offset":26,"fileType":"python3","requestStartTime":1517947253192}}
{"body": {"column":17,"line":4,"wordToComplete":"","code":"\ninput()\nEng = set(input().split())\ninput()\nFr = set(input().)\n\n","offset":62,"fileType":"python3","requestStartTime":1517947264620}}
{"body": {"column":20,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    x = []\n    for _ in range(N):\n        s = input().\n    \n\n\n","offset":104,"fileType":"python3","requestStartTime":1517947313414}}
{"body": {"column":20,"line":3,"wordToComplete":"r\"^[+-.]\"","code":"\nimport re\nfor _ in range(int(input())):\n    re.match(r\"^[+-.]\",input())\n\n","offset":62,"fileType":"python3","requestStartTime":1517947316031}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\ninput()\nEng = set(input().split())\ninput()\nFr = set(input().split())\nboth = Eng.\n\n","offset":82,"fileType":"python3","requestStartTime":1517947288782}}
{"body": {"column":21,"line":3,"wordToComplete":"r\"^[+-\\.]\"","code":"\nimport re\nfor _ in range(int(input())):\n    re.match(r\"^[+-\\.]\",input())\n\n","offset":63,"fileType":"python3","requestStartTime":1517947317891}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        queue = []\n    \n    def peek(self):\n        print(queue.)\n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":113,"fileType":"python3","requestStartTime":1517947332392}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        queue = []\n    \n    def peek(self):\n        print(queue.get.)\n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":117,"fileType":"python3","requestStartTime":1517947334207}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        queue = []\n    \n    def peek(self):\n        print(queue.get(0))\n        \n    def pop(self):\n        queue.\n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":163,"fileType":"python3","requestStartTime":1517947348294}}
{"body": {"column":33,"line":3,"wordToComplete":"r\"^[+-]{0,1}[0-9]*\\.\"","code":"\nimport re\nfor _ in range(int(input())):\n    re.match(r\"^[+-]{0,1}[0-9]*\\.\",input())\n\n","offset":75,"fileType":"python3","requestStartTime":1517947354333}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        queue = []\n    \n    def peek(self):\n        print(queue.get(0))\n        \n    def pop(self):\n        queue.\n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":163,"fileType":"python3","requestStartTime":1517947393987}}
{"body": {"column":4,"line":10,"wordToComplete":"","code":"\ninput()\nEng = set(input().split())\ninput()\nFr = set(input().split())\nboth = Eng.union(Fr)\nprint(Eng)\nprint(Fr)\nprint(both)\nprint(len(Eng)+len(Fr)-len(both))\nEng.\n\n","offset":163,"fileType":"python3","requestStartTime":1517947373638}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        queue = []\n    \n    def peek(self):\n        print(queue.get(0))\n        \n    def pop(self):\n        queue.pop(0)\n        \n    def put(self, value):\n        self.\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":218,"fileType":"python3","requestStartTime":1517947402226}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        sel.queue = []\n    \n    def peek(self):\n        print(queue.get(0))\n        \n    def pop(self):\n        queue.pop(0)\n        \n    def put(self, value):\n        self.\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":61,"fileType":"python3","requestStartTime":1517947406130}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getMinimumUniqueSum(arr):\n    return_list = []\n    \n    for numbers in arr:\n        nums = [int(n) for n in numbers.split()]\n        count = 0\n        num = 1\n        while num * num >< nums[1] / 2:\n            if \n        #return_list.append(sum(1 for i in range(nums[0], nums[1]+1) if (i**0.5) == int(i**0.5) ))\n        \n    return return_list\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_cnt = 0\n    arr_cnt = int(input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        try:\n            arr_item = str(input())\n        except:\n            arr_item = None\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = getMinimumUniqueSum(arr);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":260,"fileType":"python3","requestStartTime":1517947413564}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    m, M = 0, 0\n    for idx, door in enumerate(doors):\n        if door == 1:\n            m += 1\n            if doors.doors[idx+1] == 1:\n                doors[idx+1] = 0\n                M += 1\n    M += m\n    return [m, M]\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":211,"fileType":"python3","requestStartTime":1517947416166}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        queue = []\n    \n    def peek(self):\n        print(queue.get(0))\n        \n    def pop(self):\n        queue.pop(0)\n        \n    def put(self, value):\n        queue.\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":219,"fileType":"python3","requestStartTime":1517947422425}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    x = []\n    for _ in range(N):\n        s = input().split()\n        cmd = s[0]\n        arg = s[1:]\n        if cmd != \"print\":\n            cmd += \"(\" + \",\".\")\"\n    \n\n\n","offset":207,"fileType":"python3","requestStartTime":1517947436027}}
{"body": {"column":3,"line":2,"wordToComplete":"","code":"\nimport re\nre.\n\n","offset":15,"fileType":"python3","requestStartTime":1517947452797}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\nimport re\nre.split(\"[,.]\")\n\n","offset":25,"fileType":"python3","requestStartTime":1517947461030}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"\nimport re\nre.split(\"[,\\.\")\n\n","offset":26,"fileType":"python3","requestStartTime":1517947463200}}
{"body": {"column":20,"line":10,"wordToComplete":"x.\"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    x = []\n    for _ in range(N):\n        s = input().split()\n        cmd = s[0]\n        arg = s[1:]\n        if cmd != \"print\":\n            cmd += \"(\" + \",\".join(arg) + \")\"\n            eval(\"x.\")\n    \n\n\n","offset":243,"fileType":"python3","requestStartTime":1517947464555}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\ninput()\na = set(input().)\n\n","offset":26,"fileType":"python3","requestStartTime":1517947455700}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set(input().)\n\n","offset":59,"fileType":"python3","requestStartTime":1517947461813}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set(input().split())\nprint(len(a.))\n\n","offset":80,"fileType":"python3","requestStartTime":1517947469155}}
{"body": {"column":5,"line":2,"wordToComplete":"","code":"\nimport re\n'\\n'.re.split(r\"[,\\.]\",input())\n\n","offset":17,"fileType":"python3","requestStartTime":1517947547695}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    S = []\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        S.\n\n\n","offset":256,"fileType":"python3","requestStartTime":1517947564282}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\ninput()\na = set(input().)\n\n","offset":26,"fileType":"python3","requestStartTime":1517947550400}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set.\n\n","offset":51,"fileType":"python3","requestStartTime":1517947554321}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set(input().)\n\n","offset":59,"fileType":"python3","requestStartTime":1517947556183}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set(input().split())\nprint(len(a.))\n\n","offset":80,"fileType":"python3","requestStartTime":1517947564078}}
{"body": {"column":31,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    if head == null:\n        return null\n    else:\n        print(head)\n        return print_list(head.)\n\n\n","offset":379,"fileType":"python3","requestStartTime":1517947605164}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(0,0)] * n \n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        S.\n\n\n","offset":266,"fileType":"python3","requestStartTime":1517947608731}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    if head == null:\n        return null\n    else:\n        print(head.)\n        return print_list(head.next)\n\n\n","offset":347,"fileType":"python3","requestStartTime":1517947641059}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\ninput\na = set(input().)\n\n","offset":24,"fileType":"python3","requestStartTime":1517947613434}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    if s.\n\n","offset":54,"fileType":"python3","requestStartTime":1517947645142}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set(input().)\n\n","offset":59,"fileType":"python3","requestStartTime":1517947621364}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\ninput()\na = set(input().split())\ninput()\nb = set(input().split())\nprint(len(a.))\n\n","offset":80,"fileType":"python3","requestStartTime":1517947627076}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(0,0)] * n \n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        if (end >)\n        S[a] = (b, val + k)\n\n\n","offset":317,"fileType":"python3","requestStartTime":1517947700062}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(0,0)] * n \n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        if (end >= b)\n            S[a] = (b, val + k)\n\n\n","offset":334,"fileType":"python3","requestStartTime":1517947707667}}
{"body": {"column":45,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    A = []\n    for i, edges in enumerate(friends):\n        A.append([1 if e == 'Y' else 0 for e in edges])\n    \n    class Circles_(object):\n        def __init__(self):\n            self.friend_circles = 0\n            self.adjacency_list = {}\n        def add_individual(self, name):\n            f = Friend_(name)\n            self.adjacency_list[name] = f\n            self.friend_circles += 1\n        def find(self, f):\n            if friend is friend.parent:\n                return f\n            friend.parent = self.find(friend.)\n        class Friend_(object):\n            def __init__(self, name, parent=-1, depth=0):\n                self.name = name\n                self.parent = parent if parent >= 0 else self\n                self.depth = depth\n            \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":627,"fileType":"python3","requestStartTime":1517947737611}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\ninput()\na = set(input().split())\nN = int(input())\nfor i in range(N):\n    next = input().\n\n","offset":90,"fileType":"python3","requestStartTime":1517947718047}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        sel.\n        next = null\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":66,"fileType":"python3","requestStartTime":1517947761077}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.\n        next = null\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":67,"fileType":"python3","requestStartTime":1517947762117}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\ninput()\na = set(input().split())\nN = int(input())\nfor i in range(N):\n    next = input().split()\n    if next[0]=='intersection_update':\n        a.\n\n","offset":147,"fileType":"python3","requestStartTime":1517947739018}}
{"body": {"column":42,"line":7,"wordToComplete":"","code":"\ninput()\na = set(input().split())\nN = int(input())\nfor i in range(N):\n    next = input().split()\n    if next[0]=='intersection_update':\n        a.intersection_update(set(input().))\n\n","offset":179,"fileType":"python3","requestStartTime":1517947746693}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.\n        sel.next = null\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":80,"fileType":"python3","requestStartTime":1517947775898}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.\n        self.next = null\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":81,"fileType":"python3","requestStartTime":1517947777220}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":67,"fileType":"python3","requestStartTime":1517947806703}}
{"body": {"column":52,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    A = []\n    for i, edges in enumerate(friends):\n        A.append([1 if e == 'Y' else 0 for e in edges])\n    \n    class Circles_(object):\n        def __init__(self):\n            self.friend_circles = 0\n            self.adjacency_list = {}\n        def add_individual(self, name):\n            f = Friend_(name)\n            self.adjacency_list[name] = f\n            self.friend_circles += 1\n        def find(self, f):\n            if friend is friend.parent:\n                return f\n            friend.parent = self.find(friend.parent)\n            return friend.parent \n        def merge(self, i, j):\n            f_i, f_k = self.adjacency_list[i], self.\n        class Friend_(object):\n            def __init__(self, name, parent=-1, depth=0):\n                self.name = name\n                self.parent = parent if parent >= 0 else self\n                self.depth = depth\n            \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":752,"fileType":"python3","requestStartTime":1517947808216}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":93,"fileType":"python3","requestStartTime":1517947817885}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\ninput()\na = set(input().split())\nN = int(input())\nfor i in range(0:N:2):\n    next = input().split()\n    if next[0]=='intersection_update':\n        a.intersection_update(set(input().split()))\n    if next[0]=='update':\n        a.\n\n","offset":229,"fileType":"python3","requestStartTime":1517947790042}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\ninput()\na = set(input().split())\nN = int(input())\nfor i in range(0:N:2):\n    next = input().split()\n    if next[0]=='intersection_update':\n        a.intersection_update(set(input().split()))\n    if next[0]=='update':\n        a.update(set(input().))\n\n","offset":248,"fileType":"python3","requestStartTime":1517947794253}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.\n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":146,"fileType":"python3","requestStartTime":1517947831140}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.\n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":146,"fileType":"python3","requestStartTime":1517947833203}}
{"body": {"column":50,"line":28,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    A = []\n    for i, edges in enumerate(friends):\n        A.append([1 if e == 'Y' else 0 for e in edges])\n    \n    class Circles_(object):\n        def __init__(self):\n            self.friend_circles = 0\n            self.adjacency_list = {}\n        def add_individual(self, name):\n            f = Friend_(name)\n            self.adjacency_list[name] = f\n            self.friend_circles += 1\n        def find(self, f):\n            if friend is friend.parent:\n                return f\n            friend.parent = self.find(friend.parent)\n            return friend.parent \n        def merge(self, i, j):\n            f_i, f_k = self.adjacency_list[i], self.adjacency_list[j]\n            root_i, root_j = self.find(f_i), self.\n        class Friend_(object):\n            def __init__(self, name, parent=-1, depth=0):\n                self.name = name\n                self.parent = parent if parent >= 0 else self\n                self.depth = depth\n            \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":820,"fileType":"python3","requestStartTime":1517947835575}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = input()\n    alnum = False\n    alpha = False\n    digit = False\n    lower = False\n    upper = False\n    for char in s:\n        if char.\n        \n       \n\n","offset":170,"fileType":"python3","requestStartTime":1517947849209}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\ndef swap_case(s):\n    s_swap = ''\n    for i in s:\n        if i.\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":65,"fileType":"python3","requestStartTime":1517947849826}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.\n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":270,"fileType":"python3","requestStartTime":1517947856915}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    cost=0\n    n=s.\n    rightSquare = [[c-b,c+a+b,c-a],[c-a-b,c,c+a-b],[c+a,c-a+b,c+b]]\n    print(rightSquare)\n    for x in range(3):\n        for y in range(3):\n            cost=cost+abs(rightSquare[x][y]-s[x][y])\n    return cost\n'''\n    n=len(s)\n    \n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n'''\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":145,"fileType":"python3","requestStartTime":1517947859285}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\ndef swap_case(s):\n    s_swap = ''\n    for i in s:\n        if i.isLower():\n            s_swap.\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":95,"fileType":"python3","requestStartTime":1517947868722}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\ninput()\na = set(input().split())\nN = int(input())\nfor i in range(0:N:2):\n    next = input().split()\n    if next[0]=='intersection_update':\n        a.intersection_update(set(input().split()))\n    if next[0]=='update':\n        a.update(set(input().split()))\n    if next[0]=='symmetric_difference_update':\n        a.\n    if next[0]=='difference_update':\n\n","offset":315,"fileType":"python3","requestStartTime":1517947841413}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nwidth = int(input())\nheight = int(input())\ncharacter = input()\nwhile h < height:\n    while h < width:\n        print.\n        \n\n","offset":188,"fileType":"python3","requestStartTime":1517947871101}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            return self.\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":348,"fileType":"python3","requestStartTime":1517947871544}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":341,"fileType":"python3","requestStartTime":1517947873376}}
{"body": {"column":24,"line":5,"wordToComplete":"","code":"\ndef swap_case(s):\n    s_swap = ''\n    for i in s:\n        if i.isLower():\n            s_swap += i.\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":100,"fileType":"python3","requestStartTime":1517947874188}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front.\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":347,"fileType":"python3","requestStartTime":1517947874601}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom math import floor\n\ndef formingMagicSquare(s):\n    c=s[1][1]\n    b=c+s[0][0]\n    a=c+s[2][2]\n    cost=0\n    n=s.length*s.\n    rightSquare = [[c-b,c+a+b,c-a],[c-a-b,c,c+a-b],[c+a,c-a+b,c+b]]\n    print(rightSquare)\n    for x in range(3):\n        for y in range(3):\n            cost=cost+abs(rightSquare[x][y]-s[x][y])\n    return cost\n'''\n    n=len(s)\n    \n    for x in range(1,4):\n        for y in range(1,4):\n            value = s[x-1][y-1]\n            \n            rightValue = n*((x+y-1+(n/2))%n)+((x+2*y-2)%n)+1\n            print(value,rightValue)\n            if(value != rightValue):\n                cost=cost+abs(value-rightValue) \n    return cost\n'''\n            \n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":154,"fileType":"python3","requestStartTime":1517947875327}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = null\n        self.\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":93,"fileType":"python3","requestStartTime":1517947881575}}
{"body": {"column":24,"line":5,"wordToComplete":"","code":"\ndef swap_case(s):\n    s_swap = ''\n    for i in s:\n        if i.isLower():\n            s_swap += i.\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":100,"fileType":"python3","requestStartTime":1517947882237}}
{"body": {"column":40,"line":7,"wordToComplete":"","code":"\nfrom collections import Counter\nX = int(input())\nshoes = list(map(int, input().split()))\ninventory = Counter(shoes)\nN = int(input())\nfor i in range(N):\n    size, price = list(map(int, input().))\n\n","offset":194,"fileType":"python3","requestStartTime":1517947886913}}
{"body": {"column":24,"line":7,"wordToComplete":"","code":"\ndef swap_case(s):\n    s_swap = ''\n    for i in s:\n        if i.isLower():\n            s_swap += i.upper()\n        else:\n            s_swap += i.\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":146,"fileType":"python3","requestStartTime":1517947899912}}
{"body": {"column":27,"line":16,"wordToComplete":"0.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getMinimumUniqueSum(arr):\n    return_list = []\n    \n    for numbers in arr:\n        nums = [int(n) for n in numbers.split()]\n        #return_list.append(sum(1 for i in range(nums[0], nums[1]+1) if (i**0.5) == int(i**0.5) ))\n        \n        count = 0\n        num = nums[0] ** 0.\n        print((num**2))\n        print(nums[0])\n        print(nums[1])\n        while ((num**2) >= nums[0]) and ((num**2) <= nums[1]):\n            num += 1\n            count += 1\n        \n        return_list.append(count)\n        \n    return return_list\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_cnt = 0\n    arr_cnt = int(input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        try:\n            arr_item = str(input())\n        except:\n            arr_item = None\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = getMinimumUniqueSum(arr);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":354,"fileType":"python3","requestStartTime":1517947920716}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n    #Complete this method\n        while current.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":340,"fileType":"python3","requestStartTime":1517947923867}}
{"body": {"column":30,"line":18,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":379,"fileType":"python3","requestStartTime":1517947925855}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef distanceBetweenStrings(s1, s2):\n    return sum([1 if s1[i]!=s2[i] else 0 for i in range(8)])\n        \ndef searchShortestPath(start, end, graph):\n    opened = [{\"level\":1, \"value\":start}]\n    closed = []\n    while len(opened) > 0:\n        item = opened.pop()\n        if distanceBetweenStrings(item[\"value\"], end) == 1:\n            return item[\"level\"]\n        closed.append(item)\n        opened.\n        \n        \n        for child in graph[item[\"value\"]]:\n            if child not in closed:\n                opened.append({\"level\":item[\"level\"]+1, \"value\":child})\n    return -1\n     \n\ndef findMutationDistance(start, end, bank):\n    graph = {}\n    bank.append(start)\n    bank.append(end)\n    for item in bank:\n        graph[item] = [x for x in bank if distanceBetweenStrings(item, x) == 1]\n    return searchShortestPath(start, end, graph)\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _start = str(input())\nexcept:\n    _start = None\n\n\ntry:\n    _end = str(input())\nexcept:\n    _end = None\n\n\n_bank_cnt = 0\n_bank_cnt = int(input())\n_bank_i=0\n_bank = []\nwhile _bank_i < _bank_cnt:\n    try:\n        _bank_item = str(input())\n    except:\n        _bank_item = None\n    _bank.append(_bank_item)\n    _bank_i+=1\n    \n\nres = findMutationDistance(_start, _end, _bank)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":438,"fileType":"python3","requestStartTime":1517947934690}}
{"body": {"column":30,"line":13,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n    #Complete this method\n        while current.next:\n            current = current.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":376,"fileType":"python3","requestStartTime":1517947937921}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n    #Complete this method\n        while current.next:\n            current = current.next\n        currnet.\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":397,"fileType":"python3","requestStartTime":1517947948840}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        self.\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":69,"fileType":"python3","requestStartTime":1517947953876}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self):\n            self.\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":101,"fileType":"python3","requestStartTime":1517947969346}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line.\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":64,"fileType":"python3","requestStartTime":1517947985120}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            sel.\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":138,"fileType":"python3","requestStartTime":1517947986615}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":139,"fileType":"python3","requestStartTime":1517947987631}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    a = line.split(\"\")\n    a = \"-\".\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":90,"fileType":"python3","requestStartTime":1517948004001}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.\n\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n\n    \n    # Function name: getPerimeter(self)\n        \nif __name__ == \"__main__\":\n    length = input()\n    width  = input()\n    Rectangle = Rectangle(int(length), int(width))\n    print(Rectangle.length)\n    print(Rectangle.width)\n    print(Rectangle.perimeter)\n    print(Rectangle.area)\n","offset":467,"fileType":"python3","requestStartTime":1517948009843}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self. \n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n\n    \n    # Function name: getPerimeter(self)\n        \nif __name__ == \"__main__\":\n    length = input()\n    width  = input()\n    Rectangle = Rectangle(int(length), int(width))\n    print(Rectangle.length)\n    print(Rectangle.width)\n    print(Rectangle.perimeter)\n    print(Rectangle.area)\n","offset":497,"fileType":"python3","requestStartTime":1517948016766}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.\n    \n    # Function name: getPerimeter(self)\n        \nif __name__ == \"__main__\":\n    length = input()\n    width  = input()\n    Rectangle = Rectangle(int(length), int(width))\n    print(Rectangle.length)\n    print(Rectangle.width)\n    print(Rectangle.perimeter)\n    print(Rectangle.area)\n","offset":796,"fileType":"python3","requestStartTime":1517948034547}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.\n    \n    # Function name: getPerimeter(self)\n        \nif __name__ == \"__main__\":\n    length = input()\n    width  = input()\n    Rectangle = Rectangle(int(length), int(width))\n    print(Rectangle.length)\n    print(Rectangle.width)\n    print(Rectangle.perimeter)\n    print(Rectangle.area)\n","offset":808,"fileType":"python3","requestStartTime":1517948038166}}
{"body": {"column":23,"line":35,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef friendCircles(friends):\n    A = []\n    for i, edges in enumerate(friends):\n        A.append([1 if e == 'Y' else 0 for e in edges])\n    \n    class Circles_(object):\n        def __init__(self):\n            self.friend_circles = 0\n            self.adjacency_list = {}\n        def add_individual(self, name):\n            f = Friend_(name)\n            self.adjacency_list[name] = f\n            self.friend_circles += 1\n        def find(self, f):\n            if friend is friend.parent:\n                return f\n            friend.parent = self.find(friend.parent)\n            return friend.parent \n        def merge(self, i, j):\n            f_i, f_k = self.adjacency_list[i], self.adjacency_list[j]\n            root_i, root_j = self.find(f_i), self.find(f_j)\n            if (root_i.depth > root_j.depth):\n                root_j.parent = root_i\n            else if (root_i.depth < root_j.depth):\n                root_i.parent = root_j\n            else:\n                root_j.parent = root_i\n                root_i.\n                \n        class Friend_(object):\n            def __init__(self, name, parent=-1, depth=0):\n                self.name = name\n                self.parent = parent if parent >= 0 else self\n                self.depth = depth\n            \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    friends_cnt = 0\n    friends_cnt = int(input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = str(input())\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1085,"fileType":"python3","requestStartTime":1517948040527}}
{"body": {"column":23,"line":27,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return 2*(self.)\nif __name__ == \"__main__\":\n    length = input()\n    width  = input()\n    Rectangle = Rectangle(int(length), int(width))\n    print(Rectangle.length)\n    print(Rectangle.width)\n    print(Rectangle.perimeter)\n    print(Rectangle.area)\n","offset":910,"fileType":"python3","requestStartTime":1517948057688}}
{"body": {"column":24,"line":24,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.\n            \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":534,"fileType":"python3","requestStartTime":1517948058381}}
{"body": {"column":35,"line":27,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return 2*(self.length+self.)\nif __name__ == \"__main__\":\n    length = input()\n    width  = input()\n    Rectangle = Rectangle(int(length), int(width))\n    print(Rectangle.length)\n    print(Rectangle.width)\n    print(Rectangle.perimeter)\n    print(Rectangle.area)\n","offset":922,"fileType":"python3","requestStartTime":1517948060296}}
{"body": {"column":30,"line":24,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.\n            \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":540,"fileType":"python3","requestStartTime":1517948059885}}
{"body": {"column":13,"line":27,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":598,"fileType":"python3","requestStartTime":1517948067308}}
{"body": {"column":18,"line":27,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        self.back.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":603,"fileType":"python3","requestStartTime":1517948068901}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\nlist = []\nif N == insert:\n    list.\n\n\n","offset":85,"fileType":"python3","requestStartTime":1517948079293}}
{"body": {"column":13,"line":28,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        self.back.next = Node(value)\n        self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":635,"fileType":"python3","requestStartTime":1517948090721}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        self.back.next = Node(value)\n        self.back = Node\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":244,"fileType":"python3","requestStartTime":1517948114527}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def insert(self,head,data): \n    #Complete this method\n        if head is None:\n            node = Node(data)\n            return node\n        while current.next:\n            current = current.next\n        node = Node(data)\n        currennt.\n        return head\n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nmylist.display(head); \t  \n","offset":503,"fileType":"python3","requestStartTime":1517948124397}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        if self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":601,"fileType":"python3","requestStartTime":1517948131926}}
{"body": {"column":17,"line":28,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.next = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        if self.front == None: \n            self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":634,"fileType":"python3","requestStartTime":1517948137606}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom datetime import datetime\nimport dateutil.parser\nimport sys\narray = []\nd = {}\nfor line in sys.stdin:\n    array.append(line)\n    \n    \narray = [a.replace('\\n','') for a in array]\n    \nrange_start = dateutil.parser.parse(array[0]).replace(tzinfo=None)\nrange_end = dateutil.parser.parse(array[1]).replace(tzinfo=None)\nnum_of_lines = int(array[2])\n\narray.\n\n\n#print(range_start, range_end, num_of_lines)\n\n#print(array)\n\narray2 = []\nfor x in array:\n    date = dateutil.parser.parse(x.split('\\t')[0]).replace(tzinfo=None)\n    array2.append(date)    \n\n\nfor date in array2:\n    if range_start <= date and date <= range_end:\n        print('hello')\n        print(date)\n\n\n\n","offset":427,"fileType":"python3","requestStartTime":1517948168294}}
{"body": {"column":17,"line":29,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        n = Node(value)\n        if self.front == None: \n            self.front = n\n            self.\n            \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":660,"fileType":"python3","requestStartTime":1517948168537}}
{"body": {"column":17,"line":31,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        n = Node(value)\n        if self.front == None: \n            self.front = n\n            self.back - n\n        else: \n            self.\n            \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":701,"fileType":"python3","requestStartTime":1517948178415}}
{"body": {"column":17,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    counter = 0\n    hour_temp = []\n    hour_temp.append(['hour','temperature'])\n    for i in range(0,len(temperature)):\n        hour_temp.append([counter,temperature[i]])\n        counter = counter + 1\n        if counter == 24:\n            counter = 0\n    predict_temp = []\n    temp = []\n    hour = 0\n    for i in range(0 , len(hour_temp)):\n        if hour_temp == hour:\n            temp.\n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":519,"fileType":"python3","requestStartTime":1517948212261}}
{"body": {"column":17,"line":43,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport re\n\n\n# Complete the function below.  \n\n\ndef  postfix_to_infix( expression):\n     token_list = []\n    stack = []\n    \n    op_1 = ['+', '-']\n    \n    token_list = get_token_list(input_str)\n    \n    if check_if_invalid(token_list):\n        return 'invalid'\n    \n    for token in token_list:\n        if token in op_1:\n            r_exp = stack.pop()\n            l_exp = stack.pop()\n            \n            stack.append(l_exp + token + r_exp)\n        \n        elif token in ['*', '/', '^']:\n            \n            r_exp = stack.pop()\n            \n            if op_1[0] in r_exp or op_1[1] in r_exp:\n                r_exp = '(' + r_exp + ')'\n            \n            l_exp = stack.pop()\n            \n            if op_1[0] in l_exp or op_1[1] in l_exp:\n                l_exp = '(' + l_exp + ')'\n            \n            stack.append(l_exp + token + r_exp)\n        else:\n            stack.append(token)\n    return stack.\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n_expression = str(input())\n\nres = postfix_to_infix(_expression);\nf.write(res + \"\\n\")\n\nf.close()\n\n\n\n\n","offset":962,"fileType":"python3","requestStartTime":1517948213693}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\nimport math\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    score = student_marks[query_name]\n    print ({}.)\n\n\n","offset":300,"fileType":"python3","requestStartTime":1517948245376}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\ninput()\nrooms = list(input().)\n\n","offset":31,"fileType":"python3","requestStartTime":1517948219845}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        n = sel.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back = n\n            \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":576,"fileType":"python3","requestStartTime":1517948253131}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.next\n            return self.front.value\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back = n\n            \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":577,"fileType":"python3","requestStartTime":1517948254059}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\ninput()\nrooms = list(input().split())\nuniques = list(set(rooms))\nfor i in len(unique):\n    rooms.\n\n","offset":99,"fileType":"python3","requestStartTime":1517948255398}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.\n            return self.front.value\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back = n\n            \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":480,"fileType":"python3","requestStartTime":1517948284095}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    print(S)\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b + 1) >\n            S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    max_val = 0\n    for i in range(n):\n        val = S[i+1][1]\n        if (max_val < val):\n            max_val = val\n    print(S)       \n    print(max_val) \n\n","offset":416,"fileType":"python3","requestStartTime":1517948284333}}
{"body": {"column":36,"line":22,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node (object): \n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else: \n            self.front = self.front.\n            return self.front.value\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back = n\n            \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":486,"fileType":"python3","requestStartTime":1517948285134}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\ninput()\nrooms = list(input().split())\nuniques = list(set(rooms))\nfor i in range(len(uniques)):\n    rooms.remove(uniques[i])\nuniques2 = set(rooms)\nuniques2.\n\n","offset":157,"fileType":"python3","requestStartTime":1517948330016}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\ninput()\nrooms = list(input().split())\nuniques = list(set(rooms))\nfor i in range(len(uniques)):\n    rooms.remove(uniques[i])\nuniques2 = set(rooms)\nset(uniques).\n\n","offset":161,"fileType":"python3","requestStartTime":1517948348322}}
{"body": {"column":8,"line":8,"wordToComplete":"","code":"\ninput()\nrooms = list(input().split())\nuniques = list(set(rooms))\nfor i in range(len(uniques)):\n    rooms.remove(uniques[i])\nuniques2 = set(rooms)\na = set(uniques).difference(uniques2)\nprint(a.)\n\n","offset":194,"fileType":"python3","requestStartTime":1517948408622}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n\n    \n    # Function name: getPerimeter(self)\n        \ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(input()), int(input()))\n\n    print(rec.length)\n    print(rec.width)\n    print(rec.getPerimeter())\n    print(rec.getArea())\n","offset":467,"fileType":"python3","requestStartTime":1517948456954}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.\n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n\n    \n    # Function name: getPerimeter(self)\n        \ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(input()), int(input()))\n\n    print(rec.length)\n    print(rec.width)\n    print(rec.getPerimeter())\n    print(rec.getArea())\n","offset":496,"fileType":"python3","requestStartTime":1517948463484}}
{"body": {"column":27,"line":22,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return length*self.width\n    \n    # Function name: getPerimeter(self)\n        \ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(input()), int(input()))\n\n    print(rec.length)\n    print(rec.width)\n    print(rec.getPerimeter())\n    print(rec.getArea())\n","offset":794,"fileType":"python3","requestStartTime":1517948483725}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n        \ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(input()), int(input()))\n\n    print(rec.length)\n    print(rec.width)\n    print(rec.getPerimeter())\n    print(rec.getArea())\n","offset":787,"fileType":"python3","requestStartTime":1517948487100}}
{"body": {"column":23,"line":26,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return 2*(self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(input()), int(input()))\n\n    print(rec.length)\n    print(rec.width)\n    print(rec.getPerimeter())\n    print(rec.getArea())\n","offset":901,"fileType":"python3","requestStartTime":1517948507513}}
{"body": {"column":37,"line":26,"wordToComplete":"","code":"#!/bin/python\nimport sys, os\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return 2*(self.length + self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(input()), int(input()))\n\n    print(rec.length)\n    print(rec.width)\n    print(rec.getPerimeter())\n    print(rec.getArea())\n","offset":915,"fileType":"python3","requestStartTime":1517948511650}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":100,"fileType":"python3","requestStartTime":1517948531742}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.\n    \n    def __init__(self):\n        self.front = null\n        self.back = null\n    \n    def peek(self):\n        if self.front == null: \n            return null\n        else: \n            return front\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":131,"fileType":"python3","requestStartTime":1517948539627}}
{"body": {"column":37,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nn = int(input().strip())\na = list(map(int, input().strip().split(' ')))\n# Write Your Code Here\n\nnum_swaps = 0\n\nfor i in range(n):\n    for j in range(n-1):\n        if a[j] > a[j+1]:\n            a[j], a[j-1] = a[j-1], a[j]\n            num_swaps += 1\n            \n\nprint('Array is sorted in {} swaps.'.'\nFirst Element: 1\nLast Element: 3\n\n\n","offset":329,"fileType":"python3","requestStartTime":1517948549392}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front\n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":344,"fileType":"python3","requestStartTime":1517948563849}}
{"body": {"column":12,"line":8,"wordToComplete":"a","code":"\ninput()\nrooms = list(input().split())\ns1 = set()\ns2 = set()\n\nfor i in rooms:\n    if i in s1:\n        s2.a\nuniques2 = set(rooms)\na = set(uniques).difference(uniques2)\nprint(a.pop())\n\ns1=set();  #all unique room number\ns2=set();  #all unique room number occur more than once\nfor i in a:\n    if  i in s1:\n        s2.add(i);\n    else:\n        s1.add(i);\ns3=s1.difference(s2);\nprint list(s3)[0];\n\n","offset":107,"fileType":"python3","requestStartTime":1517948543457}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.\n            \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":478,"fileType":"python3","requestStartTime":1517948579696}}
{"body": {"column":36,"line":22,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.\n            \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":484,"fileType":"python3","requestStartTime":1517948581040}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nn = int(input().strip())\na = list(map(int, input().strip().split(' ')))\n# Write Your Code Here\n\nnum_swaps = 0\n\nfor i in range(n):\n    for j in range(n-1):\n        if a[j] > a[j+1]:\n            a[j], a[j-1] = a[j-1], a[j]\n            num_swaps += 1\n            \n\nprint('Array is sorted in {} swaps.'.format(num_swaps))\nprint('First Element: {}'.\nLast Element: 3\n\n\n","offset":374,"fileType":"python3","requestStartTime":1517948580508}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            self.\n            \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":506,"fileType":"python3","requestStartTime":1517948583656}}
{"body": {"column":12,"line":10,"wordToComplete":"a","code":"\ninput()\nrooms = list(input().split())\ns1 = set()\ns2 = set()\n\nfor i in rooms:\n    if i in s1:\n        s2.add(i)\n    else:\n        s1.a\nuniques2 = set(rooms)\na = set(uniques).difference(uniques2)\nprint(a.pop())\n\ns1=set();  #all unique room number\ns2=set();  #all unique room number occur more than once\nfor i in a:\n    if  i in s1:\n        s2.add(i);\n    else:\n        s1.add(i);\ns3=s1.difference(s2);\nprint list(s3)[0];\n\n","offset":135,"fileType":"python3","requestStartTime":1517948555581}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"\ninput()\nrooms = list(input().split())\ns1 = set()\ns2 = set()\n\nfor i in rooms:\n    if i in s1:\n        s2.add(i)\n    else:\n        s1.add(i)\nd3 = s1.\nuniques2 = set(rooms)\na = set(uniques).difference(uniques2)\nprint(a.pop())\n\ns1=set();  #all unique room number\ns2=set();  #all unique room number occur more than once\nfor i in a:\n    if  i in s1:\n        s2.add(i);\n    else:\n        s1.add(i);\ns3=s1.difference(s2);\nprint list(s3)[0];\n\n","offset":149,"fileType":"python3","requestStartTime":1517948559988}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            \n    def put(self, value):\n        if self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":544,"fileType":"python3","requestStartTime":1517948594717}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            \n    def put(self, value):\n        if self.front == None: \n            self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":577,"fileType":"python3","requestStartTime":1517948600766}}
{"body": {"column":25,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nn = int(input().strip())\na = list(map(int, input().strip().split(' ')))\n# Write Your Code Here\n\nnum_swaps = 0\n\nfor i in range(n):\n    for j in range(n-1):\n        if a[j] > a[j+1]:\n            a[j], a[j-1] = a[j-1], a[j]\n            num_swaps += 1\n            \n\nprint('Array is sorted in {} swaps.'.format(num_swaps))\nprint('First Element: {}'.format(a[0]))\nprint('Last Element: {}'.)\n\n\n","offset":413,"fileType":"python3","requestStartTime":1517948609086}}
{"body": {"column":17,"line":27,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            \n    def put(self, value):\n        n = Node(value)\n        if self.front == None: \n            self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":601,"fileType":"python3","requestStartTime":1517948616691}}
{"body": {"column":23,"line":27,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            \n    def put(self, value):\n        n = Node(value)\n        if self.front == None: \n            self.front.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":607,"fileType":"python3","requestStartTime":1517948618067}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":545,"fileType":"python3","requestStartTime":1517948625962}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\ninput()\nrooms = list(input().split())\ns1 = set()\ns2 = set()\n\nfor i in rooms:\n    if i in s1:\n        s2.add(i)\n    else:\n        s1.add(i)\ns3 = s1.difference(s2)\nprint(s3.\n\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517948601101}}
{"body": {"column":17,"line":28,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == null:\n            return null\n        else: \n            self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":633,"fileType":"python3","requestStartTime":1517948633706}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.\n            self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":467,"fileType":"python3","requestStartTime":1517948663855}}
{"body": {"column":26,"line":22,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.\n            self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":473,"fileType":"python3","requestStartTime":1517948665135}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.\n            self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":509,"fileType":"python3","requestStartTime":1517948673982}}
{"body": {"column":21,"line":24,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.\n            self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":543,"fileType":"python3","requestStartTime":1517948678262}}
{"body": {"column":17,"line":34,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":804,"fileType":"python3","requestStartTime":1517948741618}}
{"body": {"column":23,"line":34,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.front.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":810,"fileType":"python3","requestStartTime":1517948742524}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfor i in range(int(input())): #More than 4 lines will result in 0 score. Blank lines won't be counted. \n    a = int(input()); A = set(input().split()) \n    b = int(input()); B = set(input().split())\n    print(a.)\n\n\n","offset":213,"fileType":"python3","requestStartTime":1517948721489}}
{"body": {"column":17,"line":34,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":804,"fileType":"python3","requestStartTime":1517948753314}}
{"body": {"column":22,"line":34,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":809,"fileType":"python3","requestStartTime":1517948756004}}
{"body": {"column":34,"line":34,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back.next = self.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":821,"fileType":"python3","requestStartTime":1517948758867}}
{"body": {"column":17,"line":35,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back.next = n\n            self.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":835,"fileType":"python3","requestStartTime":1517948766744}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfor i in range(int(input())): #More than 4 lines will result in 0 score. Blank lines won't be counted. \n    a = int(input()); A = set(input().split()) \n    b = int(input()); B = set(input().split())\n    print(A.union(b)==a)\n\n\n","offset":213,"fileType":"python3","requestStartTime":1517948743812}}
{"body": {"column":17,"line":36,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back.next = n\n            self.back = n\n            self.\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":861,"fileType":"python3","requestStartTime":1517948775385}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return self.front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back.next = n\n            self.back = n\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":343,"fileType":"python3","requestStartTime":1517948792528}}
{"body": {"column":15,"line":1,"wordToComplete":"","code":"\ntest = input().\n\n","offset":17,"fileType":"python3","requestStartTime":1517948809614}}
{"body": {"column":36,"line":126,"wordToComplete":"","code":"\nimport json\nimport sys\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents\n        self.docs = []\n\n        # Keeps track of number of documents\n        self.num_docs = 0\n\n\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.num_docs += 1\n\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            value = doc_node[curr_key]\n            if isinstance(value, dict):\n                keys = []\n                for _key in value.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if value in index_node[curr_key]:\n                    set_list.append(set(index_node[curr_key][value]))\n        get_or_delete = []\n        if len(set_list > 0):\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = \"DELETED\"\n            elif self.docs[item] != \"DELETED\":\n                print(self.docs[item])\n\n    \"\"\"Modify Index\"\"\"\n    def modify_index(self, doc):\n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            value = doc_node[curr_key]\n            if isinstance(value, dict):\n                keys = []\n                for _key in value.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                if value not in index_node[curr_key]:\n                    index_node[curr_key][value] = []\n                index_node[curr_key][value].append(self.num_docs)\n\n    def run(self):\n        for line in sys.stdin:\n            cmd, arr = line.strip().\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(data, False)\n            elif cmd == 'delete':\n                self.get_or_delete(data, True)\nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":4153,"fileType":"python3","requestStartTime":1517948853466}}
{"body": {"column":23,"line":3,"wordToComplete":"","code":"\ntest = set(input().split())\nfor i in range(int(input())):\n    next = set(input().)\n\n","offset":83,"fileType":"python3","requestStartTime":1517948834084}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not root.\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":524,"fileType":"python3","requestStartTime":1517948918567}}
{"body": {"column":35,"line":33,"wordToComplete":"","code":"\nfrom collections import deque\nn = int(input().strip())\n\nclass Node:\n    def __init__(self):\n        self.children = dict()\n        self.isEnd = False\n        self.isBegin = False\n    \n    def setIsBegin():\n        self.isBegin = True    \n    \n    def setIsEnd():\n        self.isEnd = True\n        \ndef add(root, word):\n    #while(len(word) > 0):\n   \n    #print(w)\n    #print(word)\n    #print(root.children)\n    if len(word) > 0 :\n        w = word.popleft()\n        print(w, 'at start')\n        print('children at start',root.children)\n        if len(root.children) == 0 and  w not in root.children.keys()  :\n            root.children[w] = Node() \n            root = root.children[w]\n            print(w, root.children)\n            add(root, word)\n            print(root.children)\n        else:\n            for r in root.children.\n            add(root, word)\n        if len(word) == 0:\n            root.isEnd = True\n    #print(word,root.children.keys())    \n\ndef count(root):\n    num =0\n    if(root == None):\n        return 0 \n    else:\n        #print(root.children.keys()) \n        #while(len(root.children) > 0 ):\n        if root.isEnd == True:\n            #print(' is end')\n            num =  1 \n        return  num + len(root.children.items())\n    return num        \n            \n\n    \ndef search(root, sub):\n    num = 0\n    \n    if len(sub) > 0 :\n        s = sub.popleft()\n    #print(len(root.children))\n        if root != None and len(root.children) != 0 and s in root.children.keys():\n            root = root.children[s]\n            #print(s, root.children.keys(), sub)\n            return search(root, sub)            \n        else:\n            return None\n    else:    \n        return root    \n    #count(num,root)\n    #print(root.children.keys())\n    #for c,n in root.children.items(): \n     #       num = num +1\n    #return num     \n\n\n        \n    \n    \n       \n        \n        \n        \nroot = Node()\nroot.setIsBegin\n#print(root.children)\n\nfor a0 in range(n):\n    op, contact = input().strip().split(' ')\n    c = deque(list(contact))\n    #print(c)\n    if op =='add':\n        add(root, c)\n    else:\n        print(count(search(root,c)))    \n   \n    #def addChild(char, Node){\n        #if self.children[char] != None:\n           # children[char] = Node\n    #}\n       \n\n","offset":831,"fileType":"python3","requestStartTime":1517948928131}}
{"body": {"column":28,"line":27,"wordToComplete":"","code":"\nclass MyQueue(object):\n    \n    class Node():\n        def __init__(self, value):\n            self.value = value\n            self.next = None\n    \n    def __init__(self):\n        self.front = None\n        self.back = None\n    \n    def peek(self):\n        if self.front == None: \n            return None\n        else: \n            return self.front.value\n        \n    def pop(self):\n        if self.front == None:\n            return None\n        else:\n            if self.front.next == None: \n                self.front = None\n                self.back = None\n            else: \n                self.front = self.front.next\n                return self.\n            \n    def put(self, value):\n        n = self.Node(value)\n        if self.front == None: \n            self.front = n\n            self.back = n\n        else: \n            self.back.next = n\n            self.back = n\n        \n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":652,"fileType":"python3","requestStartTime":1517948932943}}
{"body": {"column":38,"line":18,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not root.left and not root.\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":542,"fileType":"python3","requestStartTime":1517948933077}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\ndef is_matched(expression):\n    expList = list(expression)\n    opens = []\n    \n    openSet = Set(['{', '(', '['])\n    closeSet = Set(['}', ')', ']'])\n    \n    for char in expList:\n        if char in openSet:\n            opens.\n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":228,"fileType":"python3","requestStartTime":1517948943480}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    temp=sort(numbers)\n    final=[]\n    for i in range(len(temp)):\n        final.\n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":251,"fileType":"python3","requestStartTime":1517948955406}}
{"body": {"column":41,"line":20,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not root.left and not root.right:\n            return 0\n        height = 1 + max([getHeight(root.)])\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":611,"fileType":"python3","requestStartTime":1517948966390}}
{"body": {"column":63,"line":20,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not root.left and not root.right:\n            return 0\n        height = 1 + max([getHeight(root.left), getHeight(root.)])\n        \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":633,"fileType":"python3","requestStartTime":1517948978185}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\ntest = set(input().split())\nout = True\nfor i in range(int(input())):\n    nexts = set(input().split())\n    # Strict Superset : test!=next, next-test = 0, next+test + test\n    if (test==nexts):\n        out = False\n    if (nexts.\n    \n\n","offset":228,"fileType":"python3","requestStartTime":1517948986239}}
{"body": {"column":31,"line":20,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not root.left and not root.right:\n            return 0\n        height = 1 + max([self.getHeight(root.left), getHeight(root.right)])\n        return height\nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":601,"fileType":"python3","requestStartTime":1517949015670}}
{"body": {"column":58,"line":20,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not root.left and not root.right:\n            return 0\n        height = 1 + max([self.getHeight(root.left), self.getHeight(root.right)])\n        return height\nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":628,"fileType":"python3","requestStartTime":1517949020277}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\ntest = set(input().split())\nout = True\nfor i in range(int(input())):\n    nexts = set(input().split())\n    # Strict Superset : test!=next, next-test = 0, next+test = test\n    if (test==nexts):\n        out = False\n    if (len(nexts.difference(tests))>0):\n        out = False\n    if (next.)\n    \n\n","offset":288,"fileType":"python3","requestStartTime":1517949017493}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def getHeight(self,root):\n        #Write your code here\n        if not.\n        if not root.left and not root.right:\n            return 0\n        height = 1 + max([self.getHeight(root.left), self.getHeight(root.right)])\n        return height\nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nheight=myTree.getHeight(root)\nprint(height)       \n","offset":519,"fileType":"python3","requestStartTime":1517949050492}}
{"body": {"column":15,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\nimport heapq\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    for a0 in range(m):\n        print(S)\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b < n):\n                S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    final_max = 0\n    counting_max = 0\n    hp = heapq.\n    while i < (n+1):\n        end = S[i+1][0]\n        val = S[i+1][1]\n        counting_max += val\n        if (final_max < counting_max):\n            final_max = counting_max\n        i += 1\n    print(S)       \n    print(final_max) \n\n","offset":606,"fileType":"python3","requestStartTime":1517949058677}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef longestChain(words):\n    words = set(words)\n    \n    def get_subwords(word,d):\n        #print(word)\n        subwords = []\n        #print(subwords)\n        for j in range(len(word)):\n            new_word =  word[:j].append(word[j+1:])\n            #new_word =  word[:j]+word[j+1:]\n            print()\n            #print(j)\n            print(word)\n            print(new_word)\n            #print(new_word in words)\n            if new_word in words:\n                subwords += [(new_word,d+1)]\n        #print(subwords)\n        #raise Exception\n        return subwords\n                \n\n    #print(words)\n    max_d = 0\n    for w in words:\n        subwords = [(w,1)]\n        #print(subwords)\n        while subwords:\n            (sw,d) = subwords.pop()\n            \n            #print()\n            #print(sw)\n            #print(len(sw))\n            #print(d)\n            #print(max_d)\n            #print(len(sw)+d >= max_d)\n            #if len(sw)+d >= max_d:\n            #    continue\n            max_d = max(max_d, d)\n            #print(subwords)\n            \n            for j in range(len(sw)):\n                #new_word =  sw[:j].append(sw[j+1:])\n                new_word =  sw[:j]+sw[j+1:]\n                #print()\n                #print(j)\n                #print(sw)\n                #print(new_word)\n                #print(new_word in words)\n                if new_word in words:\n                    subwords += [(new_word,d+1)]\n            \n            #subwords += get_subwords(sw,d)\n            #print(subwords)\n            #raise Exception\n    return max_d\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1010,"fileType":"python3","requestStartTime":1517949066185}}
{"body": {"column":11,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\nimport heapq\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    for a0 in range(m):\n        print(S)\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b < n):\n                S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    final_max = 0\n    counting_max = 0\n    hp = []\n    heapq.heapify(hp)\n    while i < (n+1):\n        end = S[i+1][0]\n        val = S[i+1][1]\n        hp.\n        counting_max += val\n        if (final_max < counting_max):\n            final_max = counting_max\n        i += 1\n    print(S)       \n    print(final_max) \n\n","offset":705,"fileType":"python3","requestStartTime":1517949082740}}
{"body": {"column":14,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\nimport heapq\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    for a0 in range(m):\n        print(S)\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b < n):\n                S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    final_max = 0\n    counting_max = 0\n    hp = []\n    heapq.heapify(hp)\n    while i < (n+1):\n        end = S[i+1][0]\n        val = S[i+1][1]\n        heapq.\n        counting_max += val\n        if (final_max < counting_max):\n            final_max = counting_max\n        i += 1\n    print(S)       \n    print(final_max) \n\n","offset":708,"fileType":"python3","requestStartTime":1517949092613}}
{"body": {"column":21,"line":34,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nN = 0\nE = 1\nS = 2\nW = 3\ndef doesCircleExist(commands):\n    new_list = []\n    for command in commands:\n        x = 0\n        y = 0\n        dir = N;\n        for com in command:\n            # If move is left or right, then change direction\n            if com == 'R':\n                dir = (dir + 1)%4\n            elif com == 'L':\n                dir = (4 + dir - 1)%4\n            # If move is Go, then change x or y according to current direction\n            else:    # if move == 'G'\n                if dir == N:\n                    y += 1\n                elif dir == E:\n                    x += 1\n                elif dir == S:\n                    y -= 1\n                else:\n                    x -= 1\n        if (x == 0 and y == 0):\n            new_list.('YES')\n        else:\n            print('NO')\n        \n        \n                \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    commands_cnt = 0\n    commands_cnt = int(input())\n    commands_i = 0\n    commands = []\n    while commands_i < commands_cnt:\n        try:\n            commands_item = str(input())\n        except:\n            commands_item = None\n        commands.append(commands_item)\n        commands_i += 1\n\n\n    res = doesCircleExist(commands);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":827,"fileType":"python3","requestStartTime":1517949159014}}
{"body": {"column":21,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nN = 0\nE = 1\nS = 2\nW = 3\ndef doesCircleExist(commands):\n    new_list = []\n    for command in commands:\n        x = 0\n        y = 0\n        dir = N;\n        for com in command:\n            # If move is left or right, then change direction\n            if com == 'R':\n                dir = (dir + 1)%4\n            elif com == 'L':\n                dir = (4 + dir - 1)%4\n            # If move is Go, then change x or y according to current direction\n            else:    # if move == 'G'\n                if dir == N:\n                    y += 1\n                elif dir == E:\n                    x += 1\n                elif dir == S:\n                    y -= 1\n                else:\n                    x -= 1\n        if (x == 0 and y == 0):\n            new_list.append('YES')\n        else:\n            new_list.('NO')\n        \n        \n                \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    commands_cnt = 0\n    commands_cnt = int(input())\n    commands_i = 0\n    commands = []\n    while commands_i < commands_cnt:\n        try:\n            commands_item = str(input())\n        except:\n            commands_item = None\n        commands.append(commands_item)\n        commands_i += 1\n\n\n    res = doesCircleExist(commands);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":876,"fileType":"python3","requestStartTime":1517949164638}}
{"body": {"column":25,"line":29,"wordToComplete":"","code":"\n#!/bin/python3\nimport heapq\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    for a0 in range(m):\n        print(S)\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b < n):\n                S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    final_max = 0\n    counting_max = 0\n    hp = []\n    heapq.heapify(hp)\n    heapq.heappush(hp, n)\n    while i < (n+1):\n        prev_end = heapq.\n        end = S[i+1][0]\n        val = S[i+1][1]\n        heapq.heappush(hp, end)\n        counting_max += val\n        if (final_max < counting_max):\n            final_max = counting_max\n        i += 1\n    print(S)       \n    print(final_max) \n\n","offset":697,"fileType":"python3","requestStartTime":1517949204474}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"\ndef is_matched(expression):\n    expList = list(expression)\n    opens = []\n    \n    openSet = Set(['{', '(', '['])\n    closeSet = Set(['}', ')', ']'])\n    relation = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    }\n    \n    for char in expList:\n        if char in openSet:\n            opens.append(char)\n        if char in closeSet:\n            if opens[-1] == relation[char]:\n                opens.\n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":412,"fileType":"python3","requestStartTime":1517949223459}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\nimport heapq\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    for a0 in range(m):\n        print(S)\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b < n):\n                S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    final_max = 0\n    counting_max = 0\n    hp = []\n    heapq.heapify(hp)\n    heapq.heappush(hp, n)\n    while i < (n+1):\n        prev_end = heapq.heappop(hp)\n        end = S[i+1][0]\n        val = S[i+1][1]\n        counting_max += val\n        if (final_max < counting_max):\n            final_max = counting_max\n        i += 1\n        if (i < prev_end):\n            heapq.heappush(hp, end)\n            \n        heapq.heappush(hp, end)\n    print(S)       \n    print(final_max) \n\n","offset":915,"fileType":"python3","requestStartTime":1517949266191}}
{"body": {"column":39,"line":8,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef longestChain(words):\n    words_set = set(words)\n    words.sort(key = lambda w: len(w)).\n    \n    def get_subwords(word,d):\n        #print(word)\n        subwords = []\n        #print(subwords)\n        for j in range(len(word)):\n            new_word =  word[:j].append(word[j+1:])\n            #new_word =  word[:j]+word[j+1:]\n            print()\n            #print(j)\n            print(word)\n            print(new_word)\n            #print(new_word in words)\n            if new_word in words:\n                subwords += [(new_word,d+1)]\n        #print(subwords)\n        #raise Exception\n        return subwords\n                \n\n    #print(words)\n    max_d = 0\n    for w in words:\n        subwords = [(w,1)]\n        #print(subwords)\n        while subwords:\n            (sw,d) = subwords.pop()\n            \n            print()\n            print(sw)\n            print(len(sw))\n            print(d)\n            print(max_d)\n            print(len(sw)+d < max_d)\n            if len(sw)+d < max_d:\n                continue\n            max_d = max(max_d, d)\n            #print(subwords)\n            \n            for j in range(len(sw)):\n                #new_word =  sw[:j].append(sw[j+1:])\n                new_word =  sw[:j]+sw[j+1:]\n                #print()\n                #print(j)\n                #print(sw)\n                #print(new_word)\n                #print(new_word in words)\n                if new_word in words_set:\n                    subwords += [(new_word,d+1)]\n            \n            #subwords += get_subwords(sw,d)\n            #print(subwords)\n            #raise Exception\n    return max_d\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":131,"fileType":"python3","requestStartTime":1517949275155}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr.\n    print(arr)\n    for i in range(n):\n        if arr[-i + 1] < arr[-1]:\n            print(arr[-i + 1])\n            break\n    \n\n\n","offset":115,"fileType":"python3","requestStartTime":1517949293458}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\ndef split_and_join(line):\n    a = line.\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":41,"fileType":"python3","requestStartTime":1517949351858}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr.reverse()\n    print(arr)\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            print(arr[i + 1])\n            break\n    \n\n\n","offset":182,"fileType":"python3","requestStartTime":1517949359771}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print('-'*(M-N)//2,.)\nprint('-'*N,'WELCOME','-'*N)\nfor i in range(N-2,-1,-2): \n    print('-') #Enter Code Here\n\n\n","offset":163,"fileType":"python3","requestStartTime":1517949359542}}
{"body": {"column":25,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print('-'*(M-N)//2,'.')\nprint('-'*N,'WELCOME','-'*N)\nfor i in range(N-2,-1,-2): \n    print('-') #Enter Code Here\n\n\n","offset":164,"fileType":"python3","requestStartTime":1517949361043}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print('-'*(M-N)//2,'.\".\"')\nprint('-'*N,'WELCOME','-'*N)\nfor i in range(N-2,-1,-2): \n    print('-') #Enter Code Here\n\n\n","offset":166,"fileType":"python3","requestStartTime":1517949362041}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print('-'*(M-N)//2,'.\\.')\nprint('-'*N,'WELCOME','-'*N)\nfor i in range(N-2,-1,-2): \n    print('-') #Enter Code Here\n\n\n","offset":166,"fileType":"python3","requestStartTime":1517949364929}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print('-'*(M-N)//2,'.|.')\nprint('-'*N,'WELCOME','-'*N)\nfor i in range(N-2,-1,-2): \n    print('-') #Enter Code Here\n\n\n","offset":166,"fileType":"python3","requestStartTime":1517949367292}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"\nseqList = 0\narr = input().\n\n","offset":28,"fileType":"python3","requestStartTime":1517949368677}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    a = line.split(\" \")\n    b = \"-\".\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","offset":64,"fileType":"python3","requestStartTime":1517949385175}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\nseqList = 0\narr = input().strip().\n\n","offset":36,"fileType":"python3","requestStartTime":1517949371690}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nseqList = 0\narr = [int(i) for i in input().strip().split(\" \")]\n\nfor j in range(arr[0]):\n    seqList.\n\n","offset":102,"fileType":"python3","requestStartTime":1517949440619}}
{"body": {"column":28,"line":2,"wordToComplete":"","code":"\nN = int(input())\nX = list(map(float, input().))\n\n","offset":47,"fileType":"python3","requestStartTime":1517949562527}}
{"body": {"column":56,"line":2,"wordToComplete":"","code":"\ndef print_full_name(a, b):\n    print(\"Hello {0} {1}! You just delved into python.\".)\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":85,"fileType":"python3","requestStartTime":1517949596632}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    pk1 = []\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    for k in [(i-p,i+p) for i in y for p in r]:\n        pk = 0\n        for index,i in enumerate(x):\n            if i in k:\n                pk += p[index]\n        pk1.        \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    p = list(map(int, input().strip().split(' ')))\n    x = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    y = list(map(int, input().strip().split(' ')))\n    r = list(map(int, input().strip().split(' ')))\n    result = maximumPeople(p, x, y, r)\n    print(result)\n\n\n","offset":345,"fileType":"python3","requestStartTime":1517949842725}}
{"body": {"column":21,"line":1,"wordToComplete":"","code":"\nm = input(), input().\na = \n\n","offset":23,"fileType":"python3","requestStartTime":1517949680985}}
{"body": {"column":15,"line":34,"wordToComplete":"","code":"\n#!/bin/python3\nimport heapq\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    S = [(n,0)] * (n+1)\n    for a0 in range(m):\n        print(S)\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        end = S[a][0]\n        val = S[a][1]\n        print(a,b,k)\n        if (end >= b):\n            S[a] = (b, val + k)\n            if (b < n):\n                S[b + 1] = (end, val)\n        else:\n            S[a] = (end, val + k)\n            S[end + 1] = (b, val)\n    final_max = 0\n    counting_max = 0\n    hp = [()]\n    heapq.heapify(hp)\n    heapq.heappush(hp, (n,1)\n    while i < (n+1):\n        prev_end, prev_start = heapq.heappop(hp)\n        end = S[i+1][0]\n        val = S[i+1][1]\n        counting_max += val\n                   \n        if (i > prev_end):\n            counting_max -= S[prev_start][1]\n                   \n        if (final_max < counting_max):\n            final_max = counting_max\n        i += 1\n            heapq.heappush(hp, prev_end)\n        else: \n            heapq.heappush(hp, end)\n    print(S)       \n    print(final_max) \n\n","offset":837,"fileType":"python3","requestStartTime":1517949910305}}
{"body": {"column":7,"line":14,"wordToComplete":"","code":"\ndef is_matched(expression):\n    expList = list(expression)\n    opens = []\n    \n    openSet = set(['{', '(', '['])\n    closeSet = set(['}', ')', ']'])\n    relation = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    }\n    \n    import regex as re\n    re.r'[\\(\\{\\[\\]\\}\\)]+'\n    \n    for char in expList:\n        if char in openSet:\n            opens.append(char)\n        if char in closeSet:\n            if opens[-1] == relation[char]:\n                opens.pop()\n    \n    if len(opens) == 0:\n        return True\n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":263,"fileType":"python3","requestStartTime":1517949924499}}
{"body": {"column":10,"line":33,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    print(\"___________________________\")\n    print(head.data, data, position)\n    node = Node(data)\n    if position ==0:\n        node.next = head\n        return node\n    \n    if head:  \n        n = head\n        m = None\n        for _ in range(position):\n            print(n.data)\n            m = n\n            n = n.next\n            print(n.data)\n            print(\"****************\")\n        m.\n        node.next = n\n        \n        return head\n    \n        \n    \n            \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":833,"fileType":"python3","requestStartTime":1517950037854}}
{"body": {"column":14,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    temp=sort(numbers)\n    final=[]\n    if len(numbers)%2!=0:\n        mid = len(numbers)/2\n    else:\n        mid = (len(numbers)+1)/2\n    front,end=0,len(numbers)-1\n    for i in range(mid):\n        final.\n    \n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":374,"fileType":"python3","requestStartTime":1517950079927}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    temp=sort(numbers)\n    final=[]\n    if len(numbers)%2!=0:\n        mid = len(numbers)/2\n    else:\n        mid = (len(numbers)+1)/2\n    front,end=0,len(numbers)-1\n    for i in range(mid):\n        final.append(temp[front])\n        final.\n    \n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":408,"fileType":"python3","requestStartTime":1517950099818}}
{"body": {"column":21,"line":7,"wordToComplete":"","code":"\ndef is_matched(expression):\n    expList = list(expression)\n    opens = []\n    \n    openSet = set(['{', '(', '['])\n    closeSet = set(['}', ')', ']'])\n    allSet = openSet. + closeSet\n    relation = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    }\n    \n    \n    for char in expList:\n        if char not in allSet:\n            continue\n        if char in openSet:\n            opens.append(char)\n        if char in closeSet:\n            if opens[-1] == relation[char]:\n                opens.pop()\n    \n    if len(opens) == 0:\n        return True\n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517950102683}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef longestChain(words):\n    words_set = set(words)\n    words.sort(key = lambda w: len(w))\n    words.reverse()\n    \n    \n    def find_d(w):\n        if w in d_dict.:\n            return d_dict[w]\n        else:\n    \n    #print(words)\n    max_d = 0\n    for w in words:\n        #if len(w) <= max_d:\n        #    continue\n        subwords = [(w,1)]\n        #print(subwords)\n        while subwords:\n            (sw,d) = subwords.pop()\n            \n            #print()\n            #print(sw)\n            #print(len(sw))\n            #print(d)\n            #print(max_d)\n            #print(len(sw)+d < max_d)\n            if len(sw)+d <= max_d:\n                continue\n            max_d = max(max_d, d)\n            #print(subwords)\n            \n            for j in range(len(sw)):\n                #new_word =  sw[:j].append(sw[j+1:])\n                new_word =  sw[:j]+sw[j+1:]\n                #print()\n                #print(j)\n                #print(sw)\n                #print(new_word)\n                #print(new_word in words)\n                if new_word in words_set:\n                    subwords += [(new_word,d+1)]\n            \n            #subwords += get_subwords(sw,d)\n            #print(subwords)\n            #raise Exception\n    return max_d\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":203,"fileType":"python3","requestStartTime":1517950118532}}
{"body": {"column":15,"line":1,"wordToComplete":"","code":"\nlength = input.\n\n","offset":17,"fileType":"python3","requestStartTime":1517950162741}}
{"body": {"column":35,"line":18,"wordToComplete":"wordwordsw","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef longestChain(words):\n    words_set = set(words)\n    words.sort(key = lambda w: len(w))\n    words.reverse()\n    \n    \n    def find_d(w):\n        if w in d_dict.keys():\n            return d_dict[w]\n        else:\n            for j in range(len(word)):\n                #new_word =  sw[:j].append(sw[j+1:])\n                new_word =  wordwordsw[:j]+sw[j+1:]\n                #print()\n                #print(j)\n                #print(sw)\n                #print(new_word)\n                #print(new_word in words)\n                if new_word in words_set:\n                    subwords += [(new_word,d+1)]\n            \n            find_d(w)\n    \n    #print(words)\n    max_d = 0\n    for w in words:\n        #if len(w) <= max_d:\n        #    continue\n        subwords = [(w,1)]\n        #print(subwords)\n        while subwords:\n            (sw,d) = subwords.pop()\n            \n            #print()\n            #print(sw)\n            #print(len(sw))\n            #print(d)\n            #print(max_d)\n            #print(len(sw)+d < max_d)\n            if len(sw)+d <= max_d:\n                continue\n            max_d = max(max_d, d)\n            #print(subwords)\n            \n            for j in range(len(sw)):\n                #new_word =  sw[:j].append(sw[j+1:])\n                new_word =  sw[:j]+sw[j+1:]\n                #print()\n                #print(j)\n                #print(sw)\n                #print(new_word)\n                #print(new_word in words)\n                if new_word in words_set:\n                    subwords += [(new_word,d+1)]\n            \n            #subwords += get_subwords(sw,d)\n            #print(subwords)\n            #raise Exception\n    return max_d\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":381,"fileType":"python3","requestStartTime":1517950163522}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    if position == 0:\n        head = head.\n  \n  \n  \n  \n  \n\n\n","offset":343,"fileType":"python3","requestStartTime":1517950227317}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    if position == 0:\n        head = head.next\n        head.\n  \n  \n  \n  \n  \n\n\n","offset":361,"fileType":"python3","requestStartTime":1517950239064}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\nlength = input()\nentries = []\nfor n in range(length):\n    entry = input().\n\n","offset":76,"fileType":"python3","requestStartTime":1517950263699}}
{"body": {"column":53,"line":6,"wordToComplete":"0.","code":"\nN = int(input())\nX = list(map(float, input().split()))\nY = list(map(float, input().split()))\n\nmu_X = sum(X) / N\nsd_X = (sum([((i - mu_x) ** 2) for i in X]) / N ** 0.\nmu_Y = sum(Y) / N\n\n","offset":167,"fileType":"python3","requestStartTime":1517950277651}}
{"body": {"column":23,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    if position == 0:\n        head = head.next\n        return head\n    else:\n        m,n = head, None\n        for _ in range(position):\n            m,n = n, n.\n        return head\n  \n  \n  \n  \n  \n\n\n","offset":460,"fileType":"python3","requestStartTime":1517950302613}}
{"body": {"column":10,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    if position == 0:\n        head = head.next\n        return head\n    else:\n        m,n = None, head\n        for _ in range(position):\n            m,n = n, n.next\n        m.    \n        return head\n  \n  \n  \n  \n  \n\n\n","offset":475,"fileType":"python3","requestStartTime":1517950338926}}
{"body": {"column":10,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    if position == 0:\n        head = head.next\n        return head\n    else:\n        m,n = None, head\n        for _ in range(position):\n            m,n = n, n.next\n        m.    \n        return head\n  \n  \n  \n  \n  \n\n\n","offset":475,"fileType":"python3","requestStartTime":1517950358380}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    if position == 0:\n        head = head.next\n        return head\n    else:\n        m,n = None, head\n        for _ in range(position):\n            m,n = n, n.next\n        m.next = n.    \n        return head\n  \n  \n  \n  \n  \n\n\n","offset":484,"fileType":"python3","requestStartTime":1517950362371}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSafePaths(journeys): \n    i  = 0\n    result = []\n    n = int(journeys[i][0].)\n    m = int(journeys[i][1])\n    k = int(journeys[i][2])\n    #k = f(n, m)\n    solve(n, m, k, result)\n    i  = i + 1\n    return result\n       \n      \n\ndef solve(n,m,k,result):\n    if(n==0 and m==0):\n        return\n    elif(n==0):\n        m = m - 1\n        result.append('V')\n        solve(n,m,k, result)\n    elif (m == 0):\n        n = n -1\n        result.append(\"H\")\n        solve(n,m,k, result)\n    else:\n        if f(n-1, m) > k:\n            result.append(\"H\")\n            solve(n-1,m,k, result)\n        else:\n            result.append(\"V\")\n            solve(n, m - 1, k - f(n - 1, m))\n    return result\n\n\ndef f(a, b):\n    res = 1;\n    i = 1;\n    for i in range(1, a+b+1):\n        res = res*i;\n    for i in range(1, a+1):\n        res = res/i;\n    for i in range(1,b+1):\n        res = res/i;\n    return res;\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    journeys_cnt = 0\n    journeys_cnt = int(input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = str(input())\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":155,"fileType":"python3","requestStartTime":1517950387638}}
{"body": {"column":24,"line":1,"wordToComplete":"","code":"\nN, K = map(int, input().)\n\n","offset":26,"fileType":"python3","requestStartTime":1517950475149}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nN, K = map(int, input().split())\nlst = [map(int, input().)]\n\n","offset":59,"fileType":"python3","requestStartTime":1517950520662}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    tail = head\n    while tail.\n\n  \n  \n  \n  \n    \n\n\n","offset":329,"fileType":"python3","requestStartTime":1517950566943}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    tail = head\n    while tail.next:\n        tail = tail.\n\n  \n  \n  \n  \n    \n\n\n","offset":355,"fileType":"python3","requestStartTime":1517950573760}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    l = []\n    tail = head\n    while tail.next:\n        l.\n        tail = tail.next\n\n  \n  \n  \n  \n    \n\n\n","offset":356,"fileType":"python3","requestStartTime":1517950751471}}
{"body": {"column":22,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    l = []\n    tail = head\n    while tail.next:\n        l.append(tail.)\n        tail = tail.next\n\n  \n  \n  \n  \n    \n\n\n","offset":368,"fileType":"python3","requestStartTime":1517950756753}}
{"body": {"column":6,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    l = []\n    tail = head\n    while tail.next:\n        l.append(tail.data)\n        tail = tail.next\n    l.\n\n  \n  \n  \n  \n    \n\n\n","offset":405,"fileType":"python3","requestStartTime":1517950778414}}
{"body": {"column":18,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    l = []\n    tail = head\n    while tail.next:\n        l.append(tail.data)\n        tail = tail.next\n    l.append(tail.)\n\n  \n  \n  \n  \n    \n\n\n","offset":417,"fileType":"python3","requestStartTime":1517950783009}}
{"body": {"column":4,"line":2,"wordToComplete":"","code":"\ninp = complex(input())\ninp.\n\n","offset":29,"fileType":"python3","requestStartTime":1517950825218}}
{"body": {"column":4,"line":3,"wordToComplete":"","code":"\ninp = complex(input())\ninp.real\ninp.\n\n","offset":38,"fileType":"python3","requestStartTime":1517950829461}}
{"body": {"column":29,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef revisedRussianRoulette(doors):\n    min = 0\n    max = 0\n    curr = 0\n    for i in doors:\n        if i == 1:\n            curr = curr + 1\n        else:\n            min = min + math.\n            max = max + curr\n            curr = 0\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":224,"fileType":"python3","requestStartTime":1517950926295}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nprint(tanh(b/a))\n\n\n","offset":74,"fileType":"python3","requestStartTime":1517950917312}}
{"body": {"column":11,"line":6,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nprint(math.tanh(b/a))\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517950920836}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nif (a!=0):\n    print(math.atan(b/a))\nelse:\n    print(math.)\n\n\n","offset":149,"fileType":"python3","requestStartTime":1517951018831}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nif (a!=0):\n    print(math.atan(b/a))\nelse:\n    print(math.pi*math.)\n\n\n","offset":157,"fileType":"python3","requestStartTime":1517951027817}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nif (a!=0):\n    print(math.atan(b/a))\nelse:\n    print(copysign.)\n\n\n","offset":153,"fileType":"python3","requestStartTime":1517951058053}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nif (a!=0):\n    print(math.atan(b/a))\nelse:\n    print(copysign(math.))\n\n\n","offset":158,"fileType":"python3","requestStartTime":1517951060384}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nif (a!=0):\n    print(math.atan(b/a))\nelse:\n    print(math.copysign(math.pi,b))\n\n\n","offset":149,"fileType":"python3","requestStartTime":1517951070450}}
{"body": {"column":5,"line":10,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nif (a!=0):\n    print(math.atan(b/a))\nelse:\n    print(math.copysign(math.pi,b))\nmath.\n\n","offset":175,"fileType":"python3","requestStartTime":1517951072053}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    numbers=sorted(numbers.\n    if len(numbers)>2:\n        for i in range(1,len(numbers),2):\n            t=numbers[i]\n            numbers[len(numbers)-1-i]=numbers[i]\n            numbers[i]=t\n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":197,"fileType":"python3","requestStartTime":1517951108118}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\nlength = int(input())\nentries = {}\nfor n in range(length):\n    entry = input().split()\n    entries[entry[0]] = entry[1]\n\nkeys = entries.    \nfor n in range(length):\n    name = input()\n    \n    if name in entries:\n        print('=' + entries[name])\n    else:\n        print('Not found')\n\n\n","offset":138,"fileType":"python3","requestStartTime":1517951126275}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    if head:\n        c = 0  \n        tail = head\n        while tail.\n        while tail.next:\n            l.append(tail.data)\n            tail = tail.next\n        l.append(tail.data)\n        for item in l[::-1]:\n            print(item)\n\n  \n  \n  \n  \n    \n\n\n","offset":366,"fileType":"python3","requestStartTime":1517951174747}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nimport math\ninp = complex(input())\na = inp.real\nb = inp.imag\nprint(math.sqrt(a*a + b*b))\nprint(cmath.)\n\n","offset":103,"fileType":"python3","requestStartTime":1517951194686}}
{"body": {"column":28,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    if head:\n        c = 1 \n        tail = head\n        while tail.next:\n            c+=1\n        for i in range(0,c,-1):\n            j = i\n            tail = head\n            while j:\n                tail = tail.\n                \n        while tail.next:\n            l.append(tail.data)\n            tail = tail.next\n        l.append(tail.data)\n        for item in l[::-1]:\n            print(item)\n\n  \n  \n  \n  \n    \n\n\n","offset":511,"fileType":"python3","requestStartTime":1517951255010}}
{"body": {"column":23,"line":26,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    if head:\n        c = 1 \n        tail = head\n        while tail.next:\n            c+=1\n        for i in range(0,c,-1):\n            j = i\n            tail = head\n            while j:\n                tail = tail.next\n            print(tail.)\n                \n        while tail.next:\n            l.append(tail.data)\n            tail = tail.next\n        l.append(tail.data)\n        for item in l[::-1]:\n            print(item)\n\n  \n  \n  \n  \n    \n\n\n","offset":539,"fileType":"python3","requestStartTime":1517951265625}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    doorstr=''.join(map(str,doors))\n    imax=doorstr.\n    doorstr=doorstr.replace('11','1')\n    \n    return doorstr.count('1'),doorstr.count('1')\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":147,"fileType":"python3","requestStartTime":1517951668393}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    numbers.\n    if len(numbers)>2:\n        for i in range(1,len(numbers),2):\n            t=numbers[i]\n            numbers[len(numbers)-1-i]=numbers[i]\n            numbers[i]=t\n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":182,"fileType":"python3","requestStartTime":1517951371986}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nimport math\nab = float(input())\nbc = float(input())\nprint(math.)\n\n","offset":65,"fileType":"python3","requestStartTime":1517951370030}}
{"body": {"column":23,"line":5,"wordToComplete":"","code":"\nimport math\nab = float(input())\nbc = float(input())\ntheta =(math.atan(ab/bc))\ntheta = theta*360/math.\n\n","offset":103,"fileType":"python3","requestStartTime":1517951402786}}
{"body": {"column":41,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    n = float(raw_input())\n    lst = [int(x) for x in raw_input().split()]\n    print format(len([x for x in lst if x > 0])/n, \".6f\")\n    print format(len([x for x in lst if x < 0])/n, \".6f\")\n    print format(len([x for x in lst if x == 0])/n, \".6f\")\n    pos = len([x for x in arr if x > 0]).\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":341,"fileType":"python3","requestStartTime":1517951556552}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    if head:\n        c = 1 \n        tail = head\n        while tail.next:\n            tail = tail.\n            c+=1\n        print(\"c is :\"+str(c))\n        for i in range(0,c,-1):\n            tail = head\n            for j in range(i):\n                tail = tail.next\n                \n            print(tail.data)\n                \n        \n\n  \n  \n  \n  \n    \n\n\n","offset":395,"fileType":"python3","requestStartTime":1517951568588}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\ndef count_substring(string, sub_string):\n\n    print (string.)\n        \n    return \nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":62,"fileType":"python3","requestStartTime":1517951595517}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    asc_numbers = sorted(numbers)\n    dec_numbers = sorted(numbers, reverse = True)\n    \n    temp = []\n    for i in range(len(asc_numbers), 2):\n        temp.\n        \n    if len(numbers)>2:\n        for i in range(1,len(numbers),2):\n            t=numbers[i]\n            numbers[len(numbers)-1-i]=numbers[i]\n            numbers[i]=t\n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":327,"fileType":"python3","requestStartTime":1517951668802}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\n\n\nresult = ''\ni = 2\nwhile n != 0:\n    if n % i != 0:\n        result.\n\n","offset":124,"fileType":"python3","requestStartTime":1517951674368}}
{"body": {"column":17,"line":3,"wordToComplete":"","code":"\ndef count_substring(string, sub_string): \n    \n    aaa = string.\n    for i in len(string):\n        \n        print (string.find(sub_string))\n    \n    return \nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":66,"fileType":"python3","requestStartTime":1517951766780}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    # Complete this function\n    for i in range(n):\n        print(' '*i).\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":121,"fileType":"python3","requestStartTime":1517951782449}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    # Complete this function\n    for i in range(n):\n        result = ' '*i\n        print result.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":144,"fileType":"python3","requestStartTime":1517951795617}}
{"body": {"column":26,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    # Complete this function\n    for i in range(n):\n        result = ' '*i\n        print result[::i].\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":149,"fileType":"python3","requestStartTime":1517951812994}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    mean_y = sum(temperature)/float(len(temperature))\n    var_y = sum([(x-mean)**2 for x in temperature])\n    for i in range(0,int(len(temperature))):\n        hour.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":296,"fileType":"python3","requestStartTime":1517951862006}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\ndef count_substring(string, sub_string): \n    \n    aaa = string\n    for i in len(string):        \n        string.find(sub_string)\n        aaa.\n    \n    return \nif __name__ == '__main__':\n    string = input().strip()\n    sub_string = input().strip()\n    \n    count = count_substring(string, sub_string)\n    print(count)\n","offset":144,"fileType":"python3","requestStartTime":1517951864079}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\nclass Team:\n    def __init__(self, id):\n        self.id = id\n    \n    def getId(self):\n        return self.id\n\nclass Tournament:\n    def __init__(self, teams):\n        # Enter your code here. Read input from STDIN. Print output to STDOUT\n        self.\n    \nteams = []\nfor i in range(0,10):\n    teams.append(Team(i))\ntouranment = Tournament(teams)\n\n","offset":253,"fileType":"python3","requestStartTime":1517951874791}}
{"body": {"column":47,"line":12,"wordToComplete":"solely here so that this will compile.","code":"\nclass Team:\n    def __init__(self, id):\n        self.id = id\n    \n    def getId(self):\n        return self.id\n\nclass Tournament:\n    def __init__(self, teams):\n        # Enter your code here. Read input from STDIN. Print output to STDOUT\n        self.teams = teams\n        #solely here so that this will compile.\n    \nteams = []\nfor i in range(0,10):\n    teams.append(Team(i))\ntouranment = Tournament(teams)\n\n","offset":314,"fileType":"python3","requestStartTime":1517951888959}}
{"body": {"column":68,"line":12,"wordToComplete":"solely here so that this will compile. Feel free to remove.","code":"\nclass Team:\n    def __init__(self, id):\n        self.id = id\n    \n    def getId(self):\n        return self.id\n\nclass Tournament:\n    def __init__(self, teams):\n        # Enter your code here. Read input from STDIN. Print output to STDOUT\n        self.teams = teams\n        #solely here so that this will compile. Feel free to remove.\n    \nteams = []\nfor i in range(0,10):\n    teams.append(Team(i))\ntouranment = Tournament(teams)\n\n","offset":335,"fileType":"python3","requestStartTime":1517951893833}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    if head:\n        c = head\n        while c.\n    else:\n        return head\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":353,"fileType":"python3","requestStartTime":1517951901620}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    storage = []\n    while head:\n        storage.\n  \n  \n  \n  \n    \n\n\n","offset":347,"fileType":"python3","requestStartTime":1517951913311}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    storage = []\n    while head:\n        storage.append(head.)\n  \n  \n  \n  \n    \n\n\n","offset":359,"fileType":"python3","requestStartTime":1517951914948}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    storage = []\n    while head:\n        storage.append(head.data)\n        head = head.\n  \n  \n  \n  \n    \n\n\n","offset":385,"fileType":"python3","requestStartTime":1517951921674}}
{"body": {"column":18,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    if head:\n        c = head\n        p = None\n        while c.next:\n            p = c\n            c = c.\n            \n            \n    else:\n        return head\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":412,"fileType":"python3","requestStartTime":1517951934508}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    numbers.\n    temp = []\n    for i in range(0, len(numbers), 2):\n        temp.append(number[i])\n        temp.append([i])\n    \n    \"\"\"\n    if len(numbers)>2:\n        for i in range(1,len(numbers),2):\n            t=numbers[i]\n            numbers[len(numbers)-1-i]=numbers[i]\n            numbers[i]=t\n    \"\"\"\n    numbers = temp\n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":182,"fileType":"python3","requestStartTime":1517951981566}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    if head:\n        c = head\n        n = None\n        while c.next:\n            p = c.\n            c = c.next\n            \n            \n    else:\n        return head\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":394,"fileType":"python3","requestStartTime":1517952063628}}
{"body": {"column":21,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    if head:\n        c = head\n        n = None\n        while c.next:\n            tail = c.\n            c.next = p\n            p = c\n            c = c.next\n            \n            \n    else:\n        return head\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":397,"fileType":"python3","requestStartTime":1517952127621}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    # Complete this function\n    for i in range(n+1):\n        print(\"#\".)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":120,"fileType":"python3","requestStartTime":1517952178408}}
{"body": {"column":5,"line":8,"wordToComplete":"","code":"\nimport math\na = int(input())\nb = int(input())\nprint(a//b)\nprint(mod(a,b))\nprint(divmod(a,b))\n\nmath.\n\n","offset":101,"fileType":"python3","requestStartTime":1517952206706}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    numbers.\n    for i in range(0, len(numbers), 2):\n        temp = number[i]\n        number[i] = number[len(numbers) - i]\n        temp1 = number[i]\n    \n    \"\"\"\n    if len(numbers)>2:\n        for i in range(1,len(numbers),2):\n            t=numbers[i]\n            numbers[len(numbers)-1-i]=numbers[i]\n            numbers[i]=t\n    \"\"\"\n    numbers = temp\n    print(numbers)\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":182,"fileType":"python3","requestStartTime":1517952293348}}
{"body": {"column":10,"line":24,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    if head:\n        c = head\n        p = None\n        while c.next:\n            temp = c.next\n            c.next = p\n            p = c\n            c = temp\n        c.\n        return c\n            \n            \n    else:\n        return head\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":474,"fileType":"python3","requestStartTime":1517952347284}}
{"body": {"column":21,"line":11,"wordToComplete":"3.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return 3.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":149,"fileType":"python3","requestStartTime":1517952478184}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    c = head\n    p = None\n    while c:\n        print(c.)\n        temp = c.next\n        c.next = p\n        p = c\n        c = temp\n        \n    return c\n            \n            \n    \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":362,"fileType":"python3","requestStartTime":1517952509130}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":221,"fileType":"python3","requestStartTime":1517952538030}}
{"body": {"column":33,"line":14,"wordToComplete":"3.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.append(3.)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":230,"fileType":"python3","requestStartTime":1517952540992}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    c = head\n    p = None\n    while c:\n        print(c.data)\n        temp = c.next\n        c.next = p\n        p = c\n        c = temp\n    tail = c\n    while c :\n        print(c.)\n    return c\n            \n            \n    \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":483,"fileType":"python3","requestStartTime":1517952545546}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    c = head\n    p = None\n    while c:\n        print(c.data)\n        temp = c.next\n        c.next = p\n        p = c\n        c = temp\n    tail = c\n    while tail :\n        print(tail.data, end = \",\")\n        tail = tail.\n        \n    return c\n            \n            \n    \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":526,"fileType":"python3","requestStartTime":1517952578332}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    arr.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":105,"fileType":"python3","requestStartTime":1517952590944}}
{"body": {"column":48,"line":16,"wordToComplete":"6.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            for i in range(1,rolls):\n                fair_value= (fair_values[i-1]/6.)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":318,"fileType":"python3","requestStartTime":1517952644042}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    ar = sorted(ar)\n    hd,tl = ar.\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":97,"fileType":"python3","requestStartTime":1517952664924}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    ar = sorted(ar)\n    hd,tl = ar.\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":97,"fileType":"python3","requestStartTime":1517952665924}}
{"body": {"column":33,"line":2,"wordToComplete":"","code":"\nfrom math import *\n(m,n) = [int(x) for x in input().]\n\n","offset":54,"fileType":"python3","requestStartTime":1517952670779}}
{"body": {"column":57,"line":16,"wordToComplete":"6.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            for i in range(1,rolls):\n                fair_value= (fair_values[i-1]**2/6.0+1/6.fair_values)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":327,"fileType":"python3","requestStartTime":1517952695741}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"import numpy\ndef arrays(arr):\n    arr = numpy.\n\n\narr = input().strip().split(' ')\nresult = arrays(arr)\nprint(result)\n","offset":47,"fileType":"python3","requestStartTime":1517952672324}}
{"body": {"column":37,"line":8,"wordToComplete":"But I do not have time to do that. ","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Note: I started with a recursive solution, but I tried to prune the recursion as much as possible. \n# However, these efforts were not enough. I could approach the problem in a non-recursive way, computing bottom up and caching results. \n# But I do not have time to do that. \n\n\nhashedWords = {}\nmaxSoFar = [0] # keep it inside an array so it's passed by reference\ndef treeheight(word, words, depthSoFar):\n    # Running this recursive function without memoization \n    # will lead to unacceptable run times. Use a hash to \n    # prevent too many identical evalutions of instances of this function. \n    if len(word) == 0 or not word in words:\n        return(0)       \n    if word in hashedWords: \n        return(hashedWords[word])\n    if len(word) == 1 and word in words: # deal with edge cases faster, to speed up execution\n        maxSoFar[0] = 1\n        hashedWords[word] = 1\n        return(1)\n        \n    # Prune recursions where we don't have a realistic chance of besting MaxSoFar\n    if depthSoFar + len(word) < maxSoFar[0]:\n        return(0)  # because this is a fake result to force pruning, don't cache it\n    maxheight = 0    \n    for i in range(len(word)):\n        childw = word[0:i] + word[i+1:]\n        th = treeheight(childw,words,depthSoFar+1)\n        if th == len(childw): # can't get any better, so prune remaining children\n            maxheight = th\n            break\n        if th > maxheight:\n            maxheight = th\n    hashedWords[word] = maxheight + 1\n    if maxheight + 1 > maxSoFar[0]:\n        maxSoFar[0] = maxheight + 1\n    return(maxheight+1)\n\n\ndef longestChain(words):\n    maxx = 0\n    words.sort() # sorted should make lookups faster\n    for wordi in words:\n        th = treeheight(wordi,words,0)\n        if maxx < th:\n            maxx = th\n    return(maxx)\n     \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":316,"fileType":"python3","requestStartTime":1517952710684}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    ar = set(sorted(ar)).\n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":87,"fileType":"python3","requestStartTime":1517952727022}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    ar = set(sorted(ar)).\n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":87,"fileType":"python3","requestStartTime":1517952728838}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    ar = set(ar).\n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":79,"fileType":"python3","requestStartTime":1517952747095}}
{"body": {"column":45,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    ar = set(ar).intersection(sorted(set(ar).))\n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":107,"fileType":"python3","requestStartTime":1517952755152}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":75,"fileType":"python3","requestStartTime":1517952764629}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            for i in range(1,rolls):\n                fair_value= int(fair_values[i-1]**2/6.0+1/6.0*(7+int(fair_values[i-1]))*(6-int(fair_values[i-1])))\n                fair_value/=2\n                fair_values.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":443,"fileType":"python3","requestStartTime":1517952816850}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n# Implement the 'pseudo-code' here:\n'''remember that \n   1) you can change the orientation of this coding panel to be next to the question rather than below it, \n   2) although you can't 'cut 'n paste' parts of the question text, you can 'drag 'n drop', \n   3) text values need to be 'quoted'; without quotation marks, python thinks bits of text are variable names...\n'''\n# set up chineseZodiac  # list of animals\n\nchineseZodiac = \"Monkey Rooster Dog Boar Rat Ox Tiger Rabbit Dragon Snake Horse Goat\".split()\n\ngoAgain = true\n\nwhile goAgain:\n    yearCheck = int(input())\n    index = yearCheck%12\n    print(chineseZodiac.\n\n# set goAgain to True   # variable to control when we finish repetition\n# while goAgain do\n#    read in yearToCheck\n#    work out index of corresponding animal # use the HINT below\n#    print out animal with that index on the chineseZodiac list\n#    read in response for going again\n#    if reponse is 'n' then\n#        set goAgain to False\n#    #end if____\n# end while__________\n\n\n","offset":621,"fileType":"python3","requestStartTime":1517952819731}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    return ar.\n    \n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":76,"fileType":"python3","requestStartTime":1517952881044}}
{"body": {"column":61,"line":16,"wordToComplete":"7.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            for i in range(1,rolls):\n                fair_value= fair_values[i-1]**2/6.0+1/6.0*(7.+fair_values[i-1])*(6-fair_values[i-1])\n                fair_value/=2\n                fair_values.append(fair_value)\n        return int(fair_values[rolls-i])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":331,"fileType":"python3","requestStartTime":1517952908170}}
{"body": {"column":84,"line":16,"wordToComplete":"6.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        if(rolls==1):\n            return int(3.5)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            for i in range(1,rolls):\n                fair_value= fair_values[i-1]**2/6.0+1/6.0*(7.0+fair_values[i-1])*(6.-fair_values[i-1])\n                fair_value/=2\n                fair_values.append(fair_value)\n        return int(fair_values[rolls-i])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":354,"fileType":"python3","requestStartTime":1517952911093}}
{"body": {"column":14,"line":21,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport itertools \n\ndef  maxLength(a, k):\n    list1 = []\n    #result = [seq for i in range(len(a),0,-1) for seq in itertools.combinations(a,i) if sum(seq)==k]\n    #for j in range(len(result)):\n    #    list1.append(len(result[j]))\n    #return(max(list1))\n    if p_sum == k:\n        yield partial\n    if p_sum >=k:\n        return\n    for i,n in enumerate(a):\n        rem = a[i+1:]\n        list1.maxLength(rem,k,p+[n],p_sum+n)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a_cnt = 0\n_a_cnt = int(input())\n_a_i=0\n_a = []\nwhile _a_i < _a_cnt:\n    _a_item = int(input());\n    _a.append(_a_item)\n    _a_i+=1\n    \n\n\n_k = int(input());\n\nres = maxLength(_a, _k);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":464,"fileType":"python3","requestStartTime":1517952944044}}
{"body": {"column":10,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\na = numpy.\n\n\n","offset":37,"fileType":"python3","requestStartTime":1517952997349}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\na = numpy.array(input.)\n\n\n","offset":49,"fileType":"python3","requestStartTime":1517952998926}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\na = numpy.array(input().)\n\n\n","offset":51,"fileType":"python3","requestStartTime":1517952999704}}
{"body": {"column":8,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\na = numpy.array(input().split())\nprint(a.)\n\n\n","offset":68,"fileType":"python3","requestStartTime":1517953004899}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    n= a.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":66,"fileType":"python3","requestStartTime":1517964011621}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef check_fermat(  a, b, c, n ):\n    if n >a ** n + b ** n == c ** n \n    \ndef prompt_and_check():\n    pass # When you are ready, delete \"pass\" and write your code here\n\n\ndef prompt_check_works():\n    \n    return True\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = check_fermat() + '\\n' + str( prompt_check_works() )\n\n    f.write(res + \"\\n\")\n\n    f.close()\n\n","offset":115,"fileType":"python3","requestStartTime":1517953075084}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\nN,M = input().\n\n\n","offset":41,"fileType":"python3","requestStartTime":1517953156942}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nN,M = map(int,input().split())\narr = numpy.\n\n","offset":70,"fileType":"python3","requestStartTime":1517953182838}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    tailA, tailB = headA, headB\n    while tailA and tailB:\n        if tailA.\n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":396,"fileType":"python3","requestStartTime":1517953215561}}
{"body": {"column":4,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\nN,M = map(int,input().split())\narr = numpy.array()\narr.\n\n","offset":82,"fileType":"python3","requestStartTime":1517953189722}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    string val\n#    LinkedListNode next\n#}\ndef reverse(ls):\n    newLs = None\n    while ls is not None:\n        tmp = ls.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ls = None\n    ls_tail = None\n    ls_size = int(input())\n    ls_i = 0\n    while ls_i < ls_size:\n        try:\n            ls_item = str(input())\n        except:\n            ls_item = None\n\n        ls_tail = _insert_node_into_singlylinkedlist(ls, ls_tail, ls_item)\n        if ls_i == 0:\n            ls = ls_tail\n        ls_i += 1\n\n\n    res = reverse(ls);\n    while (res != None):\n        f.write(res.val + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":590,"fileType":"python3","requestStartTime":1517953221180}}
{"body": {"column":31,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    tailA, tailB = headA, headB\n    while tailA and tailB:\n        if tailA.data != tailB.\n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":410,"fileType":"python3","requestStartTime":1517953221501}}
{"body": {"column":11,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    string val\n#    LinkedListNode next\n#}\ndef reverse(ls):\n    newLs = None\n    while ls is not None:\n        tmp = ls.next\n        ls.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ls = None\n    ls_tail = None\n    ls_size = int(input())\n    ls_i = 0\n    while ls_i < ls_size:\n        try:\n            ls_item = str(input())\n        except:\n            ls_item = None\n\n        ls_tail = _insert_node_into_singlylinkedlist(ls, ls_tail, ls_item)\n        if ls_i == 0:\n            ls = ls_tail\n        ls_i += 1\n\n\n    res = reverse(ls);\n    while (res != None):\n        f.write(res.val + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":606,"fileType":"python3","requestStartTime":1517953224612}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\nN,M = map(int,input().split())\narr = numpy.array()\narr.size = (N,M)\nfor i = 1:M\n    arr.\n\n","offset":115,"fileType":"python3","requestStartTime":1517953204927}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    tailA, tailB = headA, headB\n    while tailA and tailB:\n        if tailA.data != tailB.data:\n            return 0\n        tailA = tailA.\n        \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":459,"fileType":"python3","requestStartTime":1517953242469}}
{"body": {"column":22,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\nN,M = map(int,input().split())\narr = numpy.array()\narr.size = (N,M)\nfor i = 1:M\n    arr[i][:] = input.\n\n","offset":129,"fileType":"python3","requestStartTime":1517953217254}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    if s[:-2] == \"PM\":\n        return s.\n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":93,"fileType":"python3","requestStartTime":1517953248619}}
{"body": {"column":22,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    tailA, tailB = headA, headB\n    while tailA and tailB:\n        if tailA.data != tailB.data:\n            return 0\n        tailA = tailA.next\n        tailB = tailB.\n        \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":486,"fileType":"python3","requestStartTime":1517953251216}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport colelctions\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    listop=[0 for i in range(n)]\n    hashmap=collections.\n    \n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        \n        \n   \n        \n\n","offset":199,"fileType":"python3","requestStartTime":1517953442028}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    n= size(a)^(1/2)\n    x=1\n    first=a[1]\n    while x<n:\n        first.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":130,"fileType":"python3","requestStartTime":1517964417399}}
{"body": {"column":18,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    if s[:-2] == \"PM\":\n        return ''. int(s.split(\":\")[0])+12\n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":94,"fileType":"python3","requestStartTime":1517953480556}}
{"body": {"column":50,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    if s[:-2] == \"PM\":\n        return ''.join(int(s.split(\":\")[0])+12, s.)\n        \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":126,"fileType":"python3","requestStartTime":1517953486988}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\nn,m,p = map(int,input().)\n\n","offset":51,"fileType":"python3","requestStartTime":1517953498052}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nn,m,p = map(int,input().split())\narray_1 = numpy.\n\n","offset":76,"fileType":"python3","requestStartTime":1517953524646}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nn,m,p = map(int,input().split())\narray_1 = numpy.array([[input.]for _ in n],int)\n\n","offset":90,"fileType":"python3","requestStartTime":1517953541631}}
{"body": {"column":32,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nn,m,p = map(int,input().split())\narray_1 = numpy.array([[input().]for _ in n],int)\n\n","offset":92,"fileType":"python3","requestStartTime":1517953544470}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked lists\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef MergeLists(headA, headB):\n    if headA is None:\n        return headB\n    if headB is None:\n        return headA\n    ca = headA\n    cb = headB\n    while ca and cb:\n        if ca.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":470,"fileType":"python3","requestStartTime":1517953575331}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef StockTrader(trades):\n    # Write your code here.\n    stocks = {}\n    for trade in trades:\n        (symbol, price) = trade.\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    trades_size = int(input())\n\n    trades = []\n    for _ in range(trades_size):\n        trades_item = input()\n        trades.append(trades_item)\n\n    res = StockTrader(trades)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":198,"fileType":"python3","requestStartTime":1517953642450}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    n= size(a)^(1/2)\n    a.\n    x=1\n    first=a[1]\n    second=a[n]\n    while x<n:\n        first.append[a[x*n+1]]\n        second.append[a[n+2]]\n        x+=1\n\ndef arraySum(a):\n    ans=0\n    x=0\n    while x<\n        \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517964670873}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    n= size(a)^(1/2)\n    a.\n    x=1\n    first=a[1]\n    second=a[n]\n    while x<n:\n        first.append[a[x*n+1]]\n        second.append[a[n+2]]\n        x+=1\n\ndef arraySum(a):\n    ans=0\n    x=0\n    while x<\n        \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517964686621}}
{"body": {"column":15,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef diagonalDifference(a):\n    n= len(a)^(1/2)\n    x=1\n    first=a[1]\n    second=a[n]\n    while x<n:\n        first.append[a[x*n+1]]\n        second.append[a[n+2]]\n        x+=1\n\ndef arraySum(a):\n    ans=0\n    x=0\n    while x<len(a):\n        ans+=a.\n        \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":276,"fileType":"python3","requestStartTime":1517964728288}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef longestChain(words):\n    word_map = dict()\n    for word in words:\n        gen_words = set()\n        for i in range(len(list(word))):\n            post_cut_word = str(word[:i-1] + word[i:])\n            gen_words = gen_words | {post_cut_word} if post_cut_word in words else gen_words\n        word_map[word] = gen_words\n    print(word_map)\n    longest = max(word_map.)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":439,"fileType":"python3","requestStartTime":1517953779213}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport collections\n\ndef applyops(hashmap):\n    listop=[0]*n\n    for i,j in hashmap.\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    \n    hashmap=collections.defaultdict(int)\n    \n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        hashmap[(a,b)]+=k\n    \n    applyops(hashmap)\n        \n        \n   \n        \n\n","offset":112,"fileType":"python3","requestStartTime":1517953814270}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    while headA and headB:\n        if headA.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":364,"fileType":"python3","requestStartTime":1517953875302}}
{"body": {"column":31,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    while headA and headB:\n        if headA.data != headB.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":378,"fileType":"python3","requestStartTime":1517953879501}}
{"body": {"column":22,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    while headA and headB:\n        if headA.data != headB.data:\n            return False\n        headA = headA.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":431,"fileType":"python3","requestStartTime":1517953888363}}
{"body": {"column":42,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    while headA and headB:\n        if headA.data != headB.data:\n            return False\n        headA = headA.next, headB = headB.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":451,"fileType":"python3","requestStartTime":1517953892488}}
{"body": {"column":25,"line":7,"wordToComplete":"","code":"\nline=input().split(' ')\nK=int(line[0])\nM=int(line[1])\n\nL=[]\nfor i in range(K):\n    L.append(input()[2:].)\n\n","offset":106,"fileType":"python3","requestStartTime":1517953967449}}
{"body": {"column":96,"line":17,"wordToComplete":"6.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        n=6\n        if(rolls==1):\n            return int(3.5*10000)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            for i in range(1,rolls):\n                fair_value = fair_values[i-1]*int(i/6.0)+((sum([1,2,3,4,5,6])-i)/n-i)*int(n-i/6.)\n                fair_value= fair_values[i-1]*int(i/6.0)+sum*fair_values[i-1]+1/6.0*(6.0+int(fair_values[i-1]+1))*(6-int(fair_values[i-1]))\n                fair_value/=2\n                fair_values.append(fair_value*10000)\n        print(fair_values)\n        return int(fair_values[rolls-1])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":384,"fileType":"python3","requestStartTime":1517954015682}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nzappo = input(\"Enter the zappo\")\nnow = 2017\nl = len(zappo)\ni=0\nwhile i < l:\n    if zappo[i]=='<':\n        now=now-1\n    elif zapoo[i]=='>'\n\n\n\n","offset":210,"fileType":"python3","requestStartTime":1517954191164}}
{"body": {"column":65,"line":14,"wordToComplete":"dollars.\"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    tip = meal_cost*(tip_percent/100)\n    tax = meal_cost*(tax_percent/100)\n    total_cost = meal_cost+tip+tax\n    \n    print (\"The total meal cost is\", round(total_cost), \"dollars.\")\n\n","offset":360,"fileType":"python3","requestStartTime":1517954579764}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    string val\n#    LinkedListNode next\n#}\ndef reverse(ls):\n    newLs = None\n    while ls is not None:\n        tmp = ls.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ls = None\n    ls_tail = None\n    ls_size = int(input())\n    ls_i = 0\n    while ls_i < ls_size:\n        try:\n            ls_item = str(input())\n        except:\n            ls_item = None\n\n        ls_tail = _insert_node_into_singlylinkedlist(ls, ls_tail, ls_item)\n        if ls_i == 0:\n            ls = ls_tail\n        ls_i += 1\n\n\n    res = reverse(ls);\n    while (res != None):\n        f.write(res.val + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":590,"fileType":"python3","requestStartTime":1517954615109}}
{"body": {"column":11,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    string val\n#    LinkedListNode next\n#}\ndef reverse(ls):\n    newLs = None\n    while ls is not None:\n        tmp = ls.next\n        ls.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ls = None\n    ls_tail = None\n    ls_size = int(input())\n    ls_i = 0\n    while ls_i < ls_size:\n        try:\n            ls_item = str(input())\n        except:\n            ls_item = None\n\n        ls_tail = _insert_node_into_singlylinkedlist(ls, ls_tail, ls_item)\n        if ls_i == 0:\n            ls = ls_tail\n        ls_i += 1\n\n\n    res = reverse(ls);\n    while (res != None):\n        f.write(res.val + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":606,"fileType":"python3","requestStartTime":1517954619571}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  check_log_history( events):\n    stack = []\n    for event in events:\n        if stack:\n        \n        else:\n            stack.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_events_cnt = int(input())\n_events_i=0\n_events = []\nwhile _events_i < _events_cnt:\n    _events_item = str(input())\n    _events.append(_events_item)\n    _events_i+=1\n    \n\nres = check_log_history(_events);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":205,"fileType":"python3","requestStartTime":1517954675501}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef solve(n.)\n\n\n\nif __name__ == \"__main__\":\n    n, t = input().strip().split(' ')\n    n, t = [int(n), int(t)]\n\n\n","offset":43,"fileType":"python3","requestStartTime":1517954680680}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  check_log_history( events):\n    stack = []\n    for event in events:\n        event, num = events.\n        if stack:\n            \n        else:\n            stack.append(event)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_events_cnt = int(input())\n_events_i=0\n_events = []\nwhile _events_i < _events_cnt:\n    _events_item = str(input())\n    _events.append(_events_item)\n    _events_i+=1\n    \n\nres = check_log_history(_events);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":174,"fileType":"python3","requestStartTime":1517954748552}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  check_log_history( events):\n    stack = []\n    for event in events:\n        event, num = event.split()\n        if stack:\n            if event is \"AQUIRE\":\n                if event not in stack:\n                    stack.\n            else:\n                \n        else:\n            stack.append(event)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_events_cnt = int(input())\n_events_i=0\n_events = []\nwhile _events_i < _events_cnt:\n    _events_item = str(input())\n    _events.append(_events_item)\n    _events_i+=1\n    \n\nres = check_log_history(_events);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":298,"fileType":"python3","requestStartTime":1517954793972}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  check_log_history( events):\n    stack = []\n    for i, event in enumerate(events):\n        event, num = event.split()\n        if stack:\n            if event is \"ACQUIRE\":\n                if event not in stack:\n                    stack.append(event)\n                else:\n                    return i\n            else:\n                if \"ACQUIRE\"+num not in stack:\n                    return i\n                else:\n                    stack.\n        else:\n            stack.append(event)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_events_cnt = int(input())\n_events_i=0\n_events = []\nwhile _events_i < _events_cnt:\n    _events_item = str(input())\n    _events.append(_events_item)\n    _events_i+=1\n    \n\nres = check_log_history(_events);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":520,"fileType":"python3","requestStartTime":1517954902558}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    i = 0\n    start_index = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.\n    \n\ndef isShortened(line_number, )\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":216,"fileType":"python3","requestStartTime":1517954975077}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  check_log_history( events):\n    stack = []\n    for i, event in enumerate(events):\n        event, num = event.split()\n        if stack:\n            if event is \"ACQUIRE\":\n                if event not in stack:\n                    stack.append(event)\n                else:\n                    return i\n            else:\n                if \"ACQUIRE\"+num != stack[-1]:\n                    return i\n                else:\n                    stack.\n        else:\n            stack.append(event)\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_events_cnt = int(input())\n_events_i=0\n_events = []\nwhile _events_i < _events_cnt:\n    _events_item = str(input())\n    _events.append(_events_item)\n    _events_i+=1\n    \n\nres = check_log_history(_events);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":520,"fileType":"python3","requestStartTime":1517955022585}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    i = 0\n    start_index = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_index[name] = i\n        else:\n            invoices = op.\n    \n\ndef isShortened(line_number, )\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":327,"fileType":"python3","requestStartTime":1517955030965}}
{"body": {"column":31,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef dfs(con_dict,\n        start_path):\n    latest = start_path[-1]\n    path, paths = start_path[:], []\n    for next_key in con_dict[latest]:\n        path  = start_path[:] + [next_key] \n        path += dfs(con_dict, path)\n    return paths\n        \ndef longestChain(words):\n    word_map = dict()\n    for word in sorted(words, key=lambda x: -len(x)):\n        gen_words = set()\n        for i in range(len(list(word))):\n            post_cut_word = str(word[:i-1] + word[i:])\n            gen_words = gen_words | {post_cut_word} if post_cut_word in words else gen_words\n        word_map[word] = gen_words\n    print(word_map)\n    for word in word_map:\n        paths = dfs(word_map, [word])\n        print ('===',word,'\\n'.)\n        \n        \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":784,"fileType":"python3","requestStartTime":1517955050189}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nimport re \ns = input()\nres = re.\n\n","offset":34,"fileType":"python3","requestStartTime":1517955177408}}
{"body": {"column":36,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    i = 0\n    start_indexes = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = i\n            accumulated_invoice_ids.\n        else:\n            invoice_ids = op.split(',')\n            for id in invoice_ids:\n                id = int(id)\n                \n    \n\ndef isShortened(line_number, start_index, )\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":327,"fileType":"python3","requestStartTime":1517955195362}}
{"body": {"column":25,"line":18,"wordToComplete":"4.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        n=6\n        if(rolls==1):\n            return int(3.5*10000)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            #for i in range(1,rolls+1):\n            if rolls==2:\n                print (4.)\n            if rolls>6:\n                fair_value = sum([1,2,3,4,5,6])*(1/6.0)*pow(5/6,rolls-1)+6*(1-int(pow(5/6,rolls-1)))\n                #fair_values[i-1]*int(i/6.0)+((sum([1,2,3,4,5,6])-i)/n-i)*int(n-i/6.0)\n                #fair_value= fair_values[i-1]*int(i/6.0)+sum*fair_values[i-1]+1/6.0*(6.0+int(fair_values[i-1]+1))*(6-int(fair_values[i-1]))\n                #fair_value/=2\n            fair_values.append(fair_value*10000)\n        print(fair_values)\n        return int(fair_values[-1])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":341,"fileType":"python3","requestStartTime":1517955235005}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nimport re \ns = input()\nres = re.match(r'\\d',s)\nres = res.\n\n","offset":59,"fileType":"python3","requestStartTime":1517955240172}}
{"body": {"column":19,"line":2,"wordToComplete":"","code":"\ndef mutate_string(string, position, character):\n    return string[:position - 1]\nif __name__ == '__main__':\n    s = input()\n    i, c = input().split()\n    s_new = mutate_string(s, int(i), c)\n    print(s_new)\n","offset":69,"fileType":"python3","requestStartTime":1517955254786}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    string val\n#    LinkedListNode next\n#}\ndef reverse(ls):\n    newLs = None\n    while ls:\n        tmp = ls.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ls = None\n    ls_tail = None\n    ls_size = int(input())\n    ls_i = 0\n    while ls_i < ls_size:\n        try:\n            ls_item = str(input())\n        except:\n            ls_item = None\n\n        ls_tail = _insert_node_into_singlylinkedlist(ls, ls_tail, ls_item)\n        if ls_i == 0:\n            ls = ls_tail\n        ls_i += 1\n\n\n    res = reverse(ls);\n    while (res != None):\n        f.write(res.val + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":578,"fileType":"python3","requestStartTime":1517955261516}}
{"body": {"column":11,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    string val\n#    LinkedListNode next\n#}\ndef reverse(ls):\n    newLs = None\n    while ls:\n        tmp = ls.next\n        ls.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ls = None\n    ls_tail = None\n    ls_size = int(input())\n    ls_i = 0\n    while ls_i < ls_size:\n        try:\n            ls_item = str(input())\n        except:\n            ls_item = None\n\n        ls_tail = _insert_node_into_singlylinkedlist(ls, ls_tail, ls_item)\n        if ls_i == 0:\n            ls = ls_tail\n        ls_i += 1\n\n\n    res = reverse(ls);\n    while (res != None):\n        f.write(res.val + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":594,"fileType":"python3","requestStartTime":1517955265827}}
{"body": {"column":37,"line":24,"wordToComplete":"4.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n        n=6\n        if(rolls==1):\n            return int(3.5*10000)\n        else:\n            fair_values=[]\n            fair_values.append(3.5)\n            #for i in range(1,rolls+1):\n            if rolls==2:\n                fair_values.append(4.25*10000)\n            if rolls>6:\n                fair_value = sum([1,2,3,4,5,6])*(1/6.0)*pow(5/6,rolls-1)+6*(1-int(pow(5/6,rolls-1)))\n                #fair_values[i-1]*int(i/6.0)+((sum([1,2,3,4,5,6])-i)/n-i)*int(n-i/6.0)\n                #fair_value= fair_values[i-1]*int(i/6.0)+sum*fair_values[i-1]+1/6.0*(6.0+int(fair_values[i-1]+1))*(6-int(fair_values[i-1]))\n                #fair_value/=2\n                fair_values.append(4.*10000)\n        print(fair_values)\n        return int(fair_values[-1])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":783,"fileType":"python3","requestStartTime":1517955316470}}
{"body": {"column":44,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = i\n            accumulated_invoice_ids.append(accumulated_invoice_ids[-1])\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name]] or id >= accumulated_invoice_ids[-1]:\n                    accumulated_invoice_ids.\n            \n                \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":658,"fileType":"python3","requestStartTime":1517955339613}}
{"body": {"column":48,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = i\n            accumulated_invoice_ids.append(accumulated_invoice_ids[-1])\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name]] or id >= accumulated_invoice_ids[-1]:\n                    accumulated_invoice_ids.append(max(id, accumulated_invoice_ids[-1]))\n                else:\n                    print('{};{};SHORTENED_JOB'.)\n            \n                \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":773,"fileType":"python3","requestStartTime":1517955421679}}
{"body": {"column":10,"line":1,"wordToComplete":"","code":"\nN = input.\n\n","offset":12,"fileType":"python3","requestStartTime":1517955426376}}
{"body": {"column":40,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = i\n            if len(accumulated_invoice_ids) == 1:\n                accumulated_invoice_ids.\n            accumulated_invoice_ids.append(accumulated_invoice_ids[-1])\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name]] or id >= accumulated_invoice_ids[-1]:\n                    accumulated_invoice_ids.append(max(id, accumulated_invoice_ids[-1]))\n                else:\n                    print('{};{};SHORTENED_JOB'.format(line_number, name))\n        line_number += 1\n                \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":391,"fileType":"python3","requestStartTime":1517955463632}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\nN = int(input.strip())\nM = [[] for x in range(N)]\nfor i in range(N):\n    M[i] = input().\n\n","offset":90,"fileType":"python3","requestStartTime":1517955505292}}
{"body": {"column":36,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef dfs(con_dict,\n        start_path):\n    latest = start_path[-1]\n    path, next_paths = start_path[:], set()\n    for next_key in con_dict[latest]:\n        path  = start_path[:] + [next_key]\n        print(path)\n        paths = dfs(con_dict, path) \n        next_paths |= paths\n    return next_paths\n        \ndef longestChain(words):\n    word_map = dict()\n    for word in sorted(words, key=lambda x: -len(x)):\n        gen_words = set()\n        for i in range(len(list(word))):\n            post_cut_word = str(word[:i-1] + word[i:]) if (len(word)>1) else None\n            gen_words = gen_words | {post_cut_word} if post_cut_word in words else gen_words\n        word_map[word] = gen_words\n    print(word_map)\n    max_p = max(map(len(x),wrod_map.))\n    for word in word_map:\n        paths = dfs(word_map, [word])\n        print ('===',word,'\\n'.join(paths))\n        \n        \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    words_cnt = 0\n    words_cnt = int(input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = str(input())\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":813,"fileType":"python3","requestStartTime":1517955530989}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\nN = int(input.strip())\nM = [[] for x in range(N)]\nfor i in range(N):\n    M[i] = input().strip()\nQ = int(input.strip()))\n\n","offset":112,"fileType":"python3","requestStartTime":1517955548211}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\nN = int(input().strip())\nM = [[] for x in range(N)]\nfor i in range(N):\n    M[i] = input().strip()\nQ = int(input().strip())\nfor i in range(Q):\n    N[i] = input().\n\n","offset":163,"fileType":"python3","requestStartTime":1517955587229}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nN = int(input().strip())\nM = [[] for x in range(N)]\nfor i in range(N):\n    M[i] = input().strip()\nQ = int(input().strip())\nN = [[] for x in range(Q)]\nfor i in range(Q):\n    N[i] = input().strip()\n    print(M.)\n\n\n","offset":210,"fileType":"python3","requestStartTime":1517955624728}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef zappos(zappo):\n    now = 2017\n    l = len(zappo)\n    i=0\n    while i < l:\n        if zappo[i]=='<':\n            now=now-1\n            i=i+1\n        elif zappo[i]=='>':\n            now = now +1\n            i=i+1\n        elif zappo[i]=='*':\n            now = now\n            i=i+1            \n    return now\n    \n    count = zappo.\n\nif __name__=='__main__':\n    zappo = str(input())\n    result = zappos(zappo)\n    print(str(result))\n    \n\n\n\n","offset":406,"fileType":"python3","requestStartTime":1517955674305}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  subarraySum(arr):\n    if arr.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\nres = subarraySum(_arr)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":106,"fileType":"python3","requestStartTime":1517955726063}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"\ndef capitalize(string): \n    if(string.)\n    return string.title()\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":41,"fileType":"python3","requestStartTime":1517955698365}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  subarraySum(arr):\n    count = arr.\n    if arr.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\nres = subarraySum(_arr)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":111,"fileType":"python3","requestStartTime":1517955831669}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  subarraySum(arr):\n    count = arr.length\n    sum = 0\n    if arr.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\nres = subarraySum(_arr)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":141,"fileType":"python3","requestStartTime":1517955841985}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\n\ninput_ = input()\nn = int (input_[0]) \n#print (n)     # worked!\nk = int (input_[2])\n#print (k)     #worked!\n\nl = []\n\ninput_ = input()\nlist_ = l.\n\nprint(input_)\n\n\n\n\n\n\n\n    \n    \n\n","offset":146,"fileType":"python3","requestStartTime":1517955864497}}
{"body": {"column":24,"line":28,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    sol = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = line_number\n            if len(accumulated_invoice_ids) == 0:\n                accumulated_invoice_ids.append(0)\n            else:\n                accumulated_invoice_ids.append(accumulated_invoice_ids[-1])\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name]] or id >= accumulated_invoice_ids[-1]:\n                    accumulated_invoice_ids.append(max(id, accumulated_invoice_ids[-1]))\n                else:\n                    sol.('{};{};SHORTENED_JOB'.format(line_number, name))\n        line_number += 1\n                \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":894,"fileType":"python3","requestStartTime":1517955898267}}
{"body": {"column":18,"line":142,"wordToComplete":"Driver.\"\"\"","code":"\nimport json\nimport sys\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents\n        self.docs = []\n\n        # Keeps track of number of documents\n        self.num_docs = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.num_docs += 1\n\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        if len(doc) == 0:\n            if delete:\n                for doc in self.docs:\n                    doc = \"DELETED\"\n            else:\n                for doc in self.docs:\n                    if doc != \"DELETED\":\n                        print(doc)\n            return\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # find nodes to get/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = \"DELETED\"\n            elif self.docs[item] != \"DELETED\":\n                print(self.docs[item])\n\n    \"\"\"Modify Index\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.num_docs)\n\n    def run(self):\n        \"\"\"Driver.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":4723,"fileType":"python3","requestStartTime":1517955905557}}
{"body": {"column":27,"line":12,"wordToComplete":"Stores Documents.","code":"\nimport json\nimport sys\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents.\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.num_docs = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.num_docs += 1\n\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        if len(doc) == 0:\n            if delete:\n                for doc in self.docs:\n                    doc = \"DELETED\"\n            else:\n                for doc in self.docs:\n                    if doc != \"DELETED\":\n                        print(doc)\n            return\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # find nodes to get/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = \"DELETED\"\n            elif self.docs[item] != \"DELETED\":\n                print(self.docs[item])\n\n    \"\"\"Modify Index\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.num_docs)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":335,"fileType":"python3","requestStartTime":1517956019474}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\ndef min_coins(coins,target):\n    min_a=target\n    if target in coins:\n        return 1\n    else:\n        for i in [c for c in coins if c<=target]:\n            num_coins=1+min_coins(coins,target-i)\n            if num_coins<min_a:\n                min_a=num_coins\n    return min_a\n\na,b=input().\n\n","offset":293,"fileType":"python3","requestStartTime":1517956212216}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\ndef min_coins(coins,target):\n    min_a=target\n    if target in coins:\n        return 1\n    else:\n        for i in [c for c in coins if c<=target]:\n            num_coins=1+min_coins(coins,target-i)\n            if num_coins<min_a:\n                min_a=num_coins\n    return min_a\n\na,b=input().strip().\n\n","offset":301,"fileType":"python3","requestStartTime":1517956215942}}
{"body": {"column":10,"line":14,"wordToComplete":"","code":"\ndef min_coins(coins,target):\n    min_a=target\n    if target in coins:\n        return 1\n    else:\n        for i in [c for c in coins if c<=target]:\n            num_coins=1+min_coins(coins,target-i)\n            if num_coins<min_a:\n                min_a=num_coins\n    return min_a\n\nn,t=input().strip().split(\" \")\nfor i in range(n):\n    coins.\n\n","offset":341,"fileType":"python3","requestStartTime":1517956255647}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    if(not string.)\n    return \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":44,"fileType":"python3","requestStartTime":1517956171680}}
{"body": {"column":22,"line":3,"wordToComplete":"","code":"\ndef capitalize(string):\n    if(not string.isalnum()):\n        return string.\n    \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":78,"fileType":"python3","requestStartTime":1517956187822}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef numOfPlaylist(N, K, L):\n    result = math.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    K = int(input())\n\n    L = int(input())\n\n    res = numOfPlaylist(N, K, L);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":130,"fileType":"python3","requestStartTime":1517956322775}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef ncr(n,r):\n    return math.\n\ndef numOfPlaylist(N, K, L):\n    result = math.factorial(N)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    K = int(input())\n\n    L = int(input())\n\n    res = numOfPlaylist(N, K, L);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":114,"fileType":"python3","requestStartTime":1517956341419}}
{"body": {"column":34,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef ncr(n,r):\n    return math.factorial(n)/math.\n\ndef numOfPlaylist(N, K, L):\n    result = math.factorial(N)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    K = int(input())\n\n    L = int(input())\n\n    res = numOfPlaylist(N, K, L);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":132,"fileType":"python3","requestStartTime":1517956347064}}
{"body": {"column":53,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef ncr(n,r):\n    return math.factorial(n)/(math.factorial(r)*math.\n\ndef numOfPlaylist(N, K, L):\n    result = math.factorial(N)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    K = int(input())\n\n    L = int(input())\n\n    res = numOfPlaylist(N, K, L);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":151,"fileType":"python3","requestStartTime":1517956361122}}
{"body": {"column":26,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    for edge in range(g_from):\n        visited = [g_from[edge]]\n        while(len(visited) > 0):\n            val = visited.\n            for i in range(g_from):\n                if g_from[i] in visited\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":417,"fileType":"python3","requestStartTime":1517956375471}}
{"body": {"column":45,"line":18,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef zappos(zappo):\n    now = 2017\n    l = len(zappo)\n    i=0\n    add=0\n    while i < l:\n        if zappo[i]=='<':\n            now=now-1\n            i=i+1\n        elif zappo[i]=='>':\n            now = now +1\n            i=i+1\n        elif zappo[i]=='*' and zappo[i-2]=='<' :\n            now = now + (-1*2)   \n            i = i+1\n        elif zappo[i]=='*' and zappo[i-2]=='>' :\n    return (now+(2**add)-1)\n    \nif __name__=='__main__':\n    zappo = str(input())\n    result = zappos(zappo)\n    print(str(result))\n    \n\n\n\n","offset":446,"fileType":"python3","requestStartTime":1517956402973}}
{"body": {"column":28,"line":21,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    for edge in range(g_from):\n        visited = [g_from[edge]]\n        while(len(visited) > 0):\n            val = visited.pop(0)\n            for i in range(g_from):\n                if g_from[i] == val:\n                    visited.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":525,"fileType":"python3","requestStartTime":1517956428234}}
{"body": {"column":18,"line":58,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# Different possibilities for  a knight and bishop\n\nbishop = {1: [5, 9]\n               ,2: [4, 6]\n               ,3: [5, 7]\n               ,4: [2, 8]\n               ,5: [1, 3, 7, 9]\n               ,6: [2, 8]\n               ,7: [5, 0, 3]\n               ,8: [4, 6]\n               ,9: [5, 0, 1]\n               ,0: [7, 9]\n         }\nknight =   {1: [6,8]\n                ,2: [7, 9]\n                ,3: [4, 8]\n                ,4: [3, 9, 0]\n                ,6: [1, 7, 0]\n                ,7: [2, 6]\n                ,8: [1, 3]\n                ,9: [4, 2]\n                ,0: [4, 6]\n                }\n### in case of a 3 rows 4 column grid\nknight = {1:[6,8]\n          ,3:[8,9]\n          ,4:[5]\n          ,5:[4,9]\n          ,6:[1,7]\n          ,7:[6]\n          ,8:[1,3]\n          ,9:[3,5]\n}\nbishop = {1:[5]\n          ,3:[5,7]\n          ,4:[6,8]\n          ,5:[1,3,7]\n          ,6:[4,8,9]\n          ,7:[3,5]\n          ,8:[6,4]\n          ,9:[6]\n}\n\ndef validPhoneNum(bishopOrKnight, length):\n    curRow = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1]\n    for row in range(1, length):\n        prevRow = curRow\n        curRow = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        for keyNum, valueDict in bishopOrKnight.items():\n            for nextVal in valueDict:\n                curRow[nextVal] = curRow[nextVal] + prevRow[keyNum]\n    return sum(curRow)\nbishopOrKnightPass = input()\nlength = input()\nnumbers = input().\n#print(bishopOrKnight,length)\nif bishopOrKnightPass == 'bishop':\n    print(validPhoneNum(bishop,int(length)))\nelse:\n    print(validPhoneNum(knight,int(length)))\n\n","offset":1448,"fileType":"python3","requestStartTime":1517956524615}}
{"body": {"column":14,"line":1,"wordToComplete":"","code":"\nn,m = input().\na = set(input().strip().split(' '))\nN = input()\nb = set(input().strip().split(' '))\n\n","offset":16,"fileType":"python3","requestStartTime":1517956567326}}
{"body": {"column":22,"line":1,"wordToComplete":"","code":"\nn,m = input().strip().\na = set(input().strip().split(' '))\nN = input()\nb = set(input().strip().split(' '))\n\n","offset":24,"fileType":"python3","requestStartTime":1517956570973}}
{"body": {"column":28,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    for edge in range(g_from):\n        visited = set([g_from[edge]])\n        queue = [g_from[edge]]\n        while(len(visited) > 0):\n            val = queue.pop(0)\n            for i in range(g_from):\n                if g_from[i] == val and not in visited:\n                    visited.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":578,"fileType":"python3","requestStartTime":1517956573143}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    for edge in range(g_from):\n        visited = set([g_from[edge]])\n        queue = [g_from[edge]]\n        while(len(visited) > 0):\n            val = queue.pop(0)\n            for i in range(g_from):\n                if g_from[i] == val and not in visited:\n                    visited.add(val)\n                    queue.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":613,"fileType":"python3","requestStartTime":1517956583970}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    O = [0 for x in range(n)]\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        O[a-1:] = [x+1 for x in O[a-1:b]\n    print(max(O))\n\n","offset":279,"fileType":"python3","requestStartTime":1517956587704}}
{"body": {"column":11,"line":45,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeInWords(h, m):\n    # Complete this function\n    number = [\n        \"zero\", \n        \"one\",\n        \"two\",\n        \"three\",\n        \"four\",\n        \"five\",\n        \"six\",\n        \"seven\",\n        \"eight\",\n        \"nine\",\n        \"ten\",\n        \"eleven\",\n        \"twelve\",\n        \"thirteen\",\n        \"fourteen\",\n        \"fifteen\",\n        \"sixteen\",\n        \"seventeen\",\n        \"eighteen\",\n        \"nineteen\",\n        \"twenty\",\n        \"twenty one\",\n        \"twenty two\",\n        \"twenty three\",\n        \"twenty four\",\n        \"twenty five\",\n        \"twenty six\",\n        \"twenty seven\",\n        \"twenty eight\",\n        \"twenty nine\"]\n    \n    res=\"\"\n \n    if m==15 or m==45:\n        res=res+\"quarter \"\n    elif m==30:\n        res=res+\"half \"     \n    elif m>:\n        res=res+number[m]\n        \n    if m >30:\n        h=h+1\n        res=res+\"to \"\n    else:\n        res=res+\"past \"\n        \n    res=res+number[h]\n    \n    return res\n        \n    \n        \n\nif __name__ == \"__main__\":\n    h = int(input().strip())\n    m = int(input().strip())\n    result = timeInWords(h, m)\n    print(result)\n\n\n","offset":797,"fileType":"python3","requestStartTime":1517956590112}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n#\n#\tFor the unweighted graph:\n#\t1. The number of nodes is <name>_nodes.\n#\t2. The number of edges is <name>_edges.\n#\t3. An edge exists between <name>_from[i] to <name>_to[i].\n#\ndef maximumDifference(g_nodes, g_from, g_to):\n    results = []\n    edge in range(g_from):\n        visited = set([g_from[edge]])\n        queue = [g_from[edge]]\n        while(len(queue) > 0):\n            val = queue.pop(0)\n            for i in range(g_from):\n                if g_from[i] == val and not in visited:\n                    visited.add(val)\n                    queue.append(val)\n        results.\n  \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g_nodes, g_edges = map(int, input().split())\n\n    g_from = [0] * g_edges\n    g_to = [0] * g_edges\n\n    for g_i in range(g_edges):\n        g_from[g_i], g_to[g_i] = map(int, input().split())\n\n    res = maximumDifference(g_nodes, g_from, g_to);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":652,"fileType":"python3","requestStartTime":1517956638109}}
{"body": {"column":39,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    O = [0 for x in range(n)]\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        for i in range (a-1,b):\n            O[i] += k\n        O[a-1:b] = [x+k for x in O[a-1:]]\n    print(max(O))\n\n","offset":358,"fileType":"python3","requestStartTime":1517956716916}}
{"body": {"column":55,"line":44,"wordToComplete":"","code":"\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Feb  4 23:50:18 2018\n\n@author: Anuj\n\"\"\"\n\nimport json\nfrom functools import reduce\nfrom collections import Mapping\nfrom itertools import chain\nfrom operator import add\n\n_FLAG = object()\n\ndef flat_dict(dict1, join=add, lift=lambda x:x):\n    final_list = []\n    def visit(newdict, final_list, partialKey):\n        for k,val in newdict.items():\n            newKey = lift(k) if partialKey==_FLAG else join(partialKey,lift(k))\n            if isinstance(val,Mapping):\n                visit(val, final_list, newKey)\n            else:\n                final_list.append((newKey,val))\n    visit(dict1, final_list, _FLAG)\n    return dict(final_list)\n\ndef match_dict(add_dict, get_dict):\n    new_add_dict = flat_dict(add_dict,join=lambda a,b:a+'_'+b)\n    for k in get_dict.keys():\n        if k in new_add_dict.keys():\n            if isinstance(get_dict[k],list):\n                if set(get_dict[k]).issubset(new_add_dict[k]):\n                    continue\n                else:\n                    return 0\n            if get_dict[k] != new_add_dict[k]:\n                return 0\n        else:\n            return 0\n    return 1\n             \ndef get_cmd(list1, dict1):\n    new_get_dict = flat_dict(dict1,join=lambda a,b:a+'.'+b)\n    for i in list1:\n        if match_dict(json.loads(i),new_get_dict):\n            print(i)\n    return\n\ndef del_cmd(list1, dict1):\n    new_get_dict = flat_dict(dict1,join=lambda a,b:a+'_'+b)\n    my_list = []\n    for k in range(len(list1)):\n        if match_dict(json.loads(list1[k]),new_get_dict):\n            my_list.append(list1[k])\n    for k in my_list:\n        list1.remove(k)\n    return list1\n\nmy_list = []\nwhile 1:\n    try:\n        cmd,document = input().split(' ',1)\n        if cmd == 'add':\n            my_list.append(document)\n            \n        elif cmd == 'get':\n            get_cmd(my_list,json.loads(document))\n            \n        elif cmd == 'delete':\n            my_list = del_cmd(my_list,json.loads(document))\n\n        \n    except EOFError:\n        break\n\n","offset":1254,"fileType":"python3","requestStartTime":1517956859764}}
{"body": {"column":21,"line":93,"wordToComplete":"in self.index.\"\"\"","code":"\nimport json\nimport sys\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        if len(doc) == 0:\n            if delete:\n                for doc in self.docs:\n                    doc = None\n            else:\n                for doc in self.docs:\n                    if doc != None:\n                        print(doc)\n            return\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n    \"\"\"Helper function for crawling a json dictionary\n       starting from provided path. Assumes the path exists\n       in self.index.\"\"\"\n    def crawl(path):\n        \n    \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.curr_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":3297,"fileType":"python3","requestStartTime":1517956907817}}
{"body": {"column":33,"line":29,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef findViolations(datafeed):\n    solutions = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = {}\n    highest = -999\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = line_number\n            accumulated_invoice_ids[line_number] = highest\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name]] or id >= highest:\n                    highest = max(id, highest)\n                    accumulated_invoice_ids[line_number] = highest\n                else:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name] + 1, name))\n            if len(invoice_ids) >\n        line_number += 1\n    return solutions\n\n                \n'''\ndef findViolations(datafeed):\n    solutions = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = []\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            start_indexes[name] = line_number\n            if len(accumulated_invoice_ids) == 0:\n                accumulated_invoice_ids.append(0)\n            else:\n                accumulated_invoice_ids.append(accumulated_invoice_ids[-1])\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id < 0:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name] + 1, name))\n                elif id >= accumulated_invoice_ids[start_indexes[name]] or id >= accumulated_invoice_ids[-1]:\n                    accumulated_invoice_ids.append(max(id, accumulated_invoice_ids[-1]))\n                else:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name] + 1, name))\n        line_number += 1\n    return solutions\n'''\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":897,"fileType":"python3","requestStartTime":1517957106336}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nn,m = input().strip().split(' ')\narr = list(map(int,list(input().strip().split(' '))))\n\nA = set(input().strip().split(' '))\nB = set(input().strip().split(' '))\n\nhapp = 0\n\nfor i in A:\n    if i in arr:\n        happ += arr.\n        \nfor i in B:\n    if i in arr:\n        happ -= 1\n\n\n","offset":222,"fileType":"python3","requestStartTime":1517957116401}}
{"body": {"column":4,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\narr.\n\n","offset":125,"fileType":"python3","requestStartTime":1517957119628}}
{"body": {"column":50,"line":10,"wordToComplete":"dollars.'","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n\n    print('The total meal cost is ' + + ' dollars.')\n    \n\n","offset":225,"fileType":"python3","requestStartTime":1517957273153}}
{"body": {"column":27,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    validPairs = []\n    \n    for a in range(len(numbers)):\n        for b in range(len(numbers)):\n            if(numbers[a] + k == numbers[b]) and ((numbers[a], numbers[b]) not in validPairs):\n                validPairs.\n        \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":319,"fileType":"python3","requestStartTime":1517957299806}}
{"body": {"column":36,"line":21,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef findViolations(datafeed):\n    solutions = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = {}\n    highest = -999\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            if name not in start_indexes:\n                start_indexes[name] = [line_number]\n            else:\n                start_indexes[name].\n            accumulated_invoice_ids[line_number] = highest\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name]] or id >= highest:\n                    highest = max(id, highest)\n                    accumulated_invoice_ids[line_number] = highest\n                else:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name] + 1, name))\n            if len(invoice_ids) > 1:\n                invoice_ids = sorted(int(id) for id in invoice_ids)\n                suspicious = False\n                for id in invoice_ids:\n                    \n        line_number += 1\n    return solutions\n\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":452,"fileType":"python3","requestStartTime":1517957452088}}
{"body": {"column":96,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    cost = meal_cost + (meal_cost * float(tip_percent / 100)) + (meal_cost * float(tax_percent .))\n\n    print('The total meal cost is ' + str(cost) + ' dollars.')\n    \n\n","offset":275,"fileType":"python3","requestStartTime":1517957523783}}
{"body": {"column":27,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef findViolations(datafeed):\n    solutions = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = {}\n    highest = -999\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            if name not in start_indexes:\n                start_indexes[name] = [line_number]\n            else:\n                start_indexes[name].append(line_number)\n            accumulated_invoice_ids[line_number] = highest\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name][-1]] or id >= highest:\n                    highest = max(id, highest)\n                    accumulated_invoice_ids[line_number] = highest\n                else:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name][-1] + 1, name))\n            if len(invoice_ids) > 1:\n                invoice_ids = sorted(int(id) for id in invoice_ids)\n                suspicious = False\n                for id, index in invoice_ids, start_indexes[name]:\n                    if id >\n                    \n        line_number += 1\n    return solutions\n\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":1228,"fileType":"python3","requestStartTime":1517957546043}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"\ndef capitalize(string):\n    a=string.split()\n    b=map(lambda x:if x[0].\n        \n        \n    \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":74,"fileType":"python3","requestStartTime":1517957456783}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    validPairs = []\n    \n    for a in range(len(numbers)):\n        if((numbers[a]+k) in numbers) and ((numbers[a], numbers[a]+k) not in validPairs):\n            validPairs.\n                \n    return len(validPairs)\n        \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":272,"fileType":"python3","requestStartTime":1517957678322}}
{"body": {"column":55,"line":2,"wordToComplete":"This is some of the ugliest code I have ever written...","code":"\n'''\nThis is some of the ugliest code I have ever written...\n'''\nnum = int(input())\n\ntotal = 0\nmedian = 0\n\nlst = []\n\nfor i in range(num):\n    inp = input().split()\n    add = int(inp[1])\n    \n    if inp[0] == 'a':\n        lst.append(add)\n        lst.sort()\n        \n        even_odd = len(lst) % 2\n        if (even_odd == 0): # Even\n            a = lst[len(lst)//2 - 1]\n            b = lst[len(lst)//2]\n            c = (a+b)/2\n            if (c % 1 == 0.5):\n                print(str(c))\n            else:\n                print(str(c)[:str(c).index('.')])\n        else:\n            if lst[len(lst)//2] % 1 == 0.5:\n                print(str(lst[len(lst)//2]))\n            else:\n                print(str(lst[len(lst)//2])[:str(lst[len(lst)//2]).index('.')])\n                \n    elif inp[0] == 'r':\n        if len(lst) == 0:\n            print(\"Wrong!\")\n        else:\n            if add in lst:\n                lst.remove(add)\n            else:\n                print(\"Wrong!\")\n            if len(lst) != 0:\n                even_odd = len(lst) % 2\n                if (even_odd == 0): # Even\n                    a = lst[len(lst)//2 - 1]\n                    b = lst[len(lst)//2]\n                    c = (a+b)/2\n                    if (c % 1 == 0.5):\n                        print(str(c))\n                    else:\n                        print(str(c)[:str(c).index('.')])\n                else:\n                    if lst[len(lst)//2] % 1 == 0.5:\n                        print(str(lst[len(lst)//2]))\n                    else:\n                        print(str(lst[len(lst)//2])[:str(lst[len(lst)//2]).index('.')])\n            else:\n                print(\"Wrong!\")\n\n\n","offset":61,"fileType":"python3","requestStartTime":1517957703608}}
{"body": {"column":21,"line":15,"wordToComplete":"","code":"\nn,m = input().strip().split(' ')\narr = list(map(int,list(input().strip().split(' '))))\n\nA = set(input().strip().split(' '))\nB = set(input().strip().split(' '))\n\nhapp = 0\n\ncounts = dict()\nfor i in arr:\n  counts[i] = counts.get(i, 0) + 1\n\narr_set = set(arr)\n\ncomm_a_arr = arr_set.\n\n    \n\n","offset":280,"fileType":"python3","requestStartTime":1517957756319}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\nn,m = input().strip().split(' ')\narr = list(map(int,list(input().strip().split(' '))))\n\nA = set(input().strip().split(' '))\nB = set(input().strip().split(' '))\n\nhapp = 0\n\ncounts = dict()\nfor i in arr:\n  counts[i] = counts.get(i, 0) + 1\n\narr_set = set(arr)\n\ncomm_a_arr = arr_set.intersection(A)\ncomm_b_arr = arr_set.\n\n    \n\n","offset":317,"fileType":"python3","requestStartTime":1517957774718}}
{"body": {"column":9,"line":15,"wordToComplete":"","code":"\nimport sys\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_recursive(root, -sys.maxint, sys.maxint)\n    \ndef checkBST_recursive(node, min_value, max_value):\n    if node == None : return True\n    if n.\n        \n\n","offset":333,"fileType":"python3","requestStartTime":1517958016787}}
{"body": {"column":32,"line":15,"wordToComplete":"","code":"\nimport sys\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_recursive(root, -sys.maxint, sys.maxint)\n    \ndef checkBST_recursive(node, min_value, max_value):\n    if node == None : return True\n    if n.value < min_value or n.\n        \n\n","offset":356,"fileType":"python3","requestStartTime":1517958027249}}
{"body": {"column":32,"line":16,"wordToComplete":"","code":"\nimport sys\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_recursive(root, -sys.maxint, sys.maxint)\n    \ndef checkBST_recursive(node, min_value, max_value):\n    if node == None : return True\n    if n.value < min_value or n.value > max_value: return False\n    return checkBST_recursive(n.)\n        \n\n","offset":420,"fileType":"python3","requestStartTime":1517958077904}}
{"body": {"column":51,"line":16,"wordToComplete":"","code":"\nimport sys\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_recursive(root, -sys.maxint, sys.maxint)\n    \ndef checkBST_recursive(node, min_value, max_value):\n    if node == None : return True\n    if n.value < min_value or n.value > max_value: return False\n    return checkBST_recursive(n.left, min_value, n.)\n        \n\n","offset":439,"fileType":"python3","requestStartTime":1517958096120}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"\nimport sys\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_recursive(root, -sys.maxint, sys.maxint)\n    \ndef checkBST_rec(node, min_value, max_value):\n    if node == None : return True\n    if node.value < min_value or node.value > max_value: return False\n    return checkBST_rec(n., min_value, node.value) and\n        \n\n","offset":414,"fileType":"python3","requestStartTime":1517958171934}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\n\n\n\n\n\n\nif __name__=='__main__'\nB,W,N = int(input()).\n\n\n","offset":126,"fileType":"python3","requestStartTime":1517958306648}}
{"body": {"column":29,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\n\n\n\n\n\n\nif __name__=='__main__'\nB,W,N = int(input()).strip().\n\n\n","offset":134,"fileType":"python3","requestStartTime":1517958310740}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\ndef predictTemperature(startDate, endDate, temperature, n):\n    avg_temp_h = np.average(temperature, axis=1)\n    \n    out = [avg_temp_h for i in range(n)]\n    out_array = np.array(out)\n    \n    out_array.\n    \n    \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":294,"fileType":"python3","requestStartTime":1517958407209}}
{"body": {"column":6,"line":2,"wordToComplete":"","code":"\ndef solveMeFirst(a,b):\n     .    \n  \n\nnum1 = int(input())\nnum2 = int(input()) \nres = solveMeFirst(num1,num2)\nprint(res)\n\n\nnum1 = int(input())\nnum2 = int(input())\nres = solveMeFirst(num1,num2)\nprint(res)\n\n","offset":31,"fileType":"python3","requestStartTime":1517958574611}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef counts(nums, maxes):\n    maxlist = []\n    for x in maxes:\n        count = 0\n        for y in nums:\n            if y <= x:\n                count = count + 1\n        \n        maxlist.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":257,"fileType":"python3","requestStartTime":1517958576260}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    \n    arr.\n\n\n","offset":99,"fileType":"python3","requestStartTime":1517958666498}}
{"body": {"column":8,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef serviceLane(cases,width):\n    # Complete this function\n    ans.\n     for c in cases:\n            \n         \n\nif __name__ == \"__main__\":\n    n, t = input().strip().split(' ')\n    n, t = [int(n), int(t)]\n    width = list(map(int, input().strip().split(' ')))\n    cases = []\n    for cases_i in range(t):\n       cases_t = [int(cases_temp) for cases_temp in input().strip().split(' ')]\n       cases.append(cases_t)\n    result = serviceLane(cases,width)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":97,"fileType":"python3","requestStartTime":1517958680080}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef serviceLane(cases,width):\n    # Complete this function\n    ans=[]\n    for c in cases:\n        ans.\n            \n         \n\nif __name__ == \"__main__\":\n    n, t = input().strip().split(' ')\n    n, t = [int(n), int(t)]\n    width = list(map(int, input().strip().split(' ')))\n    cases = []\n    for cases_i in range(t):\n       cases_t = [int(cases_temp) for cases_temp in input().strip().split(' ')]\n       cases.append(cases_t)\n    result = serviceLane(cases,width)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":132,"fileType":"python3","requestStartTime":1517958687264}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    \n    arr = list(set(arr))\n    arr.\n\n\n","offset":124,"fileType":"python3","requestStartTime":1517958717094}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a = 0\n    b = 0\n    for first, second in ((a0, b0), (a1, b1), (a2, b2)):\n        if first < second:\n            a += 1\n        elif second >\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":209,"fileType":"python3","requestStartTime":1517958910492}}
{"body": {"column":15,"line":14,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_rec(root, float(\"-inf\"), float(\"inf\"))\n    \ndef checkBST_rec(node, min_value, max_value):\n    if node == None : return True\n    print node.\n    if node.data < min_value or node.data > max_value: return False\n    return checkBST_rec(node.left, min_value, node.data) and checkBST_rec(node.left, node.data, max_value);\n        \n\n","offset":320,"fileType":"python3","requestStartTime":1517959001734}}
{"body": {"column":47,"line":6,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print((\"-\" * ((M - 3 * i )// 2)) + ((i * \".|.\")) + (\"-\" * ((M - 3 * i) // 2)))\nprint((\"-\" * ((M - 7) // 2)) + \"WELCOME\" + (\"-\" * ((M - 7) // 2)))\nfor i in range(N-2,-1,-2): \n    print((\"-\" * ((M - 3 * i) // 2)) + ((i * \".\")))\n\n\n","offset":364,"fileType":"python3","requestStartTime":1517959034534}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef findViolations(datafeed):\n    solutions = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = {}\n    highest = -sys.\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            if name not in start_indexes:\n                start_indexes[name] = [line_number]\n            else:\n                start_indexes[name].append(line_number)\n            accumulated_invoice_ids[line_number] = highest\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name][-1]] or id >= highest:\n                    highest = max(id, highest)\n                    accumulated_invoice_ids[line_number] = highest\n                else:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name][-1] + 1, name))\n            if len(invoice_ids) > 1:\n                invoice_ids = sorted(int(id) for id in invoice_ids)\n                suspicious = False\n                for id, index in zip(invoice_ids, start_indexes[name]):\n                    if id < accumulated_invoice_ids[index] and id < higest:\n                        suspicious = True\n                        break\n                    else:\n                        higest = max(id, highest)\n                if suspicious:\n                    solutions.append('{};{};SUSPICIOUS_BATCH'.format(line_number + 1, name))\n                else:\n                    accumulated_invoice_ids[line_number] = highest\n        line_number += 1\n    return solutions\n\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":217,"fileType":"python3","requestStartTime":1517959056519}}
{"body": {"column":15,"line":14,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    checkBST_rec(root, float(\"-inf\"), float(\"inf\"))\n    \ndef checkBST_rec(node, min_value, max_value):\n    if node == None : return True\n    print(node.)\n    if node.data < min_value or node.data > max_value: return False\n    return checkBST_rec(node.left, min_value, node.data) and checkBST_rec(node.right, node.data, max_value);\n        \n\n","offset":320,"fileType":"python3","requestStartTime":1517959066252}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    a = 0\n    b = 0\n    \n    for x in range(0,n):\n        if(arr[x] > a):\n            a = arr [x]\n        if( arr[x]< a && arr[x] .= b):\n            b = arr[x];\n    print(a)\n\n\n","offset":228,"fileType":"python3","requestStartTime":1517959077725}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef findViolations(datafeed):\n    solutions = []\n    line_number = 0\n    start_indexes = {}\n    accumulated_invoice_ids = {}\n    highest = -sys.\n    for data in datafeed:\n        name, op = data.split(';')\n        if op == 'START':\n            if name not in start_indexes:\n                start_indexes[name] = [line_number]\n            else:\n                start_indexes[name].append(line_number)\n            accumulated_invoice_ids[line_number] = highest\n        else:\n            invoice_ids = op.split(',')\n            if len(invoice_ids) == 1:\n                id = int(invoice_ids[0])\n                if id >= accumulated_invoice_ids[start_indexes[name][-1]] or id >= highest:\n                    highest = max(id, highest)\n                    accumulated_invoice_ids[line_number] = highest\n                else:\n                    solutions.append('{};{};SHORTENED_JOB'.format(start_indexes[name][-1] + 1, name))\n            if len(invoice_ids) > 1:\n                invoice_ids = sorted(int(id) for id in invoice_ids)\n                suspicious = False\n                for id, index in zip(invoice_ids, start_indexes[name]):\n                    if id < accumulated_invoice_ids[index] and id < higest:\n                        suspicious = True\n                        break\n                    else:\n                        higest = max(id, highest)\n                if suspicious:\n                    solutions.append('{};{};SUSPICIOUS_BATCH'.format(line_number + 1, name))\n                else:\n                    accumulated_invoice_ids[line_number] = highest\n        line_number += 1\n    return solutions\n\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    datafeed_cnt = 0\n    datafeed_cnt = int(input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = str(input())\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":217,"fileType":"python3","requestStartTime":1517959095943}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef ncr(n,r):\n    return math.factorial(n)/(math.factorial(r)*math.factorial(n-r))\n\ndef numOfPlaylist(N, K, L):\n    if L > N and K >= N:\n        return 0\n    if L == N:\n        return math.\n    fact = ncr(N,K)\n    return int((fact*((N-K)**(L-K)))%1000000007)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    K = int(input())\n\n    L = int(input())\n\n    res = numOfPlaylist(N, K, L);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":273,"fileType":"python3","requestStartTime":1517959227099}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    arr = [0]*n\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        for i in range(a, b+1):\n            arr[i] = arr[i] + k\n    max = 0\n    for i in arr:\n        if i >\n        \n\n\n","offset":359,"fileType":"python3","requestStartTime":1517959446648}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":82,"fileType":"python3","requestStartTime":1517959699063}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":105,"fileType":"python3","requestStartTime":1517959706111}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val2 not in val1.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":190,"fileType":"python3","requestStartTime":1517959778497}}
{"body": {"column":38,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val2 not in val1.neighbors.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":200,"fileType":"python3","requestStartTime":1517959788600}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val2 not in self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":190,"fileType":"python3","requestStartTime":1517959797122}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val2 not in self.neighbors[val1]:\n            self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":224,"fileType":"python3","requestStartTime":1517959824457}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef counts(nums, maxes):\n    for x in maxes:\n        maxlist.\n        \n\n    \n    return maxlist\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":133,"fileType":"python3","requestStartTime":1517959828758}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1] += val2\n        if val1 not in self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":276,"fileType":"python3","requestStartTime":1517959861539}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1] += val2\n        if val1 not in self.neighbors[val2]:\n            self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":310,"fileType":"python3","requestStartTime":1517959874840}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val1 not in self.\n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1] += val2\n        if val1 not in self.neighbors[val2]:\n            self.neighbors[val2] += val1\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":190,"fileType":"python3","requestStartTime":1517959915464}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val1 not in self.neighbors:\n            self.\n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1] += val2\n        if val1 not in self.neighbors[val2]:\n            self.neighbors[val2] += val1\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":218,"fileType":"python3","requestStartTime":1517959921432}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val1 not in self.neighbors:\n            self.neighbors[val1] = \"\"\n        if val2 not in self.neighbors:\n            self.neighbors[val2] = \"\"      \n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1] += val2\n        if val1 not in self.neighbors[val2]:\n            self.neighbors[val2] += val1\n    def findNeighbors(self,val):\n        return self.\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":547,"fileType":"python3","requestStartTime":1517959987096}}
{"body": {"column":23,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    \ndef get_runner_up(keys):\n    res = sorted(keys).\n    return res[1]\n\nprint(get_runner_up(arr))\n\n","offset":139,"fileType":"python3","requestStartTime":1517960008874}}
{"body": {"column":33,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val1 not in self.neighbors:\n            self.neighbors[val1] = []\n        if val2 not in self.neighbors:\n            self.neighbors[val2] = []      \n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1].val2\n        if val1 not in self.neighbors[val2]:\n            self.neighbors[val2] += val1\n    def findNeighbors(self,val):\n        return self.neighbors[val]\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":400,"fileType":"python3","requestStartTime":1517960046177}}
{"body": {"column":33,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.neighbors = dict()\n    def addNeighbors(self,val1,val2):\n        if val1 not in self.neighbors:\n            self.neighbors[val1] = []\n        if val2 not in self.neighbors:\n            self.neighbors[val2] = []      \n        if val2 not in self.neighbors[val1]:\n            self.neighbors[val1].append(val2)\n        if val1 not in self.neighbors[val2]:\n            self.neighbors[val2].val1\n    def findNeighbors(self,val):\n        return self.neighbors[val]\ndef bfs(n, m, edges, s):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":491,"fileType":"python3","requestStartTime":1517960052945}}
{"body": {"column":23,"line":3,"wordToComplete":"","code":"class atm:\n\n    def __init__(self,balance):\n        balance = self.\n    \n    def withdraw(self,amount):\n  \n\n    def deposit(self,amount):\n  \n    def setBalance(self,balance):\n\n\n    def cancel(self):\n\n\n    def default():\n\n\n    def finished(self,choice):\n   \ntested = atm(0)\ntested.setBalance(int(input()))\n\nx = input()\noptions = {\"withdraw\" : tested.withdraw,\n           \"deposit\" : tested.deposit,\n           \"cancel\" : tested.cancel,\n}        \n\nif x in options:\n    if x == \"cancel\":\n        options[x]()\n    else:    \n        z = int(input())\n        options[x](z)\n        tested.finished(input())   \nelse:\n    atm.default()\n\n\n","offset":68,"fileType":"python3","requestStartTime":1517970986093}}
{"body": {"column":22,"line":6,"wordToComplete":"","code":"class atm:\n\n    def __init__(self,balance):\n        balance = self.balance\n    \n    def withdraw(self,amount):\n        amount = self.\n\n    def deposit(self,amount):\n  \n    def setBalance(self,balance):\n\n\n    def cancel(self):\n\n\n    def default():\n\n\n    def finished(self,choice):\n   \ntested = atm(0)\ntested.setBalance(int(input()))\n\nx = input()\noptions = {\"withdraw\" : tested.withdraw,\n           \"deposit\" : tested.deposit,\n           \"cancel\" : tested.cancel,\n}        \n\nif x in options:\n    if x == \"cancel\":\n        options[x]()\n    else:    \n        z = int(input())\n        options[x](z)\n        tested.finished(input())   \nelse:\n    atm.default()\n\n\n","offset":134,"fileType":"python3","requestStartTime":1517971007272}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    cow_num = int(input())\n    M, N = input().\n\n","offset":131,"fileType":"python3","requestStartTime":1517960180754}}
{"body": {"column":27,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    cow_num = int(input())\n    M, N = input().strip().\n\n","offset":139,"fileType":"python3","requestStartTime":1517960181929}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().\n\n","offset":214,"fileType":"python3","requestStartTime":1517960258028}}
{"body": {"column":36,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n\n","offset":222,"fileType":"python3","requestStartTime":1517960264193}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    treeData = dict()\n    for i in range(1,len(n)+1):\n        treeData[i] = []\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].\n    \n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":242,"fileType":"python3","requestStartTime":1517960305857}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    treeData = dict()\n    for i in range(1,len(n)+1):\n        treeData[i] = []\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].append(a)\n        if b not in treeData[a]:\n            treeData[a].\n    \n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n           edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n           edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":309,"fileType":"python3","requestStartTime":1517960337770}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = \n\n","offset":143,"fileType":"python3","requestStartTime":1517960360193}}
{"body": {"column":14,"line":5,"wordToComplete":"a","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.a\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = \n\n","offset":175,"fileType":"python3","requestStartTime":1517960364174}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = \n\n","offset":213,"fileType":"python3","requestStartTime":1517960380674}}
{"body": {"column":18,"line":1,"wordToComplete":"","code":"\na,b = map(input().)\nprint(a,b,'ab')\n\n","offset":20,"fileType":"python3","requestStartTime":1517960382790}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = \n\n","offset":240,"fileType":"python3","requestStartTime":1517960392552}}
{"body": {"column":19,"line":27,"wordToComplete":"","code":"\nimport json\nimport sys\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index.\"\"\"\n    def crawl(self.path):\n        index_node = self.index\n        for key in path:\n            index_node = index_node[key]\n        index_keys = []\n        docs_touched = set()\n        for key in index_node.keys():\n            index_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, index_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n                \n            # if obj is still a dictionary, recurse\n            nodes = index_node\n            for key in path:\n                nodes = nodes[key]\n            nodes = nodes[curr_key]\n            if isinstance(nodes, dict):\n                keys = []\n                for key in values.keys():\n                    keys.append(key)\n                stack.append([path + [curr_key], keys])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in nodes:\n                    docs_touched.add(node)\n                    \n        return docs_touched\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        if len(doc) == 0:\n            if delete:\n                for doc in self.docs:\n                    doc = None\n            else:\n                for doc in self.docs:\n                    if doc != None:\n                        print(doc)\n            return\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            print(stack)\n            # print(path, current_keys)\n            if len(current_keys) == 0:\n                set_list.append(self.crawl(path))\n                stack.pop()\n                continue\n               \n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n                \n    \n            \n            \n    \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":877,"fileType":"python3","requestStartTime":1517960425691}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().\n\n","offset":581,"fileType":"python3","requestStartTime":1517960433716}}
{"body": {"column":34,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip.\n\n","offset":587,"fileType":"python3","requestStartTime":1517960434699}}
{"body": {"column":36,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().\n\n","offset":589,"fileType":"python3","requestStartTime":1517960435511}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nfor i in range(int(b)):\n    print(''.)\nprint(a,b,'ab')\n\n","offset":87,"fileType":"python3","requestStartTime":1517960473013}}
{"body": {"column":28,"line":4,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nfor i in range(int(b)):\n    print(''.join(itertools.))\nprint(a,b,'ab')\n\n","offset":102,"fileType":"python3","requestStartTime":1517960487686}}
{"body": {"column":28,"line":27,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().\n        \n\n","offset":782,"fileType":"python3","requestStartTime":1517960492706}}
{"body": {"column":36,"line":27,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().\n        \n\n","offset":790,"fileType":"python3","requestStartTime":1517960494649}}
{"body": {"column":7,"line":5,"wordToComplete":"5.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\ni2 = 5\nd2 = 5.\n\n# Declare second integer, double, and String variables.\n\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":48,"fileType":"python3","requestStartTime":1517960521731}}
{"body": {"column":25,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].\n        \n\n","offset":900,"fileType":"python3","requestStartTime":1517960534769}}
{"body": {"column":34,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.\n        \n\n","offset":909,"fileType":"python3","requestStartTime":1517960535799}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].\n        \n\n","offset":950,"fileType":"python3","requestStartTime":1517960543226}}
{"body": {"column":30,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.]\n        \n\n","offset":1008,"fileType":"python3","requestStartTime":1517960563981}}
{"body": {"column":48,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.]\n        \n\n","offset":1026,"fileType":"python3","requestStartTime":1517960567989}}
{"body": {"column":21,"line":7,"wordToComplete":"0.","code":"\nfrom math import erf\n\nn = 100\nmean = 500\nstdev = 80\nz = 1.96\nsample_stdev = 80**0.\n\nA = \n\n","offset":84,"fileType":"python3","requestStartTime":1517960586021}}
{"body": {"column":13,"line":21,"wordToComplete":"","code":"class atm:\n\n    def __init__(self,balance):\n        self.balance = balance\n    \n    def withdraw(self,amount):\n        self.amount = amount\n        \n    def deposit(self,amount):\n        self.amount = amount\n\n    def setBalance(self,balance):\n        self.balance = balance\n\n    def cancel(self):\n        \n\n    def default():\n\n\n    def finished(self,choice):\n        self.\ntested = atm(0)\ntested.setBalance(int(input()))\n\nx = input()\noptions = {\"withdraw\" : tested.withdraw,\n           \"deposit\" : tested.deposit,\n           \"cancel\" : tested.cancel,\n}        \n\nif x in options:\n    if x == \"cancel\":\n        options[x]()\n    else:    \n        z = int(input())\n        options[x](z)\n        tested.finished(input())   \nelse:\n    atm.default()\n\n\n","offset":373,"fileType":"python3","requestStartTime":1517971524676}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        \ndef updateAccessList(node, prevAccessList):\n    node.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root)\n        \n\n","offset":316,"fileType":"python3","requestStartTime":1517960640486}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root)\n        \n\n","offset":328,"fileType":"python3","requestStartTime":1517960645502}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    print('starting new')\n    treeData = dict()\n    traveled = dict()\n    for i in range(1,n+1):\n        treeData[i] = []\n        traveled[i] = -1\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].append(a)\n        if b not in treeData[a]:\n            treeData[a].append(b)\n    q = s\n    traveled[s] = 0\n    while q:\n        current = q.\n    \n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n            edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n            edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":450,"fileType":"python3","requestStartTime":1517960652573}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.extend(prevAccessList)\n    node.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, [x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root)\n        \n\n","offset":360,"fileType":"python3","requestStartTime":1517960654982}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\nfrom math import erf\n\nn = 100\nmean = 500\nstdev = 80\nz = 1.96\nsample_stdev = 80**0.5\n\nA = mean - z*sample_stdev\nB = mean + z*sample_stdev\n\nprint({:.})\n\n","offset":149,"fileType":"python3","requestStartTime":1517960672782}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    num_pos = 0\n    num_zer = 0\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n        elif num == 0:\n            num_zer += 1\n    print({}.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":208,"fileType":"python3","requestStartTime":1517960676196}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\nfrom math import erf\n\nn = 100\nmean = 500\nstdev = 80\nz = 1.96\nsample_stdev = 80**0.5\n\nA = mean - z*sample_stdev\nB = mean + z*sample_stdev\n\nprint({:.2f}.)\n\n","offset":153,"fileType":"python3","requestStartTime":1517960676337}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    num_pos = 0\n    num_zer = 0\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n        elif num == 0:\n            num_zer += 1\n    print({%.f})\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":208,"fileType":"python3","requestStartTime":1517960703548}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nfor i in range(int(b)):\n    combs = list(itertools.combinations(a,i+1)          )\n    print(''.ss for ss in combs,sep='\\n')\n\n","offset":145,"fileType":"python3","requestStartTime":1517960705975}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    num_pos = 0\n    num_zer = 0\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n        elif num == 0:\n            num_zer += 1\n    print({%.6f}.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":212,"fileType":"python3","requestStartTime":1517960720949}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    arr = [0]*n\n    \n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        arr[a-1] += k\n        if (b <= n):\n            arr[b] -= k\n        print(arr)\n    sum = 0\n    for i in arr:\n        sum = sum+i\n        if sum >\n        \n    print(max(arr))\n\n\n","offset":408,"fileType":"python3","requestStartTime":1517960744797}}
{"body": {"column":18,"line":24,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    print('starting new')\n    treeData = dict()\n    traveled = dict()\n    for i in range(1,n+1):\n        treeData[i] = []\n        traveled[i] = -1\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].append(a)\n        if b not in treeData[a]:\n            treeData[a].append(b)\n    q = s\n    traveled[s] = 0\n    while q:\n        current = q.pop(0)\n        for element in treeData[current]:\n            if traveled[element] = -1:\n                q.\n    \n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n            edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n            edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":556,"fileType":"python3","requestStartTime":1517960749259}}
{"body": {"column":56,"line":28,"wordToComplete":"in self.index. Returns a set of all docs touched.\"\"\"","code":"\nimport json\nimport sys\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index. Returns a set of all docs touched.\"\"\"\n    def crawl(self, path):\n        index_node = self.index\n        for key in path:\n            index_node = index_node[key]\n        index_keys = []\n        docs_touched = set()\n        for key in index_node.keys():\n            index_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, index_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n                \n            # if obj is still a dictionary, recurse\n            nodes = index_node\n            for key in path:\n                nodes = nodes[key]\n            nodes = nodes[curr_key]\n            if isinstance(nodes, dict):\n                keys = []\n                for key in nodes.keys():\n                    keys.append(key)\n                stack.append([path + [curr_key], keys])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in nodes:\n                    docs_touched.add(node)\n        return docs_touched\n\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            if len(current_keys) == 0:\n                set_list.append(self.crawl(path))\n                stack.pop()\n                continue\n               \n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n  \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":1052,"fileType":"python3","requestStartTime":1517960782505}}
{"body": {"column":26,"line":7,"wordToComplete":"0.","code":"\nfrom math import erf\n\nn = 100\nmean = 500\nstdev = 80\nz = 1.96\nsample_stdev = stdev/n**0.\n\nA = mean - z*sample_stdev\nB = mean + z*sample_stdev\n\nprint('{:.2f}'.format(A))\nprint('{:.2f}'.format(B))\n\n","offset":89,"fileType":"python3","requestStartTime":1517960783551}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, set([x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, set([x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [])\n        \n\n","offset":381,"fileType":"python3","requestStartTime":1517960786275}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nfor i in range(int(b)):\n    combs = list(itertools.combinations(a,i+1)          )\n    for com in combs:\n        print(.)\n    print((''.join(ss) for ss in combs),sep='\\n')\n\n","offset":169,"fileType":"python3","requestStartTime":1517960798622}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nfor i in range(int(b)):\n    combs = list(itertools.combinations(a,i+1)          )\n    for com in combs:\n        print(''.)\n    print((''.join(ss) for ss in combs),sep='\\n')\n\n","offset":171,"fileType":"python3","requestStartTime":1517960803846}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef  mergeStrings(a, b):\n    \n    if len(a) == 0 or len(b) == 0:\n        return a or b\n    result = ''\n    for i in range(len(a)):\n        for j in range(len(b)):\n            result.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a = str(input())\n\n\n_b = str(input())\n\nres = mergeStrings(_a, _b);\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":222,"fileType":"python3","requestStartTime":1517960806599}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        if \n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, set([x for x in file_info[2:]])\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, set([x for x in file_info[2:]])\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [])\n        \n\n","offset":281,"fileType":"python3","requestStartTime":1517960809743}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    num_pos = 0\n    num_zer = 0\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n        elif num == 0:\n            num_zer += 1\n    print({%.6f}.format(num_pos/len(arr)))\n    print({%.6f}.format(num_zer/len(arr)))\n    print({0}..format((len(arr) - num_pos - num_pos)/len(arr)))\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":295,"fileType":"python3","requestStartTime":1517960828669}}
{"body": {"column":43,"line":24,"wordToComplete":"privacy type for shared folders ->","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        if \n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders ->\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [])\n        \n\n","offset":698,"fileType":"python3","requestStartTime":1517960843282}}
{"body": {"column":49,"line":30,"wordToComplete":"privacy type for confidential folders ->","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        if \n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders ->\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [])\n        \n\n","offset":938,"fileType":"python3","requestStartTime":1517960850024}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    print('starting new')\n    treeData = dict()\n    traveled = []\n    for i in range(1,n+1):\n        treeData[i] = []\n        traveled.-1\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].append(a)\n        if b not in treeData[a]:\n            treeData[a].append(b)\n    q = s\n    traveled[s] = 0\n    while q:\n        current = q.pop(0)\n        for element in treeData[current]:\n            if traveled[element] = -1:\n                q.append(element)\n                traveled[element] = traveled[current]+1\n    print()\n    \n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n            edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n            edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":219,"fileType":"python3","requestStartTime":1517960850686}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\na = input()\nb = input()\nc = input()\nd = input()\n\nb = b.split()\nd = d.\n\n","offset":71,"fileType":"python3","requestStartTime":1517960851777}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        if node.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [])\n        \n\n","offset":462,"fileType":"python3","requestStartTime":1517960855964}}
{"body": {"column":2,"line":3,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\na.\nfor i in range(int(b)):\n    combs = list(itertools.combinations(a,i+1)          )\n    for com in combs:\n        print(''.join(com))\n\n\n","offset":52,"fileType":"python3","requestStartTime":1517960859558}}
{"body": {"column":61,"line":14,"wordToComplete":"You have selected to deposit money to the account.\"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef withdraw():\n    #insert PRINT statement here \n    print(\"You have selected to withdraw money from the account.\")\ndef deposit():\n    #insert PRINT statement here \n    print(\"You have selected to deposit money to the account.\")\ndef cancel():\n    #insert PRINT statement here \n    print(\"Returning to account selection\")\ndef default():\n    #insert PRINT statement here \n    print(\"You have selected an invalid option\")\n#Make sure you don't leave the quotation mark when changing below or it wont work.    \n\n           \n\n\n\noptions = {\"withdraw\" : withdraw,\n           \"deposit\" : deposit,\n           \"cancel\" : cancel,\n}\n\nx = input()\nif x in options:\n    options[x]()\nelse:\n    default()\n\n","offset":300,"fileType":"python3","requestStartTime":1517971803050}}
{"body": {"column":47,"line":20,"wordToComplete":"You have selected an invalid option.\"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef withdraw():\n    #insert PRINT statement here \n    print(\"You have selected to withdraw money from the account.\")\ndef deposit():\n    #insert PRINT statement here \n    print(\"You have selected to deposit money to the account.\")\ndef cancel():\n    #insert PRINT statement here \n    print(\"Returning to account selection.\")\ndef default():\n    #insert PRINT statement here \n    print(\"You have selected an invalid option.\")\n#Make sure you don't leave the quotation mark when changing below or it wont work.    \n\n           \n\n\n\noptions = {\"withdraw\" : withdraw,\n           \"deposit\" : deposit,\n           \"cancel\" : cancel,\n}\n\nx = input()\nif x in options:\n    options[x]()\nelse:\n    default()\n\n","offset":492,"fileType":"python3","requestStartTime":1517971807775}}
{"body": {"column":31,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.\n\ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [])\n        \n\n","offset":537,"fileType":"python3","requestStartTime":1517960878233}}
{"body": {"column":7,"line":3,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nq = ''.list(a).sort()\nfor i in range(int(b)):\n    combs = list(itertools.combinations(a,i+1)          )\n    for com in combs:\n        print(''.join(com))\n\n\n","offset":57,"fileType":"python3","requestStartTime":1517960901245}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    count = 0\n    pairs = []\n    for x in numbers:\n        for y in numbers:\n            if [x, y] not in pairs\n                pairs.\n                \n    return count\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":234,"fileType":"python3","requestStartTime":1517960903147}}
{"body": {"column":16,"line":15,"wordToComplete":"0:0.}\"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    num_pos = 0\n    num_zer = 0\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n        elif num == 0:\n            num_zer += 1\n    print(\"{0}.6f\".format(num_pos/len(arr)))\n    print(\"{0}.6f\".format(num_zer/len(arr)))\n    print(\"{0:0.}\".format((len(arr) - num_pos - num_pos)/len(arr)))\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":301,"fileType":"python3","requestStartTime":1517960910183}}
{"body": {"column":6,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    print('starting new')\n    treeData = dict()\n    traveled = dict()\n    for i in range(1,n+1):\n        treeData[i] = []\n        traveled[i] = -1\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].append(a)\n        if b not in treeData[a]:\n            treeData[a].append(b)\n    q = []\n    q.\n    traveled[s] = 0\n    while q:\n        current = q.pop(0)\n        for element in treeData[current]:\n            if traveled[element] == -1:\n                q.append(element)\n                traveled[element] = traveled[current]+1\n    print(traveled)\n    \n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n            edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n            edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":404,"fileType":"python3","requestStartTime":1517960941237}}
{"body": {"column":6,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    x = []\n    min_x = 0\n    max_x = len(doors) - 1\n    i = 0\n    while i > 0:\n        if doors[i] == 0:\n            max_x -= 1\n    for i in doors:\n        if doors[i] == 1:\n            min_x += 1\n            if i + 1 < len(doors) - 1:\n                if doors[i + 1] == 1:\n                    i += 2\n    x.\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":570,"fileType":"python3","requestStartTime":1517960967267}}
{"body": {"column":6,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    x = []\n    min_x = 0\n    max_x = len(doors) - 1\n    i = 0\n    while i > 0:\n        if doors[i] == 0:\n            max_x -= 1\n    for i in doors:\n        if doors[i] == 1:\n            min_x += 1\n            if i + 1 < len(doors) - 1:\n                if doors[i + 1] == 1:\n                    i += 2\n    x.push(min)\n    x.\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":586,"fileType":"python3","requestStartTime":1517960982186}}
{"body": {"column":2,"line":4,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nq = list(a)\nq.\nprint(q)\nfor i in range(int(b)):\n    combs = list(itertools.combinations(q,i+1)          )\n    for com in combs:\n        print(''.join(com))\n\n\n","offset":64,"fileType":"python3","requestStartTime":1517961004381}}
{"body": {"column":2,"line":4,"wordToComplete":"","code":"\nimport itertools\na,b = map(str,input().split())\nq = list(a)\nq.\nprint(q)\nfor i in range(int(b)):\n    combs = list(itertools.combinations(q,i+1)          )\n    for com in combs:\n        print(''.join(com))\n\n\n","offset":64,"fileType":"python3","requestStartTime":1517961020685}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    if root.\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":664,"fileType":"python3","requestStartTime":1517961043383}}
{"body": {"column":22,"line":27,"wordToComplete":"","code":"\n'''\nWhat if you calculated the differences between each P and D\nThen you could iteratively check through adding up the differences, starting with the first positive one, and keep looping while you are positive\n\nPotential, we'll try it out\n'''\n\nnum = int(input())\ndifferences = []\n\nfor i in range(num):\n    nums = [int(x) for x in input().split()]\n    differences.append(nums[0] - nums[1])\n    \n# Now we have a list of differences between each P and D of each row of input\n# We can use this to test for positives and seeing if we can stay about 0 for each one\n\nstart = 0\ni = 0\n\nwhile i < len(differences):\n    if differences[i] > 0:\n        start = i\n    \nrunning_total = differences[i]\n\nwhile running_total > \n    \n    \n    \n    \n    \n    \n    \n\n","offset":711,"fileType":"python3","requestStartTime":1517961048544}}
{"body": {"column":17,"line":3,"wordToComplete":"0.","code":"\nn = input()\n\nfor i in range(0.)\n\n","offset":32,"fileType":"python3","requestStartTime":1517961051296}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nn = input()\n\nfor i in range(0..)\n\n","offset":33,"fileType":"python3","requestStartTime":1517961051494}}
{"body": {"column":19,"line":5,"wordToComplete":"on user queries.\"\"\"","code":"\nimport json\nimport sys\n\n\"\"\"My approach for this challenge was to create an index which would retrieve doc_id's quickly based\n   on user queries.\"\"\"\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index. Returns a set of all docs touched.\"\"\"\n    def crawl(self, path):\n        index_node = self.index\n        for key in path:\n            index_node = index_node[key]\n        index_keys = []\n        docs_touched = set()\n        for key in index_node.keys():\n            index_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, index_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n                \n            # if obj is still a dictionary, recurse\n            nodes = index_node\n            for key in path:\n                nodes = nodes[key]\n            nodes = nodes[curr_key]\n            if isinstance(nodes, dict):\n                keys = []\n                for key in nodes.keys():\n                    keys.append(key)\n                stack.append([path + [curr_key], keys])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in nodes:\n                    docs_touched.add(node)\n        return docs_touched\n\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            if len(current_keys) == 0:\n                set_list.append(self.crawl(path))\n                stack.pop()\n                continue\n               \n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict) or isinstance:\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n  \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":146,"fileType":"python3","requestStartTime":1517961063846}}
{"body": {"column":23,"line":4,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":136,"fileType":"python3","requestStartTime":1517961066405}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":157,"fileType":"python3","requestStartTime":1517961069419}}
{"body": {"column":17,"line":29,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bfs(n, m, edges, s):\n    # Complete this function\n    print('starting new')\n    treeData = dict()\n    traveled = dict()\n    for i in range(1,n+1):\n        treeData[i] = []\n        traveled[i] = -1\n    for a,b in edges:\n        if a not in treeData[b]:\n            treeData[b].append(a)\n        if b not in treeData[a]:\n            treeData[a].append(b)\n    q = []\n    q.append(s)\n    traveled[s] = 0\n    while q:\n        current = q.pop(0)\n        for element in treeData[current]:\n            if traveled[element] == -1:\n                q.append(element)\n                traveled[element] = traveled[current]+6\n    solution = []\n    for i in range(1,n+1):\n        solution.\n    \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m = input().strip().split(' ')\n        n, m = [int(n), int(m)]\n        edges = []\n        for edges_i in range(m):\n            edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n            edges.append(edges_t)\n        s = int(input().strip())\n        result = bfs(n, m, edges, s)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":708,"fileType":"python3","requestStartTime":1517961083324}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    if queue[-1].\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":688,"fileType":"python3","requestStartTime":1517961089489}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.initialAge = initialAge\n        else:\n            self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":213,"fileType":"python3","requestStartTime":1517961099502}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node):\n    lst = []\n    \n    if node.\n    \ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        get_leaf_lists(root)\n\n","offset":692,"fileType":"python3","requestStartTime":1517961105026}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node):\n    lst = []\n    \n    if not node.children:\n        return node.\n    \ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        get_leaf_lists(root)\n\n","offset":726,"fileType":"python3","requestStartTime":1517961116247}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node):\n    lst = []\n    \n    if not node.children:\n        return node.access_list\n    for child_id in node.\n    \ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        get_leaf_lists(root)\n\n","offset":763,"fileType":"python3","requestStartTime":1517961128432}}
{"body": {"column":21,"line":29,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":782,"fileType":"python3","requestStartTime":1517961132434}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.initialAge = initialAge\n        else:\n            self.initialAge = 0\n            print('Age is not valid, setting age to 0.')\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        sself.\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":487,"fileType":"python3","requestStartTime":1517961137460}}
{"body": {"column":14,"line":30,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        queue.\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":802,"fileType":"python3","requestStartTime":1517961137442}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        return node.access_list\n    for child_id in node.children:\n        lst.files[child_id]\n    \ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        get_leaf_lists(root)\n\n","offset":792,"fileType":"python3","requestStartTime":1517961139012}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef prison(n, m, h, v):\n    result = -1\n    x = set(range(1, m+1))\n    y = set(range(1, n+1))\n    x = x.\n    for bar in v:\n        x.remove(bar)\n    for bar in h:\n        y.remove(bar)\n    if not x and not y:  # special case for all bars removed\n        return (m+1) * (n+1)\n    max_x = -1\n    max_y = -1\n    for i in range(len(x)-1):\n        max_x = max(max_x, x[i+1] - x[i])\n    for j in range(len(y)-1):\n        max_y = max(max_y, y[j+1] - y[j])\n    for i in range(len(x)-1):\n        result = max(result, max_y * (x[i+1] - x[i]))\n    for j in range(len(y)-1):\n        result = max(result, max_x * (y[j+1] - y[j]))\n    return result\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    m = int(input())\n\n    h_cnt = 0\n    h_cnt = int(input())\n    h_i = 0\n    h = []\n    while h_i < h_cnt:\n        h_item = int(input())\n        h.append(h_item)\n        h_i += 1\n\n\n    v_cnt = 0\n    v_cnt = int(input())\n    v_i = 0\n    v = []\n    while v_i < v_cnt:\n        v_item = int(input())\n        v.append(v_item)\n        v_i += 1\n\n\n    res = prison(n, m, h, v);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":176,"fileType":"python3","requestStartTime":1517961139723}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.initialAge = initialAge\n        else:\n            self.initialAge = 0\n            print('Age is not valid, setting age to 0.')\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":486,"fileType":"python3","requestStartTime":1517961140295}}
{"body": {"column":28,"line":30,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        queue.insert(0,node.)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":816,"fileType":"python3","requestStartTime":1517961144395}}
{"body": {"column":14,"line":31,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        queue.insert(0,node.left)\n        queue.\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":836,"fileType":"python3","requestStartTime":1517961149739}}
{"body": {"column":28,"line":31,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        queue.insert(0,node.left)\n        queue.insert(0,node.)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":850,"fileType":"python3","requestStartTime":1517961153347}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.initialAge = initialAge\n        else:\n            self.initialAge = 0\n            print('Age is not valid, setting age to 0.')\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.initialAge += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":413,"fileType":"python3","requestStartTime":1517961169163}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        if node. is not None:\n            queue.insert(0,node.left)\n            queue.insert(0,node.right)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":804,"fileType":"python3","requestStartTime":1517961173668}}
{"body": {"column":15,"line":32,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if nod.\n            queue.insert(0,node.right)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":875,"fileType":"python3","requestStartTime":1517961186172}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # BFS\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return queue[-1]\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if node.\n            queue.insert(0,node.right)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":876,"fileType":"python3","requestStartTime":1517961186844}}
{"body": {"column":19,"line":66,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        return node.access_list\n    \n    for child_id in node.children:\n        lst.extend(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_lists.get_leaf_lists(root, files)\n\n","offset":2027,"fileType":"python3","requestStartTime":1517961188629}}
{"body": {"column":81,"line":8,"wordToComplete":"retrieve items from the index based on the json data, DFS is used extensively.\"\"\"","code":"\nimport json\nimport sys\n\n\"\"\"My approach for this challenge was to create an index which would retrieve doc_id's quickly based\n   on user queries. The docs would be stored in an array indexed in the order they were placed in the\n   array. The index is a dictionary that looks similar to the json structure of the queries except that\n   the values of each item are mapped to a list of doc_id's with that value. To modify, delete and\n   retrieve items from the index based on the json data, DFS is used extensively.\"\"\"\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index.\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index. Returns a set of all docs touched.\"\"\"\n    def crawl(self, path):\n        index_node = self.index\n        for key in path:\n            index_node = index_node[key]\n        index_keys = []\n        docs_touched = set()\n        for key in index_node.keys():\n            index_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, index_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n                \n            # if obj is still a dictionary, recurse\n            nodes = index_node\n            for key in path:\n                nodes = nodes[key]\n            nodes = nodes[curr_key]\n            if isinstance(nodes, dict):\n                keys = []\n                for key in nodes.keys():\n                    keys.append(key)\n                stack.append([path + [curr_key], keys])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in nodes:\n                    docs_touched.add(node)\n        return docs_touched\n\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            if len(current_keys) == 0:\n                set_list.append(self.crawl(path))\n                stack.pop()\n                continue\n               \n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict) or isinstance:\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n  \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":513,"fileType":"python3","requestStartTime":1517961218770}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age < 13:\n            print('You are young.')\n        elif self.\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":463,"fileType":"python3","requestStartTime":1517961220734}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\nn = input()\n\nphoneBook = {}\n\nfor i in range(0, n):\n    x = input()\n    x.\n\n","offset":75,"fileType":"python3","requestStartTime":1517961222386}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nn = input()\n\nphoneBook = {}\n\nfor i in range(0, n):\n    x = input().\n\n","offset":69,"fileType":"python3","requestStartTime":1517961224914}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age < 13:\n            print('You are young.')\n        elif 13 <= self.\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":469,"fileType":"python3","requestStartTime":1517961229441}}
{"body": {"column":27,"line":69,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        return node.access_list\n    \n    for child_id in node.children:\n        lst.extend(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = input()\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, M):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, N):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, G):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    intersection_lst = set.\n\n","offset":2122,"fileType":"python3","requestStartTime":1517961236348}}
{"body": {"column":43,"line":24,"wordToComplete":"OH WAIT THIS IS A BINARY SEARCH TREE.","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE.\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return 1\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if node.right is not None:\n            queue.insert(0,node.right)\n    return 0\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":685,"fileType":"python3","requestStartTime":1517961239942}}
{"body": {"column":44,"line":24,"wordToComplete":"OH WAIT THIS IS A BINARY SEARCH TREE..","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE..\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return 1\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if node.right is not None:\n            queue.insert(0,node.right)\n    return 0\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":686,"fileType":"python3","requestStartTime":1517961240070}}
{"body": {"column":45,"line":24,"wordToComplete":"OH WAIT THIS IS A BINARY SEARCH TREE...","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE...\n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return 1\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if node.right is not None:\n            queue.insert(0,node.right)\n    return 0\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":687,"fileType":"python3","requestStartTime":1517961240214}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    x = []\n    most = doors.\n    least = 0\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":291,"fileType":"python3","requestStartTime":1517961250921}}
{"body": {"column":97,"line":12,"wordToComplete":"","code":"class atm:\n\n    def __init__(self,balance):\n        self.balance = balance\n    \n    def withdraw(self,amount):\n        self.amount = amount\n        balance = self.balance - amount\n        print(balance)\n    def deposit(self,amount):\n        self.amount = amount\n        balance = self.balance + amount\n        outputD = \"You have selected to deposit money to the account\", \"You have $\" + balance +\".\"\n        print(outputD)\n    def setBalance(self,balance):\n        self.balance = balance\n        \n    def cancel(self):\n        print(\"Have a nice day!\")\n        \n    def default():\n        print(\"You have selected an Invalid option\")\n\n    def finished(self,choice):\n        self.choice = choice\ntested = atm(0)\ntested.setBalance(int(input()))\n\nx = input()\noptions = {\"withdraw\" : tested.withdraw,\n           \"deposit\" : tested.deposit,\n           \"cancel\" : tested.cancel,\n}        \n\nif x in options:\n    if x == \"cancel\":\n        options[x]()\n    else:    \n        z = int(input())\n        options[x](z)\n        tested.finished(input())   \nelse:\n    atm.default()\n\n\n","offset":400,"fileType":"python3","requestStartTime":1517972198223}}
{"body": {"column":31,"line":16,"wordToComplete":"You are old.'","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >= 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print('Age is not valid, setting age to 0.')\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age < 13:\n            print('You are young.')\n        elif 13 <= self.age < 18:\n            print('You are a teenager.')\n        else:\n            print('You are old.')\n    def yearPasses(self):\n        # Increment the age of the person in here\n        self.age += 1\nt = int(input())\nfor i in range(0, t):\n    age = int(input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()       \n    p.amIOld()\n    print(\"\")\n","offset":565,"fileType":"python3","requestStartTime":1517961269762}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE... DUH\n    if root.\n    \n    \n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return 1\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if node.right is not None:\n            queue.insert(0,node.right)\n    return 0\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":704,"fileType":"python3","requestStartTime":1517961273999}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE... DUH\n    if root.value == val:\n        return 1\n    if root.\n        \n    \n    \n    queue = [root]\n    while len(queue) > 0:\n        if queue[-1].value == val:\n            return 1\n        node = queue.pop()\n        if node.left is not None:\n            queue.insert(0,node.left)\n        if node.right is not None:\n            queue.insert(0,node.right)\n    return 0\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":747,"fileType":"python3","requestStartTime":1517961291464}}
{"body": {"column":19,"line":2,"wordToComplete":"Hai Khairul.\"","code":"\nhobi = \"Daniel apa khabar?\"\nprint(\"Hai Khairul.\")\nprint(\"Hai daniel...\" + \"hobi\")\n\n","offset":49,"fileType":"python3","requestStartTime":1517963840319}}
{"body": {"column":20,"line":2,"wordToComplete":"Hai Khairul..\"","code":"\nhobi = \"Daniel apa khabar?\"\nprint(\"Hai Khairul..\")\nprint(\"Hai daniel...\" + \"hobi\")\n\n","offset":50,"fileType":"python3","requestStartTime":1517963840607}}
{"body": {"column":21,"line":2,"wordToComplete":"Hai Khairul...\"","code":"\nhobi = \"Daniel apa khabar?\"\nprint(\"Hai Khairul...\")\nprint(\"Hai daniel...\" + \"hobi\")\n\n","offset":51,"fileType":"python3","requestStartTime":1517963840927}}
{"body": {"column":39,"line":11,"wordToComplete":"could be run to do this all at once.\"\"\"","code":"\nimport json\nimport sys\n\n\"\"\"My approach for this challenge was to create an index which would retrieve doc_id's quickly based\n   on user queries. The docs would be stored in an array indexed in the order they were placed in the\n   array. The index is a dictionary that looks similar to the json structure of the queries except that\n   the values of each item are mapped to a list of doc_id's with that value. To modify, delete and\n   retrieve items from the index based on the json data, DFS is used extensively. When an item is deleted,\n   its entry in the docs dictionary points to null rather than actually deleting the entry since that\n   would throw off the index for all other docs. To re index a large data set in practice, a hadoop job\n   could be run to do this all at once.\"\"\"\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index. There is a lot of repeated DFS code.\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index. Returns a set of all docs touched.\"\"\"\n    def crawl(self, path):\n        index_node = self.index\n        for key in path:\n            index_node = index_node[key]\n        index_keys = []\n        docs_touched = set()\n        for key in index_node.keys():\n            index_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, index_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n                \n            # if obj is still a dictionary, recurse\n            nodes = index_node\n            for key in path:\n                nodes = nodes[key]\n            nodes = nodes[curr_key]\n            if isinstance(nodes, dict):\n                keys = []\n                for key in nodes.keys():\n                    keys.append(key)\n                stack.append([path + [curr_key], keys])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in nodes:\n                    docs_touched.add(node)\n        return docs_touched\n\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            if len(current_keys) == 0:\n                set_list.append(self.crawl(path))\n                stack.pop()\n                continue\n               \n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict) or isinstance:\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n  \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":784,"fileType":"python3","requestStartTime":1517961329228}}
{"body": {"column":30,"line":28,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE... DUH\n    if root.value == val:\n        return 1\n    if root.value > val:\n        return isPresent(root.)\n    else:\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":790,"fileType":"python3","requestStartTime":1517961337762}}
{"body": {"column":30,"line":30,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE... DUH\n    if root.value == val:\n        return 1\n    if root.value > val:\n        return isPresent(root.left, val)\n    else:\n        return isPresent(root.)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":841,"fileType":"python3","requestStartTime":1517961352138}}
{"body": {"column":18,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    print(\"{} {}\".)\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":69,"fileType":"python3","requestStartTime":1517961357931}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # OH WAIT THIS IS A BINARY SEARCH TREE... DUH\n    if root.\n    if root.value == val:\n        return 1\n    if root.value > val:\n        return isPresent(root.left, val)\n    else:\n        return isPresent(root.right, val)\n\n_a = None\n_a_size =int(input())\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = int(input())\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\nq = int(input())\ni = 0\n\nwhile i < q:\n    _b = int(input())\n    _result = isPresent (_a , _b );\n    print(_result)\n    i += 1\n","offset":704,"fileType":"python3","requestStartTime":1517961411532}}
{"body": {"column":27,"line":1,"wordToComplete":"","code":"\nn, m = int(input()), input.\nprint(all([int(i) > 0 for i in m]) and any([j == j[::-1]] for i in m))\n\n\n\n","offset":29,"fileType":"python3","requestStartTime":1517961417520}}
{"body": {"column":29,"line":1,"wordToComplete":"","code":"\nn, m = int(input()), input().\nprint(all([int(i) > 0 for i in m]) and any([j == j[::-1]] for i in m))\n\n\n\n","offset":31,"fileType":"python3","requestStartTime":1517961420205}}
{"body": {"column":37,"line":1,"wordToComplete":"","code":"\nn, m = int(input()), input().strip().\nprint(all([int(i) > 0 for i in m]) and any([j == j[::-1]] for i in m))\n\n\n\n","offset":39,"fileType":"python3","requestStartTime":1517961421951}}
{"body": {"column":30,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        print(\"node - \", node.)\n        return node.access_list\n    \n    for child_id in node.children:\n        lst.extend(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":743,"fileType":"python3","requestStartTime":1517961468905}}
{"body": {"column":14,"line":22,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        firstDate, utc, bl = line.strip().partition(\"Z\")\n        startDate = dt.datetime.strptime(firstDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 1:\n        secondDate, utc, bl = line.strip().partition(\"Z\")\n        endDate = dt.datetime.strptime(secondDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 2:\n        logCount = int(line)\n        count += 1\n        continue\n    elif count == 3:\n        timeStamp, sep, message = line.strip().partition(\"\\t\")\n        paser.\n        if startDate <= timeStamp < endDate:\n            timeStamp = dt.datetime.strftime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n            newTime = timeStamp + utc\n            logMessage = newTime + \"\\t\" + message\n            print(logMessage.strip())\n\n            \n\n","offset":657,"fileType":"python3","requestStartTime":1517961474094}}
{"body": {"column":15,"line":22,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        firstDate, utc, bl = line.strip().partition(\"Z\")\n        startDate = dt.datetime.strptime(firstDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 1:\n        secondDate, utc, bl = line.strip().partition(\"Z\")\n        endDate = dt.datetime.strptime(secondDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 2:\n        logCount = int(line)\n        count += 1\n        continue\n    elif count == 3:\n        timeStamp, sep, message = line.strip().partition(\"\\t\")\n        parser.\n        if startDate <= timeStamp < endDate:\n            timeStamp = dt.datetime.strftime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n            newTime = timeStamp + utc\n            logMessage = newTime + \"\\t\" + message\n            print(logMessage.strip())\n\n            \n\n","offset":658,"fileType":"python3","requestStartTime":1517961479596}}
{"body": {"column":19,"line":1,"wordToComplete":"Hai Khairul.\"","code":"\nprint(\"Hai Khairul.\")\nprint(\"apa khabar\")\n\n","offset":21,"fileType":"python3","requestStartTime":1517964028552}}
{"body": {"column":20,"line":1,"wordToComplete":"Hai Khairul..\"","code":"\nprint(\"Hai Khairul..\")\nprint(\"apa khabar\")\n\n","offset":22,"fileType":"python3","requestStartTime":1517964028855}}
{"body": {"column":21,"line":1,"wordToComplete":"Hai Khairul...\"","code":"\nprint(\"Hai Khairul...\")\nprint(\"apa khabar\")\n\n","offset":23,"fileType":"python3","requestStartTime":1517964029167}}
{"body": {"column":15,"line":22,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        firstDate, utc, bl = line.strip().partition(\"Z\")\n        startDate = dt.datetime.strptime(firstDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 1:\n        secondDate, utc, bl = line.strip().partition(\"Z\")\n        endDate = dt.datetime.strptime(secondDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 2:\n        logCount = int(line)\n        count += 1\n        continue\n    elif count == 3:\n        timeStamp, sep, message = line.strip().partition(\"\\t\")\n        parser.\n        if startDate <= timeStamp < endDate:\n            timeStamp = dt.datetime.strftime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n            newTime = timeStamp + utc\n            logMessage = newTime + \"\\t\" + message\n            print(logMessage.strip())\n\n            \n\n","offset":658,"fileType":"python3","requestStartTime":1517961488790}}
{"body": {"column":65,"line":24,"wordToComplete":"a","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        print(\"node - \", node.file_id, \", access_list - \", node.a)\n        return node.access_list\n    \n    for child_id in node.children:\n        lst.extend(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":778,"fileType":"python3","requestStartTime":1517961490514}}
{"body": {"column":51,"line":2,"wordToComplete":"","code":"\nn, m = int(input()), input().strip().split(\" \")\nprint(all([int(i) > 0 for i in m]) and any([j == j.] for j in m))\n\n\n\n","offset":101,"fileType":"python3","requestStartTime":1517961591785}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        print(\"node - \", node.file_id, \", access_list - \", node.access_list)\n        return lst.node.access_list\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n    print(\"leaf lists - \", leaf_lists)\n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":809,"fileType":"python3","requestStartTime":1517961604342}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        print(\"node - \", node.file_id, \", access_list - \", node.access_list)\n        lst.\n        return lst + node.access_list\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n    print(\"leaf lists - \", leaf_lists)\n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":802,"fileType":"python3","requestStartTime":1517961628636}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        print(\"node - \", node.file_id, \", access_list - \", node.access_list)\n        lst.append(node.)\n        return lst + node.access_list\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n    print(\"leaf lists - \", leaf_lists)\n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":814,"fileType":"python3","requestStartTime":1517961630812}}
{"body": {"column":23,"line":2,"wordToComplete":"","code":"\nnama = input()\nprint(\"Hai\" + nama + \".\")\n\n","offset":40,"fileType":"python3","requestStartTime":1517964224922}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nnama = input()\nprint(\"Hai\" + nama + \"..\")\n\n","offset":41,"fileType":"python3","requestStartTime":1517964225345}}
{"body": {"column":25,"line":2,"wordToComplete":"","code":"\nnama = input()\nprint(\"Hai\" + nama + \"...\")\n\n","offset":42,"fileType":"python3","requestStartTime":1517964225792}}
{"body": {"column":20,"line":67,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        lst.append(node.access_list)\n        return lst\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    def get_leaf_lists(node):\n        if not node.\n    \n    for root in roots:\n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    \n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":2079,"fileType":"python3","requestStartTime":1517961718433}}
{"body": {"column":26,"line":71,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        lst.append(node.access_list)\n        return lst\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.\n            \n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    \n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":2178,"fileType":"python3","requestStartTime":1517961743642}}
{"body": {"column":38,"line":71,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        lst.append(node.access_list)\n        return lst\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.)\n            \n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    \n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":2190,"fileType":"python3","requestStartTime":1517961745367}}
{"body": {"column":33,"line":72,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef get_leaf_lists(node, files):\n    lst = []\n    \n    if not node.children:\n        lst.append(node.access_list)\n        return lst\n    \n    for child_id in node.children:\n        lst.append(get_leaf_lists(files[child_id], files))\n    return lst\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = file_info[0]\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([x for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = file_info[0]\n        child_id = file_info[1]\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.access_list)\n            for child_id in node.\n            \n        # list of sets\n        leaf_lists.extend(get_leaf_lists(root, files))\n        \n    \n    intersection_lst = set.intersection(set(leaf_lists))\n    cow_lst = set([x for x in range(0, cow_num)])\n    print(cow_lst - intersection_lst)\n    \nmain()\n\n","offset":2236,"fileType":"python3","requestStartTime":1517961753612}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\n\ndef encryption(s):\n    # Complete this function\n    column = math.\n    \n\nif __name__ == \"__main__\":\n    s = input().strip()\n    result = encryption(s)\n    print(result)\n\n\n","offset":108,"fileType":"python3","requestStartTime":1517961808257}}
{"body": {"column":21,"line":2,"wordToComplete":"Hai Khairul..\"","code":"\n\nprint (\"Hai Khairul..\")\nprint (\"Khairul apa khabar?\")\n\n","offset":24,"fileType":"python3","requestStartTime":1517964382463}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nnama = input()\nprint(\"Hai \" + nama + \".\")\n\n\n","offset":41,"fileType":"python3","requestStartTime":1517964448301}}
{"body": {"column":4,"line":60,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\ndef cons(x, y):\n    return [x, y]\n\ndef car(p):\n    return p[0]\n\ndef cdr(p):\n    return p[1]\n\nnil = []\n\ndef makeBinTree(root, left, right):\n    return cons(left, cons(root, right))\n\nemptyTree = nil\n\n#!/bin/python3\n\nimport sys\n\ndef cons(x, y):\n    return [x, y]\n\ndef car(p):\n    return p[0]\n\ndef cdr(p):\n    return p[1]\n\nnil = []\n\ndef makeBinTree(root, left, right):\n    return cons(left, cons(root, right))\n\nemptyTree = nil\n# Enter your code here. Return your answer do not print it\n\ndef isEmpty(tree):\n    # Complete this function\n\ndef root(tree):\n    # Complete this function\n\ndef left(tree):\n    # Complete this function\n\ndef right(tree):\n    # Complete this function\n\ndef findMaxTreasure(tree, secret, ptotal):\n    # Complete this function\n    \nif __name__==\"__main__\":\n    n, s = input().strip().split(' ')\n    n, s = int(n), int(s)\n    nodes = [None] * (n+1)\n    nodes[0] = emptyTree\n    for i in range(n):\n        i, v, j, k = list(map(int, raw_input().strip().split(' ')))\n        nodes[i] = makeBinTree(v, nodes[j], nodes[k])\n    r = findMaxTreasure(nodes[1], s, 0)\n    print(r)\n\nif __name__==\"__main__\":\n    n, s = input().strip().split(' ')\n    n, s = int(n), int(s)\n    nodes = [None] * (n+1)\n    nodes[0] = emptyTree\n    for i in range(n):\n        i, v, j, k = list(map(int, raw_input().strip().split(' ')))\n        nodes[i] = makeBinTree(v, nodes[j], nodes[k])\n    r = findMaxTreasure(nodes[1], s, 0)\n    print(r)\n","offset":897,"fileType":"python3","requestStartTime":1517961951483}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"\nn, m = input()\narr = input().\n\n\n#lis = arr.split()\n\n","offset":31,"fileType":"python3","requestStartTime":1517962001519}}
{"body": {"column":7,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport numpy as np\n\ndef encryption(s):\n    # Complete this function\n    size = len(s)\n    column = math.ceil(size**0.5)\n    np.\n    \n\nif __name__ == \"__main__\":\n    s = input().strip()\n    result = encryption(s)\n    print(result)\n\n\n","offset":156,"fileType":"python3","requestStartTime":1517962032720}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    most = doors.count(1)\n    x = 0\n    for i in range doors:\n        if doors[i] == 1:\n            x++\n        if doors[i + 1]:\n            if doors[i + 1] == 1:\n                i += 1\n    return str(x).\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":467,"fileType":"python3","requestStartTime":1517962036254}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nnama=input()\nprint(\"Hai \" + nama + \"...\")\n\n","offset":41,"fileType":"python3","requestStartTime":1517964599622}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    most = doors.count(1)\n    x = 0\n    for i in range doors:\n        if doors[i] == 1:\n            x++\n        if doors[i + 1]:\n            if doors[i + 1] == 1:\n                i += 1\n    x = str.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":461,"fileType":"python3","requestStartTime":1517962068157}}
{"body": {"column":12,"line":1,"wordToComplete":"1.","code":"\nprint(500-1.)\n\n","offset":14,"fileType":"python3","requestStartTime":1517962081328}}
{"body": {"column":17,"line":2,"wordToComplete":"","code":"\ninjput (s)\nprint (\"Hai\",s,\".\")\n\n","offset":30,"fileType":"python3","requestStartTime":1517964638315}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ninjput (s)\nprint (\"Hai\",s,\"..\")\n\n","offset":31,"fileType":"python3","requestStartTime":1517964638683}}
{"body": {"column":19,"line":2,"wordToComplete":"","code":"\ninjput (s)\nprint (\"Hai\",s,\"...\")\n\n","offset":32,"fileType":"python3","requestStartTime":1517964639073}}
{"body": {"column":14,"line":70,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n       \n    intersection_lst = set.intersection(*leaf_lists)\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    print(\" \".cow_lst - intersection_lst)\n    \nmain()\n\n","offset":2307,"fileType":"python3","requestStartTime":1517962102062}}
{"body": {"column":17,"line":1,"wordToComplete":"","code":"\nprint(Hai Daniel.)\n\n","offset":19,"fileType":"python3","requestStartTime":1517964700001}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport urllib.request\nimport json\n\n# Complete the function below.\n\ndef  getTopicCount(topic):\n    with urllib.request.urlopen('https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page=pizza') as response:\n        html = response.read().decode('utf-8')\n    #page = requests.get('https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page=topic')\n    print(html.)\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _topic = str(input())\nexcept:\n    _topic = None\n\nres = getTopicCount(_topic)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":452,"fileType":"python3","requestStartTime":1517962269947}}
{"body": {"column":38,"line":60,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                print(\"node - \", node.)\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n       \n    intersection_lst = set.intersection(*leaf_lists)\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    print(intersection_lst)\n    print(cow_lst)\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":1968,"fileType":"python3","requestStartTime":1517962189782}}
{"body": {"column":73,"line":60,"wordToComplete":"a","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                print(\"node - \", node.file_id, \", access_list - \", node.a)\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n       \n    intersection_lst = set.intersection(*leaf_lists)\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    print(intersection_lst)\n    print(cow_lst)\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":2003,"fileType":"python3","requestStartTime":1517962200572}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nnandm = input().\nN = input().split()\nA = input().split()\nB = input().split()\n\nprint(N)\nlisN = list(map(int, N))\nprint(lisN)\n\n","offset":18,"fileType":"python3","requestStartTime":1517962305448}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.\n    start = head\n    \n    while head:\n        if head.data >= data:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":444,"fileType":"python3","requestStartTime":1517962332325}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\nnama = input()\nprint(\"Hai \"+nama+\"..\")\n\n","offset":38,"fileType":"python3","requestStartTime":1517964882952}}
{"body": {"column":26,"line":21,"wordToComplete":"Gross while true loop...","code":"\n'''\nWhat if you calculated the differences between each P and D\nThen you could iteratively check through adding up the differences, starting with the first positive one, and keep looping while you are positive\n\nPotential, we'll try it out\n'''\n\nnum = int(input())\ndifferences = []\n\nfor i in range(num):\n    nums = [int(x) for x in input().split()]\n    differences.append(nums[0] - nums[1])\n    \n# Now we have a list of differences between each P and D of each row of input\n# We can use this to test for positives and seeing if we can stay about 0 for each one\n\nstart = 0\ni = 0\n\n# Gross while true loop...\nwhile True:\n    if differences[i] > 0:\n        start = i\n    \nrunning_total = differences[i]\n\nwhile running_total > 0:\n    \n    \n    \n    \n    \n    \n    \n    \n\n","offset":605,"fileType":"python3","requestStartTime":1517962344284}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.\n    start = head\n    \n    while head:\n        if head.data >= data:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":469,"fileType":"python3","requestStartTime":1517962345549}}
{"body": {"column":122,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport urllib.request\nimport json\n\n# Complete the function below.\n\ndef  getTopicCount(topic):\n    with urllib.request.urlopen('https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page={}'.) as response:\n        html = response.read().decode('utf-8')\n    #page = requests.get('https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page=topic')\n    print(html.count(\"pizza\"))\n    print(\"Test {}\".format(topic))\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _topic = str(input())\nexcept:\n    _topic = None\n\nres = getTopicCount(_topic)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":254,"fileType":"python3","requestStartTime":1517962465750}}
{"body": {"column":13,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.\n        return new\n    start = head\n    \n    while head:\n        if head.data >= data:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":494,"fileType":"python3","requestStartTime":1517962359109}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    if (node.)\n    node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        lst_to_pass = []\n        if node.privacy_type == 0:\n            lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], lst_to_pass, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                print(\"node - \", node.file_id, \", access_list - \", node.access_list)\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n       \n    intersection_lst = set.intersection(*leaf_lists)\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    print(intersection_lst)\n    print(cow_lst)\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":382,"fileType":"python3","requestStartTime":1517962375270}}
{"body": {"column":30,"line":27,"wordToComplete":"","code":"\n'''\nWhat if you calculated the differences between each P and D\nThen you could iteratively check through adding up the differences, starting with the first positive one, and keep looping while you are positive\n\nPotential, we'll try it out\n'''\n\nnum = int(input())\ndifferences = []\n\nfor i in range(num):\n    nums = [int(x) for x in input().split()]\n    differences.append(nums[0] - nums[1])\n    \n# Now we have a list of differences between each P and D of each row of input\n# We can use this to test for positives and seeing if we can stay about 0 for each one\n\nstart = 0\ni = 0\nrunning_total = 0\n\n# Gross while true loop... \nwhile True:\n    if differences[i] > 0:\n        start = i\n        running_total = differences[i]\n        while(running_total > )\n    \nwhile running_total > 0:\n    \n    \n    \n    \n    \n    \n    \n    \n\n","offset":751,"fileType":"python3","requestStartTime":1517962377638}}
{"body": {"column":53,"line":2,"wordToComplete":"Selamat datang ke Kursus Pengatucaraan Python.\"","code":"\nprint(\"Hello semua.\")       \nprint(\"Selamat datang ke Kursus Pengatucaraan Python.\")\n\n","offset":84,"fileType":"python3","requestStartTime":1517964986201}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\nnama =input()\nprint(\"Hai\" + nama +.)\n\n","offset":37,"fileType":"python3","requestStartTime":1517964987620}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\nnama =input()\nprint(\"Hai\" + nama +..)\n\n","offset":38,"fileType":"python3","requestStartTime":1517964987828}}
{"body": {"column":23,"line":2,"wordToComplete":"","code":"\nnama =input()\nprint(\"Hai\" + nama +...)\n\n","offset":39,"fileType":"python3","requestStartTime":1517964988092}}
{"body": {"column":37,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head:\n        if head.data >= data or head.:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":594,"fileType":"python3","requestStartTime":1517962469845}}
{"body": {"column":16,"line":24,"wordToComplete":"e","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.e:\n        if head.nextdata >= data or head.next == None:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":557,"fileType":"python3","requestStartTime":1517962485229}}
{"body": {"column":22,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next,.data >= data or head.next == None:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":584,"fileType":"python3","requestStartTime":1517962489901}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":583,"fileType":"python3","requestStartTime":1517962490733}}
{"body": {"column":47,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass File:\n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    if (node.privacy_type == 0):\n        node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        #lst_to_pass = []\n        #if node.privacy_type == 0:\n        #    lst_to_pass = node.access_list\n            \n        updateAccessList(files[child_id], node., files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 0)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                print(\"node - \", node.file_id, \", access_list - \", node.access_list)\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n       \n    intersection_lst = set.intersection(*leaf_lists)\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    print(intersection_lst)\n    print(cow_lst)\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":656,"fileType":"python3","requestStartTime":1517962548755}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    nums.\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":136,"fileType":"python3","requestStartTime":1517962555775}}
{"body": {"column":28,"line":26,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.\n            new.prev = head.prev\n            head.prev = new\n            head.prev.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":646,"fileType":"python3","requestStartTime":1517962558853}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.next\n            new.prev = head\n            if head.\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":699,"fileType":"python3","requestStartTime":1517962575869}}
{"body": {"column":21,"line":29,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.next\n            new.prev = head\n            if head.prev != None:\n                temp.\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":734,"fileType":"python3","requestStartTime":1517962589389}}
{"body": {"column":21,"line":29,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.next\n            new.prev = head\n            if head.prev != None:\n                head.\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":734,"fileType":"python3","requestStartTime":1517962596301}}
{"body": {"column":26,"line":29,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.next\n            new.prev = head\n            if head.prev != None:\n                head.next.\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":739,"fileType":"python3","requestStartTime":1517962598773}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head\n    if head.data < data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.next\n            new.prev = head\n            if head.prev != None:\n                head.next.prev = new\n            head.\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":767,"fileType":"python3","requestStartTime":1517962611421}}
{"body": {"column":15,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef spicyChicken(min, max):\n    result = []\n    \n    for num in range(min, max):\n        divisible_by_3 = False\n        divisible_by_5 = False\n        output = num + \" \"\n        if num%3 == 0:\n            output = output + \"Spicy\"\n            divisible_by_3 = True\n        if num%5 == 0:\n            output = output + \"Chicken\"\n            divisible_by_5 = True\n            \n        if divisible_by_3 and divisible_by_5:\n            output = output+\"!\"\n        result.\n\n\nif __name__ == \"__main__\":\n    min = int(input())\n\n    max = int(input())\n\n    res = spicyChicken(min, max);\n    \n\n\n","offset":530,"fileType":"python3","requestStartTime":1517962631999}}
{"body": {"column":23,"line":3,"wordToComplete":"","code":"\nnama = input()\n\nprint(\"Hai\" + nama + \".\")\n\n","offset":41,"fileType":"python3","requestStartTime":1517965227216}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\nn = int(input())\nx = input().\n\n","offset":31,"fileType":"python3","requestStartTime":1517962699694}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\nn = int(input())\nx = input().split(' ')\nw = input.\n\n","offset":52,"fileType":"python3","requestStartTime":1517962707194}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\nn = int(input())\nX = input().split(' ')\nW = input.split(' ')\n\nx = []\nw =[]\n\nfor ite in X:\n    x.\n\n","offset":98,"fileType":"python3","requestStartTime":1517962749177}}
{"body": {"column":6,"line":12,"wordToComplete":"","code":"\nn = int(input())\nX = input().split(' ')\nW = input.split(' ')\n\nx = []\nw =[]\n\nfor ite in X:\n    x.append(int(ite))\n\nfor ite in W:\n    w.\n\n","offset":136,"fileType":"python3","requestStartTime":1517962774560}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef slotGame(spins):\n    for i in range(spins):\n        spins[i] = str(spins[i]).\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":153,"fileType":"python3","requestStartTime":1517962794555}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef slotGame(spins):\n    for i in range(spins):\n        spins[i] = ''.str(spins[i])\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":142,"fileType":"python3","requestStartTime":1517962801584}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head = new\n    if head.data > data:\n        new.next = head\n        head.prev = new\n        return new\n    start = head\n    while head.next:\n        if head.next.data >= data or head.next == None:\n            new.next = head.next\n            new.prev = head\n            if head.prev != None:\n                head.next.prev = new\n            head.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":456,"fileType":"python3","requestStartTime":1517962801965}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    count = 0\n    pairs = []\n    for x in numbers:\n        for y in numbers:\n            if [x, y] not in pairs and x < y and y - x == k:\n                pairs.append([x, y])\n                \n\n                \n    return pairs.\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":327,"fileType":"python3","requestStartTime":1517962829222}}
{"body": {"column":42,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head = new\n    if head.data >= data:\n        new.next = head\n        head.prev = new\n        return new\n    curr = head\n    while curr.next:\n        if curr.data < data and curr.next. == None:\n            new.next = head.next\n            new.prev = head\n            if head.prev != None:\n                head.next.prev = new\n            head.next = new\n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":610,"fileType":"python3","requestStartTime":1517962868149}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        return head = new\n    if head.data >= data:\n        new.next = head\n        head.prev = new\n        return new\n    curr = head\n    while curr.next:\n        if curr.data < data and curr.next.data >= data:\n            new.next = curr.next\n            curr.next.prev = new\n            curr.next = new\n            new.prev = curr\n            return head\n        else:\n            curr = curr.\n                \n            \n            return start\n        head = head.next\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":808,"fileType":"python3","requestStartTime":1517962950949}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef slotGame(spins):\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0]), -1):\n        data = []\n        for i in range(len(spins)):\n            data.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":299,"fileType":"python3","requestStartTime":1517963006000}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef slotGame(spins):\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0]), -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        data.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":337,"fileType":"python3","requestStartTime":1517963035825}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef slotGame(spins):\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0]), -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        count += data.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":346,"fileType":"python3","requestStartTime":1517963046929}}
{"body": {"column":82,"line":28,"wordToComplete":"","code":"\nclass File:\n    SHARED = 0\n    CONFIDENTIAL = 1\n    \n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    if (node.privacy_type == 0):\n        node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        updateAccessList(files[child_id], node.access_list, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), 1)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n    \n    # take intersection of all of your children's access lists\n    intersection_lst = set.intersection(*leaf_lists)\n    \n    # get the list of all the cows\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    # print the set difference of all the cows, and the cows that appear in every leaf access list\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":872,"fileType":"python3","requestStartTime":1517963061287}}
{"body": {"column":82,"line":34,"wordToComplete":"","code":"\nclass File:\n    SHARED = 0\n    CONFIDENTIAL = 1\n    \n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    if (node.privacy_type == 0):\n        node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        updateAccessList(files[child_id], node.access_list, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.SHARED)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n    \n    # take intersection of all of your children's access lists\n    intersection_lst = set.intersection(*leaf_lists)\n    \n    # get the list of all the cows\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    # print the set difference of all the cows, and the cows that appear in every leaf access list\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":1137,"fileType":"python3","requestStartTime":1517963071116}}
{"body": {"column":34,"line":13,"wordToComplete":"","code":"\nclass File:\n    SHARED = 0\n    CONFIDENTIAL = 1\n    \n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    if (node.privacy_type == FILE.):\n        node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        updateAccessList(files[child_id], node.access_list, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.SHARED)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.CONFIDENTIAL)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n    \n    # take intersection of all of your children's access lists\n    intersection_lst = set.intersection(*leaf_lists)\n    \n    # get the list of all the cows\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    # print the set difference of all the cows, and the cows that appear in every leaf access list\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":374,"fileType":"python3","requestStartTime":1517963092329}}
{"body": {"column":34,"line":13,"wordToComplete":"","code":"\nclass File:\n    SHARED = 0\n    CONFIDENTIAL = 1\n    \n    def __init__(self, file_id, access_list, privacy_type):\n        self.file_id = file_id\n        self.access_list = access_list\n        self.parent = None\n        self.children = []\n        self.privacy_type = privacy_type\n        \ndef updateAccessList(node, prevAccessList, files):\n    if (node.privacy_type == File.):\n        node.access_list.update(prevAccessList)\n    \n    for child_id in node.children:\n        updateAccessList(files[child_id], node.access_list, files)\n    \ndef main():\n    files = {}\n    cow_num = int(input())\n    M, N = input().strip().split(' ')\n    \n    for x in range(0, int(M)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for shared folders -> 0\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.SHARED)\n        \n    for x in range(0, int(N)):\n        file_info = input().strip().split(' ')\n        file_id = int(file_info[0])\n        #privacy type for confidential folders -> 1\n        files[file_id] = File(file_id, set([int(x) for x in file_info[2:]]), File.CONFIDENTIAL)\n        \n    G = input()\n    \n    for x in range(0, int(G)):\n        file_info = input().strip().split(' ')\n        parent_id = int(file_info[0])\n        child_id = int(file_info[1])\n        \n        files[parent_id].children.append(child_id)\n        files[child_id].parent = parent_id\n        \n    # for each tree root, update all the trees to have the correct access lists\n    roots = [x for x in files.values() if not x.parent]\n    for root in roots:\n        updateAccessList(root, [], files)\n        \n    # get all the access lists of the leaf nodes\n    leaf_lists = []\n    \n    for root in roots:\n        leaf_list = []\n        \n        def get_leaf_lists(node):\n            if not node.children:\n                leaf_list.append(node.access_list)\n            for child_id in node.children:\n                get_leaf_lists(files[child_id])\n        # populate leaf_list with sets\n        get_leaf_lists(root)\n        leaf_lists.extend(leaf_list)\n    \n    # take intersection of all of your children's access lists\n    intersection_lst = set.intersection(*leaf_lists)\n    \n    # get the list of all the cows\n    cow_lst = set([x for x in range(0, cow_num)])\n    \n    # print the set difference of all the cows, and the cows that appear in every leaf access list\n    print(\" \".join(map(str, cow_lst - intersection_lst)))\n    \nmain()\n\n","offset":374,"fileType":"python3","requestStartTime":1517963093634}}
{"body": {"column":9,"line":34,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        head = new\n        return head\n    if head.data >= data:\n        new.next = head\n        head.prev = new\n        return new\n    curr = head\n    while curr.next:\n        if curr.data < data and curr.next.data >= data:\n            new.next = curr.next\n            curr.next.prev = new\n            curr.next = new\n            new.prev = curr\n            return head\n        curr = curr.next\n        \n    curr.\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":826,"fileType":"python3","requestStartTime":1517963113134}}
{"body": {"column":8,"line":35,"wordToComplete":"","code":"\n\"\"\"\n Insert a node into a sorted doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef SortedInsert(head, data):\n    new = Node(data)\n    if head == None:\n        head = new\n        return head\n    if head.data >= data:\n        new.next = head\n        head.prev = new\n        return new\n    curr = head\n    while curr.next:\n        if curr.data < data and curr.next.data >= data:\n            new.next = curr.next\n            curr.next.prev = new\n            curr.next = new\n            new.prev = curr\n            return head\n        curr = curr.next\n        \n    curr.next = new\n    new.\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":845,"fileType":"python3","requestStartTime":1517963119406}}
{"body": {"column":51,"line":9,"wordToComplete":"comments transferred from js default lang lol.","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    #comments transferred from js default lang lol.\n    most = doors.count(1)\n    x = 0\n    i = 0\n    while i < len(doors):\n        if doors[i] == 1:\n            x += 1\n            i += 1\n        i += 1\n    x = str.join('', (str(x), str(most)))\n    return (x)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":314,"fileType":"python3","requestStartTime":1517963160521}}
{"body": {"column":44,"line":7,"wordToComplete":"Let's write some explanatory comments.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef slotGame(spins):\n    # Let's write some explanatory comments.\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0])-1, -1, -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        count += max(data)\n        \n    return count\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":105,"fileType":"python3","requestStartTime":1517963206287}}
{"body": {"column":45,"line":7,"wordToComplete":"Let's write some explanatory comments..","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef slotGame(spins):\n    # Let's write some explanatory comments..\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0])-1, -1, -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        count += max(data)\n        \n    return count\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":106,"fileType":"python3","requestStartTime":1517963206407}}
{"body": {"column":46,"line":7,"wordToComplete":"Let's write some explanatory comments...","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef slotGame(spins):\n    # Let's write some explanatory comments...\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0])-1, -1, -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        count += max(data)\n        \n    return count\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":107,"fileType":"python3","requestStartTime":1517963206551}}
{"body": {"column":58,"line":7,"wordToComplete":"For each spin, sort from lowest to highest result e.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef slotGame(spins):\n    # For each spin, sort from lowest to highest result e.\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0])-1, -1, -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        count += max(data)\n        \n    return count\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":119,"fileType":"python3","requestStartTime":1517963229056}}
{"body": {"column":60,"line":7,"wordToComplete":"For each spin, sort from lowest to highest result e.g.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\ndef slotGame(spins):\n    # For each spin, sort from lowest to highest result e.g.\n    for i in range(len(spins)):\n        spins[i] = ''.join(sorted(str(spins[i])))\n    count = 0\n    for i in range(len(spins[0])-1, -1, -1):\n        data = []\n        for j in range(len(spins)):\n            data.append(int(spins[j][i]))\n        count += max(data)\n        \n    return count\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    spins_cnt = 0\n    spins_cnt = int(input())\n    spins_i = 0\n    spins = []\n    while spins_i < spins_cnt:\n        try:\n            spins_item = str(input())\n        except:\n            spins_item = None\n        spins.append(spins_item)\n        spins_i += 1\n\n\n    res = slotGame(spins);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":121,"fileType":"python3","requestStartTime":1517963229216}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    prev = head\n    start = head.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":410,"fileType":"python3","requestStartTime":1517963289078}}
{"body": {"column":18,"line":1,"wordToComplete":"","code":"\nn, q, k = input().split('')\n\n","offset":20,"fileType":"python3","requestStartTime":1517963347437}}
{"body": {"column":14,"line":1,"wordToComplete":"","code":"\nn = int(input.)\n\n","offset":16,"fileType":"python3","requestStartTime":1517963355684}}
{"body": {"column":16,"line":1,"wordToComplete":"0.","code":"\nn = int(input(0.))\n\n","offset":18,"fileType":"python3","requestStartTime":1517963365475}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nn = int(input().)\n\n","offset":18,"fileType":"python3","requestStartTime":1517963366947}}
{"body": {"column":42,"line":8,"wordToComplete":"Let's try to find a way to improve this.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this.\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":114,"fileType":"python3","requestStartTime":1517963451368}}
{"body": {"column":43,"line":8,"wordToComplete":"Let's try to find a way to improve this..","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this..\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":115,"fileType":"python3","requestStartTime":1517963451504}}
{"body": {"column":44,"line":8,"wordToComplete":"Let's try to find a way to improve this...","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this...\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":116,"fileType":"python3","requestStartTime":1517963451641}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        startDate = parser.parser(line)\n        startDate = dt.\n        print(startDate)\n\n            \n\n","offset":183,"fileType":"python3","requestStartTime":1517963581204}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        startDate = parser.parser(line)\n        startDate = startDate.\n        print(startDate)\n\n            \n\n","offset":190,"fileType":"python3","requestStartTime":1517963599384}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this...\n\ndef counts(nums, maxes):\n    big_list = []\n    for num in nums:\n        big_list.\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":199,"fileType":"python3","requestStartTime":1517963612206}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    \n    unique = []\n    for x in numbers:\n        if x not in unique:\n            unique.\n                \n\n                \n    return len(pairs)\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":190,"fileType":"python3","requestStartTime":1517963656717}}
{"body": {"column":98,"line":9,"wordToComplete":"Problem is trying to remember the order of the maxes, which are not necessarily in sorted order.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this...\n# Problem is trying to remember the order of the maxes, which are not necessarily in sorted order.\n\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":215,"fileType":"python3","requestStartTime":1517963695634}}
{"body": {"column":99,"line":9,"wordToComplete":"Problem is trying to remember the order of the maxes, which are not necessarily in sorted order..","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this...\n# Problem is trying to remember the order of the maxes, which are not necessarily in sorted order..\n\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":216,"fileType":"python3","requestStartTime":1517963695762}}
{"body": {"column":100,"line":9,"wordToComplete":"Problem is trying to remember the order of the maxes, which are not necessarily in sorted order...","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Let's try to find a way to improve this...\n# Problem is trying to remember the order of the maxes, which are not necessarily in sorted order...\n\n\ndef counts(nums, maxes):\n    result = [0] * len(maxes)\n    for num in nums:\n        for i in range(len(maxes)):\n            if num <= maxes[i]:\n                result[i] += 1\n    return result\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nums_cnt = 0\n    nums_cnt = int(input())\n    nums_i = 0\n    nums = []\n    while nums_i < nums_cnt:\n        nums_item = int(input())\n        nums.append(nums_item)\n        nums_i += 1\n\n\n    maxes_cnt = 0\n    maxes_cnt = int(input())\n    maxes_i = 0\n    maxes = []\n    while maxes_i < maxes_cnt:\n        maxes_item = int(input())\n        maxes.append(maxes_item)\n        maxes_i += 1\n\n\n    res = counts(nums, maxes);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":217,"fileType":"python3","requestStartTime":1517963695897}}
{"body": {"column":26,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef parseEmail(str):\n    ret = ''\n    for i in range(2, str.)\ndef parsePhone(str):\n    print(str)\n\nwhile True:\n    try:\n        string = input()\n    except:\n        break;\n    if string[0] == 'E':\n        parseEmail(string)\n    elif string[0] == 'P':\n        parsePhone(string)\n        \n\n\n","offset":132,"fileType":"python3","requestStartTime":1517963766995}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef parseEmail(str):\n    ret = ''\n    print str.\n    for i in range(2, str.len)\ndef parsePhone(str):\n    print(str)\n\nwhile True:\n    try:\n        string = input()\n    except:\n        break;\n    if string[0] == 'E':\n        parseEmail(string)\n    elif string[0] == 'P':\n        parsePhone(string)\n        \n\n\n","offset":120,"fileType":"python3","requestStartTime":1517963784418}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\nn, q, k = map(int, input().split(' '))\n\nA = input().\n\n","offset":54,"fileType":"python3","requestStartTime":1517963818270}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if acid_name.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":74,"fileType":"python3","requestStartTime":1517963851509}}
{"body": {"column":15,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # \nm, n = input().\n\n","offset":102,"fileType":"python3","requestStartTime":1517963860554}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nn, q, k = map(int, input().split(' '))\na = map(int, input().split(''))\n\nqueries = []\nfor i in range(q):\n    queries.    \n\n","offset":118,"fileType":"python3","requestStartTime":1517963878857}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    #comments transferred from js default lang lol.\n    most = doors.count(1)\n    x = 0\n    i = 0\n    while i < len(doors):\n        if doors[i] == 1:\n            x += 1\n            i += 1\n        i += 1\n    space = ' '\n    #x = str.join('', (str(x), str(most)))\n    x = space.\n    return (x)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":539,"fileType":"python3","requestStartTime":1517963880462}}
{"body": {"column":21,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if acid_name.endswith('ic'):\n        if acid_name.\n        return 'non-metal acid'\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":111,"fileType":"python3","requestStartTime":1517963922334}}
{"body": {"column":36,"line":6,"wordToComplete":"","code":"\nn, q, k = map(int, input().split(' '))\na = map(int, input().split(' '))\n\nqueries = []\nfor i in range(q):\n    queries.append(map(int, input().)    \n    \nprint(queries)\n\n","offset":143,"fileType":"python3","requestStartTime":1517963946533}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        startDate = parser.parser(line)\n        startDate.\n\n            \n\n","offset":178,"fileType":"python3","requestStartTime":1517963973776}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        startDate = parser.parser(line)\n        print(startDate.\n\n\n            \n\n","offset":184,"fileType":"python3","requestStartTime":1517964025320}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        startDate = parser.parser(line)\n        print(startDate.)\n\n\n            \n\n","offset":184,"fileType":"python3","requestStartTime":1517964055600}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    prev = head\n    start = head.next\n    while start:\n        tmp = start.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":452,"fileType":"python3","requestStartTime":1517964083702}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    prev = head\n    start = head.next\n    while start:\n        tmp = start.next\n        prev.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":470,"fileType":"python3","requestStartTime":1517964100871}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    prev = head\n    start = head.next\n    while start:\n        tmp = start.next\n        prev.prev = start\n        start.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":497,"fileType":"python3","requestStartTime":1517964123567}}
{"body": {"column":14,"line":24,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    prev = head\n    start = head.next\n    while start:\n        tmp = start.next\n        prev.prev = start\n        start.next = prev\n        start.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":523,"fileType":"python3","requestStartTime":1517964139079}}
{"body": {"column":6,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    #comments transferred from js default lang lol.\n    most = doors.count(1)\n    x = 0\n    i = 0\n    while i < len(doors):\n        if doors[i] == 1:\n            x += 1\n            i += 1\n        i += 1\n    #x = str.join('', (str(x), str(most)))\n    #x = space.join(str(x), str(most))\n    y = []\n    #str(x) + '' + str(most)\n    y.\n    return (y)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":594,"fileType":"python3","requestStartTime":1517964164117}}
{"body": {"column":6,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    #var min = 0;    //if 1 counter++ and set door[i] to 0, if next one is also 1, set door [i + 1]to 0\n    #var max = 0;    //from end iter to front by counting all 1s\n    #comments transferred from js default lang lol.\n    most = doors.count(1)\n    x = 0\n    i = 0\n    while i < len(doors):\n        if doors[i] == 1:\n            x += 1\n            i += 1\n        i += 1\n    #x = str.join('', (str(x), str(most)))\n    #x = space.join(str(x), str(most))\n    y = []\n    #str(x) + '' + str(most)\n    y.append(x)\n    y.\n    return (y)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":610,"fileType":"python3","requestStartTime":1517964168637}}
{"body": {"column":9,"line":28,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    prev = head\n    start = head.next\n    while start:\n        tmp = start.next\n        prev.prev = start\n        start.next = prev\n        start.next = tmp\n        prev = start\n        start = tmp\n    \n    head.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":589,"fileType":"python3","requestStartTime":1517964170047}}
{"body": {"column":19,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    tmp = head\n    start = head\n    while tmp:\n        prev = tmp.\n        start.prev = prev\n        start.next = prev\n        start.next = tmp\n        prev = start\n        start = tmp\n    \n    head.next = None\n    return start\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":443,"fileType":"python3","requestStartTime":1517964457272}}
{"body": {"column":23,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    tmp = head\n    start = head\n    while tmp:\n        prev = tmp.prev\n        tmp.prev = tmp.\n        start.next = prev\n        start.next = tmp\n        prev = start\n        start = tmp\n    \n    head.next = None\n    return start\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":471,"fileType":"python3","requestStartTime":1517964473120}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    pass\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    pass\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().\n\n","offset":769,"fileType":"python3","requestStartTime":1517964473489}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    if head == None:\n        return\n    tmp = head\n    start = head\n    while tmp:\n        prev = tmp.prev\n        tmp.prev = tmp.next\n        tmp.next = prev\n        start = tmp\n        tmp = tmp.\n    \n    head.next = None\n    return start\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":538,"fileType":"python3","requestStartTime":1517964499601}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    arr = []\n    if l%2 == 1:\n        while(l+2<=r):\n            arr.append(l)\n            l = l+2\n    else:\n        l = l+1\n        while(l+2 <= r):\n            arr.\n            l = l+2\n    return\n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":261,"fileType":"python3","requestStartTime":1517964518222}}
{"body": {"column":11,"line":2,"wordToComplete":"","code":"\nimport re\nfrom email.\n\n","offset":23,"fileType":"python3","requestStartTime":1517964523894}}
{"body": {"column":27,"line":23,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        firstDate, utc, bl = line.strip().partition(\"Z\")\n        startDate = dt.datetime.strptime(firstDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 1:\n        secondDate, utc, bl = line.strip().partition(\"Z\")\n        endDate = dt.datetime.strptime(secondDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 2:\n        logCount = int(line)\n        count += 1\n        continue\n    elif count == 3:\n        timeStamp, sep, message = line.strip().partition(\"\\t\")\n        timeStamp = list(timeStamp)\n        zIndex = timeStamp.\n        timeStamp, utc, bl = timeStamp.strip().partition(\"Z\")\n        #timeStamp = dt.datetime.strptime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n        #if startDate <= timeStamp < endDate:\n            #timeStamp = dt.datetime.strftime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n            #newTime = timeStamp + utc\n            #logMessage = newTime + \"\\t\" + message\n            #print(logMessage.strip())\n\n\n            \n\n","offset":706,"fileType":"python3","requestStartTime":1517964550718}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\nimport re\nfrom email.utils import parseaddr, formataddr\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    t = parseaddr(s)\n    if re.\n    \n\n","offset":142,"fileType":"python3","requestStartTime":1517964643929}}
{"body": {"column":11,"line":25,"wordToComplete":"","code":"\nimport sys\nimport datetime as dt\nimport dateutil.parser as parser\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        firstDate, utc, bl = line.strip().partition(\"Z\")\n        startDate = dt.datetime.strptime(firstDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 1:\n        secondDate, utc, bl = line.strip().partition(\"Z\")\n        endDate = dt.datetime.strptime(secondDate, \"%Y-%m-%dT%H:%M:%S\")\n        count += 1\n        continue\n    elif count == 2:\n        logCount = int(line)\n        count += 1\n        continue\n    elif count == 3:\n        timeStamp, sep, message = line.strip().partition(\"\\t\")\n        timeStamp = list(timeStamp)\n        zIndex = timeStamp.index('Z')\n        timeStamp = timeStamp[:zIndex]\n        ''.\n        #timeStamp, utc, bl = timeStamp.strip().partition(\"Z\")\n        timeStamp = dt.datetime.strptime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n        if startDate <= timeStamp < endDate:\n            timeStamp = dt.datetime.strftime(timeStamp, \"%Y-%m-%dT%H:%M:%S\")\n            newTime = timeStamp + utc\n            logMessage = newTime + \"\\t\" + message\n            print(logMessage.strip())\n\n\n            \n\n","offset":767,"fileType":"python3","requestStartTime":1517964644507}}
{"body": {"column":21,"line":5,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef fn(pos, neg, zer.)\n\ndef plusMinus(arr):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":51,"fileType":"python3","requestStartTime":1517964652757}}
{"body": {"column":17,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\n    \nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    parent = None\n    children = []\n    direct_access = []\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    id = input().\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    pass\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":603,"fileType":"python3","requestStartTime":1517964658702}}
{"body": {"column":28,"line":21,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\n    \nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    parent = None\n    children = []\n    direct_access = []\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    id = input()\n    explicit_access = input.\n    \n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    pass\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":631,"fileType":"python3","requestStartTime":1517964718691}}
{"body": {"column":44,"line":8,"wordToComplete":"r'^<[a-zA-Z]{1}[a-zA-Z0-9_-.])","code":"\nimport re\nfrom email.utils import parseaddr, formataddr\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    t = parseaddr(s)\n    if re.match(r'^<[a-zA-Z]{1}[a-zA-Z0-9_-.])\n    \n\n","offset":176,"fileType":"python3","requestStartTime":1517964762364}}
{"body": {"column":30,"line":21,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\n    \nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    parent = None\n    children = []\n    direct_access = []\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    id = input()\n    explicit_access = input().\n    \n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    pass\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":633,"fileType":"python3","requestStartTime":1517964796688}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport functools\n\ndef fn(state, i):\n    if i==0:\n        return state[0], state[1], state[2]+1\n    elif i<0:\n        return state[0], state[1]+1, state[2]\n    return state[0]+1, state[1], state[2]\n\ndef plusMinus(arr):\n    s0 = (0,0,0)\n    sN = functools.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":283,"fileType":"python3","requestStartTime":1517964816889}}
{"body": {"column":28,"line":30,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport json\n\ndef check_entry(query, entry):\n    if type(query) is not dict:\n        if query == entry:\n            return True\n        return False\n    for key in query:\n        if key not in entry:\n            return False\n        if not check_entry(query[key], entry[key]):\n            return False\n    return True\n           \nstorage = []\nfor line in sys.stdin:\n    command = line.split(' ')[0]\n    query = line[len(command)+1:]\n    if command == \"add\":\n        storage.append(query)\n    else:\n        query = json.loads(query)\n        if \"type\" in query and query[\"type\"] == \"list\":\n            for item in storage:\n                item_json = json.loads(item)\n                if item_json[\"list\"] and query[\"list\"] in item_json[\"list\"]:\n                    if command == \"get\":\n                        sys.(item)\n                    else:\n                        storage.remove(item)\n        else:\n            for item in storage:                \n                if check_entry(query, json.loads(item)):\n                    if command == \"get\":\n                        print(item)\n                    else:\n                        storage.remove(item)\n                        \n\n","offset":894,"fileType":"python3","requestStartTime":1517964816018}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\ndef print_rangoli(size):\n    # your code goes here\n    import string\n    alpha = string.\n    \nif __name__ == '__main__':\n    n = int(input())\n    print_rangoli(n)\n","offset":90,"fileType":"python3","requestStartTime":1517964981218}}
{"body": {"column":61,"line":8,"wordToComplete":"r'^<[a-zA-Z]{1}[a-zA-Z0-9_-.]*@{1}[a-zA-Z]+\\.)","code":"\nimport re\nfrom email.utils import parseaddr, formataddr\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    t = parseaddr(s)\n    if re.match(r'^<[a-zA-Z]{1}[a-zA-Z0-9_-.]*@{1}[a-zA-Z]+\\.)\n    \n\n","offset":193,"fileType":"python3","requestStartTime":1517964854601}}
{"body": {"column":10,"line":1,"wordToComplete":"","code":"\nn = input.\n\n","offset":12,"fileType":"python3","requestStartTime":1517965051092}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport functools\n\ndef fn(state, i):\n    if i==0:\n        return state[0], state[1], state[2]+1\n    elif i<0:\n        return state[0], state[1]+1, state[2]\n    return state[0]+1, state[1], state[2]\n\ndef plusMinus(arr):\n    n = len(arr)\n    s0 = (0,0,0)\n    sN = functools.reduce(fn, arr, s0)\n    print('{0}'.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":336,"fileType":"python3","requestStartTime":1517965059738}}
{"body": {"column":59,"line":19,"wordToComplete":"","code":"\nimport math\nimport itertools as it\nif __name__ == '__main__':\n    T=int(input())\n    for i in range(T):\n        N=int(input())\n        temp = input().strip().split(' ')\n        c=[]\n        for j in temp:\n            c.append(int(j))\n        c.sort()\n        if [k for k in range(max(c))]!= c[:max(c)]:\n            print(0)\n            continue\n        sc = set(c)\n        lc = len(c)\n        lsc = len(sc)\n        numDuplicates = lc-lsc\n        print(int(numDuplicates*2*math.factorial(lc)/(math.math.factorial(lc-lsc)))    #number of valid combinations\n\n","offset":499,"fileType":"python3","requestStartTime":1517965090651}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\nphoneBook = {}\nn = input()\nfor i in range(n)\n    k,v = input.\n    \n\n","offset":63,"fileType":"python3","requestStartTime":1517965156244}}
{"body": {"column":15,"line":17,"wordToComplete":"0:.} {1} {2}'","code":"\n#!/bin/python3\n\nimport sys\nimport functools\n\ndef fn(state, i):\n    if i==0:\n        return state[0], state[1], state[2]+1\n    elif i<0:\n        return state[0], state[1]+1, state[2]\n    return state[0]+1, state[1], state[2]\n\ndef plusMinus(arr):\n    n = len(arr)\n    s0 = (0,0,0)\n    sN = functools.reduce(fn, arr, s0)\n    print('{0:.} {1} {2}'.format(sN[0]/n, sN[1]/n, sN[2]/n))\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":335,"fileType":"python3","requestStartTime":1517965242818}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    parent = None\n    children = []\n    direct_access = []\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder()\n    for cow in explicit_access:\n        folders[id].\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    pass\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":847,"fileType":"python3","requestStartTime":1517965259501}}
{"body": {"column":29,"line":28,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    parent = None\n    children = []\n    direct_access = []\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder()\n    for cow in explicit_access:\n        folders[id].children.\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    pass\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":856,"fileType":"python3","requestStartTime":1517965262130}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\nimport sys\n\ndef check(n,vals):\n    d1 = {}\n    d2 = {}\n    i = 1\n    for v in vals:\n        d1[i] = v\n        d2[v] = i\n        i+=1\n\n    # print(d1)\n    for i in range(1,n+1):\n        print(d2[i])\n\n\nn = int(input().)\nvals = [5,4,3,2,1]\ncheck(n, vals)\n\n\n","offset":218,"fileType":"python3","requestStartTime":1517965353158}}
{"body": {"column":29,"line":18,"wordToComplete":"","code":"\nimport sys\n\ndef check(n,vals):\n    d1 = {}\n    d2 = {}\n    i = 1\n    for v in vals:\n        d1[i] = v\n        d2[v] = i\n        i+=1\n\n    # print(d1)\n    for i in range(1,n+1):\n        print(d2[i])\n\n\nn = int(input().strip())\nvals = list(map(int, input().))\ncheck(n, vals)\n\n\n","offset":256,"fileType":"python3","requestStartTime":1517965366393}}
{"body": {"column":37,"line":18,"wordToComplete":"","code":"\nimport sys\n\ndef check(n,vals):\n    d1 = {}\n    d2 = {}\n    i = 1\n    for v in vals:\n        d1[i] = v\n        d2[v] = i\n        i+=1\n\n    # print(d1)\n    for i in range(1,n+1):\n        print(d2[i])\n\n\nn = int(input().strip())\nvals = list(map(int, input().strip().))\ncheck(n, vals)\n\n\n","offset":264,"fileType":"python3","requestStartTime":1517965367696}}
{"body": {"column":16,"line":1,"wordToComplete":"0.","code":"\nn = int(input(0.))\n\n","offset":18,"fileType":"python3","requestStartTime":1517965426051}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nn = int(input().)\n\n","offset":18,"fileType":"python3","requestStartTime":1517965426942}}
{"body": {"column":34,"line":5,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    magazine_hash = {}\n    ransom_hash = {}\n    for r in ransom:\n        ransom_hash = ransom_hash.\n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":136,"fileType":"python3","requestStartTime":1517965435615}}
{"body": {"column":45,"line":8,"wordToComplete":"r'<[a-zA-Z]{1}[a-zA-Z0-9_.\\-.]*@[a-zA-Z]+\\.[a-zA-Z]{1,3}>'","code":"\nimport re\nfrom email.utils import parseaddr, formataddr\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    t = parseaddr(s)\n    if re.match(r'<[a-zA-Z]{1}[a-zA-Z0-9_.\\-.]*@[a-zA-Z]+\\.[a-zA-Z]{1,3}>', t[1]):\n        print(formataddr(t))\n    else:\n        continue\n    \n\n","offset":177,"fileType":"python3","requestStartTime":1517965470879}}
{"body": {"column":46,"line":8,"wordToComplete":"g","code":"\ndef ransom_note(magazine, ransom):\n    magazine_hash = {}\n    ransom_hash = {}\n    for r in ransom:\n        ransom_hash[token] = ransom_hash.get(token, 0) + 1\n        \n    for m in magazine:\n        magazine_hash[token] = magazine_hash.g\n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":239,"fileType":"python3","requestStartTime":1517965501354}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        children = []\n        is_confidential =\n        direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":446,"fileType":"python3","requestStartTime":1517965504104}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        is_confidential =\n        direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":473,"fileType":"python3","requestStartTime":1517965506247}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential =\n        direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":500,"fileType":"python3","requestStartTime":1517965507706}}
{"body": {"column":13,"line":18,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential =\n        self.direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n\n\n","offset":531,"fileType":"python3","requestStartTime":1517965509974}}
{"body": {"column":15,"line":48,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[u].\n\n\n","offset":1451,"fileType":"python3","requestStartTime":1517965546712}}
{"body": {"column":15,"line":49,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].\n\n\n","offset":1477,"fileType":"python3","requestStartTime":1517965572807}}
{"body": {"column":24,"line":49,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n                       # n = number of confidential folders\nprint(\"number of cows:\", q)\nprint(\"number of shared folders:\", m)\nprint(\"number of confidential folders:\", n)\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n     \n\n\n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.\n\n\n","offset":1486,"fileType":"python3","requestStartTime":1517965574162}}
{"body": {"column":35,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef camelcase(s):\n    number = len[i for i in s if i.]\n    # Complete this function\n\nif __name__ == \"__main__\":\n    s = input().strip()\n    result = camelcase(s)\n    print(result)\n\n\n","offset":83,"fileType":"python3","requestStartTime":1517965604925}}
{"body": {"column":96,"line":6,"wordToComplete":"I want to see test case #13 and #14 to debug! I can't even see my output or debug from them... :(","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# I want to see test case #13 and #14 to debug! I can't even see my output or debug from them... :(\n\ndef maxDifference(a):\n    print(a)\n    result = -1\n    current_min = a[0]\n    for i in range(1, len(a)):\n        if a[i] >= current_min:\n            difference = a[i] - current_min\n            if difference > result:\n                result = difference\n        else:\n            current_min = a[i]             \n    return result\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a_cnt = 0\n    a_cnt = int(input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        a_item = int(input())\n        a.append(a_item)\n        a_i += 1\n\n\n    res = maxDifference(a);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":136,"fileType":"python3","requestStartTime":1517965606745}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nn = int(input().)\n\n","offset":18,"fileType":"python3","requestStartTime":1517965707999}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    count_min = 0\n    i = 0 \n    if n == 1:\n        return door.\n    while i < len(doors)-1:\n        \n        if doors[i] == 1:\n            count_min += 1\n            if doors[i+1] == 1:\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    \n    return count_min, doors.count(1)\n        \n            \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":158,"fileType":"python3","requestStartTime":1517965750168}}
{"body": {"column":35,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    count_min = 0\n    i = 0 \n    if n == 1:\n        return door.count(1),doors.\n    while i < len(doors)-1:\n        \n        if doors[i] == 1:\n            count_min += 1\n            if doors[i+1] == 1:\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    \n    return count_min, doors.count(1)\n        \n            \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517965758242}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nn = int(input().)\n\n","offset":18,"fileType":"python3","requestStartTime":1517965801069}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nn = int(input())\nfor _ in range(n):\n    print(bool(re.))\n\n","offset":56,"fileType":"python3","requestStartTime":1517965842231}}
{"body": {"column":31,"line":3,"wordToComplete":"r'[+-\\.])))","code":"\nn = int(input())\nfor _ in range(n):\n    print(bool(re.match(r'[+-\\.])))\n\n","offset":69,"fileType":"python3","requestStartTime":1517965869396}}
{"body": {"column":40,"line":3,"wordToComplete":"r'[+-\\.]{1}\\d+\\.)))","code":"\nn = int(input())\nfor _ in range(n):\n    print(bool(re.match(r'[+-\\.]{1}\\d+\\.)))\n\n","offset":78,"fileType":"python3","requestStartTime":1517965913314}}
{"body": {"column":21,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport collections\n\ndef missingNumbers(arr, brr):\n    ac = collections.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":100,"fileType":"python3","requestStartTime":1517965952858}}
{"body": {"column":29,"line":50,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\n    \nfor cow in range(cows):\n    cow = str(cow)\n    \n    for folder in folders:\n        if cow not in folder.\n\n","offset":1437,"fileType":"python3","requestStartTime":1517965973177}}
{"body": {"column":32,"line":51,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.direct_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].children.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\n    \nfor cow in range(cows):\n    cow = str(cow)\n    \n    for folder in folders:\n        if cow not in folder.explicit_access:\n            cows_without_access.\n\n","offset":1486,"fileType":"python3","requestStartTime":1517965986948}}
{"body": {"column":15,"line":15,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    loop = True\n    val = head.\n    while loop:\n        \n    \n\n\n","offset":332,"fileType":"python3","requestStartTime":1517965999905}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport collections\n\ndef missingNumbers(arr, brr):\n    ac = collections.Counter(arr)\n    bc = collections.Counter(brr)\n    diff = ac.\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":161,"fileType":"python3","requestStartTime":1517966005936}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    loop = True\n    node_current = head.data\n    node_next = head.\n    while loop:\n        \n    \n\n\n","offset":367,"fileType":"python3","requestStartTime":1517966094593}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    loop = True\n    node_current = head.data\n    node_next = head.next.\n    while loop:\n        \n    \n\n\n","offset":372,"fileType":"python3","requestStartTime":1517966096569}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node_current = head.data\n    node_next = head.next.data\n    if node_next >\n    while loop:\n        \n    \n\n\n","offset":379,"fileType":"python3","requestStartTime":1517966109307}}
{"body": {"column":33,"line":16,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node_current = head\n    node_next = head.next\n    if node_next. > node_current.:\n        loop = True\n        nod\n    while loop:\n        \n    \n\n\n","offset":384,"fileType":"python3","requestStartTime":1517966140139}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node_current = head\n    node_next = head.next\n    if node_next.data > node_current.data:\n        loop = True\n        node_current = head.\n    while loop:\n        \n    \n\n\n","offset":442,"fileType":"python3","requestStartTime":1517966146271}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node_current = head\n    node_next = head.next\n    if node_next.data > node_current.data:\n        loop = True\n        node_current = head.next\n    while loop:\n        if node_current.\n    \n\n\n","offset":487,"fileType":"python3","requestStartTime":1517966158094}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node = head\n    if node.data > node..data:\n        loop = True\n        node_current = head.next\n    while loop:\n        if node.data < node\n    \n\n\n","offset":341,"fileType":"python3","requestStartTime":1517966174957}}
{"body": {"column":85,"line":50,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\n    \nfor cow in range(int(q)):\n    cow = str(cow)\n    \n    for folder in folders:\n        if cow not in folders[folder].explicit_access and cow not in folders[folder].:\n            cows_without_access.append(cow)\n\nfor cow in cows_without_access:\n    print(cow)\n\n","offset":1504,"fileType":"python3","requestStartTime":1517966183209}}
{"body": {"column":28,"line":19,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node = head\n    if node.data > node.next.data:\n        loop = True\n        node = head.next\n    while loop:\n        if node.data < node.\n    \n\n\n","offset":441,"fileType":"python3","requestStartTime":1517966187211}}
{"body": {"column":33,"line":19,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node = head\n    if node.data > node.next.data:\n        loop = True\n        node = head.next\n    while loop:\n        if node.data < node.next.\n    \n\n\n","offset":446,"fileType":"python3","requestStartTime":1517966188390}}
{"body": {"column":101,"line":50,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\n    \nfor cow in range(int(q)):\n    cow = str(cow)\n    \n    for folder in folders:\n        if cow not in folders[folder].explicit_access and cow not in folders[folders[folder].parent].:\n            cows_without_access.append(cow)\n\nfor cow in cows_without_access:\n    print(cow)\n\n","offset":1520,"fileType":"python3","requestStartTime":1517966196027}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node = head\n    if node.data > node.next.data:\n        loop = True\n        node = head.next\n    while loop:\n        if node.data < node.next.data:\n            node = node.\n    \n\n\n","offset":476,"fileType":"python3","requestStartTime":1517966197485}}
{"body": {"column":18,"line":21,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    node = head\n    if node.data > node.next.data:\n        loop = True\n        node = head.next\n    while loop:\n        if node.data < node.next.data:\n            node = node.next\n        elif node. is None:\n            \n        else:\n            return False\n    \n\n\n","offset":499,"fileType":"python3","requestStartTime":1517966222602}}
{"body": {"column":15,"line":15,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    print(head)\n    print(head.)\n    \n\n\n","offset":332,"fileType":"python3","requestStartTime":1517966254888}}
{"body": {"column":23,"line":46,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].\n\n","offset":1383,"fileType":"python3","requestStartTime":1517966255878}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    print(head)\n    print(head.data)\n    print(head.)\n    \n\n\n","offset":353,"fileType":"python3","requestStartTime":1517966257837}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    print(head)\n    print(head.data)\n    print(head.next)\n    print(head.)\n    \n\n\n","offset":374,"fileType":"python3","requestStartTime":1517966262585}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    print(head)\n    print(head.data)\n    print(head.next)\n    print(head.next.)\n    \n\n\n","offset":379,"fileType":"python3","requestStartTime":1517966263626}}
{"body": {"column":11,"line":49,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent not None:\n        root = folders[folder]\n\nprint(root.)\n\n","offset":1443,"fileType":"python3","requestStartTime":1517966272040}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.\nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":148,"fileType":"python3","requestStartTime":1517966320244}}
{"body": {"column":30,"line":187,"wordToComplete":"","code":"\nimport json\nimport sys\n\n\"\"\"My approach for this challenge was to create an index which would retrieve doc_id's quickly based\n   on user queries. The docs would be stored in an array indexed in the order they were placed in the\n   array. The index is a dictionary that looks similar to the json structure of the queries except that\n   the values of each item are mapped to a list of doc_id's with that value. To modify, delete and\n   retrieve items from the index based on the json data, DFS is used extensively. When an item is deleted,\n   its entry in the docs dictionary points to null rather than actually deleting the entry since that\n   would throw off the index for all other docs. To re index a large data set in practice, a hadoop job\n   could be run to do this all at once.\"\"\"\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index. There is a lot of repeated DFS code.\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index. Returns a set of all docs touched.\"\"\"\n    def crawl(self, path):\n        index_node = self.index\n        for key in path:\n            index_node = index_node[key]\n        index_keys = []\n        docs_touched = set()\n        for key in index_node.keys():\n            index_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, index_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n                \n            # if obj is still a dictionary, recurse\n            nodes = index_node\n            for key in path:\n                nodes = nodes[key]\n            nodes = nodes[curr_key]\n            if isinstance(nodes, dict):\n                keys = []\n                for key in nodes.keys():\n                    keys.append(key)\n                stack.append([path + [curr_key], keys])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in nodes:\n                    docs_touched.add(node)\n        return docs_touched\n\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        doc_keys = []\n        set_list = []\n\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            if len(current_keys) == 0:\n                set_list.append(self.crawl(path))\n                stack.pop()\n                continue\n               \n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(current_keys) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # Accumulate candidate nodes to retrieve/delete\n            else:        \n                index_node = self.index\n                for k in path:\n                    index_node = index_node[k]\n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if value in index_node[curr_key]:\n                        set_list.append(set(index_node[curr_key][value]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n  \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        if len(doc) == 0:\n            return\n        \n        doc_keys = []\n        for key in doc.keys():\n            doc_keys.append(key)\n        path = []\n        stack = list()\n        stack.append([path, doc_keys])\n\n        # The following is an recursive strategy\n        # to traversing the json dictionary.\n        while not len(stack) == 0:\n            path, current_keys = stack[-1]\n            # print(path, current_keys)\n            curr_key = current_keys[-1]\n            # either pop entire layer from stack,\n            # or just a node at that layer\n            if len(stack[-1][1]) == 1:\n                stack.pop()\n            else:\n                current_keys.pop()\n\n            # if obj is still a dictionary, recurse\n            doc_node = doc\n            for k in path:\n                doc_node = doc_node[k]\n            values = doc_node[curr_key]\n            if isinstance(values, dict):\n                keys = []\n                for _key in values.keys():\n                    keys.append(_key)\n                stack.append([path + [curr_key], keys])\n\n            # else, modify node by adding doc id\n            else:\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if isistance(value, list):\n                        stack.\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":6945,"fileType":"python3","requestStartTime":1517966324517}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head is None:\n        return True\n    if head.\n    \n\n\n","offset":354,"fileType":"python3","requestStartTime":1517966325269}}
{"body": {"column":9,"line":1,"wordToComplete":"","code":"\nprint(re.)\n\n","offset":11,"fileType":"python3","requestStartTime":1517966347192}}
{"body": {"column":21,"line":1,"wordToComplete":"r'[,\\.]))","code":"\nprint(re.split(r'[,\\.]))\n\n","offset":23,"fileType":"python3","requestStartTime":1517966360934}}
{"body": {"column":19,"line":48,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncows_without_access = []\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.)\n\n\n\n","offset":1449,"fileType":"python3","requestStartTime":1517966366441}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.\n        \n    def pop(self):\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":206,"fileType":"python3","requestStartTime":1517966394941}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.\n        \n    def pop(self):\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":211,"fileType":"python3","requestStartTime":1517966396715}}
{"body": {"column":19,"line":1,"wordToComplete":"","code":"\nprint(re.split(\",\\.\",input()))\n\n\n","offset":21,"fileType":"python3","requestStartTime":1517966440877}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        data = seld.\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":293,"fileType":"python3","requestStartTime":1517966489044}}
{"body": {"column":21,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":294,"fileType":"python3","requestStartTime":1517966502516}}
{"body": {"column":35,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.)]\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":308,"fileType":"python3","requestStartTime":1517966509669}}
{"body": {"column":17,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":336,"fileType":"python3","requestStartTime":1517966519091}}
{"body": {"column":31,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(seld.)]\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":350,"fileType":"python3","requestStartTime":1517966527728}}
{"body": {"column":31,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.)]\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":350,"fileType":"python3","requestStartTime":1517966531048}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":381,"fileType":"python3","requestStartTime":1517966550675}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.)\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":416,"fileType":"python3","requestStartTime":1517966580378}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nn = int(input().)\n\n","offset":18,"fileType":"python3","requestStartTime":1517966606580}}
{"body": {"column":23,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print self.\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":415,"fileType":"python3","requestStartTime":1517966641015}}
{"body": {"column":37,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print self.data[len(slef.)]\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":429,"fileType":"python3","requestStartTime":1517966648895}}
{"body": {"column":5,"line":52,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \n\nroot.\n\n\n","offset":1480,"fileType":"python3","requestStartTime":1517966688695}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.))\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":215,"fileType":"python3","requestStartTime":1517966712102}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef migratoryBirds(n, ar):\n    print(ar.counter(i) for i in ar])\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = migratoryBirds(n, ar)\nprint(result)\n\n\n","offset":70,"fileType":"python3","requestStartTime":1517966757416}}
{"body": {"column":22,"line":53,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \n\ndef recursive_search(root, no_access):\n    for child in root.\n\n\n","offset":1536,"fileType":"python3","requestStartTime":1517966765279}}
{"body": {"column":25,"line":54,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \n\ndef recursive_search(root, no_access):\n    for child in root.children:\n        if folder[child].\n\n\n","offset":1571,"fileType":"python3","requestStartTime":1517966788341}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    for element in arr:\n        if element == k:\n            return \"YES\"\n    \n    return \"NO\"\n\n\nnumb_of_elements = sys.\n            \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":217,"fileType":"python3","requestStartTime":1517966794802}}
{"body": {"column":20,"line":53,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \nhas_access = []\ndef recursive_search(root, has_access):\n    for cow in root.\n    for child in root.children:\n        for cow in \n\n","offset":1550,"fileType":"python3","requestStartTime":1517966836044}}
{"body": {"column":19,"line":54,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \nhas_access = []\ndef recursive_search(root, has_access):\n    for cow in root.explicit_access:\n        has_access.\n    for child in root.children:\n        for cow in \n\n","offset":1586,"fileType":"python3","requestStartTime":1517966846593}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport re\ndef revisedRussianRoulette(doors):\n    mi = re.findall(r'1 1', doors)\n    mi = len(mi)\n    ma = re.findall(r'1', doors)\n    ma = len(ma)\n    return mi.\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":190,"fileType":"python3","requestStartTime":1517966827205}}
{"body": {"column":21,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        for d in data:\n            while k >\n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":631,"fileType":"python3","requestStartTime":1517966934464}}
{"body": {"column":19,"line":57,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \nhas_access = []\ndef recursive_search(root, has_access):\n    for cow in root.explicit_access:\n        has_access.append(cow)\n        \n    for child in root.children:\n        has_access.recursive_search(folder[child], has_access)\n     \n        \n\n","offset":1658,"fileType":"python3","requestStartTime":1517966989931}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    for element in arr:\n        if element == k:\n            return \"YES\"\n    \n    return \"NO\"\n\n\nnumb_of_elements = input()\n\narr = []\nwhile numb_of_elements:\n    arr.\n            \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":263,"fileType":"python3","requestStartTime":1517967005366}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        while k >\n         \n                data[k] = data[k] + e\n                k--\n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":604,"fileType":"python3","requestStartTime":1517967026911}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        while k > 0:\n           self.data[k] = data[k] + e\n           k--\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":624,"fileType":"python3","requestStartTime":1517967058677}}
{"body": {"column":31,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        while k > 0:\n           self.data[k] = self.data[k] + e\n           k--\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":639,"fileType":"python3","requestStartTime":1517967070261}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head is None:\n        return 0\n    if head.data is None:\n        return 0\n    print(head.)\n    \n    \n\n\n","offset":397,"fileType":"python3","requestStartTime":1517967071385}}
{"body": {"column":15,"line":19,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head is None:\n        return 0\n    if head.data is None:\n        return 0\n    print(head.data)\n    print(head.)\n    \n    \n\n\n","offset":418,"fileType":"python3","requestStartTime":1517967075976}}
{"body": {"column":11,"line":53,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nno_access = [] \nhas_access = []\n\nprint(root.)\n        \n\n","offset":1502,"fileType":"python3","requestStartTime":1517967115695}}
{"body": {"column":12,"line":14,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head.\n    \n    \n    \n\n\n","offset":313,"fileType":"python3","requestStartTime":1517967135321}}
{"body": {"column":16,"line":51,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nhas_access = [] \nfor cow in root.\n\n","offset":1491,"fileType":"python3","requestStartTime":1517967190990}}
{"body": {"column":15,"line":52,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n        print(root.explicit_access)\n\nhas_access = [] \nfor cow in root.explicit_access:\n    has_access.\n\n","offset":1523,"fileType":"python3","requestStartTime":1517967205693}}
{"body": {"column":18,"line":54,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n\nhas_access = [] \n\nfor cow in root.explicit_access:\n    has_access.append(cow)\n\nfor child in root.\nfor cow in has_access:\n    print(cow)\n\n\n","offset":1519,"fileType":"python3","requestStartTime":1517967252821}}
{"body": {"column":15,"line":56,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n\nhas_access = [] \n\nfor cow in root.explicit_access:\n    has_access.append(cow)\n\nfor child in root.children:\n    folder = folders[child]\n    has_access.\nfor cow in has_access:\n    print(cow)\n\n\n","offset":1572,"fileType":"python3","requestStartTime":1517967272475}}
{"body": {"column":22,"line":56,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nq = input() # integer, number of cows\n\nm, n = input().split() # m = number of shared folders\n\nfolders = {}\ncow_access = {}\n    \nclass Folder():\n    def __init__(self, confidential):\n        self.parent = None\n        self.children = []\n        self.is_confidential = confidential\n        self.explicit_access = []\n    \ndef add_folder(line, confidential):\n    id = line[0]\n    explicit_access = line[2::]\n    folders[id] = Folder(confidential)\n    for cow in explicit_access:\n        folders[id].explicit_access.append(cow)\n        \n# the next M lines contain \n# first number is the id of the shared folder \n# second number K is how many cows have explicit access \n# the next K numbers are the cows that have explicit access to the shared folder\nfor i in range(int(m)):\n    line = input().split()\n    add_folder(line, False)\n\n# the next N lines contain \n# first number is the id of the confidential fodler \n# the second number K is how many cows have  explicit access to the confidential folder \nfor i in range (int(n)):\n    line = input().split()\n    add_folder(line, True)\n\n\ng = input() # number of parent directory pairs \nfor i in range(int(g)):\n    u, v = input().split() # u is parent of v \n    folders[v].parent = u\n    folders[u].children.append(v)\n\nfor folder in folders:\n    if folders[folder].parent is None:\n        root = folders[folder]\n\nhas_access = set() \n\nfor cow in root.explicit_access:\n    has_access.add(cow)\n\nfor child in root.children:\n    folder = folders[child]\n    for cow in folder.\n    has_access.add(cow)\n    \nfor cow in has_access:\n    print(cow)\n\n\n","offset":1579,"fileType":"python3","requestStartTime":1517967327316}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    for op in operations:\n        var split = op.\n        \n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        while k > 0:\n            self.data[k] = self.data[k] + e\n            k--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":139,"fileType":"python3","requestStartTime":1517967446001}}
{"body": {"column":22,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA is None or headB is None:\n        return 0\n    else:\n        cur_nodeA = headA\n        cur_nodeB = headB\n        while cur_nodeA.next is not None and cur_nodeB.next is not None:\n            if cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.):\n                cur_nodeA = cur_nodeA.next\n                cur_nodeB = cur_nodeB.next\n            else:\n                return 0\n        if cur_nodeA.data == cur_nodeB.data:\n            return 1\n        else:\n            return 0\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":587,"fileType":"python3","requestStartTime":1517967580192}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null;\n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.\n            \n        \n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        while k > 0:\n            self.data[k] = self.data[k] + e\n            k--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":274,"fileType":"python3","requestStartTime":1517967621812}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null;\n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.\n            \n        \n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, k, e):\n        while k > 0:\n            self.data[k] = self.data[k] + e\n            k--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":336,"fileType":"python3","requestStartTime":1517967665210}}
{"body": {"column":29,"line":28,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA is None or headB is None:\n        return 0\n    else:\n        cur_nodeA = headA\n        cur_nodeB = headB\n        while cur_nodeA.next is not None and cur_nodeB.next is not None:\n            if cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is not None and cur_nodeB not None):\n                cur_nodeA = cur_nodeA.next\n                cur_nodeB = cur_nodeB.next\n            elif cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is None and cur_nodeB is None):\n                if cur_nodeA.\n            else:\n                return 0\n        if cur_nodeA.data == cur_nodeB.data:\n            return 1\n        else:\n            return 0\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":859,"fileType":"python3","requestStartTime":1517967665299}}
{"body": {"column":46,"line":28,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA is None or headB is None:\n        return 0\n    else:\n        cur_nodeA = headA\n        cur_nodeB = headB\n        while cur_nodeA.next is not None and cur_nodeB.next is not None:\n            if cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is not None and cur_nodeB not None):\n                cur_nodeA = cur_nodeA.next\n                cur_nodeB = cur_nodeB.next\n            elif cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is None and cur_nodeB is None):\n                if cur_nodeA.data = cur_nodeB.\n            else:\n                return 0\n        if cur_nodeA.data == cur_nodeB.data:\n            return 1\n        else:\n            return 0\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":876,"fileType":"python3","requestStartTime":1517967668803}}
{"body": {"column":13,"line":1,"wordToComplete":"","code":"\ndata=input().\n\n","offset":15,"fileType":"python3","requestStartTime":1517967787497}}
{"body": {"column":15,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    print(arr)\n    print(k)\n    for element in arr:\n        if element == k:\n            return \"YES\"\n    \n    return \"NO\"\n\nlines[]\nwhile True:\n    line = input()\n    if line:\n        lines.append(line)\n    else:\n        break\n\narr = [1:lines.]\nprint(findNumber()\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":340,"fileType":"python3","requestStartTime":1517967793672}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef removeDuplicates(s):\n    for i in range(0, len(s)-1):\n        if s[i] == s[i+1]:\n            return twoCharaters(s[:i]+ s[i+2:])\n    return s\n        \n\ndef twoCharaters(s):\n    filteredString = removeDuplicates(s)\n    d = {}\n    for i in filteredString:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(d.)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    l = int(input().strip())\n    s = input().strip()\n    result = twoCharaters(s)\n    print(result)\n\n\n","offset":376,"fileType":"python3","requestStartTime":1517967812444}}
{"body": {"column":29,"line":3,"wordToComplete":"","code":"\nfrom itertools import product\n\na = [int(x) for x in input().]\n\n","offset":62,"fileType":"python3","requestStartTime":1517967879693}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    for each in arr:\n        arr.\n        \nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":113,"fileType":"python3","requestStartTime":1517967880254}}
{"body": {"column":40,"line":38,"wordToComplete":"","code":"\nimport sys\nimport json\n\ndef check_entry(query, entry):\n    #print(query, entry)\n    if type(query) is not dict:\n        if query == entry:\n            return True\n        return False\n    for key in query:\n        if key not in entry:\n            return False\n        if not check_entry(query[key], entry[key]):\n            return False\n    return True\n           \nstorage = []\nfor line in sys.stdin:\n    command = line.split(' ')[0]\n    query = line[len(command)+1:]\n    delete_list = []\n    if command == \"add\":\n        storage.append(query)\n    else:\n        query = json.loads(query)\n        if \"type\" in query and query[\"type\"] == \"list\":\n            for item in storage:\n                cond_satisfied = True\n                item_json = json.loads(item)\n                if item_json[\"list\"]:\n                    for value in query[\"list\"]:\n                        if value not in item[\"list\"]:\n                            cond_satisfied = False\n                    if cond_satisfied:\n                        if command == \"get\":\n                            sys.stdout.write(item)\n                        else:\n                            delete_list.\n        else:\n            for item in storage:               \n                if check_entry(query, json.loads(item)):\n                    if command == \"get\":\n                        sys.stdout.write(item)\n                    else:\n                        #print(item)\n                        delete_list.append(item)\n    for item in delete_list:\n        storage.remove(item)\n\n\n","offset":1158,"fileType":"python3","requestStartTime":1517967879767}}
{"body": {"column":29,"line":4,"wordToComplete":"","code":"\nfrom itertools import product\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().]\n\n","offset":100,"fileType":"python3","requestStartTime":1517967890124}}
{"body": {"column":49,"line":27,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA != headB:\n        return 0\n    else:\n        cur_nodeA = headA\n        cur_nodeB = headB\n        while cur_nodeA is not None and cur_nodeB is not None:\n            if cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is not None and cur_nodeB not None):\n                cur_nodeA = cur_nodeA.next\n                cur_nodeB = cur_nodeB.next\n            elif cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is None and cur_nodeB. is None):\n                return 1\n            else:\n                return 0\n        return 1\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":794,"fileType":"python3","requestStartTime":1517967900990}}
{"body": {"column":40,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\ndef emailMask(email) :\n    atIndex = email.index('@')\n    username = email[0 : atIndex - 1]\n    ans = username[0] + \"*****\" + email[atIndex - 1 :]\n    \n    return ans\n\ndef phoneMask(num) :\n    \n    ans = \"\"\n    for i in range(len(num)-4) :\n        if num[i].isdigit() :\n            ans += \"*\"\n        elif num[i] == \"+\":\n            ans += \"+\"\n        elif num[i] != \"+\" and num[i+1].:\n            ans += num[i]\n    \n    ans += num[len(num)-4:]\n    if ans[0] == \"-\" :\n        ans = ans[1:]\n    \n    return ans\n\n\n\nif __name__ == \"__main__\":\n    content = sys.stdin.readlines()\n    content = [x.strip() for x in content]\n\n    for line in content:\n        if line[0] == \"E\":\n            print(\"E:\" + emailMask(line[2:]))\n        elif line[0] == \"P\":\n            print(\"P:\" + phoneMask(line[2:]))\n\n\n","offset":468,"fileType":"python3","requestStartTime":1517967956826}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    max_sum=0\n    for each in arr:\n        arr.pop(0)\n        max_sum=sum(arr)\n        arr.\n        \nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":171,"fileType":"python3","requestStartTime":1517967965252}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA. != headB:\n        return 0\n    else:\n        cur_nodeA = headA\n        cur_nodeB = headB\n        while cur_nodeA is not None and cur_nodeB is not None:\n            if cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is not None and cur_nodeB is not None):\n                cur_nodeA = cur_nodeA.next\n                cur_nodeB = cur_nodeB.next\n            elif cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is None and cur_nodeB.next is None):\n                return 1\n            else:\n                return 0\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":333,"fileType":"python3","requestStartTime":1517967993355}}
{"body": {"column":20,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null\n    k = null\n    e = null\n    \n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.pop()\n        else if(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, )\n           \n            \n            \n        \n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return self.\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":661,"fileType":"python3","requestStartTime":1517967999973}}
{"body": {"column":27,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.data != headB.:\n        return 0\n    else:\n        cur_nodeA = headA\n        cur_nodeB = headB\n        while cur_nodeA is not None and cur_nodeB is not None:\n            if cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is not None and cur_nodeB is not None):\n                cur_nodeA = cur_nodeA.next\n                cur_nodeB = cur_nodeB.next\n            elif cur_nodeA.data == cur_nodeB.data and (\n            cur_nodeA.next is None and cur_nodeB.next is None):\n                return 1\n            else:\n                return 0\n            \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":347,"fileType":"python3","requestStartTime":1517968001104}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\nfrom itertools import product\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint( \" \".list( product( a, b ) ) )\n\n","offset":120,"fileType":"python3","requestStartTime":1517968017395}}
{"body": {"column":29,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null\n    k = null\n    e = null\n    \n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.pop()\n        else if(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.)\n           \n            \n            \n        \n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":497,"fileType":"python3","requestStartTime":1517968016784}}
{"body": {"column":14,"line":25,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null\n    k = null\n    e = null\n    \n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.pop()\n        else if(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.\n           \n            \n            \n        \n    \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":519,"fileType":"python3","requestStartTime":1517968037553}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    max_sum=0\n    min\n    flag=0\n    for each in arr:\n        arr.pop(0)\n        if flag==0:\n            max_sum=sum(arr)\n            flag==1\n        else:\n            max_sum=max(max_sum,sum(arr))\n        arr.append(each)\n    return \"{} {}\".min_sum,max_sum\n        \nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":322,"fileType":"python3","requestStartTime":1517968106043}}
{"body": {"column":10,"line":21,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    print(arr)\n    print(k)\n    for element in arr:\n        if element == k:\n            return \"YES\"\n    \n    return \"NO\"\n\nlines = []\nwhile True:\n  value = raw_input()\n  if (value != \"\"):\n    lines. # next line was found \n  else:\n    break \n\narr = lines[1:len(lines) - 1]\nk = lines[-1]\nprint(findNumber(arr, k))\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":296,"fileType":"python3","requestStartTime":1517968129845}}
{"body": {"column":20,"line":43,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null\n    k = null\n    e = null\n    \n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.pop()\n        else if(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            continue\n            \n        \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":867,"fileType":"python3","requestStartTime":1517968187241}}
{"body": {"column":25,"line":43,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null\n    k = null\n    e = null\n    \n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.pop()\n        else if(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            continue\n            \n        \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data.)\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":872,"fileType":"python3","requestStartTime":1517968195186}}
{"body": {"column":34,"line":43,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef superStack(operations):\n    value = null\n    k = null\n    e = null\n    \n    s = Stack()\n    for op in operations:\n        var split = op.strip(' ');\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        else if(split[0] == 'pop'):\n            s.pop()\n        else if(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            continue\n            \n        \n\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.)])\n        \n    def pop(self):\n        value = self.data[len(self.data) - 1]\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e--\n        print (self.data[len(self.data) - 1])\n                \n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":881,"fileType":"python3","requestStartTime":1517968203031}}
{"body": {"column":7,"line":22,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    print(arr)\n    print(k)\n    for element in arr:\n        if element == k:\n            return \"YES\"\n    \n    return \"NO\"\n\nnumb_of_elements = int(input())\narr_count = 0\narr = []\n\nwhile array_count < numb_of_elements:\n   arr. \n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":322,"fileType":"python3","requestStartTime":1517968268251}}
{"body": {"column":8,"line":110,"wordToComplete":"","code":"\n#Q2\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport re\nfrom decimal import Decimal\n\narrayOfLogs = [line.rstrip() for line in sys.stdin.readlines()]  #reads stdin into list\nendPoint = []  #array to store endpoint\ntempArray = []\nresCode = []  #array\ntime = [] #list of time\ntemptime = [] #another list of time\nprevEndPoint = []\nprevTime = []\ntempList = []\nmon = []\nresult = [] #list that will contain r\n\ndef convertMonth(mon):\n    if mon == 'Jan':\n        return 1\n    elif mon == 'Feb':\n        return 2\n    elif mon == 'Mar':\n        return 3\n    elif mon == 'Apr':\n        return 4\n    elif mon == 'May':\n        return 5\n    elif mon == 'Jun':\n        return 6\n    elif mon == 'Jul':\n        return 7\n    elif mon == 'Aug':\n        return 8\n    elif mon == 'Sep':\n        return 9\n    elif mon == 'Oct':\n        return 10\n    elif mon == 'Nov':\n        return 11\n    elif mon == 'Dec':\n        return 12\n\ndef processEndPoints(arrayOfIdenticalLogs):\n    noneFiveHundredRC = 0\n    global noneFiveHundredRC\n    for k in range(len(arrayOfIdenticalLogs)):\n        resCode = re.findall(r'\\\"\\s\\d\\d\\d', arrayOfIdenticalLogs[k]) #extract response code from log including \" and whitespace before code\n        responseCode = resCode[0] #resCode is an array of one character\n        responseCode = responseCode[2:] #get rid of \" and whitespace before response code\n        if responseCode != '500':\n            noneFiveHundredRC += 1;\n    successRate = Decimal((noneFiveHundredRC / len(arrayOfIdenticalLogs) ) * 100.00)\n    successRate = round(successRate, 2)\n    tempList = re.findall(r'\\d\\d\\d\\d\\:', arrayOfIdenticalLogs[0])\n    dateAndTime = tempList[0]\n    dateAndTime = dateAndTime[:-1]  # get rid of : after year\n    dateAndTime += '-'\n    mon = re.findall(r'\\/[a-zA-Z][a-z][a-z]\\/', arrayOfIdenticalLogs[0])\n    month = mon[0]\n    month = month[1:]\n    month = month[:-1]\n    month = convertMonth(month)\n    dateAndTime += '0'\n    dateAndTime += str(month)\n    dateAndTime += '-'\n    tempList = re.findall(r'\\[\\d\\d', arrayOfIdenticalLogs[0])\n    day = tempList[0]\n    day = day[1:]\n    dateAndTime += str(day)\n    dateAndTime += 'T'\n    tempList = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfIdenticalLogs[0])\n    timeAndSec = tempList[0]\n    timeAndSec = timeAndSec[1:]\n    dateAndTime += str(timeAndSec)\n    arrayOfIdenticalLogs = re.findall(r'\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfIdenticalLogs[0])\n    dateAndTime += arrayOfIdenticalLogs[0]\n    dateAndTime += \" \"\n    dateAndTime += str(successRate)\n    #print(dateAndTime)\n\n    return dateAndTime\n\nendPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[0])  #store first endpoint\ntime = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[0]) #store minute and time of first log\n\nfor i in range(len(arrayOfLogs)):\n    arrayOfSimilarEP = []\n    prevEndPoint = endPoint  #keep track of previous endpoint\n    prevTime = time\n    endPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[i])  #store endpoint\n    time = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[i]) #store hour and minute\n    if(endPoint[0] == prevEndPoint[0] and time[0] == prevTime[0] and i > 0):  #check for duplicate\n        continue\n    tempArray = arrayOfLogs[i:]\n\n    for j in range(len(tempArray)):\n        tempEndPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', tempArray[j])\n        tempTime = re.findall(r'\\:\\d\\d\\:\\d\\d', tempArray[j])\n        if(endPoint[0] == tempEndPoint[0] and time[0] == tempTime[0]):\n            arrayOfSimilarEP.append(tempArray[j]) #store similar endpoints in list\n    res = processEndPoints(arrayOfSimilarEP)\n    result.append(res)\n\nn = len(results)\nc = 0\nfor i in range(0, n):\n    num.\nsorted(result, reverse=False)\n    \n\nfor i in range(len(result)):\n    print(result[i])\n\n\n","offset":3780,"fileType":"python3","requestStartTime":1517968323283}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if n % 2 == 1:\n        print (\"Weird\")\n    for n in range (2,6):\n        if n % 2 == 0:\n            print (\"Not Weird\")\n    for n in range (6, 21):\n        if n % 2 == 0\n            print (\"Weird\")\n    for n >\n\n\n","offset":263,"fileType":"python3","requestStartTime":1517968329983}}
{"body": {"column":14,"line":3,"wordToComplete":"","code":"\nn = int(input())\nline = input()\nprint all([i >])\n\n","offset":48,"fileType":"python3","requestStartTime":1517968330278}}
{"body": {"column":43,"line":3,"wordToComplete":"","code":"\nn = int(input())\nline = input()\nprint all([(i > 0 or i == n) for i in line. ])\n\n","offset":77,"fileType":"python3","requestStartTime":1517968375206}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef largestPermutation(k, arr):\n    # Complete this function\n    i = cnt = 0\n    d = {arr[i]:i for i in range(len(arr))}\n    d.\n    for i in range(len(arr)):\n        if \n\nif __name__ == \"__main__\":\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    arr = list(map(int, input().strip().split(' ')))\n    result = largestPermutation(k, arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":157,"fileType":"python3","requestStartTime":1517968406675}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef largestPermutation(k, arr):\n    # Complete this function\n    i = cnt = 0\n    d = {arr[i]:i for i in range(len(arr))}\n    d.\n    for i in range(len(arr)):\n        if \n\nif __name__ == \"__main__\":\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    arr = list(map(int, input().strip().split(' ')))\n    result = largestPermutation(k, arr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":157,"fileType":"python3","requestStartTime":1517968411384}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef formingMagicSquare(s):\n    rowSums = []\n    for row in s:\n        sum = 0\n        for num in row:\n            sum += num\n        rowSums.\n\nif __name__ == \"__main__\":\n    s = []\n    for s_i in range(3):\n       s_t = [int(s_temp) for s_temp in input().strip().split(' ')]\n       s.append(s_t)\n    result = formingMagicSquare(s)\n    print(result)\n\n\n","offset":171,"fileType":"python3","requestStartTime":1517968507052}}
{"body": {"column":11,"line":118,"wordToComplete":"","code":"\n#Q2\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport re\nfrom decimal import Decimal\n\narrayOfLogs = [line.rstrip() for line in sys.stdin.readlines()]  #reads stdin into list\nendPoint = []  #array to store endpoint\ntempArray = []\nresCode = []  #array\ntime = [] #list of time\ntemptime = [] #another list of time\nprevEndPoint = []\nprevTime = []\ntempList = []\nmon = []\nresult = [] #list that will contain r\n\ndef convertMonth(mon):\n    if mon == 'Jan':\n        return 1\n    elif mon == 'Feb':\n        return 2\n    elif mon == 'Mar':\n        return 3\n    elif mon == 'Apr':\n        return 4\n    elif mon == 'May':\n        return 5\n    elif mon == 'Jun':\n        return 6\n    elif mon == 'Jul':\n        return 7\n    elif mon == 'Aug':\n        return 8\n    elif mon == 'Sep':\n        return 9\n    elif mon == 'Oct':\n        return 10\n    elif mon == 'Nov':\n        return 11\n    elif mon == 'Dec':\n        return 12\n\ndef processEndPoints(arrayOfIdenticalLogs):\n    noneFiveHundredRC = 0\n    global noneFiveHundredRC\n    for k in range(len(arrayOfIdenticalLogs)):\n        resCode = re.findall(r'\\\"\\s\\d\\d\\d', arrayOfIdenticalLogs[k]) #extract response code from log including \" and whitespace before code\n        responseCode = resCode[0] #resCode is an array of one character\n        responseCode = responseCode[2:] #get rid of \" and whitespace before response code\n        if responseCode != '500':\n            noneFiveHundredRC += 1;\n    successRate = Decimal((noneFiveHundredRC / len(arrayOfIdenticalLogs) ) * 100.00)\n    successRate = round(successRate, 2)\n    tempList = re.findall(r'\\d\\d\\d\\d\\:', arrayOfIdenticalLogs[0])\n    dateAndTime = tempList[0]\n    dateAndTime = dateAndTime[:-1]  # get rid of : after year\n    dateAndTime += '-'\n    mon = re.findall(r'\\/[a-zA-Z][a-z][a-z]\\/', arrayOfIdenticalLogs[0])\n    month = mon[0]\n    month = month[1:]\n    month = month[:-1]\n    month = convertMonth(month)\n    dateAndTime += '0'\n    dateAndTime += str(month)\n    dateAndTime += '-'\n    tempList = re.findall(r'\\[\\d\\d', arrayOfIdenticalLogs[0])\n    day = tempList[0]\n    day = day[1:]\n    dateAndTime += str(day)\n    dateAndTime += 'T'\n    tempList = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfIdenticalLogs[0])\n    timeAndSec = tempList[0]\n    timeAndSec = timeAndSec[1:]\n    dateAndTime += str(timeAndSec)\n    arrayOfIdenticalLogs = re.findall(r'\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfIdenticalLogs[0])\n    dateAndTime += arrayOfIdenticalLogs[0]\n    dateAndTime += \" \"\n    dateAndTime += str(successRate)\n    #print(dateAndTime)\n\n    return dateAndTime\n\nendPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[0])  #store first endpoint\ntime = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[0]) #store minute and time of first log\n\nfor i in range(len(arrayOfLogs)):\n    arrayOfSimilarEP = []\n    prevEndPoint = endPoint  #keep track of previous endpoint\n    prevTime = time\n    endPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[i])  #store endpoint\n    time = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[i]) #store hour and minute\n    if(endPoint[0] == prevEndPoint[0] and time[0] == prevTime[0] and i > 0):  #check for duplicate\n        continue\n    tempArray = arrayOfLogs[i:]\n\n    for j in range(len(tempArray)):\n        tempEndPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', tempArray[j])\n        tempTime = re.findall(r'\\:\\d\\d\\:\\d\\d', tempArray[j])\n        if(endPoint[0] == tempEndPoint[0] and time[0] == tempTime[0]):\n            arrayOfSimilarEP.append(tempArray[j]) #store similar endpoints in list\n    res = processEndPoints(arrayOfSimilarEP)\n    result.append(res)\n\nn = len(result)\nc = 0\nnum = []\nfor i in range(0, n):\n    num.append(c)\n    c += 1\n#sorted(result, reverse=False)\nprint(num)\n\nd = {k:v for k,v in zip(num, result)}\nprint(d)\nfor x in d.\n\nfor i in range(len(result)):\n    print(result[i])\n\n\n","offset":3910,"fileType":"python3","requestStartTime":1517968505524}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef richieRich(s, n, k):\n    left = 0 \n    right = len(s)-1\n    \n    while left < right and k > 0:\n        if s[left] != s[right]:\n            if s[left] > s[right]:\n                s[right] = s[left]\n                k -= 1\n            else:\n                s[left] = s[right]\n                k -= 1\n    return s\n    # Complete this function\n\nn = int(input().)\nk = int(input().strip())\ns = input().strip()\nresult = richieRich(s, n, k)\nprint(result)\n\n\n","offset":389,"fileType":"python3","requestStartTime":1517968552761}}
{"body": {"column":16,"line":119,"wordToComplete":"","code":"\n#Q2\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport re\nfrom decimal import Decimal\n\narrayOfLogs = [line.rstrip() for line in sys.stdin.readlines()]  #reads stdin into list\nendPoint = []  #array to store endpoint\ntempArray = []\nresCode = []  #array\ntime = [] #list of time\ntemptime = [] #another list of time\nprevEndPoint = []\nprevTime = []\ntempList = []\nmon = []\nresult = [] #list that will contain r\n\ndef convertMonth(mon):\n    if mon == 'Jan':\n        return 1\n    elif mon == 'Feb':\n        return 2\n    elif mon == 'Mar':\n        return 3\n    elif mon == 'Apr':\n        return 4\n    elif mon == 'May':\n        return 5\n    elif mon == 'Jun':\n        return 6\n    elif mon == 'Jul':\n        return 7\n    elif mon == 'Aug':\n        return 8\n    elif mon == 'Sep':\n        return 9\n    elif mon == 'Oct':\n        return 10\n    elif mon == 'Nov':\n        return 11\n    elif mon == 'Dec':\n        return 12\n\ndef processEndPoints(arrayOfIdenticalLogs):\n    noneFiveHundredRC = 0\n    global noneFiveHundredRC\n    for k in range(len(arrayOfIdenticalLogs)):\n        resCode = re.findall(r'\\\"\\s\\d\\d\\d', arrayOfIdenticalLogs[k]) #extract response code from log including \" and whitespace before code\n        responseCode = resCode[0] #resCode is an array of one character\n        responseCode = responseCode[2:] #get rid of \" and whitespace before response code\n        if responseCode != '500':\n            noneFiveHundredRC += 1;\n    successRate = Decimal((noneFiveHundredRC / len(arrayOfIdenticalLogs) ) * 100.00)\n    successRate = round(successRate, 2)\n    tempList = re.findall(r'\\d\\d\\d\\d\\:', arrayOfIdenticalLogs[0])\n    dateAndTime = tempList[0]\n    dateAndTime = dateAndTime[:-1]  # get rid of : after year\n    dateAndTime += '-'\n    mon = re.findall(r'\\/[a-zA-Z][a-z][a-z]\\/', arrayOfIdenticalLogs[0])\n    month = mon[0]\n    month = month[1:]\n    month = month[:-1]\n    month = convertMonth(month)\n    dateAndTime += '0'\n    dateAndTime += str(month)\n    dateAndTime += '-'\n    tempList = re.findall(r'\\[\\d\\d', arrayOfIdenticalLogs[0])\n    day = tempList[0]\n    day = day[1:]\n    dateAndTime += str(day)\n    dateAndTime += 'T'\n    tempList = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfIdenticalLogs[0])\n    timeAndSec = tempList[0]\n    timeAndSec = timeAndSec[1:]\n    dateAndTime += str(timeAndSec)\n    arrayOfIdenticalLogs = re.findall(r'\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfIdenticalLogs[0])\n    dateAndTime += arrayOfIdenticalLogs[0]\n    dateAndTime += \" \"\n    dateAndTime += str(successRate)\n    #print(dateAndTime)\n\n    return dateAndTime\n\nendPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[0])  #store first endpoint\ntime = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[0]) #store minute and time of first log\n\nfor i in range(len(arrayOfLogs)):\n    arrayOfSimilarEP = []\n    prevEndPoint = endPoint  #keep track of previous endpoint\n    prevTime = time\n    endPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[i])  #store endpoint\n    time = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[i]) #store hour and minute\n    if(endPoint[0] == prevEndPoint[0] and time[0] == prevTime[0] and i > 0):  #check for duplicate\n        continue\n    tempArray = arrayOfLogs[i:]\n\n    for j in range(len(tempArray)):\n        tempEndPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', tempArray[j])\n        tempTime = re.findall(r'\\:\\d\\d\\:\\d\\d', tempArray[j])\n        if(endPoint[0] == tempEndPoint[0] and time[0] == tempTime[0]):\n            arrayOfSimilarEP.append(tempArray[j]) #store similar endpoints in list\n    res = processEndPoints(arrayOfSimilarEP)\n    result.append(res)\n\nn = len(result)\nc = 0\nnum = []\nfor i in range(0, n):\n    num.append(c)\n    c += 1\n#sorted(result, reverse=False)\nprint(num)\n\nd = {k:v for k,v in zip(num, result)}\nprint(d)\nfor key, value in d.items():\n    print(value.)\n\nfor i in range(len(result)):\n    print(result[i])\n\n\n","offset":3944,"fileType":"python3","requestStartTime":1517968600292}}
{"body": {"column":12,"line":119,"wordToComplete":"","code":"\n#Q2\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport re\nfrom decimal import Decimal\n\narrayOfLogs = [line.rstrip() for line in sys.stdin.readlines()]  #reads stdin into list\nendPoint = []  #array to store endpoint\ntempArray = []\nresCode = []  #array\ntime = [] #list of time\ntemptime = [] #another list of time\nprevEndPoint = []\nprevTime = []\ntempList = []\nmon = []\nresult = [] #list that will contain r\n\ndef convertMonth(mon):\n    if mon == 'Jan':\n        return 1\n    elif mon == 'Feb':\n        return 2\n    elif mon == 'Mar':\n        return 3\n    elif mon == 'Apr':\n        return 4\n    elif mon == 'May':\n        return 5\n    elif mon == 'Jun':\n        return 6\n    elif mon == 'Jul':\n        return 7\n    elif mon == 'Aug':\n        return 8\n    elif mon == 'Sep':\n        return 9\n    elif mon == 'Oct':\n        return 10\n    elif mon == 'Nov':\n        return 11\n    elif mon == 'Dec':\n        return 12\n\ndef processEndPoints(arrayOfIdenticalLogs):\n    noneFiveHundredRC = 0\n    global noneFiveHundredRC\n    for k in range(len(arrayOfIdenticalLogs)):\n        resCode = re.findall(r'\\\"\\s\\d\\d\\d', arrayOfIdenticalLogs[k]) #extract response code from log including \" and whitespace before code\n        responseCode = resCode[0] #resCode is an array of one character\n        responseCode = responseCode[2:] #get rid of \" and whitespace before response code\n        if responseCode != '500':\n            noneFiveHundredRC += 1;\n    successRate = Decimal((noneFiveHundredRC / len(arrayOfIdenticalLogs) ) * 100.00)\n    successRate = round(successRate, 2)\n    tempList = re.findall(r'\\d\\d\\d\\d\\:', arrayOfIdenticalLogs[0])\n    dateAndTime = tempList[0]\n    dateAndTime = dateAndTime[:-1]  # get rid of : after year\n    dateAndTime += '-'\n    mon = re.findall(r'\\/[a-zA-Z][a-z][a-z]\\/', arrayOfIdenticalLogs[0])\n    month = mon[0]\n    month = month[1:]\n    month = month[:-1]\n    month = convertMonth(month)\n    dateAndTime += '0'\n    dateAndTime += str(month)\n    dateAndTime += '-'\n    tempList = re.findall(r'\\[\\d\\d', arrayOfIdenticalLogs[0])\n    day = tempList[0]\n    day = day[1:]\n    dateAndTime += str(day)\n    dateAndTime += 'T'\n    tempList = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfIdenticalLogs[0])\n    timeAndSec = tempList[0]\n    timeAndSec = timeAndSec[1:]\n    dateAndTime += str(timeAndSec)\n    arrayOfIdenticalLogs = re.findall(r'\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfIdenticalLogs[0])\n    dateAndTime += arrayOfIdenticalLogs[0]\n    dateAndTime += \" \"\n    dateAndTime += str(successRate)\n    #print(dateAndTime)\n\n    return dateAndTime\n\nendPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[0])  #store first endpoint\ntime = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[0]) #store minute and time of first log\n\nfor i in range(len(arrayOfLogs)):\n    arrayOfSimilarEP = []\n    prevEndPoint = endPoint  #keep track of previous endpoint\n    prevTime = time\n    endPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[i])  #store endpoint\n    time = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[i]) #store hour and minute\n    if(endPoint[0] == prevEndPoint[0] and time[0] == prevTime[0] and i > 0):  #check for duplicate\n        continue\n    tempArray = arrayOfLogs[i:]\n\n    for j in range(len(tempArray)):\n        tempEndPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', tempArray[j])\n        tempTime = re.findall(r'\\:\\d\\d\\:\\d\\d', tempArray[j])\n        if(endPoint[0] == tempEndPoint[0] and time[0] == tempTime[0]):\n            arrayOfSimilarEP.append(tempArray[j]) #store similar endpoints in list\n    res = processEndPoints(arrayOfSimilarEP)\n    result.append(res)\n\nn = len(result)\nc = 0\nnum = []\nfor i in range(0, n):\n    num.append(c)\n    c += 1\n#sorted(result, reverse=False)\n#print(num)\n\nd = {k:v for k,v in zip(num, result)}\n#print(d)\nfor key, value in d.items():\n    d1 = d1.value.split('/')[3]\n    \nsorted(d1)\nprint(d1)\n\nfor i in range(len(result)):\n    print(result[i])\n\n\n","offset":3942,"fileType":"python3","requestStartTime":1517968705554}}
{"body": {"column":34,"line":120,"wordToComplete":"","code":"\n#Q2\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport re\nfrom decimal import Decimal\n\narrayOfLogs = [line.rstrip() for line in sys.stdin.readlines()]  #reads stdin into list\nendPoint = []  #array to store endpoint\ntempArray = []\nresCode = []  #array\ntime = [] #list of time\ntemptime = [] #another list of time\nprevEndPoint = []\nprevTime = []\ntempList = []\nmon = []\nresult = [] #list that will contain r\n\ndef convertMonth(mon):\n    if mon == 'Jan':\n        return 1\n    elif mon == 'Feb':\n        return 2\n    elif mon == 'Mar':\n        return 3\n    elif mon == 'Apr':\n        return 4\n    elif mon == 'May':\n        return 5\n    elif mon == 'Jun':\n        return 6\n    elif mon == 'Jul':\n        return 7\n    elif mon == 'Aug':\n        return 8\n    elif mon == 'Sep':\n        return 9\n    elif mon == 'Oct':\n        return 10\n    elif mon == 'Nov':\n        return 11\n    elif mon == 'Dec':\n        return 12\n\ndef processEndPoints(arrayOfIdenticalLogs):\n    noneFiveHundredRC = 0\n    global noneFiveHundredRC\n    for k in range(len(arrayOfIdenticalLogs)):\n        resCode = re.findall(r'\\\"\\s\\d\\d\\d', arrayOfIdenticalLogs[k]) #extract response code from log including \" and whitespace before code\n        responseCode = resCode[0] #resCode is an array of one character\n        responseCode = responseCode[2:] #get rid of \" and whitespace before response code\n        if responseCode != '500':\n            noneFiveHundredRC += 1;\n    successRate = Decimal((noneFiveHundredRC / len(arrayOfIdenticalLogs) ) * 100.00)\n    successRate = round(successRate, 2)\n    tempList = re.findall(r'\\d\\d\\d\\d\\:', arrayOfIdenticalLogs[0])\n    dateAndTime = tempList[0]\n    dateAndTime = dateAndTime[:-1]  # get rid of : after year\n    dateAndTime += '-'\n    mon = re.findall(r'\\/[a-zA-Z][a-z][a-z]\\/', arrayOfIdenticalLogs[0])\n    month = mon[0]\n    month = month[1:]\n    month = month[:-1]\n    month = convertMonth(month)\n    dateAndTime += '0'\n    dateAndTime += str(month)\n    dateAndTime += '-'\n    tempList = re.findall(r'\\[\\d\\d', arrayOfIdenticalLogs[0])\n    day = tempList[0]\n    day = day[1:]\n    dateAndTime += str(day)\n    dateAndTime += 'T'\n    tempList = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfIdenticalLogs[0])\n    timeAndSec = tempList[0]\n    timeAndSec = timeAndSec[1:]\n    dateAndTime += str(timeAndSec)\n    arrayOfIdenticalLogs = re.findall(r'\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfIdenticalLogs[0])\n    dateAndTime += arrayOfIdenticalLogs[0]\n    dateAndTime += \" \"\n    dateAndTime += str(successRate)\n    #print(dateAndTime)\n\n    return dateAndTime\n\nendPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[0])  #store first endpoint\ntime = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[0]) #store minute and time of first log\n\nfor i in range(len(arrayOfLogs)):\n    arrayOfSimilarEP = []\n    prevEndPoint = endPoint  #keep track of previous endpoint\n    prevTime = time\n    endPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', arrayOfLogs[i])  #store endpoint\n    time = re.findall(r'\\:\\d\\d\\:\\d\\d', arrayOfLogs[i]) #store hour and minute\n    if(endPoint[0] == prevEndPoint[0] and time[0] == prevTime[0] and i > 0):  #check for duplicate\n        continue\n    tempArray = arrayOfLogs[i:]\n\n    for j in range(len(tempArray)):\n        tempEndPoint = re.findall(r'[a-zA-Z]{3,}\\s\\/\\d+\\.\\d+\\/[a-zA-Z]+\\/[a-zA-Z]+\\.\\bjson\\b', tempArray[j])\n        tempTime = re.findall(r'\\:\\d\\d\\:\\d\\d', tempArray[j])\n        if(endPoint[0] == tempEndPoint[0] and time[0] == tempTime[0]):\n            arrayOfSimilarEP.append(tempArray[j]) #store similar endpoints in list\n    res = processEndPoints(arrayOfSimilarEP)\n    result.append(res)\n\nn = len(result)\nc = 0\nnum = []\nfor i in range(0, n):\n    num.append(c)\n    c += 1\n#sorted(result, reverse=False)\n#print(num)\n\nd = {k:v for k,v in zip(num, result)}\n#print(d)\nd1 =[]\nfor key, value in d.items():\n    d1.append(value.split('/')[3].)\n    \nsorted(d1)\nprint(d1)\n\nfor i in range(len(result)):\n    print(result[i])\n\n\n","offset":3971,"fileType":"python3","requestStartTime":1517968799519}}
{"body": {"column":11,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    curr_count = 0\n    count = 0\n    max_count = 0\n    result = []\n    didunlock = 0\n    for i in range(len(doors)):\n        if doors[i] == 0:\n            print('unlocked')\n            curr_count += 1\n        elif doors[i] == 1:\n            print('locked')\n            if doors[i + 1] == 1:\n                doors[i + 1] = 0\n                print('next door unlocked')\n                curr_count += 1\n            max_count += 1# Complete this function\n    result.\n    print('maxcount is: ', max_count)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":527,"fileType":"python3","requestStartTime":1517969167202}}
{"body": {"column":10,"line":59,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.)\n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":1296,"fileType":"python3","requestStartTime":1517969232069}}
{"body": {"column":3,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\nar.\n    \n\n","offset":125,"fileType":"python3","requestStartTime":1517969248023}}
{"body": {"column":4,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\nar..\n    \n\n","offset":126,"fileType":"python3","requestStartTime":1517969248204}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef missingNumbers(arr, brr):\n    \n    print(arr.)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":79,"fileType":"python3","requestStartTime":1517969246396}}
{"body": {"column":4,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\narr.\n    \n\n","offset":126,"fileType":"python3","requestStartTime":1517969249844}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\nphoneBook={}\nn=int(input())\nfor i in range(n):\n    phoneBook[input().]\n\n","offset":71,"fileType":"python3","requestStartTime":1517969277907}}
{"body": {"column":10,"line":59,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.\n        \n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":1296,"fileType":"python3","requestStartTime":1517969285506}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\narr.sort(key = None, reverse = True)\nprint(''.)\n\n","offset":168,"fileType":"python3","requestStartTime":1517969303653}}
{"body": {"column":17,"line":62,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.)\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":1361,"fileType":"python3","requestStartTime":1517969335345}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef missingNumbers(arr, brr):\n    \n    for x in arr:\n        brr.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":95,"fileType":"python3","requestStartTime":1517969340795}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":226,"fileType":"python3","requestStartTime":1517969374050}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef missingNumbers(arr, brr):\n    \n    for x in arr:\n        brr = brr.(x)\n    \n    print(len(brr))\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":101,"fileType":"python3","requestStartTime":1517969374646}}
{"body": {"column":21,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return sself.\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":227,"fileType":"python3","requestStartTime":1517969380881}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":226,"fileType":"python3","requestStartTime":1517969383486}}
{"body": {"column":34,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.data(len(self.))\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        print (self.data[len(self.data) - 1])\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]\n        if not self.isEmpty():\n            print (self.data[len(self.data) - 1])\n        else:\n            print ('EMPTY')\n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n        print (self.data[len(self.data) - 1])\n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n       \n        split = op.split(\"\\\\s\")\n        \n        if(split[0] == 'push'):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == 'pop'):\n            s.pop()\n        elif(split[0] == 'inc'):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            printTopValue(s)\n            \n        \n\ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":240,"fileType":"python3","requestStartTime":1517969388897}}
{"body": {"column":18,"line":4,"wordToComplete":"","code":"\nphoneBook={}\nn=int(input())\nfor i in range(n):\n    print(input().)\n    #phoneBook[input().split()[0]]=input().split()[1]\n    \n#print(phoneBook[0])\n\n","offset":67,"fileType":"python3","requestStartTime":1517969394790}}
{"body": {"column":36,"line":2,"wordToComplete":"","code":"\nfor _ in range(int(input())):\n    n, p = [int(x) for x in input().]\n\n","offset":68,"fileType":"python3","requestStartTime":1517969424358}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef missingNumbers(arr, brr):\n    missing\n    for x in arr:\n        if x in brr\n            brr.remove(x)\n        else:\n            brr.\n    return sorted(brr) + missing\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":166,"fileType":"python3","requestStartTime":1517969584752}}
{"body": {"column":23,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    return (a0>b0)+(a1>),\n        \na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":117,"fileType":"python3","requestStartTime":1517969616733}}
{"body": {"column":31,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    return (a0>b0)+(a1>b1)+(a2>),\n        \na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":125,"fileType":"python3","requestStartTime":1517969621004}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef missingNumbers(arr, brr):\n    for x in arr:\n        if x in brr:\n            brr.remove(x)\n        else:\n            brr.(x)\n    return sorted(brr)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    brr = list(map(int, input().strip().split(' ')))\n    result = missingNumbers(arr, brr)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":155,"fileType":"python3","requestStartTime":1517969662400}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef mergeArrays(a, b):\n    ptr1 = 0\n    ptr2 = 0\n    merged = []\n    k =0\n    #print(type(b))\n    while ptr1 < len(a) and ptr2 < len(b) : \n        if a[ptr1] < b[ptr2]:\n            merged.a[ptr1]\n            k= k+1\n            ptr1 = ptr1+1\n            #add from a\n        else : \n            merged[k] = b[ptr2]\n            k=k+1\n            ptr2 = ptr2+1\n            \n            #add from B\n    while ptr1 < len(a):\n        merged[k] = a[ptr1]\n        k= k+1\n        ptr1 = ptr1+1\n    while ptr2 < len(b) : \n        merged[k] = b[ptr2]\n        k=k+1\n        ptr2 = ptr2+1\n    print(merged)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a_cnt = 0\n    a_cnt = int(input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        a_item = int(input())\n        a.append(a_item)\n        a_i += 1\n\n\n    b_cnt = 0\n    b_cnt = int(input())\n    b_i = 0\n    b = []\n    while b_i < b_cnt:\n        b_item = int(input())\n        b.append(b_item)\n        b_i += 1\n\n\n    res = mergeArrays(a, b);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":260,"fileType":"python3","requestStartTime":1517969694967}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef mergeArrays(a, b):\n    ptr1 = 0\n    ptr2 = 0\n    merged = []\n    k =0\n    #print(type(b))\n    while ptr1 < len(a) and ptr2 < len(b) : \n        if a[ptr1] < b[ptr2]:\n            merged.append(a[ptr1])\n            ptr1 = ptr1+1\n            #add from a\n        else : \n            merged.b[ptr2]\n            ptr2 = ptr2+1\n            \n            #add from B\n    while ptr1 < len(a):\n        merged[k] = a[ptr1]\n        k= k+1\n        ptr1 = ptr1+1\n    while ptr2 < len(b) : \n        merged[k] = b[ptr2]\n        k=k+1\n        ptr2 = ptr2+1\n    print(merged)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a_cnt = 0\n    a_cnt = int(input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        a_item = int(input())\n        a.append(a_item)\n        a_i += 1\n\n\n    b_cnt = 0\n    b_cnt = int(input())\n    b_i = 0\n    b = []\n    while b_i < b_cnt:\n        b_item = int(input())\n        b.append(b_item)\n        b_i += 1\n\n\n    res = mergeArrays(a, b);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":361,"fileType":"python3","requestStartTime":1517969720972}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    count = 0\n    result = []\n    if (l % 2 == 0):\n        count = l+1\n    else:\n        count = l\n    while count <= r:\n        result.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":231,"fileType":"python3","requestStartTime":1517969822076}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nphoneBook={}\nn=int(input())\nfor i in range(n):\n    \n    print(input.\n    \n    #phoneBook[(input().split())[0]]=(input().split())[1]\n    \nprint(phoneBook)\n\n","offset":70,"fileType":"python3","requestStartTime":1517969888241}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\nphoneBook={}\nn=int(input())\nfor i in range(n):\n    \n    a=input().\n    #phoneBook[(input().split())[0]]=(input().split())[1]\n    \nprint(phoneBook)\n\n","offset":68,"fileType":"python3","requestStartTime":1517969957010}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nfrom collections import defaultdict\nimport json\nimport sys\ndef tree(): return defaultdict(tree)\nlines = sys.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":110,"fileType":"python3","requestStartTime":1517969957367}}
{"body": {"column":33,"line":29,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.data[len(self.data) -1]\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]        \n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n            print ('stack', self.)\n            \ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())        \n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n        split = op.split(\" \")\n       \n        if(split[0] == \"push\"):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == \"pop\"):\n            s.pop()\n        elif(split[0] == \"inc\"):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count, k)\n        else:\n            continue\n       \n        printTopValue(s)\n            \n        \n\n\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":614,"fileType":"python3","requestStartTime":1517970071673}}
{"body": {"column":19,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    output = []\n    for num in range(l,r+1):\n        if num % 2 != 0:\n            output.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":184,"fileType":"python3","requestStartTime":1517970236900}}
{"body": {"column":23,"line":53,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.data[len(self.data) -1]\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]        \n        \n    def inc(self, e, k):\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n            \ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())        \n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n        split = op.split(\" \")\n       \n        if(split[0] == \"push\"):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == \"pop\"):\n            s.pop()\n        elif(split[0] == \"inc\"):\n            e = int(split[1])\n            k = int(split[2])\n            if (e == s.)\n            count = min(e, s.size())\n            s.inc(count-1, k)\n        else:\n            continue\n       \n        printTopValue(s)\n            \n        \n\n\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":1131,"fileType":"python3","requestStartTime":1517970298222}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    temp={}\n    for i in votes : \n        if i in temp.\n    \n\n    \n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":154,"fileType":"python3","requestStartTime":1517970337776}}
{"body": {"column":17,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.data[len(self.data) -1]\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]        \n        \n    def inc(self, e, k):\n        if e == 0:\n            slef.\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n            \ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())        \n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n        split = op.split(\" \")\n       \n        if(split[0] == \"push\"):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == \"pop\"):\n            s.pop()\n        elif(split[0] == \"inc\"):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count-1, k)\n        else:\n            continue\n       \n        printTopValue(s)\n            \n        \n\n\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":533,"fileType":"python3","requestStartTime":1517970410477}}
{"body": {"column":32,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\nclass Stack():\n    def __init__(self):\n        self.data = []\n        \n    def size(self):\n        return len(self.data)\n    \n    def top(self):\n        return self.data[len(self.data) -1]\n        \n    def isEmpty(self):\n        return (len(self.data) == 0)\n        \n    def push(self, data):\n        self.data.append(data)\n        \n    def pop(self):\n        del self.data[len(self.data) - 1]        \n        \n    def inc(self, e, k):\n        if e == 0:\n            slef.data[e] = self.\n        while e > 0:\n            self.data[e] = self.data[e] + k\n            e -= 1\n            \ndef printTopValue(s):\n    if (s.size() == 0):\n        print ('EMPTY')\n    else:\n        print (s.top())        \n                \ndef superStack(operations):\n    value = 0\n    k = 0\n    e = 0\n    \n    s = Stack()\n    for op in operations:\n        split = op.split(\" \")\n       \n        if(split[0] == \"push\"):\n            value = int(split[1])\n            s.push(value)\n        elif(split[0] == \"pop\"):\n            s.pop()\n        elif(split[0] == \"inc\"):\n            e = int(split[1])\n            k = int(split[2])\n            count = min(e, s.size())\n            s.inc(count-1, k)\n        else:\n            continue\n       \n        printTopValue(s)\n            \n        \n\n\n        \nif __name__ == \"__main__\":\n    operations_cnt = 0\n    operations_cnt = int(input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = str(input())\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = superStack(operations);\n    \n\n\n","offset":548,"fileType":"python3","requestStartTime":1517970419109}}
{"body": {"column":28,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    temp={}\n    for i in votes : \n        if i in temp.keys() :\n            val = temp[i]\n            temp[i] = val+1\n        else : \n            temp[i] = 1\n    max = 0\n    for key, value  in temp.\n    \n\n    \n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":297,"fileType":"python3","requestStartTime":1517970472937}}
{"body": {"column":29,"line":21,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    temp={}\n    for i in votes : \n        if i in temp.keys() :\n            val = temp[i]\n            temp[i] = val+1\n        else : \n            temp[i] = 1\n    max = 0\n    for key, value  in temp.items() :\n        if max < value :\n            max = value\n    result = []\n    for key2, value2 in temp.\n    \n\n    \n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":401,"fileType":"python3","requestStartTime":1517970516666}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    newGrades = []\n    for grade in grades:\n        if grade < 38:\n            newGrades.\n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":138,"fileType":"python3","requestStartTime":1517970558827}}
{"body": {"column":19,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    temp={}\n    for i in votes : \n        if i in temp.keys() :\n            val = temp[i]\n            temp[i] = val+1\n        else : \n            temp[i] = 1\n    max = 0\n    for key, value  in temp.items() :\n        if max < value :\n            max = value\n    result = []\n    for key2, value2 in temp.items():\n        if max == value2 :\n            result.\n    \n\n    \n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":456,"fileType":"python3","requestStartTime":1517970572277}}
{"body": {"column":29,"line":2,"wordToComplete":"","code":"\nfrom itertools import permutations\ns, ns = [ x for x in input().]\n\n","offset":66,"fileType":"python3","requestStartTime":1517970593703}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\nfrom itertools import permutations\ns, ns = [ x for x in input().split()]\nn = int( ns )\nfor p in permutations( s, n ):\n    print( ''.p )\n\n","offset":134,"fileType":"python3","requestStartTime":1517970641006}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    temp={}\n    votes.\n    for i in votes : \n        if i in temp.keys() :\n            val = temp[i]\n            temp[i] = val+1\n        else : \n            temp[i] = 1\n    max = 0\n    for key, value  in temp.items() :\n        if max < value :\n            max = value\n    result = []\n    for key2, value2 in temp.items():\n        if max == value2 :\n            result.append(key2)\n    result = result[::-1]\n    return result[0]\n    \n\n    \n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":121,"fileType":"python3","requestStartTime":1517970665698}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  runLengthEncode(input):\n    out = ''\n    current_letter = input[count]\n    count = 0\n    for letter in input:\n        if letter == current_letter:\n            count += 1\n        else:\n            out.\n            \n            \n        \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _input = str(input())\nexcept:\n    _input = None\n\nres = runLengthEncode(_input)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":277,"fileType":"python3","requestStartTime":1517970672330}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  runLengthEncode(input):\n    out = ''\n    current_letter = input[count]\n    count = 0\n    for letter in input:\n        if letter == current_letter:\n            count += 1\n        else:\n            out.append(count)\n            out.\n            \n            \n        \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _input = str(input())\nexcept:\n    _input = None\n\nres = runLengthEncode(_input)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":307,"fileType":"python3","requestStartTime":1517970685107}}
{"body": {"column":26,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    newGrades = []\n    for grade in grades:\n        if grade < 38:\n            newGrades.append(grade)\n        else:\n            fromBelow = grade % 5 # diff between num and next lowest multiple of 5\n            toAbove = 5 - fromBelow # amount to add if we need to round up\n            if (grade % 5) > 2:\n                newGrades.grade + toAbove\n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":382,"fileType":"python3","requestStartTime":1517970785032}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    newGrades = []\n    for grade in grades:\n        if grade < 38:\n            newGrades.append(grade)\n        else:\n            fromBelow = grade % 5 # diff between num and next lowest multiple of 5\n            toAbove = 5 - fromBelow # amount to add if we need to round up\n            if (grade % 5) > 2:\n                newGrades.append(grade + toAbove)\n            else:\n                newGrades.\n    \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":450,"fileType":"python3","requestStartTime":1517970815721}}
{"body": {"column":33,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    newGrades = []\n    for grade in grades:\n        if grade < 38:\n            newGrades.append(grade)\n        else:\n            fromBelow = grade % 5 # diff between num and next lowest multiple of 5\n            toAbove = 5 - fromBelow # amount to add if we need to round up\n            if (grade % 5) > 2:\n                newGrades.append(grade + toAbove)\n            else:\n                newGrades.append.\n    \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":457,"fileType":"python3","requestStartTime":1517970816925}}
{"body": {"column":31,"line":2,"wordToComplete":"","code":"\nn = int( input() )\nletters = [ x for x in input().]\n\n","offset":52,"fileType":"python3","requestStartTime":1517970820494}}
{"body": {"column":11,"line":27,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef electionWinner(votes):\n    temp={}\n    #votes.sort()\n    for i in votes : \n        if i in temp.keys() :\n            val = temp[i]\n            temp[i] = val+1\n        else : \n            temp[i] = 1\n    max = 0\n    print(temp)\n    for key, value  in temp.items() :\n        if max < value :\n            max = value\n    result = []\n    print(max)\n    for key2, value2 in temp.items():\n        if max == value2 :\n            result.append(key2)\n    result.\n    result = result[::-1]\n    print(result)\n    return result[0]\n    \n\n    \n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    votes_cnt = 0\n    votes_cnt = int(input())\n    votes_i = 0\n    votes = []\n    while votes_i < votes_cnt:\n        try:\n            votes_item = str(input())\n        except:\n            votes_item = None\n        votes.append(votes_item)\n        votes_i += 1\n\n\n    res = electionWinner(votes);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":529,"fileType":"python3","requestStartTime":1517970855817}}
{"body": {"column":20,"line":5,"wordToComplete":"Hello, World.\"","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninput_string = input(Hello, World)\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint(\"Hello, World.\")\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\n\n","offset":217,"fileType":"python3","requestStartTime":1517970970833}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n# read the string filename\nfilename = input()\nfile = open(filename, \"r\")\nlistOfDates = []\n\nfor line in file.\n\n","offset":110,"fileType":"python3","requestStartTime":1517970982810}}
{"body": {"column":85,"line":7,"wordToComplete":"TODO: Write a line of code here that prints the contents of input_string to stdout.","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninput_string = input(Hello, World)\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint(\"Hello, World.\")\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\n\n","offset":306,"fileType":"python3","requestStartTime":1517970984041}}
{"body": {"column":18,"line":7,"wordToComplete":"","code":"\n# read the string filename\nfilename = input()\nfile = open(filename, \"r\")\nlistOfDates = []\n\nfor line in file.readline():\n    strArr = line.\n\n","offset":140,"fileType":"python3","requestStartTime":1517971002363}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    words = {}\n    \n    mag = magazine.\n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":76,"fileType":"python3","requestStartTime":1517971003824}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    words = {}\n    \n    mag = magazine.split(' ')\n    ran = ransom.\n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":104,"fileType":"python3","requestStartTime":1517971011350}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    words = {}\n    \n    mag = magazine.split(' ')\n    ran = ransom.split(' ')\n    \n    for word in mag:\n        words.\n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":155,"fileType":"python3","requestStartTime":1517971038646}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n# read the string filename\nfilename = input()\nfile = open(filename, \"r\")\nlistOfDates = []\n\nfor line in file.readline():\n    strArr = line.split()\n    date = strArr[4]\n    dateFormatted = date[1:len(date) - 2]\n    listOfDates.\n\n","offset":227,"fileType":"python3","requestStartTime":1517971044022}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\n# read the string filename\nfilename = input()\nfile = open(filename, \"r\")\nlistOfDates = []\n\nfor line in file.readline():\n    strArr = line.split()\n    date = strArr[4]\n    dateFormatted = date[1:len(date) - 2]\n    listOfDates.append(dateFormatted)\n   \nnewFile = \"request_\" + filename\nnewFile1 = open(newFile, \"w+\")\nfor date in listOfDates:\n    newFile.\n\n","offset":353,"fileType":"python3","requestStartTime":1517971104414}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\nfrom itertools import combinations, ifilter\n\nn = int( input() )\nletters = [ x for x in input().split()]\nk = int( input( ) )\ncombs = combinations( letters, k ) \nacombs = ifilter( combs, lamba x : x[0] == 'a' or x[1] == 'a' )\nprint( list(combs).)\n\n\n","offset":245,"fileType":"python3","requestStartTime":1517971142435}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nphoneBook={}\nn=int(input())\nfor i in range(n):\n    \n    a=input().split()\n    phoneBook[a[0]]=a[1]\n\nwhile True:\n    a=input()\n    print(a,\" \",phoneBook.)\n    if a==\"\":\n        break\n\n","offset":154,"fileType":"python3","requestStartTime":1517971311388}}
{"body": {"column":7,"line":3,"wordToComplete":"","code":"\nimport re\nfor _ in (int(input())):\n    re.\n\n","offset":44,"fileType":"python3","requestStartTime":1517971509385}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\n\n#def predictTemperature(startDate, endDate, temperature, n):\n    temp = np.\n    p = endDate-startDate+1\n    hrs = p*24\n    avg = []\n    for i in range(0,hrs):\n        \n        \n        \n        \n        \n    pred = []    \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":166,"fileType":"python3","requestStartTime":1517971556983}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    info = input()\n    info.\n\nif __name__ = '__main__' :\n    main()\n\n","offset":113,"fileType":"python3","requestStartTime":1517971823800}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    info = input()\n    info.\n\nif __name__ = '__main__' :\n    main()\n\n","offset":113,"fileType":"python3","requestStartTime":1517971835053}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\n\n#def predictTemperature(startDate, endDate, temperature, n):\n    temp = np.asarray(temperature)\n    temp = np.\n    p = endDate-startDate+1\n    hrs = p*24\n    \n    avg = []\n    for i in range(0,hrs):\n    \n        \n        \n        \n        \n    pred = []    \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":201,"fileType":"python3","requestStartTime":1517971835846}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    visited = set()\n    node = head\n    while node != None:\n        if node.\n        \n    return False\n    \n\n\n","offset":377,"fileType":"python3","requestStartTime":1517971836829}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\n\n#def predictTemperature(startDate, endDate, temperature, n):\n    temp = np.asarray(temperature)\n    temp = temp.\n    p = endDate-startDate+1\n    hrs = p*24\n    \n    avg = []\n    for i in range(0,hrs):\n    \n        \n        \n        \n        \n    pred = []    \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":203,"fileType":"python3","requestStartTime":1517971847182}}
{"body": {"column":17,"line":20,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    visited = set()\n    node = head\n    while node != None:\n        if node.data in visited:\n            return True\n        else:\n            node.\n        \n    return False\n    \n\n\n","offset":449,"fileType":"python3","requestStartTime":1517971854528}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    visited = set()\n    node = head\n    while node != None:\n        if node.data in visited:\n            return True\n        else:\n            visited.\n        \n    return False\n    \n\n\n","offset":452,"fileType":"python3","requestStartTime":1517971858468}}
{"body": {"column":30,"line":20,"wordToComplete":"d","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    visited = set()\n    node = head\n    while node != None:\n        if node.data in visited:\n            return True\n        else:\n            visited.add(node.d)\n        \n    return False\n    \n\n\n","offset":462,"fileType":"python3","requestStartTime":1517971860075}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    visited = set()\n    node = head\n    while node != None:\n        if node.data in visited:\n            return True\n        else:\n            visited.add(node.data)\n        \n        node.\n        \n    return False\n    \n\n\n","offset":489,"fileType":"python3","requestStartTime":1517971897971}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    visited = set()\n    node = head\n    while node != None:\n        if node.data in visited:\n            return True\n        else:\n            visited.add(node.data)\n        \n        node = node.\n        \n    return False\n    \n\n\n","offset":496,"fileType":"python3","requestStartTime":1517971904945}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\n\n#def predictTemperature(startDate, endDate, temperature, n):\n    p = endDate-startDate+1\n    temp = np.asarray(temperature)\n    temp = temp.reshape(24,p)\n    preds = temp.\n    \n        \n        \n        \n        \n    pred = []    \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":262,"fileType":"python3","requestStartTime":1517972008747}}
{"body": {"column":23,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    info = input().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for line in tmp_type:\n        ml_type\n    \n\nif __name__ = '__main__' :\n    main()\n\n","offset":190,"fileType":"python3","requestStartTime":1517972125863}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef main():\n    info = input().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for ml in tmp_type:\n        ml_type.\n    \n\nif __name__ = '__main__' :\n    main()\n\n","offset":259,"fileType":"python3","requestStartTime":1517972134732}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countDuplicates(numbers):\n    numbers = sorted(numbers)\n    dup_numbers = []\n    for number in numbers:\n        prev_number = 0\n        if number == prev_number:\n            if number not in dup_numbers:\n                dup_numbers.\n        prev_number = number\n    return total_dup_count\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    res = countDuplicates(numbers);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":308,"fileType":"python3","requestStartTime":1517972233800}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\nfrom datetime import datetime\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    end = endDate.\n    \n    p = endDate-startDate+1\n    temp = np.asarray(temperature)\n    temp = temp.reshape(24,p)\n    preds = temp.mean(axis=0)\n    return preds \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":199,"fileType":"python3","requestStartTime":1517972252053}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef introTutorial(V, arr):\n    return arr.\n\nif __name__ == \"__main__\":\n    V = int(input().strip())\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    result = introTutorial(V, arr)\n    print(result)\n\n\n","offset":72,"fileType":"python3","requestStartTime":1517972252953}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    res = list()\n    if l % 2 == 0:\n        start = l + 1\n    else:\n        start = l\n    while l <=r:\n        res.\n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":210,"fileType":"python3","requestStartTime":1517972405853}}
{"body": {"column":60,"line":125,"wordToComplete":"","code":"\nimport json\nimport sys\n\n\"\"\"My approach for this challenge was to create an index which would retrieve doc_id's quickly based\n   on user queries. The docs would be stored in an array indexed in the order they were placed in the\n   array. The index is a dictionary that looks similar to the json structure of the queries except that\n   the values of each item are mapped to a list of doc_id's with that value. To modify, delete and\n   retrieve items from the index based on the json data, DFS is used extensively. When an item is deleted,\n   its entry in the docs dictionary points to null rather than actually deleting the entry since that\n   would throw off the index for all other docs. To re index a large data set in practice, a hadoop job\n   could be run to do this all at once.\"\"\"\nclass QueryByExample:\n    \"\"\"QueryByExample Solution for Quantcast.\"\"\"\n    \"\"\"TODO: A better design would be to use one single function\n       which takes in a callback function to delete, modify or get\n       items from the index. There is a lot of repeated DFS code.\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for solution.\"\"\"\n        # Index for fast retrieval of documents\n        self.index = {}\n    \n        # Stores Documents. self.docs[5] retrieves doc with id of 5\n        self.docs = []\n\n        # Keeps track of num_docs. This number uniquely identifies\n        # each document and corresponds to the current doc's index\n        self.current_doc_id = 0\n\n    def add(self, data):\n        self.docs.append(data)\n        self.modify_index(json.loads(data))\n        self.current_doc_id += 1\n        \n    \"\"\"Helper function for crawling a json dictionary using DFS\n       starting from provided path. Assumes the path exists\n       in self.index. Returns a set of all docs touched.\"\"\"\n    def crawl(self, node):\n        index_node = node\n        docs_touched = set()\n        stack = list()\n        for key in index_node.keys():\n            stack.append(index_node[key])\n        while not len(stack) == 0:\n            index_node = stack[-1]\n            stack.pop()\n            \n            # if obj is still a dictionary, recurse\n            if isinstance(index_node, dict):\n                keys = []\n                for key in index_node.keys():\n                    stack.append(index_node[key])\n\n            # Add doc_id's at the value to the set\n            else:    \n                for node in index_node:\n                    docs_touched.add(node)\n        return docs_touched\n\n    def get_or_delete(self, doc, delete):\n        \"\"\"Search in index for documents that satisfy all query items.\n           if delete flag is on, delete, else print the docs.\"\"\"\n        set_list = []\n        index_node = self.index\n        doc_node = doc\n        stack = list()\n        stack.append([index_node, doc_node])\n\n        while not len(stack) == 0:\n            index_node, doc_node = stack[-1]\n            stack.pop()\n            if len(doc_node) == 0:\n                set_list.append(self.crawl(index_node))\n                continue\n                \n            \n            for key in doc_node.keys():\n                if key not in index_node:\n                    continue\n                if isinstance(doc_node[key], dict) and isinstance(index_node[key], dict):\n                    stack.append([index_node[key], doc_node[key]])\n\n                # Accumulate candidate nodes to retrieve/delete\n                else:\n                    items = doc_node[key]\n                    if not isinstance(doc_node[key], list):\n                        items = [items]\n                    for item in items:\n                        if item in index_node[key]:\n                            set_list.append(set(index_node[key][item]))\n                        \n        # Calculate items to retrieve or delete via set_intersection\n        get_or_delete = []\n        if len(set_list) > 0:\n            get_or_delete = set.intersection(*set_list)\n        for item in get_or_delete:\n            if delete:\n                self.docs[item] = None\n            elif self.docs[item] != None:\n                print(self.docs[item])\n  \n    \"\"\"Modify Index. Called by add(data)\"\"\"\n    def modify_index(self, doc):\n        set_list = []\n        index_node = self.index\n        doc_node = doc\n        stack = list()\n        stack.append([index_node, doc_node])\n\n        while not len(stack) == 0:\n            index_node, doc_node = stack[-1]\n            stack.pop()\n            if len(doc_node) == 0:\n                set_list.append(self.crawl(index_node))\n                continue\n                \n            \n            for key in doc_node.keys():\n                if key not in index_node:\n                    index_node[key] = {}\n                if isinstance(doc_node[key], dict):\n                    stack.append([index_node[key], doc_node[key]])\n                else:\n                    if doc_node[key] not in index_node[key]:\n                        index_node[key] = []\n                    index[key][index_node[key]].append(this.)\n                index_node = self.index\n                for k in path:\n                    if k not in index_node:\n                        index_node[k] = {}\n                    index_node = index_node[k]\n                if curr_key not in index_node:\n                    index_node[curr_key] = {}\n                    \n                if not isinstance(values, list):\n                    values = [values]\n                for value in values:\n                    if isinstance(value, list):\n                        stack.append[[path, value]]\n                        continue\n                    if value not in index_node[curr_key]:\n                        index_node[curr_key][value] = []\n                    index_node[curr_key][value].append(self.current_doc_id)\n\n    def run(self):\n        \"\"\"Driver. Handles input from stdin.\"\"\"\n        for line in sys.stdin:\n            cmd, data = line.strip().split(' ', 1)\n            if cmd == 'add':\n                self.add(data)\n            elif cmd == 'get':\n                self.get_or_delete(json.loads(data), False)\n            elif cmd == 'delete':\n                self.get_or_delete(json.loads(data), True)\n                \nif __name__ == '__main__':\n    qbe = QueryByExample()\n    qbe.run()\n\n","offset":5008,"fileType":"python3","requestStartTime":1517972427108}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    tmp = prices[1:]\n    tmp.\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(input())\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n\n","offset":115,"fileType":"python3","requestStartTime":1517972454180}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef mooseMoney(balance, withdraw, size, ml_type):\n    result = []\n    for i in range(len(ml_type)-1, -1, -1):\n        result.\n        while withdraw > ml_type[i]:\n            \n    \n    return 'Cannot put into packets'\n\n\ndef main():\n    info = input().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for ml in tmp_type:\n        ml_type.append(int(ml)\n    result = mooseMoney(B, W, N, ml_type)\n    print(result)\n\nif __name__ = '__main__' :\n    main()\n\n","offset":197,"fileType":"python3","requestStartTime":1517972595069}}
{"body": {"column":41,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef mooseMoney(balance, withdraw, size, ml_type):\n    result = []\n    for i in range(len(ml_type)-1, -1, -1):\n        result.append([ml_type])\n        while withdraw > ml_type[i]:\n            \n    \n    return 'Cannot put into packets'\n\n\ndef main():\n    info = input().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for ml in tmp_type:\n        ml_type.append(int(ml)\n    result = mooseMoney(B, W, N, ml_type.)\n    print(result)\n\nif __name__ = '__main__' :\n    main()\n\n","offset":551,"fileType":"python3","requestStartTime":1517972664054}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    tmp = prices[1:]\n    tmp.reverse()\n    minprice = float('inf')\n    ans = 0\n    res = []\n    for i in range(len(tmp)):\n        minprice = min(minprice, tmp[i])\n        if tmp[i] == minprice:\n            ans += tmp[i]\n            res.\n        else:\n            ans += tmp[i] - minprice\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(input())\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n\n","offset":322,"fileType":"python3","requestStartTime":1517972686705}}
{"body": {"column":9,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\nfrom datetime import date,datetime\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    end = datetime.strptime(endDate, '%Y-%m-%d')\n    start = datetime.strptime(startDate, '%Y-%m-%d')\n    d = (end-start).days\n    p = d+1\n    temp = np.asarray(temperature)\n    temp = temp.reshape(24,p)\n    temp.\n    preds = temp.mean(axis=0)\n    return temp \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":399,"fileType":"python3","requestStartTime":1517972717797}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef mooseMoney(balance, withdraw, size, ml_type):\n    result = []\n    for i in range(len(ml_type)):\n        result.append([ml_type])\n        cnt = 0\n        while withdraw > ml_type[i]:\n            withdraw -= ml_type[i]\n            cnt += 1\n        result[i].\n    \n    return 'Cannot put into packets'\n\n\ndef main():\n    info = input().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for ml in tmp_type:\n        ml_type.append(int(ml)\n    result = mooseMoney(B, W, N, ml_type.reverse())\n    print(result)\n\nif __name__ = '__main__' :\n    main()\n\n","offset":332,"fileType":"python3","requestStartTime":1517972746628}}
{"body": {"column":9,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport numpy as np\nfrom datetime import date,datetime\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    end = datetime.strptime(endDate, '%Y-%m-%d')\n    start = datetime.strptime(startDate, '%Y-%m-%d')\n    d = (end-start).days\n    p = d+1\n    temp = np.asarray(temperature)\n    temp = temp.reshape(24,p)\n    temp.np.char.strip('ashok arora','a') \n    temp.astype(float)\n    preds = temp.mean(axis=0)\n    return temp \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":399,"fileType":"python3","requestStartTime":1517972787941}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    tmp = prices[1:]\n    tmp.reverse()\n    minprice = float('inf')\n    ans = 0\n    res = []\n    for i in range(len(tmp)):\n        minprice = min(minprice, tmp[i])\n        if tmp[i] == minprice:\n            ans += tmp[i]\n            res.append(len(tmp) - 1 - i)\n        else:\n            ans += tmp[i] - minprice\n    res.\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(input())\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n\n","offset":406,"fileType":"python3","requestStartTime":1517972878671}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef mooseMoney(balance, withdraw, size, ml_type):\n    result = []\n    tot_cnt = 0\n    for i in range(len(ml_type)):\n        result.append([ml_type])\n        cnt = 0\n        while withdraw >= ml_type[i]:\n            withdraw -= ml_type[i]\n            cnt += 1\n        result[i].append(cnt)\n        tot_cnt += cnt\n    if tot_cnt > size or withdraw != 0 :\n        return 'Cannot put into packets'\n    else:\n        result.\n        return result\n\n\ndef main():\n    info = input().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for ml in tmp_type:\n        ml_type.append(int(ml)\n    result = mooseMoney(B, W, N, ml_type.reverse())\n    print(result)\n\nif __name__ = '__main__' :\n    main()\n\n","offset":491,"fileType":"python3","requestStartTime":1517972882355}}
{"body": {"column":26,"line":26,"wordToComplete":"","code":"#\n#\ndef nextMove(n,r,c,grid):\n    coordinates ={}\n    coordinates['m'] = (r,c)\n    list_data =[]\n    for i in range(0,n):\n        for j in range(0,n):\n            if grid[i][j] =='p':\n                coordinates['p'] =(i,j)\n\n    if coordinates['p'][0] == coordinates['m'][0]:\n        steps = coordinates['p'][1]-coordinates['m'][1]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('LEFT')\n\n\n    elif coordinates['p'][1] == coordinates['m'][1]:\n        steps = coordinates['p'][0]-coordinates['m'][0]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.('DOWN')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data('UP')\n\n    else:\n\n        steps_column = coordinates['p'][1]-coordinates['m'][1]\n\n        steps_rows = coordinates['p'][0]-coordinates['m'][0]\n\n        if steps_column>0:\n            for i in range(0,steps_column):\n                list_data('RIGHT')\n\n        else:\n            for i in range(0,abs(steps_column)):\n                list_data('LEFT')\n\n        if steps_rows>0:\n            for i in range(0,steps_rows):\n                list_data('DOWN')\n\n        else:\n            for i in range(0,abs(steps_rows)):\n                list_data('UP')\n    return list_data[0]\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n","offset":724,"fileType":"python3","requestStartTime":1517973115402}}
{"body": {"column":26,"line":30,"wordToComplete":"","code":"#\n#\ndef nextMove(n,r,c,grid):\n    coordinates ={}\n    coordinates['m'] = (r,c)\n    list_data =[]\n    for i in range(0,n):\n        for j in range(0,n):\n            if grid[i][j] =='p':\n                coordinates['p'] =(i,j)\n\n    if coordinates['p'][0] == coordinates['m'][0]:\n        steps = coordinates['p'][1]-coordinates['m'][1]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('LEFT')\n\n\n    elif coordinates['p'][1] == coordinates['m'][1]:\n        steps = coordinates['p'][0]-coordinates['m'][0]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('DOWN')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.('UP')\n\n    else:\n\n        steps_column = coordinates['p'][1]-coordinates['m'][1]\n\n        steps_rows = coordinates['p'][0]-coordinates['m'][0]\n\n        if steps_column>0:\n            for i in range(0,steps_column):\n                list_data('RIGHT')\n\n        else:\n            for i in range(0,abs(steps_column)):\n                list_data('LEFT')\n\n        if steps_rows>0:\n            for i in range(0,steps_rows):\n                list_data('DOWN')\n\n        else:\n            for i in range(0,abs(steps_rows)):\n                list_data('UP')\n    return list_data[0]\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n","offset":822,"fileType":"python3","requestStartTime":1517973119096}}
{"body": {"column":26,"line":40,"wordToComplete":"","code":"#\n#\ndef nextMove(n,r,c,grid):\n    coordinates ={}\n    coordinates['m'] = (r,c)\n    list_data =[]\n    for i in range(0,n):\n        for j in range(0,n):\n            if grid[i][j] =='p':\n                coordinates['p'] =(i,j)\n\n    if coordinates['p'][0] == coordinates['m'][0]:\n        steps = coordinates['p'][1]-coordinates['m'][1]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('LEFT')\n\n\n    elif coordinates['p'][1] == coordinates['m'][1]:\n        steps = coordinates['p'][0]-coordinates['m'][0]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('DOWN')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('UP')\n\n    else:\n\n        steps_column = coordinates['p'][1]-coordinates['m'][1]\n\n        steps_rows = coordinates['p'][0]-coordinates['m'][0]\n\n        if steps_column>0:\n            for i in range(0,steps_column):\n                list_data.('RIGHT')\n\n        else:\n            for i in range(0,abs(steps_column)):\n                list_data('LEFT')\n\n        if steps_rows>0:\n            for i in range(0,steps_rows):\n                list_data('DOWN')\n\n        else:\n            for i in range(0,abs(steps_rows)):\n                list_data('UP')\n    return list_data[0]\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n","offset":1070,"fileType":"python3","requestStartTime":1517973123911}}
{"body": {"column":26,"line":44,"wordToComplete":"","code":"#\n#\ndef nextMove(n,r,c,grid):\n    coordinates ={}\n    coordinates['m'] = (r,c)\n    list_data =[]\n    for i in range(0,n):\n        for j in range(0,n):\n            if grid[i][j] =='p':\n                coordinates['p'] =(i,j)\n\n    if coordinates['p'][0] == coordinates['m'][0]:\n        steps = coordinates['p'][1]-coordinates['m'][1]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('LEFT')\n\n\n    elif coordinates['p'][1] == coordinates['m'][1]:\n        steps = coordinates['p'][0]-coordinates['m'][0]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('DOWN')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('UP')\n\n    else:\n\n        steps_column = coordinates['p'][1]-coordinates['m'][1]\n\n        steps_rows = coordinates['p'][0]-coordinates['m'][0]\n\n        if steps_column>0:\n            for i in range(0,steps_column):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps_column)):\n                list_data.('LEFT')\n\n        if steps_rows>0:\n            for i in range(0,steps_rows):\n                list_data('DOWN')\n\n        else:\n            for i in range(0,abs(steps_rows)):\n                list_data('UP')\n    return list_data[0]\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n","offset":1176,"fileType":"python3","requestStartTime":1517973127471}}
{"body": {"column":26,"line":48,"wordToComplete":"","code":"#\n#\ndef nextMove(n,r,c,grid):\n    coordinates ={}\n    coordinates['m'] = (r,c)\n    list_data =[]\n    for i in range(0,n):\n        for j in range(0,n):\n            if grid[i][j] =='p':\n                coordinates['p'] =(i,j)\n\n    if coordinates['p'][0] == coordinates['m'][0]:\n        steps = coordinates['p'][1]-coordinates['m'][1]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('LEFT')\n\n\n    elif coordinates['p'][1] == coordinates['m'][1]:\n        steps = coordinates['p'][0]-coordinates['m'][0]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('DOWN')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('UP')\n\n    else:\n\n        steps_column = coordinates['p'][1]-coordinates['m'][1]\n\n        steps_rows = coordinates['p'][0]-coordinates['m'][0]\n\n        if steps_column>0:\n            for i in range(0,steps_column):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps_column)):\n                list_data.append('LEFT')\n\n        if steps_rows>0:\n            for i in range(0,steps_rows):\n                list_data.('DOWN')\n\n        else:\n            for i in range(0,abs(steps_rows)):\n                list_data('UP')\n    return list_data[0]\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n","offset":1285,"fileType":"python3","requestStartTime":1517973131548}}
{"body": {"column":26,"line":52,"wordToComplete":"","code":"#\n#\ndef nextMove(n,r,c,grid):\n    coordinates ={}\n    coordinates['m'] = (r,c)\n    list_data =[]\n    for i in range(0,n):\n        for j in range(0,n):\n            if grid[i][j] =='p':\n                coordinates['p'] =(i,j)\n\n    if coordinates['p'][0] == coordinates['m'][0]:\n        steps = coordinates['p'][1]-coordinates['m'][1]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('LEFT')\n\n\n    elif coordinates['p'][1] == coordinates['m'][1]:\n        steps = coordinates['p'][0]-coordinates['m'][0]\n        if steps>0:\n            for i in range(0,steps):\n                list_data.append('DOWN')\n\n        else:\n            for i in range(0,abs(steps)):\n                list_data.append('UP')\n\n    else:\n\n        steps_column = coordinates['p'][1]-coordinates['m'][1]\n\n        steps_rows = coordinates['p'][0]-coordinates['m'][0]\n\n        if steps_column>0:\n            for i in range(0,steps_column):\n                list_data.append('RIGHT')\n\n        else:\n            for i in range(0,abs(steps_column)):\n                list_data.append('LEFT')\n\n        if steps_rows>0:\n            for i in range(0,steps_rows):\n                list_data.append('DOWN')\n\n        else:\n            for i in range(0,abs(steps_rows)):\n                list_data.('UP')\n    return list_data[0]\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n\nn = int(input())\nr,c = [int(i) for i in input().strip().split()]\ngrid = []\nfor i in range(0, n):\n    grid.append(input())\n\nprint(nextMove(n,r,c,grid))\n","offset":1388,"fileType":"python3","requestStartTime":1517973136807}}
{"body": {"column":19,"line":26,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef mooseMoney(balance, withdraw, size, ml_type):\n    result = []\n    tot_cnt = 0\n    remain = balance - withdraw\n    for i in range(len(ml_type)):\n        result.append([ml_type])\n        cnt = 0\n        while withdraw >= ml_type[i]:\n            withdraw -= ml_type[i]\n            cnt += 1\n        result[i].append(cnt)\n        tot_cnt += cnt\n    if tot_cnt > size or withdraw != 0 :\n        return 'Cannot put into packets'\n    else:\n        result.reverse()\n        line = ''\n        for i in range(len(result)):\n            line += (str(result[i][1] + ':' + str(result[i][0]) + ' '))\n        line += str(remain)\n        return line\n\n\ndef main():\n    info = input().strip().split()\n    B, W, N = int(info[0]), int(info[1]), int(info[2])\n    tmp_type = input().split('\\n')\n    ml_type = []\n    for ml in tmp_type:\n        ml_type.append(int(ml)\n    result = mooseMoney(B, W, N, ml_type.reverse())\n    print(result)\n\nif __name__ = '__main__' :\n    main()\n\n","offset":741,"fileType":"python3","requestStartTime":1517973153862}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\ndef is_matched(expression):\n    stack = []\n    for char in expression:\n        print(char)\n        \n    if stack.\n    \n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":115,"fileType":"python3","requestStartTime":1517973657507}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    unlocks = []\n    for x in doors:\n        if !skip and x == 1:\n            unlocks.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":180,"fileType":"python3","requestStartTime":1517973787788}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef path():\n    pass\n\n\ndef main():\n    r_num = int(input())\n    maze = []\n    for i in range(r_num):\n        maze.\n\nif __name__ == 'main':\n    main()\n    \n\n","offset":186,"fileType":"python3","requestStartTime":1517973960354}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef path():\n    pass\n\n\ndef main():\n    r_num = int(input())\n    maze = []\n    for i in range(r_num):\n        row = input(.)\n        maze.append\n\nif __name__ == 'main':\n    main()\n    \n\n","offset":194,"fileType":"python3","requestStartTime":1517973967911}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef path():\n    pass\n\n\ndef main():\n    r_num = int(input())\n    maze = []\n    for i in range(r_num):\n        row = input().\n        maze.append\n\nif __name__ == 'main':\n    main()\n    \n\n","offset":195,"fileType":"python3","requestStartTime":1517973969301}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef path():\n    pass\n\n\ndef main():\n    r_num = int(input())\n    maze = []\n    for i in range(r_num):\n        row = input().strip().\n        maze.append\n\nif __name__ == 'main':\n    main()\n    \n\n","offset":203,"fileType":"python3","requestStartTime":1517973988385}}
{"body": {"column":21,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nfrom datetime import datetime\n\n\n# Complete the function below.\n\ndef difference_in_days(date1, date2):\n   \n    #date1 = datetime.strptime(date1, '%m-%d-%Y')\n    #date2 = datetime.strptime(date2, '%m-%d-%Y')\n    #diff = (date2 - date1)\n    #diff = diff.days\n    #print(date1)\n    #print(diff.days)\n\n    date1 = datetime.date(date1, '%m-%d-%Y')\n    date2 = date(date2, '%m-%d-%Y')\ndate1 = sys.stdin.readline().strip()\ndate2 = sys.stdin.readline().strip()\ndiff = difference_in_days(date1, date2)\nprint(diff)\n","offset":356,"fileType":"python3","requestStartTime":1517974185503}}
{"body": {"column":4,"line":1,"wordToComplete":"","code":"\nx=a.\n\n","offset":6,"fileType":"python3","requestStartTime":1517974315430}}
{"body": {"column":4,"line":2,"wordToComplete":"","code":"\nx=a.difference(b)\ny=b.\n\n","offset":24,"fileType":"python3","requestStartTime":1517974322191}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\ndef is_matched(expression):\n    stack = []\n    for char in expression:\n        top = None\n        if len(stack):\n            top = stack[-1]\n        \n        print(top)\n        \n        if top == char:\n            stack.\n        else:\n            print('no stack')\n        \n    if len(stack):\n        return False\n    \n    return True\n    \n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":222,"fileType":"python3","requestStartTime":1517974318676}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\ndef is_matched(expression):\n    stack = []\n    for char in expression:\n        top = None\n        if len(stack):\n            top = stack[-1]\n        \n        print(top)\n        \n        if top == char:\n            stack.pop()\n        else:\n            stack.\n        \n    if len(stack):\n        return False\n    \n    return True\n    \n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":260,"fileType":"python3","requestStartTime":1517974325080}}
{"body": {"column":38,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef path(maze):\n    \n    \n    return('world')\n\n\ndef main():\n    r_num = int(input())\n    maze = []\n    for i in range(r_num):\n        row = input().strip()\n        maze.append(list(row))\n        if 'S' in row:\n            start = [len(maze)-1, row.]\n    result = path(maze)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n    \n\n","offset":320,"fileType":"python3","requestStartTime":1517974503165}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\ndef is_matched(expression):\n    stack = []\n    for char in expression:\n        top = None\n        if len(stack):\n            top = stack[-1]\n        \n        if top == '(' and char == ')':\n            stack.pop()\n        elif top == '[' and char == ']':\n            stack.\n        else:\n            stack.append(char)\n    \n    if len(stack):\n        return False\n    \n    return True\n    \n\nt = int(input().strip())\nfor a0 in range(t):\n    expression = input().strip()\n    if is_matched(expression) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n","offset":274,"fileType":"python3","requestStartTime":1517974545301}}
{"body": {"column":28,"line":47,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findGameStatus(board):\n    \n    # GET ALL POSSIBLE WINNERS\n    winners = []\n    \n    # CHECK HORIZONTAL\n    try:\n        for i in range(board_cols):\n            for k in range(board_rows):\n                if board[k][i] == board[k][i+1] == board[k][i+2] == board[k][i+3] and board[k][i] != '0':\n                    winners.append(board[k][i])\n    except IndexError:\n        pass\n           \n            \n    \n    # CHECKING VERTICAL SOLUTION\n    reformatted_board = []\n    for i in range(board_cols):\n        col = []\n        for row in board:\n            col.append(row[i])\n        reformatted_board.append(col)\n    \n    try:\n        for i in range(board_cols):\n            for k in range(board_rows):\n                if reformatted_board[k][i] == reformatted_board[k][i+1] == reformatted_board[k][i+2] == reformatted_board[k][i+3] and reformatted_board[k][i] != '0':\n                    winners.append(reformatted_board[k][i])\n    except IndexError:\n        pass\n    \n    # CHECKING DIAGNOAL POSITION\n    \n    # CHECK DIAGNOL TO BOT RIGHT\n    try:\n        for row in range(board_rows):\n            for col in range(board_cols):\n                if board[row][col] == board[row+1][col+1] == board[row+2][col+2] == board[row+3][col+3] and board[row][col] != '0':\n                    winners.third_check = board[row][col]       \n    except IndexError:\n        pass\n            \n    # CHECK DIAGNOL TO BOT LEFT\n    try:\n        for row in range(board_rows):\n            for col in range(board_cols):\n                if board[row][col] == board[row+1][col-1] == board[row+2][col-2] == board[row+3][col-3] and board[row][col] != '0':\n                    fourth_check = board[row][col]\n    except IndexError:\n        pass\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    board_rows = 0\n    board_cols = 0\n    board_rows = int(input())\n    board_cols = int(input())\n\n    board = []\n    for board_i in range(board_rows):\n        board_temp = [str(board_t) for board_t in input().strip().split(' ')]\n        board.append(board_temp)\n\n    res = findGameStatus(board);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":1366,"fileType":"python3","requestStartTime":1517974809641}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    ret=[]\n    \n    for i in range(l,r+1):\n        if i%2==1:\n            ret.\n            \n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":173,"fileType":"python3","requestStartTime":1517975136797}}
{"body": {"column":31,"line":10,"wordToComplete":"That meal came to about.\"","code":"\n\nmealCost = float(input())\ntipPercent = int(input())\ntaxPercent = int(input())\ntip = mealCost * (tipPercent/100)\ntax = mealCost * (taxPercent/100)\ntotalCost = mealCost + tip + tax\nround(totalCost,0)\n    \nprint(\"That meal came to about.\"(totalCost)\n\n\n","offset":237,"fileType":"python3","requestStartTime":1517975198133}}
{"body": {"column":32,"line":10,"wordToComplete":"That meal came to about..\"","code":"\n\nmealCost = float(input())\ntipPercent = int(input())\ntaxPercent = int(input())\ntip = mealCost * (tipPercent/100)\ntax = mealCost * (taxPercent/100)\ntotalCost = mealCost + tip + tax\nround(totalCost,0)\n    \nprint(\"That meal came to about..\"(totalCost)\n\n\n","offset":238,"fileType":"python3","requestStartTime":1517975198497}}
{"body": {"column":33,"line":10,"wordToComplete":"That meal came to about...\"","code":"\n\nmealCost = float(input())\ntipPercent = int(input())\ntaxPercent = int(input())\ntip = mealCost * (tipPercent/100)\ntax = mealCost * (taxPercent/100)\ntotalCost = mealCost + tip + tax\nround(totalCost,0)\n    \nprint(\"That meal came to about...\"(totalCost)\n\n\n","offset":239,"fileType":"python3","requestStartTime":1517975199371}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    sol =[]\n    if l % 2 == 0:\n        l += 1\n    while l <= r: \n        sol.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":172,"fileType":"python3","requestStartTime":1517975540447}}
{"body": {"column":56,"line":8,"wordToComplete":"","code":"\n\nmealCost = float(input())\ntipPercent = int(input())\ntaxPercent = int(input())\ntip = mealCost * (tipPercent/100)\ntax = mealCost * (taxPercent/100)\ntotalCost = mealCost + tip + tax\nprint(\"The total meal cost is\" + (round(totalCost)) + '.')\n\n\n","offset":238,"fileType":"python3","requestStartTime":1517975605995}}
{"body": {"column":8,"line":67,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findGameStatus(board):\n    \n    # GET ALL POSSIBLE WINNERS\n    first_check = '0'\n    second_check = '0'\n    third_check = '0'\n    fourth_check = '0'\n    \n    # CHECK HORIZONTAL\n    try:\n        for i in range(board_cols):\n            for k in range(board_rows):\n                if board[k][i] == board[k][i+1] == board[k][i+2] == board[k][i+3] and board[k][i] != '0':\n                    first_check = board[k][i]\n    except IndexError:\n        pass\n           \n            \n    \n    # CHECKING VERTICAL SOLUTION\n    reformatted_board = []\n    for i in range(board_cols):\n        col = []\n        for row in board:\n            col.append(row[i])\n        reformatted_board.append(col)\n    \n    try:\n        for i in range(board_cols):\n            for k in range(board_rows):\n                if reformatted_board[k][i] == reformatted_board[k][i+1] == reformatted_board[k][i+2] == reformatted_board[k][i+3] and reformatted_board[k][i] != '0':\n                    second_check = reformatted_board[k][i]\n    except IndexError:\n        pass\n    \n    # CHECKING DIAGNOAL POSITION\n    \n    # CHECK DIAGNOL TO BOT RIGHT\n    try:\n        for row in range(board_rows):\n            for col in range(board_cols):\n                if board[row][col] == board[row+1][col+1] == board[row+2][col+2] == board[row+3][col+3] and board[row][col] != '0':\n                    third_check = board[row][col]       \n    except IndexError:\n        pass\n            \n    # CHECK DIAGNOL TO BOT LEFT\n    try:\n        for row in range(board_rows):\n            for col in range(board_cols):\n                if board[row][col] == board[row+1][col-1] == board[row+2][col-2] == board[row+3][col-3] and board[row][col] != '0':\n                    fourth_check = board[row][col]\n    except IndexError:\n        pass\n    \n    print(first_check, second_check, third_check, fourth_check)\n    \n    sol = []\n    sol.append(first_check)\n    sol.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    board_rows = 0\n    board_cols = 0\n    board_rows = int(input())\n    board_cols = int(input())\n\n    board = []\n    for board_i in range(board_rows):\n        board_temp = [str(board_t) for board_t in input().strip().split(' ')]\n        board.append(board_temp)\n\n    res = findGameStatus(board);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":1977,"fileType":"python3","requestStartTime":1517975673483}}
{"body": {"column":32,"line":8,"wordToComplete":"The total meal cost is %.\"","code":"\n\nmealCost = float(input())\ntipPercent = int(input())\ntaxPercent = int(input())\ntip = mealCost * (tipPercent/100)\ntax = mealCost * (taxPercent/100)\ntotalCost = mealCost + tip + tax\nprint(\"The total meal cost is %.\")\n\n\n","offset":214,"fileType":"python3","requestStartTime":1517975759890}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":62,"fileType":"python3","requestStartTime":1517975787010}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":89,"fileType":"python3","requestStartTime":1517975789167}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.\n\n\n","offset":180,"fileType":"python3","requestStartTime":1517975793980}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.left = None and self.\n\n\n","offset":201,"fileType":"python3","requestStartTime":1517975803787}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.left = None and self.right = None:\n        return \"Yes\"\n    if self.\n    \n\n\n","offset":248,"fileType":"python3","requestStartTime":1517975825676}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.left = None and self.right = None:\n        return \"Yes\"\n    if self.left >\n    \n\n\n","offset":254,"fileType":"python3","requestStartTime":1517975827883}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        self.\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":221,"fileType":"python3","requestStartTime":1517975830593}}
{"body": {"column":43,"line":6,"wordToComplete":"Distance from left end to first city.","code":"\n#!/bin/python3\n\nimport sys\n\ndef flatlandSpaceStations(n, c):\n    # Distance from left end to first city.\n        \n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    c = list(map(int, input().strip().split(' ')))\n    result = flatlandSpaceStations(n, c)\n    print(result)\n\n\n","offset":106,"fileType":"python3","requestStartTime":1517975837361}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        self.bottomUp.\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":230,"fileType":"python3","requestStartTime":1517975834602}}
{"body": {"column":43,"line":8,"wordToComplete":"Distance from last city to righ tend.","code":"\n#!/bin/python3\n\nimport sys\n\ndef flatlandSpaceStations(n, c):\n    # Distance from left end to first city.\n    \n    # Distance from last city to righ tend.\n        \n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    c = list(map(int, input().strip().split(' ')))\n    result = flatlandSpaceStations(n, c)\n    print(result)\n\n\n","offset":155,"fileType":"python3","requestStartTime":1517975847216}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.left = None and self.right = None:\n        return \"Yes\"\n    if self.left > root or self.:\n        return \"No\"\n    \n\n\n","offset":268,"fileType":"python3","requestStartTime":1517975857362}}
{"body": {"column":31,"line":10,"wordToComplete":"Distances between cities.","code":"\n#!/bin/python3\n\nimport sys\n\ndef flatlandSpaceStations(n, c):\n    # Distance from left end to first city.\n    \n    # Distance from last city to right end.\n    \n    # Distances between cities.\n        \n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    c = list(map(int, input().strip().split(' ')))\n    result = flatlandSpaceStations(n, c)\n    print(result)\n\n\n","offset":192,"fileType":"python3","requestStartTime":1517975859615}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if self.\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":180,"fileType":"python3","requestStartTime":1517975864446}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.left = None and self.right = None:\n        return \"Yes\"\n    if self.left > root or self.right < root:\n        return \"No\"\n    checkBST(self.)\n    \n\n\n","offset":320,"fileType":"python3","requestStartTime":1517975869315}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if self.left = None and self.right = None:\n        return \"Yes\"\n    if self.left > root or self.right < root:\n        return \"No\"\n    checkBST(self.left)\n    checkBST(self.)\n    \n\n\n","offset":344,"fileType":"python3","requestStartTime":1517975873545}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            while self.\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":217,"fileType":"python3","requestStartTime":1517975882963}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkBST(root):\n    if this..left == None and self.right == None:\n        return \"Yes\"\n    if self.left > root or self.right < root:\n        return \"No\"\n    checkBST(self.left)\n    checkBST(self.right)\n    \n\n\n","offset":180,"fileType":"python3","requestStartTime":1517975908977}}
{"body": {"column":29,"line":12,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            while len(self.bottomUp) > 1:\n                value = self.\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":265,"fileType":"python3","requestStartTime":1517975936536}}
{"body": {"column":38,"line":12,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            while len(self.bottomUp) > 1:\n                value = self.bottomUp.\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":274,"fileType":"python3","requestStartTime":1517975938489}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            while len(self.bottomUp) > 1:\n                value = self.bottomUp.pop()\n                self.\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":301,"fileType":"python3","requestStartTime":1517975951100}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            while len(self.bottomUp) > 1:\n                value = self.bottomUp.pop()\n                self.topDown.\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":309,"fileType":"python3","requestStartTime":1517975954170}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.)\n        if len(self.topDown) == 0:\n            while len(self.bottomUp) > 1:\n                value = self.bottomUp.pop()\n                self.topDown.append(value)\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":184,"fileType":"python3","requestStartTime":1517975988122}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            self.\n        if len(self.topDown) == 0:\n            while len(self.bottomUp) > 1:\n                value = self.bottomUp.pop()\n                self.topDown.append(value)\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":211,"fileType":"python3","requestStartTime":1517975993434}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            self.topDown.\n        if len(self.topDown) == 0:\n            while len(self.bottomUp) > 1:\n                value = self.bottomUp.pop()\n                self.topDown.append(value)\n        \n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":219,"fileType":"python3","requestStartTime":1517975998530}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            return self.topDown.pop()\n\n        while len(self.bottomUp) > 1:\n            value = self.bottomUp.pop()\n            self.topDown.append(value)\n        \n        return self.\n\n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":379,"fileType":"python3","requestStartTime":1517976027813}}
{"body": {"column":29,"line":17,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n    \n    def peek(self):\n        \n        \n    def pop(self):\n        if len(self.topDown):\n            return self.topDown.pop()\n\n        while len(self.bottomUp) > 1:\n            value = self.bottomUp.pop()\n            self.topDown.append(value)\n        \n        return self.bottomUp.\n\n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":388,"fileType":"python3","requestStartTime":1517976030630}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n        \n    def swap(self):\n        while len(self.bottomUp) > 1:\n            value = self.bottomUp.pop()\n            self.topDown.append(value)\n    \n    def peek(self):\n        if len(self.\n        \n    def pop(self):\n        if len(self.topDown):\n            return self.topDown.pop()\n\n        swap()\n        return self.bottomUp.pop()\n\n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":293,"fileType":"python3","requestStartTime":1517976161785}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n        \n    def swap(self):\n        while len(self.bottomUp) > 1:\n            value = self.bottomUp.pop()\n            self.topDown.append(value)\n    \n    def peek(self):\n        if len(self.topDown):\n            return self.\n        \n    def pop(self):\n        if len(self.topDown):\n            return self.topDown.pop()\n\n        swap()\n        return self.bottomUp.pop()\n\n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":327,"fileType":"python3","requestStartTime":1517976168713}}
{"body": {"column":67,"line":7,"wordToComplete":"Max distance to the points between cities with space statins.","code":"\n#!/bin/python3\n\nimport sys\n\ndef flatlandSpaceStations(n, c):\n    max_distance = 0\n    # Max distance to the points between cities with space statins.\n    j = 0\n    for i in sorted(c):\n        max_distance_to_middle = (i - j) // 2\n        max_distance = max(max_distance, max_distance_to_middle)\n        j = i\n    # Distance from last city with space station to last city.\n    return max(max_distance, (n - 1) - c[-1])\n        \n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    c = list(map(int, input().strip().split(' ')))\n    result = flatlandSpaceStations(n, c)\n    print(result)\n\n\n","offset":151,"fileType":"python3","requestStartTime":1517976208946}}
{"body": {"column":74,"line":7,"wordToComplete":"Distance from the first city to the first city with a space station.","code":"\n#!/bin/python3\n\nimport sys\n\ndef flatlandSpaceStations(n, c):\n    max_distance = 0\n    # Distance from the first city to the first city with a space station.\n    # Max distance to the points between cities with space stations.\n    j = 0\n    for i in sorted(c):\n        max_distance_to_middle = (i - j) // 2\n        max_distance = max(max_distance, max_distance_to_middle)\n        j = i\n    # Distance from last city with space station to last city.\n    return max(max_distance, (n - 1) - c[-1])\n        \n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    c = list(map(int, input().strip().split(' ')))\n    result = flatlandSpaceStations(n, c)\n    print(result)\n\n\n","offset":158,"fileType":"python3","requestStartTime":1517976274903}}
{"body": {"column":5,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\ndef get_median():\n    \n\nn = int(input().strip())\na = []\na_i = 0\nfor a_i in range(n):\n   a_t = int(input().strip())\n   a.\n   print(get_median(a_t))\n\n","offset":157,"fileType":"python3","requestStartTime":1517976337910}}
{"body": {"column":53,"line":8,"wordToComplete":"","code":"\ndata = input()\nans=-1\npos=0\ndone = 0\nfor i in data:\n    pos=pos+1\n    for j in range(pos,len(data)):\n        if i == data[j] and done == 0 and data[j]!='.':\n            ans = i\n            done = 1\nprint(ans)\n\n","offset":156,"fileType":"python3","requestStartTime":1517976357546}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n        \n    def swap(self):\n        while len(self.bottomUp):\n            value = self.bottomUp.pop()\n            self.topDown.append(value)\n    \n    def peek(self):\n        if not len(self.topDown):\n            self.swap()\n\n        return self.topDown[-1]\n        \n    def pop(self):\n        if not len(self.topDown):\n            swap()\n\n        return self.bottomUp.pop()\n\n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":320,"fileType":"python3","requestStartTime":1517976380308}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.bottomUp = []\n        self.topDown = []\n        \n    def swap(self):\n        while len(self.bottomUp):\n            value = self.bottomUp.pop()\n            self.topDown.append(value)\n    \n    def peek(self):\n        if not len(self.topDown):\n            self.swap()\n\n        return self.topDown[-1]\n        \n    def pop(self):\n        if not len(self.topDown):\n            self.swap()\n\n        return self.bottomUp.pop()\n\n    def put(self, value):\n        self.bottomUp.append(value)\n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":439,"fileType":"python3","requestStartTime":1517976383031}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    rounded_grades = []\n    for grade in grades:\n        rounded. grade if grade < 38\n        \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":114,"fileType":"python3","requestStartTime":1517976421015}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    rounded_grades = []\n    for grade in grades:\n        rounded_grades. grade if grade < 38\n        \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":121,"fileType":"python3","requestStartTime":1517976423628}}
{"body": {"column":50,"line":8,"wordToComplete":"","code":"\ndata = input()\nans=-1\npos=0\ndone = 0\nfor i in data:\n    pos=pos+1\n    for j in range(pos,len(data)):\n        if i == data[j] and done == 0 and data[j].':\n            ans = i\n            done = 1\nprint(ans)\n\n","offset":153,"fileType":"python3","requestStartTime":1517976468086}}
{"body": {"column":19,"line":52,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\ndef add(query, properties, rec_key):\n    for prop in query:\n        if prop not in properties:\n            properties[prop] = {}\n            \n        value = query[prop]\n        if isinstance(value, dict):\n            add(value, properties[prop], rec_key)  # recursion until non-dict value\n        else:\n            if value not in properties[prop]:\n                properties[prop][value] = []\n            if rec_key not in properties[prop][value]:\n                properties[prop][value].append(rec_key)  # store unique rec_keys\n    \n    \ndef get(query, properties):\n    result = []\n    for prop in query:\n        value = query[prop]\n        if prop not in properties:\n            return []\n        if isinstance(value, dict):\n            temp = get(value, properties)  # recursion until non-dict value\n            result.append(temp)  # append matching rec_key\n        else:\n            if value not in properties[prop]:\n                return []\n            result.append(properties[prop][value])  # append matching rec_key\n    result = set.intersection(*map(set, result))        \n    return result\n    \n    \ndef delete(query, properties, recs):\n    result = get(query, properties)\n    for item in result:\n        if item in recs:\n            del recs[item]\n    \n    \ndef main():\n    recs = {}  # store metadata\n    rec_key = 0\n    properties = {}  # search structure\n    json_data = sys.stdin.readlines()\n    #print(json_data)\n    #print(type(json_data))\n    for row in json_data:\n        line = row.\nif __name__ == \"__main__\":\n    main()\n    \n\n","offset":1601,"fileType":"python3","requestStartTime":1517976536571}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    rounded_grades = []\n    for grade in grades:\n        rounded_grades.append(grade) if grade < 38\n        \n        prev_factor = grade % 5\n        next_multiple = (prev_factor * 5) + 5\n        \n        if (next_multiple - grade) < 3:\n            rounded.\n        \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":305,"fileType":"python3","requestStartTime":1517976622643}}
{"body": {"column":27,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    rounded_grades = []\n    for grade in grades:\n        rounded_grades.append(grade) if grade < 38\n        \n        prev_factor = grade % 5\n        next_multiple = (prev_factor * 5) + 5\n        \n        if (next_multiple - grade) < 3:\n            rounded_grades.\n        \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":312,"fileType":"python3","requestStartTime":1517976625093}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    rndd_grades = []\n    for grade in grades:\n        rndd_grades.append(grade) if grade < 38\n        \n        prev_factor = grade % 5\n        next_mult = (prev_factor * 5) + 5\n        \n        if (next_mult - grade) < 3:\n            rndd_grades.append(next_mult)\n        else:\n            rndd_grades.\n        \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":351,"fileType":"python3","requestStartTime":1517976686605}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef getMoneySpent(keyboards, drives, s):\n    # Complete this function\n    spent = -1\n    keyboards = keyboards.\n\ns,n,m = input().strip().split(' ')\ns,n,m = [int(s),int(n),int(m)]\nkeyboards = list(map(int, input().strip().split(' ')))\ndrives = list(map(int, input().strip().split(' ')))\n#  The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\nmoneySpent = getMoneySpent(keyboards, drives, s)\nprint(moneySpent)\n\n\n","offset":141,"fileType":"python3","requestStartTime":1517976690368}}
{"body": {"column":30,"line":28,"wordToComplete":"","code":"\nimport sys\n\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        \nimport sys\ndef check(root, min, max):\n    if root == None:\n        return True\n    if root.data <= min or root.data >= max:\n        return False\n    return check(root.left, min, root.data) and check(root.right, root.data, max)\ndef check_binary_search_tree_(root):\n    return check(root, float('-inf'), float('inf'))\n    \n\n\"\"\"\ndef check(root, mi, ma):\n  if root is None:\n    return True\n  \n  print(root.data,m,n,root.left and root.left.data, root.right and root.right.data)\n  \n  if (root.data <= mi or root.):\n    if root.left.data >= m or check(root.left, min(m, root.left.data), max(n,root.data)):\n      return False\n\n  if (root.right is not None):\n    if root.right.data <= n or check(root.right, min(m,root.data), max(n,root.data)):\n      return False\n\n  return True\n\ndef checkBST(root):\n  return check(root, float('-inf'), float('inf'))\n\n\n","offset":670,"fileType":"python3","requestStartTime":1517976690968}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef getMoneySpent(keyboards, drives, s):\n    # Complete this function\n    spent = -1\n    keyboards = keyboards.sort()\n    drives = drives.\n\ns,n,m = input().strip().split(' ')\ns,n,m = [int(s),int(n),int(m)]\nkeyboards = list(map(int, input().strip().split(' ')))\ndrives = list(map(int, input().strip().split(' ')))\n#  The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\nmoneySpent = getMoneySpent(keyboards, drives, s)\nprint(moneySpent)\n\n\n","offset":168,"fileType":"python3","requestStartTime":1517976697995}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"\nimport sys\n\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        \nimport sys\ndef check(root, min, max):\n    if root == None:\n        return True\n    if root.data <= min or root.data >= max:\n        return False\n    return check(root.left, min, root.data) and check(root.right, root.data, max)\ndef check_binary_search_tree_(root):\n    return check(root, float('-inf'), float('inf'))\n    \n\n\"\"\"\ndef check(root, mi, ma):\n  if root is None:\n    return True\n  \n  print(root.data,m,n,root.left and root.left.data, root.right and root.right.data)\n  \n  if (root.data <= mi or root.data >= ma):\n    return False\n\n  return check(root.) and check()\n\n  return True\n\ndef checkBST(root):\n  return check(root, float('-inf'), float('inf'))\n\n\n","offset":721,"fileType":"python3","requestStartTime":1517976721481}}
{"body": {"column":41,"line":31,"wordToComplete":"","code":"\nimport sys\n\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        \nimport sys\ndef check(root, min, max):\n    if root == None:\n        return True\n    if root.data <= min or root.data >= max:\n        return False\n    return check(root.left, min, root.data) and check(root.right, root.data, max)\ndef check_binary_search_tree_(root):\n    return check(root, float('-inf'), float('inf'))\n    \n\n\"\"\"\ndef check(root, mi, ma):\n  if root is None:\n    return True\n  \n  print(root.data,m,n,root.left and root.left.data, root.right and root.right.data)\n  \n  if (root.data <= mi or root.data >= ma):\n    return False\n\n  return check(root.left) and check(root.)\n\n  return True\n\ndef checkBST(root):\n  return check(root, float('-inf'), float('inf'))\n\n\n","offset":742,"fileType":"python3","requestStartTime":1517976724398}}
{"body": {"column":31,"line":31,"wordToComplete":"","code":"\nimport sys\n\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        \nimport sys\ndef check(root, min, max):\n    if root == None:\n        return True\n    if root.data <= min or root.data >= max:\n        return False\n    return check(root.left, min, root.data) and check(root.right, root.data, max)\ndef check_binary_search_tree_(root):\n    return check(root, float('-inf'), float('inf'))\n    \n\n\"\"\"\ndef check(root, mi, ma):\n  if root is None:\n    return True\n  \n  print(root.data,m,n,root.left and root.left.data, root.right and root.right.data)\n  \n  if (root.data <= mi or root.data >= ma):\n    return False\n\n  return check(root.left, root.) and check(root.right,)\n\n  return True\n\ndef checkBST(root):\n  return check(root, float('-inf'), float('inf'))\n\n\n","offset":732,"fileType":"python3","requestStartTime":1517976753422}}
{"body": {"column":18,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    print(sum(arr.))\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":98,"fileType":"python3","requestStartTime":1517976762770}}
{"body": {"column":69,"line":31,"wordToComplete":"d","code":"\nimport sys\n\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        \nimport sys\ndef check(root, min, max):\n    if root == None:\n        return True\n    if root.data <= min or root.data >= max:\n        return False\n    return check(root.left, min, root.data) and check(root.right, root.data, max)\ndef check_binary_search_tree_(root):\n    return check(root, float('-inf'), float('inf'))\n    \n\n\"\"\"\ndef check(root, mi, ma):\n  if root is None:\n    return True\n  \n  print(root.data,m,n,root.left and root.left.data, root.right and root.right.data)\n  \n  if (root.data <= mi or root.data >= ma):\n    return False\n\n  return check(root.left, mi, root.data) and check(root.right, root.d)\n\n  return True\n\ndef checkBST(root):\n  return check(root, float('-inf'), float('inf'))\n\n\n","offset":770,"fileType":"python3","requestStartTime":1517976805106}}
{"body": {"column":10,"line":32,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    coinsUsed = [0]*(monetaryValue+1)\n    coinCount = [0]*(monetaryValue+1)\n    minCoins = dpMakeChange(coinDenominations,monetaryValue,coinCount,coinsUsed)\n    printCoins(coinsUsed,monetaryValue)\n    return coinsUsed\n\ndef dpMakeChange(coinValueList,change,minCoins,coinsUsed):\n   for cents in range(change+1):\n      coinCount = cents\n      newCoin = 1\n      for j in [c for c in coinValueList if c <= cents]:\n            if minCoins[cents-j] + 1 < coinCount:\n               coinCount = minCoins[cents-j]+1\n               newCoin = j\n      minCoins[cents] = coinCount\n      coinsUsed[cents] = newCoin\n   return minCoins[change]\n\ndef printCoins(coinsUsed,change):\n   coin = change\n   lst = []\n   while coin > 0:\n      thisCoin = coinsUsed[coin]\n      lst.(thisCoin)\n      coin = coin - thisCoin\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":877,"fileType":"python3","requestStartTime":1517976835249}}
{"body": {"column":49,"line":7,"wordToComplete":"","code":"\ndata = input()\nans=-1\npos=0\ndone = 0\nfor i in data:\n    if pos != 0:\n        if (i == data[pos-1] and done == 0 and i.isalnum())\n    else:\n        pos++1\nprint(ans)\n\n","offset":120,"fileType":"python3","requestStartTime":1517976888424}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maximizeRatings(ratings):\n    best = []\n    best.\n    if len(ratings) > 2:\n        \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ratings_cnt = 0\n    ratings_cnt = int(input())\n    ratings_i = 0\n    ratings = []\n    while ratings_i < ratings_cnt:\n        ratings_item = int(input())\n        ratings.append(ratings_item)\n        ratings_i += 1\n\n\n    res = maximizeRatings(ratings);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":125,"fileType":"python3","requestStartTime":1517976891397}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maximizeRatings(ratings):\n    best = []\n    best.append(ratings[0])\n    best.\n    i = 1\n    while i < len(ratings):\n        \n        \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ratings_cnt = 0\n    ratings_cnt = int(input())\n    ratings_i = 0\n    ratings = []\n    while ratings_i < ratings_cnt:\n        ratings_item = int(input())\n        ratings.append(ratings_item)\n        ratings_i += 1\n\n\n    res = maximizeRatings(ratings);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":153,"fileType":"python3","requestStartTime":1517976956870}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maximizeRatings(ratings):\n    best = []\n    best.append(ratings[0])\n    if len(ratings) >= 2:\n        best.append(ratings[1])\n    i = 2\n    while i < len(ratings):\n        best_step = max(ratings[i-2] + ratings[i], ratings[i-1])\n        best.\n        \n        \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ratings_cnt = 0\n    ratings_cnt = int(input())\n    ratings_i = 0\n    ratings = []\n    while ratings_i < ratings_cnt:\n        ratings_item = int(input())\n        ratings.append(ratings_item)\n        ratings_i += 1\n\n\n    res = maximizeRatings(ratings);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":318,"fileType":"python3","requestStartTime":1517977039997}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    rounded_grades = []\n    for grade in grades:\n        if grade < 38:\n            rounded_grades.append(grade)\n        else:\n            prev_factor = (grade % 5).\n            if (next_mult - grade) < 3:\n                rounded_grades.append(next_mult)\n            else:\n                rounded_grades.append(grade)\n    return rounded_grades\n        \n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":214,"fileType":"python3","requestStartTime":1517977108011}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data=None):\n        self.\n        stop = False\n\n    def backtrack(a):\n        if is_a_solution(a):\n            process_solution(a)\n        else:\n            for c in construct_candidates(a):\n                make_move(a, c)\n                backtrack(a)\n                unmake_move(a, c)\n                if stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":97,"fileType":"python3","requestStartTime":1517977124381}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(a):\n        if is_a_solution(a):\n            process_solution(a)\n        else:\n            for c in construct_candidates(a):\n                make_move(a, c)\n                backtrack(a)\n                unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":388,"fileType":"python3","requestStartTime":1517977139124}}
{"body": {"column":26,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(a):\n        if is_a_solution(a):\n            process_solution(a)\n        else:\n            for c in self.candidates(a):\n                make_move(a, c)\n                backtrack(a)\n                unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":249,"fileType":"python3","requestStartTime":1517977151460}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(a):\n        if is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                make_move(a, c)\n                backtrack(a)\n                unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":194,"fileType":"python3","requestStartTime":1517977152916}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                make_move(a, c)\n                backtrack(a)\n                unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":164,"fileType":"python3","requestStartTime":1517977154612}}
{"body": {"column":21,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                backtrack(a)\n                unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":295,"fileType":"python3","requestStartTime":1517977158596}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":332,"fileType":"python3","requestStartTime":1517977160379}}
{"body": {"column":21,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":372,"fileType":"python3","requestStartTime":1517977165763}}
{"body": {"column":19,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    def is_a_solution(self, a):\n        if all(sle.)\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":544,"fileType":"python3","requestStartTime":1517977199594}}
{"body": {"column":19,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    def is_a_solution(self, a):\n        if all(sel.)\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":544,"fileType":"python3","requestStartTime":1517977200930}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    def is_a_solution(self, a):\n        if all(self.)\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":545,"fileType":"python3","requestStartTime":1517977201506}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maximizeRatings(ratings):\n    best = []\n    best_step = 0\n    i = 0\n    while i < len(ratings):\n        if i == 0:\n            best_step = ratings[0]\n            best.\n        if ratings[i] > 0:\n            best_step = max(best[i-1], best[i-1])\n        else:\n            best_step = max(best[i-2] + ratings[i], best[i-1])\n        best.append(best_step)\n        i += 1\n        \n        while i < len(ratings):\n            if ratings[i] > 0 \n    return best[-1]\n        \n        \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ratings_cnt = 0\n    ratings_cnt = int(input())\n    ratings_i = 0\n    ratings = []\n    while ratings_i < ratings_cnt:\n        ratings_item = int(input())\n        ratings.append(ratings_item)\n        ratings_i += 1\n\n\n    res = maximizeRatings(ratings);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":243,"fileType":"python3","requestStartTime":1517977337360}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":549,"fileType":"python3","requestStartTime":1517977394340}}
{"body": {"column":13,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":583,"fileType":"python3","requestStartTime":1517977398890}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maximizeRatings(ratings):\n    best = []\n    best_step = 0\n    i = 0\n    while i < len(ratings):\n        if i == 0:\n            best_step = ratings[0]\n            best.append(best_step)\n        elif i == 1:\n            best_step = max(best[0] + ratings[1], ratings[1])\n            best.\n        elif ratings[i] > 0:\n            best_step = max(best[i-1], best[i-1])\n        else:\n            best_step = max(best[i-2] + ratings[i], best[i-1])\n        best.append(best_step)\n        i += 1\n        \n        while i < len(ratings):\n            if ratings[i] > 0 \n    return best[-1]\n        \n        \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ratings_cnt = 0\n    ratings_cnt = int(input())\n    ratings_i = 0\n    ratings = []\n    while ratings_i < ratings_cnt:\n        ratings_item = int(input())\n        ratings.append(ratings_item)\n        ratings_i += 1\n\n\n    res = maximizeRatings(ratings);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":361,"fileType":"python3","requestStartTime":1517977406811}}
{"body": {"column":13,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":583,"fileType":"python3","requestStartTime":1517977419681}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":750,"fileType":"python3","requestStartTime":1517977463536}}
{"body": {"column":37,"line":33,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.)\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":774,"fileType":"python3","requestStartTime":1517977470951}}
{"body": {"column":13,"line":36,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":833,"fileType":"python3","requestStartTime":1517977489830}}
{"body": {"column":13,"line":36,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":833,"fileType":"python3","requestStartTime":1517977495886}}
{"body": {"column":13,"line":36,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":833,"fileType":"python3","requestStartTime":1517977504070}}
{"body": {"column":13,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":850,"fileType":"python3","requestStartTime":1517977523013}}
{"body": {"column":6,"line":6,"wordToComplete":"8.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\no = 8\nf = 8.\na\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517977525817}}
{"body": {"column":13,"line":38,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":876,"fileType":"python3","requestStartTime":1517977526397}}
{"body": {"column":13,"line":7,"wordToComplete":"is cool.\"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\no = 8\nf = 8.0\na = \"is cool.\"\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":117,"fileType":"python3","requestStartTime":1517977539579}}
{"body": {"column":13,"line":42,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":961,"fileType":"python3","requestStartTime":1517977575173}}
{"body": {"column":13,"line":43,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.\n\ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":987,"fileType":"python3","requestStartTime":1517977578563}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef mst(n, edges):\n    # Complete this function\n    ClusterSet = []\n    for i in range(1,n+1):\n        ClusterSet.\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    edges = []\n    for edges_i in range(m):\n        edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n        edges.append(edges_t)\n    result = mst(n, edges)\n    print(result)\n\n\n","offset":144,"fileType":"python3","requestStartTime":1517977580840}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef mst(n, edges):\n    # Complete this function\n    ClusterSet = []\n    for i in range(1,n+1):\n        ClusterSet.\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    edges = []\n    for edges_i in range(m):\n        edges_t = [int(edges_temp) for edges_temp in input().strip().split(' ')]\n        edges.append(edges_t)\n    result = mst(n, edges)\n    print(result)\n\n\n","offset":144,"fileType":"python3","requestStartTime":1517977599520}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nn = int(input())\n\nsums = [0]*(10**5+1)\n\nfor i in range(len(sums)):\n    for j in range(i*2,len(sums),i):\n        sums[j] += i\n\nfor item in range(n): \n    if(sums[item] >)\nallunder = 0\n\n\n\n","offset":170,"fileType":"python3","requestStartTime":1517977602418}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517977604467}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    L=doors.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    #print (\" \".join(map(str, result)))\n\n\n\n\n","offset":106,"fileType":"python3","requestStartTime":1517977620382}}
{"body": {"column":22,"line":43,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def candidates(self, a):\n        pairwise(self.)\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":998,"fileType":"python3","requestStartTime":1517977723853}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    fast,slow=head.\n\n\n","offset":320,"fileType":"python3","requestStartTime":1517977747690}}
{"body": {"column":12,"line":14,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head.\n    fast,slow=head.next\n\n\n","offset":313,"fileType":"python3","requestStartTime":1517977753142}}
{"body": {"column":7,"line":59,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def candidates(self, a):\n        return [i, j for i, j in pairwise(self.data) if i < 3 and j < 3]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1351,"fileType":"python3","requestStartTime":1517977785435}}
{"body": {"column":9,"line":60,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def candidates(self, a):\n        return [i, j for i, j in pairwise(self.data) if i < 3 and j < 3]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack()\n    if b.\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1372,"fileType":"python3","requestStartTime":1517977793610}}
{"body": {"column":10,"line":60,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def candidates(self, a):\n        return [i, j for i, j in pairwise(self.data) if i < 3 and j < 3]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack()\n    if bt.\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1373,"fileType":"python3","requestStartTime":1517977794138}}
{"body": {"column":18,"line":61,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(self, data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        self.best = min(len(a), self.best)\n        \n    def candidates(self, a):\n        return [i, j for i, j in pairwise(self.data) if i < 3 and j < 3]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack()\n    if bt.best > 0:\n        return bt.\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1401,"fileType":"python3","requestStartTime":1517977798931}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head.next==None:\n        return False\n    fast,slow=head.next,head\n    while fast!=slow or slow==None:\n        fast=fast.\n\n\n","offset":429,"fileType":"python3","requestStartTime":1517977826447}}
{"body": {"column":23,"line":18,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head.next==None:\n        return False\n    fast,slow=head.next,head\n    while fast!=slow or slow==None:\n        fast=fast.next.\n\n\n","offset":434,"fileType":"python3","requestStartTime":1517977827592}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head.next==None:\n        return False\n    fast,slow=head.next,head\n    while fast!=slow or slow==None:\n        fast=fast.next.next\n        slow=slow.\n\n\n","offset":457,"fileType":"python3","requestStartTime":1517977831350}}
{"body": {"column":6,"line":6,"wordToComplete":"4.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\no = 4\nf = 4.\na = \"is cool.\"\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\nprint(i + o)\n# Print the sum of the double variables on a new line.\nprint(d + f)\n# Concatenate and print the String variables on a new line\nprint(s + a)\n# The 's' variable above should be printed first.\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517977860781}}
{"body": {"column":52,"line":7,"wordToComplete":"is the best place to learn and practice coding.\"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\no = 4\nf = 4.0\na = \"is the best place to learn and practice coding.\"\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\nprint(i + o)\n# Print the sum of the double variables on a new line.\nprint(d + f)\n# Concatenate and print the String variables on a new line\nprint(s + a)\n# The 's' variable above should be printed first.\n\n\n","offset":156,"fileType":"python3","requestStartTime":1517977879445}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\ns = str(arr[::-1]).\n\n","offset":141,"fileType":"python3","requestStartTime":1517977878886}}
{"body": {"column":13,"line":46,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        return [(i, j) for (i, j) in pairwise(self.data) if (i < 3 and j < 3)]\n        \n    def make_move(self, a, c):\n        self.\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack()\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1072,"fileType":"python3","requestStartTime":1517977895774}}
{"body": {"column":13,"line":55,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        return [(i, j) for (i, j) in pairwise(self.data) if (i < 3 and j < 3)]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack()\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1276,"fileType":"python3","requestStartTime":1517977902342}}
{"body": {"column":32,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\ns = [str(i) for i in arr[::-1]].\nprint(s)\n\n","offset":154,"fileType":"python3","requestStartTime":1517977964342}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\ns = \" \".[str(i) for i in arr[::-1]\nprint(s)\n\n","offset":130,"fileType":"python3","requestStartTime":1517977974214}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self):\n        super().__init__(None)\n        self.best = -1\n        self.count = 0\n        \n    def backtrack(self):\n        super().\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        return [(i, j) for (i, j) in pairwise(self.data) if (i < 3 and j < 3)]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack()\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":812,"fileType":"python3","requestStartTime":1517977992771}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\naaaaa = arr.\n\n","offset":134,"fileType":"python3","requestStartTime":1517978134126}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  melon_count(boxes, melons):\n    boxes = sorted.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_boxes_cnt = 0\n_boxes_cnt = int(input())\n_boxes_i=0\n_boxes = []\nwhile _boxes_i < _boxes_cnt:\n    _boxes_item = int(input());\n    _boxes.append(_boxes_item)\n    _boxes_i+=1\n    \n\n\n_melons_cnt = 0\n_melons_cnt = int(input())\n_melons_i=0\n_melons = []\nwhile _melons_i < _melons_cnt:\n    _melons_item = int(input());\n    _melons.append(_melons_item)\n    _melons_i+=1\n    \n\nres = melon_count(_boxes, _melons);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":125,"fileType":"python3","requestStartTime":1517978153096}}
{"body": {"column":27,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n                    \nclass Backtracker:\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n        \n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            while not self.\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        return [(i, j) for (i, j) in pairwise(self.data) if (i < 3 and j < 3)]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Backtracker(B)\n    bt.backtrack()\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":488,"fileType":"python3","requestStartTime":1517978193667}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n                    \nclass Backtracker:\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n        \n    def backtrack(self, a):\n        while self.:\n            self.make_move(a, c)\n            self.backtrack(a)\n            self.unmake_move(a, c)\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        return [(i, j) for (i, j) in pairwise(self.data) if (i < 3 and j < 3)]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Backtracker(B)\n    bt.backtrack()\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":395,"fileType":"python3","requestStartTime":1517978223073}}
{"body": {"column":45,"line":11,"wordToComplete":"The total meal cost is %s dollars.\"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    totalCost = (meal_cost * tip_percent) + (meal_cost + tax_percent) + meal_cost\n    return totalCost\n    print(\"The total meal cost is %s dollars.\")\n\n","offset":322,"fileType":"python3","requestStartTime":1517978335793}}
{"body": {"column":65,"line":44,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [(i, j) for (i, j) in pairwise(range(n)) if (self.i < 3 and j < 3)]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1032,"fileType":"python3","requestStartTime":1517978342108}}
{"body": {"column":86,"line":44,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [(i, j) for (i, j) in pairwise(range(n)) if (self.data[i] < 3 and self.j < 3)]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":1053,"fileType":"python3","requestStartTime":1517978347282}}
{"body": {"column":60,"line":10,"wordToComplete":"dollars.\"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    totalCost = (meal_cost * tip_percent) + (meal_cost + tax_percent) + meal_cost\n    print(\"The total meal cost is \" + totalCost + \" dollars.\"\n\n","offset":316,"fileType":"python3","requestStartTime":1517978398958}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n        self.stop = False\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                if self.stop:\n                    break\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(a):\n        pass\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [\n            (i, j) for (i, j) in pairwise(range(n)) \n            if (self.data[i] < 3 and self.data[j] < 3)\n        ]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":280,"fileType":"python3","requestStartTime":1517978399690}}
{"body": {"column":13,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(self, a):\n        self.\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [\n            (i, j) for (i, j) in pairwise(range(n)) \n            if (self.data[i] < 3 and self.data[j] < 3)\n        ]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":831,"fileType":"python3","requestStartTime":1517978536421}}
{"body": {"column":25,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(self, a):\n        self.best = self.\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [\n            (i, j) for (i, j) in pairwise(range(n)) \n            if (self.data[i] < 3 and self.data[j] < 3)\n        ]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":843,"fileType":"python3","requestStartTime":1517978538397}}
{"body": {"column":29,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(self, a):\n        self.best = min(self.)\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [\n            (i, j) for (i, j) in pairwise(range(n)) \n            if (self.data[i] < 3 and self.data[j] < 3)\n        ]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":847,"fileType":"python3","requestStartTime":1517978541044}}
{"body": {"column":40,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nfrom itertools import tee\nimport sys\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\nclass Backtracker:\n    \n    def __init__(self, data):\n        self.data = data\n\n    def backtrack(self, a):\n        if self.is_a_solution(a):\n            self.process_solution(a)\n        else:\n            for c in self.candidates(a):\n                self.make_move(a, c)\n                self.backtrack(a)\n                self.unmake_move(a, c)\n                    \nclass Bread(Backtracker):\n    \n    def __init__(self, data):\n        super().__init__(data)\n        self.best = -1\n        self.count = 0\n    \n    def is_a_solution(self, a):\n        return all(b % 2 == 0 for b in self.data)\n    \n    def process_solution(self, a):\n        self.best = min(self.best, self.)\n        \n    def candidates(self, a):\n        n = len(self.data)\n        return [\n            (i, j) for (i, j) in pairwise(range(n)) \n            if (self.data[i] < 3 and self.data[j] < 3)\n        ]\n        \n    def make_move(self, a, c):\n        i, j = c\n        self.data[i] += 1\n        self.data[j] += 1\n        self.count += 1\n        \n    def unmake_move(self, a, c):\n        i, j = c\n        self.data[i] -= 1\n        self.data[j] -= 1\n        self.count -= 1\n\n        \ndef fairRations(B):\n    B = [b % 2 for b in B]\n    bt = Bread(B)\n    bt.backtrack(None)\n    if bt.best > 0:\n        return str(bt.best)\n    else:\n        return 'NO'\n    \n\nif __name__ == \"__main__\":\n    N = int(input().strip())\n    B = list(map(int, input().strip().split(' ')))\n    result = fairRations(B)\n    print(result)\n\n\n","offset":858,"fileType":"python3","requestStartTime":1517978542501}}
{"body": {"column":18,"line":13,"wordToComplete":"aaab, i->","code":"\n#!/bin/python3\n\nimport sys\n\n\ns = input().strip()\n\nfor i in range(1,len(s)):\n    mul=1\n    if s[i]==s[i-1]:\n        mul+=1\n    else:\n        #aaab, i->\n        weight = [cnti*(ord(i)-96) for cnti in range(1,cnt+1)]\n        mul=1\n        #reset to 1\n    \n\n\n\n'''\nunique_s =set([i for i in s])\nmy_cnt=set()\nfor i in unique_s:\n    cnt=0\n    for j in s:\n        if i==j:\n            cnt+=1\n    my_cnt.update([cnti*(ord(i)-96) for cnti in range(1,cnt+1)] )\n    \nn = int(input().strip())\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    if x in my_cnt:\n        print('Yes')\n    else:\n        print('No')\n    \n'''\n\n\n","offset":152,"fileType":"python3","requestStartTime":1517978657979}}
{"body": {"column":15,"line":14,"wordToComplete":"weight。","code":"\n#!/bin/python3\n\nimport sys\n\n\ns = input().strip()\n\nfor i in range(1,len(s)):\n    mul=1\n    if s[i]==s[i-1]:\n        mul+=1\n    else:\n        #aaab, i->b\n        weight。[mult*(ord(i)-96) for mult in range(1,mul+1)]\n        mul=1\n        #reset to 1\n    \n\n\n\n'''\nunique_s =set([i for i in s])\nmy_cnt=set()\nfor i in unique_s:\n    cnt=0\n    for j in s:\n        if i==j:\n            cnt+=1\n    my_cnt.update([cnti*(ord(i)-96) for cnti in range(1,cnt+1)] )\n    \nn = int(input().strip())\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    if x in my_cnt:\n        print('Yes')\n    else:\n        print('No')\n    \n'''\n\n\n","offset":169,"fileType":"python3","requestStartTime":1517978851466}}
{"body": {"column":15,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ns = input().strip()\n\nfor i in range(1,len(s)):\n    mul=1\n    if s[i]==s[i-1]:\n        mul+=1\n    else:\n        #aaab, i->b\n        weight.[mult*(ord(i)-96) for mult in range(1,mul+1)]\n        mul=1\n        #reset to 1\n    \n\n\n\n'''\nunique_s =set([i for i in s])\nmy_cnt=set()\nfor i in unique_s:\n    cnt=0\n    for j in s:\n        if i==j:\n            cnt+=1\n    my_cnt.update([cnti*(ord(i)-96) for cnti in range(1,cnt+1)] )\n    \nn = int(input().strip())\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    if x in my_cnt:\n        print('Yes')\n    else:\n        print('No')\n    \n'''\n\n\n","offset":169,"fileType":"python3","requestStartTime":1517978854345}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"\nimport(json)\n\nwhile(input()) {\n    json.\n}\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":42,"fileType":"python3","requestStartTime":1517979017437}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    \n    new = sorted(numbers)\n    used = []\n    \n    \n    for i in range(len(numbers)):\n        if new[i] not in used\n            used.\n        if new[i] - k in used\n            \n        \n                \n    return count\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":236,"fileType":"python3","requestStartTime":1517979277615}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    return arr.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":66,"fileType":"python3","requestStartTime":1517979473954}}
{"body": {"column":29,"line":4,"wordToComplete":"","code":"\na,b=*map(int,input().split())\nscore=[]\nfor i in range(b):\n    c=list(map(float,input().))\n    \n    \n\n","offset":89,"fileType":"python3","requestStartTime":1517979574156}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    print(\"\\n\".arr)\n    return arr.sort()\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":66,"fileType":"python3","requestStartTime":1517979576812}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\na,b=*map(int,input().split())\nscore=[]\nfor i in range(b):\n    c=list(map(float,input().split()))\n    score.\n    \n    \n\n","offset":109,"fileType":"python3","requestStartTime":1517979583367}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr.\n\n\n","offset":94,"fileType":"python3","requestStartTime":1518001274988}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1] \n    # Complete this function\n    while u >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":117,"fileType":"python3","requestStartTime":1517979719567}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    print(jos.input())\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":42,"fileType":"python3","requestStartTime":1517979743358}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    print(json.input())\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":43,"fileType":"python3","requestStartTime":1517979744629}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1]\n    i = n-1\n    # Complete this function\n    while i >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":128,"fileType":"python3","requestStartTime":1517979765620}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1]\n    i = n-1\n    # Complete this function\n    while i>\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":127,"fileType":"python3","requestStartTime":1517979769681}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n#abccddde\ns = input().strip()\nweight=set()\nmul=1\nfor i in range(1,len(s)):\n    \n        \n        \n  \n    if s[i]==s[i-1]:\n        mul+=1\n    else:\n        #aaab, i->b\n        #print('si',s[i])\n        weight.update([mult*(ord(s[i-1])-96) for mult in range(1,mul+1)])\n        #print('we',weight)\n        mul=1\n        #reset to 1\n        \n        if i==len(s)-1:\n            weight.\n    \n\n\n\n'''\nunique_s =set([i for i in s])\nmy_cnt=set()\nfor i in unique_s:\n    cnt=0\n    for j in s:\n        if i==j:\n            cnt+=1\n    my_cnt.update([cnti*(ord(i)-96) for cnti in range(1,cnt+1)] )\n'''    \nn = int(input().strip())\nfor a0 in range(n):\n    x = int(input().strip())\n    # your code goes here\n    print(weight)\n    if x in weight:\n        print('Yes')\n    else:\n        print('No')\n    \n\n\n\n","offset":411,"fileType":"python3","requestStartTime":1517979774617}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    last = json.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":44,"fileType":"python3","requestStartTime":1517979780731}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    last = json.loads(input())\n    result = json.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":77,"fileType":"python3","requestStartTime":1517979792838}}
{"body": {"column":15,"line":9,"wordToComplete":"0:.}\"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{0:.}\"format(sum(student_marks[name])/len(student_marks[name]),'{0:.2f}'))\n\n\n","offset":251,"fileType":"python3","requestStartTime":1517979821754}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{0:.2f}\".format(sum(student_marks[name])/len(student_marks[name]),'{0:.2f}'))\n\n\n","offset":256,"fileType":"python3","requestStartTime":1517979824681}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef get_median(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if len(min_heap) == 0:\n            heapq.\n            if \n    \n    size = len(a)\n    if size % 2 == 0:\n        print(float((a[int(size/2) - 1] + a[int(size/2)]) / 2))\n    else:\n        print(float(a[int(size/2)]))\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(get_median(a_t))\n\n\n","offset":215,"fileType":"python3","requestStartTime":1517979804268}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    new = json.\n    last = json.loads(input())\n    result = json.dumps(last)\n    print(result)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":43,"fileType":"python3","requestStartTime":1517979827285}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    new = input()\n    last = json.\n    result = json.dumps(last)\n    print(result)\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":62,"fileType":"python3","requestStartTime":1517979847301}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(n, arr):\n    p, n, z = 0\n    for item in arr>\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":89,"fileType":"python3","requestStartTime":1517979875386}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(n, arr):\n    p, n, z = 0\n    for item in arr:\n        if item .\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":107,"fileType":"python3","requestStartTime":1517979887999}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr.\n    i = n - 2\n    while i>0:\n        if arr[i]<arr[-1]:\n            break\n        i = i - 1\n    if arr[i] < arr[-1]:\n        print(arr[i])\n    else:\n        print('no runner-up')\n\n\n","offset":94,"fileType":"python3","requestStartTime":1518001492689}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    action = parse(input());\n    \ndef parse(input):\n    if input.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":93,"fileType":"python3","requestStartTime":1517979928952}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    action = parse(input());\n    \ndef parse(input):\n    if string.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":94,"fileType":"python3","requestStartTime":1517979937946}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    action = parse(input());\n    \ndef parse(input):\n    if String.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":94,"fileType":"python3","requestStartTime":1517979940147}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    action = parse(input());\n    \ndef parse(input):\n    if input.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":93,"fileType":"python3","requestStartTime":1517979944611}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    actions = parse(input());\n    \ndef parse(input):\n    if input.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":94,"fileType":"python3","requestStartTime":1517979997556}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps()\n\ndef get_median(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        balance_heaps(value)\n    if len(max_heap) == len(min_heap):\n        return heapq.\n    else:\n        return heapq.heappush(max_heap, value) /\n    \n    size = len(a)\n    if size % 2 == 0:\n        print(float((a[int(size/2) - 1] + a[int(size/2)]) / 2))\n    else:\n        print(float(a[int(size/2)]))\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(get_median(a_t))\n\n\n","offset":276,"fileType":"python3","requestStartTime":1517980003340}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    actions = parse(input());\n    \ndef parse(input):\n    if input.startswith(\"add\"):\n        return input.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":134,"fileType":"python3","requestStartTime":1517980009901}}
{"body": {"column":21,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps()\n\ndef get_median(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        balance_heaps(value)\n    if len(max_heap) == len(min_heap):\n        return heapq.nlargest(max_heap)\n    else:\n        return heapq.\n    \n    size = len(a)\n    if size % 2 == 0:\n        print(float((a[int(size/2) - 1] + a[int(size/2)]) / 2))\n    else:\n        print(float(a[int(size/2)]))\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(get_median(a_t))\n\n\n","offset":326,"fileType":"python3","requestStartTime":1517980022244}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\nimport json\n\nwhile(True):\n    actions = input().\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":50,"fileType":"python3","requestStartTime":1517980045359}}
{"body": {"column":21,"line":20,"wordToComplete":"0.","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef countPairs(numbers, k):\n    \n    new = sorted(numbers)\n    used = []\n    count = 0\n    \n    \n    for i in range(len(numbers)):\n        if new[i] not in used:\n            used.append(new[i])\n            print(used)\n        \n    for x in range(0.len(used)):\n        for y in range(0, x):\n            if used[x] - k == used[y]:\n                count = count + 1\n                break\n        \n                \n    return count\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    numbers_cnt = 0\n    numbers_cnt = int(input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(input())\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(input())\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":320,"fileType":"python3","requestStartTime":1517980072934}}
{"body": {"column":36,"line":6,"wordToComplete":"","code":"\na,b=map(int,input().split())\nscore=[]\nfor i in range(b):\n    c=list(map(float,input().split()))\n    score.append(c)\nd=lambda(a:sum(zip(a))/len(zip(a))).\n    d=list(map(zip,score))\nprint(d)\n    \n\n","offset":154,"fileType":"python3","requestStartTime":1517980098868}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1]\n    i = n-2\n    # print(arr[i])\n    # Complete this function\n    while i>=0:\n        print(i)\n        arr[i+1] = arr[i]\n        if u >\n        print(arr)\n        i -= 1\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":208,"fileType":"python3","requestStartTime":1517980234907}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1]\n    i = n-2\n    # print(arr[i])\n    # Complete this function\n    while i>=0:\n        print(i)\n        arr[i+1] = arr[i]\n        if u>\n        print(arr)\n        i -= 1\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":207,"fileType":"python3","requestStartTime":1517980236763}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    \n    def levelOrder(self,root):\n        #Write your code here\n        import queue\n        result = []\n        q = queue.Queue()\n        q.put(root)\n        while not q.:            \n            node = q.get()\n            result.append(node.data)\n            if node.left:\n                q.put(node.left)\n            if node.right:\n                q.put(node.right)\n        print(result)\n              \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":629,"fileType":"python3","requestStartTime":1517980246165}}
{"body": {"column":18,"line":32,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    \n    def levelOrder(self,root):\n        #Write your code here\n        import queue\n        result = []\n        q = queue.Queue()\n        q.put(root)\n        while not q.empty():            \n            node = q.get()\n            result.append(node.data)\n            if node.left:\n                q.put(node.left)\n            if node.right:\n                q.put(node.right)\n        print(' '.result)\n              \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":852,"fileType":"python3","requestStartTime":1517980309556}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.\n    \ndef delete(entry):\n    print(entry)\n    \ndef get(entry):\n    print(entry)\n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])    \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\")\n        break\n        \n    \n\n    \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":57,"fileType":"python3","requestStartTime":1517980345894}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.)\n    \ndef delete(entry):\n    print(entry)\n    \ndef get(entry):\n    print(entry)\n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])    \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\")\n        break\n        \n    \n\n    \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":69,"fileType":"python3","requestStartTime":1517980351765}}
{"body": {"column":18,"line":32,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    \n    def levelOrder(self,root):\n        #Write your code here\n        import queue\n        result = []\n        q = queue.Queue()\n        q.put(root)\n        while not q.empty():            \n            node = q.get()\n            result.append(node.data)\n            if node.left:\n                q.put(node.left)\n            if node.right:\n                q.put(node.right)\n        print(' '.str(i) for i in result)\n              \nT=int(input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n\n","offset":852,"fileType":"python3","requestStartTime":1517980394952}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    return ar.\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":76,"fileType":"python3","requestStartTime":1517980397200}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    newentry = json.\n    entries.append(json.loads(input))\n    \ndef delete(entry):\n    print(entry)\n    \ndef get(entry):\n    print(entry)\n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n        print(entries)\n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":65,"fileType":"python3","requestStartTime":1517980451481}}
{"body": {"column":29,"line":2,"wordToComplete":"","code":"\nnumberofshoe = int(input())\nsizeofshoe = map(int,input().)\n\n","offset":59,"fileType":"python3","requestStartTime":1517980541135}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef ltoi(letter):\n    return (str.letter -'a')\n\ndef toposort(stack, visited, dictList, letter):\n    if letter in visited:\n        return\n    for next in letter:\n        toposort(stack, visited, dictList, letter)\n    visited.add(letter)\n    stack.append(letter)\n\ndef  findOrder(strDict):\n\n    # Assume only 26 chars of the alphabet for now\n    dictList = [26 * []]\n    for word in strDict:\n        for i in range(len(word) - 1):\n            dictList[word[i:i].append(word[i+1:i+1])]\n    \n\n    stack = []\n    visited = {}\n    \n    for letter in letters:\n        if len(letter) > 0:\n            toposort(stack, visited, dictList, letter)\n    return (stack)\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_strDict_cnt = 0\n_strDict_cnt = int(input())\n_strDict_i=0\n_strDict = []\nwhile _strDict_i < _strDict_cnt:\n    _strDict_item = str(input())\n    _strDict.append(_strDict_item)\n    _strDict_i+=1\n    \n\nres = findOrder(_strDict);\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":106,"fileType":"python3","requestStartTime":1517980617036}}
{"body": {"column":6,"line":3,"wordToComplete":"","code":"\nimport calendar\n\ninput.\n\nprint(list(calendar.day_name)[calendar.weekday(y, m, d)].upper())\n\n","offset":25,"fileType":"python3","requestStartTime":1517980687534}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1]\n    i = n-2\n    # print(arr[i])\n    # Complete this function\n    while i>:\n        j = i-1\n        while j >=0 and u < arr[j] :\n            arr[j+1] = arr[j]\n            j -= 1\n            print(arr) \n        arr[i+1] = u\n        print(arr)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":147,"fileType":"python3","requestStartTime":1517980693552}}
{"body": {"column":39,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(min_heap, heapq.\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.heappush(max_heap, value):\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float(heapq.nlargest(max_heap))\n    else:\n        return float((heapq.nlargest(max_heap) + heapq.nsmallest(min_heap)) / 2)    \n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":164,"fileType":"python3","requestStartTime":1517980732115}}
{"body": {"column":57,"line":12,"wordToComplete":"dollars.'","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    \n    total_cost = meal_cost+(tip_percent*meal_cost)/100+(tax_percent*meal_cost)/100\n    k = round(total_cost)\n    str1 = 'the total meal cost is ' +str(k) + ' dollars.'\n\n    print(str1)\n \n\n","offset":345,"fileType":"python3","requestStartTime":1517980796510}}
{"body": {"column":9,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef insertionSort1(n, arr):\n    u = arr[-1]\n    i = n-2\n    \n    while i>=0 and u<arr[i]:\n        arr[i+1] = arr[i]\n        print(arr)\n        i -= 1\n    if u>\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    insertionSort1(n, arr)\n\n\n","offset":189,"fileType":"python3","requestStartTime":1517980832704}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    possible = entries.\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            \n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":130,"fileType":"python3","requestStartTime":1517980864600}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    possible = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            possible.\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":248,"fileType":"python3","requestStartTime":1517980874503}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    possible = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            possible..\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":249,"fileType":"python3","requestStartTime":1517980874869}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    possible = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            possible.\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":248,"fileType":"python3","requestStartTime":1517980876389}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    possible = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            possible.\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":248,"fileType":"python3","requestStartTime":1517980881289}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            poss.\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":240,"fileType":"python3","requestStartTime":1517980895757}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            poss.\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":240,"fileType":"python3","requestStartTime":1517980896733}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    arr.\n    return arr.sort()\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":59,"fileType":"python3","requestStartTime":1517980908676}}
{"body": {"column":8,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef bigSorting(arr):\n    arr.sort()\n    arr.\n    return arr.sort()\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in range(n):\n       arr_t = str(input().strip())\n       arr.append(arr_t)\n    result = bigSorting(arr)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":74,"fileType":"python3","requestStartTime":1517980912011}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.copy\n    poss.\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            \n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":140,"fileType":"python3","requestStartTime":1517980929244}}
{"body": {"column":39,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq.heappush(min_heap, heapq.)\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.heappush(max_heap, value):\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float(heapq.nlargest(max_heap))\n    else:\n        return float((heapq.nlargest(max_heap) + heapq.nsmallest(min_heap)) / 2)    \n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":268,"fileType":"python3","requestStartTime":1517980934783}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.copy\n    for i in range(entries):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            poss.\n            \ndef get(query):\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":240,"fileType":"python3","requestStartTime":1517980935700}}
{"body": {"column":27,"line":10,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.copy\n    for i in range(entries.):\n        curr = entries[i]\n        if(checkquery(query), curr):\n            poss.remove(curr)\n            \ndef get(query):\n    return true\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    return true\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":158,"fileType":"python3","requestStartTime":1517980983765}}
{"body": {"column":46,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  count_rocks(ribbon_length, rocks):\n    perimeter = 0\n    number_of_rocks = 0\n    if len(rocks) > 1:\n        i = 0\n        while i < len(rocks):\n            try:\n                perimeter  = perimeter + math.\n                \n            \n            \n            \n            \n    elif len(rocks) == 1:\n        number_of_rocks = 1\n    else: \n        number_of_rocks = 0\n    \n    return number_of_rocks\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_ribbon_length = float(input());\n\n\n_rocks_rows = 0\n_rocks_cols = 0\n_rocks_rows = int(input())\n_rocks_cols = int(input())\n\n_rocks = []\nfor _rocks_i in range(_rocks_rows):\n    _rocks_temp = [float(_rocks_t) for _rocks_t in input().strip().split(' ')]\n    _rocks.append(_rocks_temp)\n\nres = count_rocks(_ribbon_length, _rocks)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":284,"fileType":"python3","requestStartTime":1517981099200}}
{"body": {"column":18,"line":21,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq.heappush(min_heap, heapq._heappop_max(max_heap))\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.heappush(max_heap, value):\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float(heapq.nlargest(max_heap))\n    else:\n        return float((heapq.nlargest(max_heap) + heapq.nsmallest(min_heap)) / 2)    \n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":523,"fileType":"python3","requestStartTime":1517981110323}}
{"body": {"column":30,"line":21,"wordToComplete":"_heapify_max","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq.heappush(min_heap, heapq._heappop_max(max_heap))\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.heappush(max_heap, value):\n            heapq.heappush(min_heap, value)\n        else:\n            heapq._heapify_max\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float(heapq.nlargest(max_heap))\n    else:\n        return float((heapq.nlargest(max_heap) + heapq.nsmallest(min_heap)) / 2)    \n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":535,"fileType":"python3","requestStartTime":1517981137682}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.\n    for curr in entries.count:\n        if(checkquery(query), curr):\n            poss.remove(curr)\n            \ndef get(query):\n    return true\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    return true\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":126,"fileType":"python3","requestStartTime":1517981141079}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\nimport json\n\nentries = []\n\ndef add(entry):\n    entries.append(json.loads(entry))\n    \ndef delete(query):\n    poss = entries.\n    for curr in entries.count:\n        if(checkquery(query), curr):\n            poss.remove(curr)\n            \ndef get(query):\n    return true\n\n##Returns true if this query excludes current\ndef checkqueries(query, curr):\n    return true\n    \n\nwhile(True):\n    actions = input().split(' ')\n    if(actions[0]==\"add\"):\n        add(actions[1])   \n    if(actions[0]==\"delete\"):\n        delete(actions[1])\n    if(actions[0]==\"get\"):\n        delete(actions[1])\n    if(actions[0]==\"quit\"):\n        break\n        \n    \n\n    \n\n\n","offset":126,"fileType":"python3","requestStartTime":1517981142154}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\na,b=map(int,input().split())\nscore=[]\nfor i in range(b):\n    c=list(map(float,input().split()))\n    score.=c\nzplist=list(zip(*score))\nprint(zplist)\nprint(list(map(lambda k : sum(k)/b , zplist)))\n\n    \n\n","offset":108,"fileType":"python3","requestStartTime":1517981152383}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    raw_str = ''.join(map(str, doors))\n    max_tries = raw_str.\n    all_ones = filter(None, raw_str.split('0'))\n    consec_closed = [len(i) for i in all_ones]\n    max_tries = len(consec_closed)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":157,"fileType":"python3","requestStartTime":1517981250753}}
{"body": {"column":25,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq.heappush(min_heap, heapq._heappop_max(max_heap))\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.(max_heap, value):\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float(heapq.nlargest(max_heap))\n    else:\n        return float((heapq.nlargest(1, max_heap) + heapq.nsmallest(1, min_heap)) / 2)    \n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":420,"fileType":"python3","requestStartTime":1517981337909}}
{"body": {"column":48,"line":26,"wordToComplete":"0.0","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef  count_rocks(ribbon_length, rocks):\n    perimeter = 0\n    number_of_rocks = 0\n    if len(rocks) > 1:\n        i = 0\n        while i < len(rocks):\n            try:\n                perimeter = perimeter + math.sqrt((rocks[i+1][0]-rocks[i][0])**2+(rocks[i+1][1]-rocks[i][1])**2)\n                if perimeter < ribbon_length:\n                    i = i + 1\n                    number_of_rocks = number_of_rocks + 1\n                else:\n                    return number_of_rocks\n            \n            except:\n                return number_of_rocks\n            \n    elif len(rocks) == 1 and ribbon_length > 0.0:\n        number_of_rocks = 1\n    else: \n        number_of_rocks = 0\n    \n    return number_of_rocks\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_ribbon_length = float(input());\n\n\n_rocks_rows = 0\n_rocks_cols = 0\n_rocks_rows = int(input())\n_rocks_cols = int(input())\n\n_rocks = []\nfor _rocks_i in range(_rocks_rows):\n    _rocks_temp = [float(_rocks_t) for _rocks_t in input().strip().split(' ')]\n    _rocks.append(_rocks_temp)\n\nres = count_rocks(_ribbon_length, _rocks)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":695,"fileType":"python3","requestStartTime":1517981746821}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nstringy=\"\"\nfor i in range(0,len(arr))\n    stringy=stringy.\n    \n\n\n\n","offset":179,"fileType":"python3","requestStartTime":1517981765520}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json \nimport ast\ni=1\nwhile 1:\n    try:\n        n=input()\n    except :\n        n= None\n    if n:\n        a = n.strip().split(' ')\n        b=a[1]\n        b=b[1:-1]\n        c = b.\n        print(b)\n    else:\n        break\n\n\n","offset":255,"fileType":"python3","requestStartTime":1517981771610}}
{"body": {"column":10,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  maxLength(a, k):\n    perms = []\n    \n    for i in range(1, len(a)) :\n        for j in range(0, len(a) - i + 1) :\n            perms.append(a[j : j+i])\n    perms.\n    \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a_cnt = 0\n_a_cnt = int(input())\n_a_i=0\n_a = []\nwhile _a_i < _a_cnt:\n    _a_item = int(input());\n    _a.append(_a_item)\n    _a_i+=1\n    \n\n\n_k = int(input());\n\nres = maxLength(_a, _k);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":238,"fileType":"python3","requestStartTime":1517981993066}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nl = int(input())\ns = list(map(int, input.))\n\n","offset":43,"fileType":"python3","requestStartTime":1517982028847}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nl = int(input())\ns = list(map(int, input90.))\n\n","offset":45,"fileType":"python3","requestStartTime":1517982032636}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nl = int(input())\ns = list(map(int, input().))\n\n","offset":45,"fileType":"python3","requestStartTime":1517982034302}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\nl = int(input())\ns = list(map(int, input().split()))\n\nprint(s.)\n\n","offset":64,"fileType":"python3","requestStartTime":1517982061512}}
{"body": {"column":6,"line":3,"wordToComplete":"","code":"\nl = int(input())\ns = list(map(int, input().split()))\ns = s.\nprint(s.sort())\n\n","offset":61,"fileType":"python3","requestStartTime":1517982078377}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json \nimport ast\ni=1\nwhile 1:\n    try:\n        n=input()\n    except :\n        n= None\n    if n:\n        a = n.strip().split(' ')\n        b=a[1]\n        b=b[1:-1]\n        c = b.split(',')\n        d = c.\n        print(c)\n    else:\n        break\n\n\n","offset":280,"fileType":"python3","requestStartTime":1517982085884}}
{"body": {"column":2,"line":3,"wordToComplete":"","code":"\nl = int(input())\ns = list(map(int, input().split()))\ns.\nprint(s)\n\n","offset":57,"fileType":"python3","requestStartTime":1517982101302}}
{"body": {"column":33,"line":26,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef toposort(stack, visited, dictList, letter):\n    if letter in visited:\n        return\n    for next in letter:\n        toposort(stack, visited, dictList, letter)\n    visited.add(letter)\n    stack.append(letter)\n\ndef  findOrder(strDict):\n\n    # Assume only 26 chars of the alphabet for now\n    ldict = dict()\n    for word in strDict:\n        for i in range(len(word) - 1):\n            lowerKey = str.lower(word[i:i])\n            lowerNext = str.lower(word[i+1,i+1])\n            if lowerKey not in ldict:\n                ldict[lowerKey] = []\n            elif ldict[lowerKey].\n            ldict[lowerKey].append(lowerNext))\n\n    for k in ldict:\n        print (\"letter:%s,\" % (k))\n        print (ldict[k])\n\n    stack = []\n    visited = {}\n    \n    for k in ldict:\n        if len(ldict[k]) > 0:\n            toposort(stack, visited, ldict, k)\n    return (stack)\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_strDict_cnt = 0\n_strDict_cnt = int(input())\n_strDict_i=0\n_strDict = []\nwhile _strDict_i < _strDict_cnt:\n    _strDict_item = str(input())\n    _strDict.append(_strDict_item)\n    _strDict_i+=1\n    \n\nres = findOrder(_strDict);\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":647,"fileType":"python3","requestStartTime":1517982129516}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\np= [input().]\n\n","offset":39,"fileType":"python3","requestStartTime":1517982410581}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json \nimport ast\ni=1\nwhile 1:\n    try:\n        n=input()\n    except :\n        n= None\n    if n:\n        a = n.strip().split(' ')\n        b=a[1]\n        b=b[1:-1]\n        c = b.split(',')\n        d = [ x.split(':') for x in c ]\n        d = [y for x in d for y in x]\n        print(d[0].)\n    else:\n        break\n\n\n","offset":363,"fileType":"python3","requestStartTime":1517982410852}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nprint(arr)\narr1[]\nwhile (i < len(arr))\n    arr1=arr.\n\n\nstringy=\"\"\nfor i in range(0,len(arr)):\n    stringy=stringy + str(arr[i])\n    if i < len(arr):\n        stringy= stringy+\" \"\n\nprint(stringy)\n\n    \n\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517982438091}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nprint(arr)\narr1[]\nwhile (i < len(arr))\n    arr1=arr1.\n\n\nstringy=\"\"\nfor i in range(0,len(arr)):\n    stringy=stringy + str(arr[i])\n    if i < len(arr):\n        stringy= stringy+\" \"\n\nprint(stringy)\n\n    \n\n\n\n","offset":174,"fileType":"python3","requestStartTime":1517982447906}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounts = Counter(s)\nprint(counts.)\n\n","offset":275,"fileType":"python3","requestStartTime":1517982467122}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\np= numpy.([input().split()], int)\nprint (p)\n\n","offset":36,"fileType":"python3","requestStartTime":1517982483060}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounts = Counter(s)\nprint(counts.\n\n","offset":275,"fileType":"python3","requestStartTime":1517982559493}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    print(max_heap)\n    print(min_heap)\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        maxval = heapq._heappop_max(max_heap)\n        print(maxval)\n        heapq.heappush(min_heap, maxval)\n    print(max_heap)\n    print(min_heap)\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n        heapq.\n    else:\n        if value > heapq.nlargest(1, max_heap)[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float((heapq.nlargest(1, max_heap)[0] + heapq.nsmallest(1, min_heap)[0]) / 2)    \n    else:\n        return float(heapq.nlargest(1, max_heap)[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":525,"fileType":"python3","requestStartTime":1517982633736}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    print(max_heap)\n    print(min_heap)\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        maxval = heapq._heappop_max(max_heap)\n        print(maxval)\n        heapq.heappush(min_heap, maxval)\n    print(max_heap)\n    print(min_heap)\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n        heapq.\n    else:\n        if value > heapq.nlargest(1, max_heap)[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float((heapq.nlargest(1, max_heap)[0] + heapq.nsmallest(1, min_heap)[0]) / 2)    \n    else:\n        return float(heapq.nlargest(1, max_heap)[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":525,"fileType":"python3","requestStartTime":1517982641875}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\np= numpy.array([input().split()], float)\nx = int(input())\nprint (numpy.)\n\n","offset":98,"fileType":"python3","requestStartTime":1517982644629}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\np= numpy.array([input().split()], float)\nx = int(input())\nprint (numpy.poly(p.))\n\n","offset":105,"fileType":"python3","requestStartTime":1517982657218}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\nA = list(input())\n\nstack = []\ndict = {')':'(', ']':'[', '}':'{'}\nopen = {'(', '[', '{'}\nfor elem in A:\n    if elem in open:\n        stack.append(elem)\n    else:\n        if len(stack) == 0:\n            return False\n        if dict[elem] == stack.\n\n","offset":247,"fileType":"python3","requestStartTime":1517982675908}}
{"body": {"column":23,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    print(max_heap)\n    print(min_heap)\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        maxval = heapq.)\n        print(maxval)\n        heapq.heappush(min_heap, maxval)\n    print(max_heap)\n    print(min_heap)\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.nlargest(1, max_heap)[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float((heapq.nlargest(1, max_heap)[0] + heapq.nsmallest(1, min_heap)[0]) / 2)    \n    else:\n        return float(heapq.nlargest(1, max_heap)[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":292,"fileType":"python3","requestStartTime":1517982694781}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json \nimport ast\ni=1\nwhile 1:\n    try:\n        n=input()\n    except :\n        n= None\n    if n:\n        a = n.strip().split(' ')\n        b=a[1]\n        c = json.\n        \n    else:\n        break\n\n\n","offset":240,"fileType":"python3","requestStartTime":1517982751956}}
{"body": {"column":23,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    print(max_heap)\n    print(min_heap)\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        maxval = heapq.\n        print(maxval)\n        heapq.heappush(min_heap, maxval)\n    print(max_heap)\n    print(min_heap)\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.nlargest(1, max_heap)[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float((heapq.nlargest(1, max_heap)[0] + heapq.nsmallest(1, min_heap)[0]) / 2)    \n    else:\n        return float(heapq.nlargest(1, max_heap)[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":292,"fileType":"python3","requestStartTime":1517982788216}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    print(max_heap)\n    print(min_heap)\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq.\n        maxval = heapq._heappop_max()\n        print(maxval)\n        heapq.heappush(min_heap, maxval)\n    print(max_heap)\n    print(min_heap)\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.nlargest(1, max_heap)[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float((heapq.nlargest(1, max_heap)[0] + heapq.nsmallest(1, min_heap)[0]) / 2)    \n    else:\n        return float(heapq.nlargest(1, max_heap)[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":283,"fileType":"python3","requestStartTime":1517982813484}}
{"body": {"column":18,"line":1,"wordToComplete":"","code":"\nimport statistics.\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounts = []\nfor i in range(len(s)):\n    \n\n\n","offset":20,"fileType":"python3","requestStartTime":1517982915128}}
{"body": {"column":5,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport math\nimport * from heapq\n\nn = int(input().strip())\na = []\nfor a_i in range(n):\n   a_t = int(input().strip())\n   idx = 0\n   for num in a:\n    if(num >= a_t):\n        break;\n    idx += 1\n   a.\n   a_length = len(a)\n   if(a_length % 2 == 0):\n       print(\"%.1f\" % round((a[int(a_length/2)] + a[int(a_length/2)-1])/2.0, 1))\n   else:\n       print(\"%.1f\" % round(a[math.floor(a_length/2)], 1))\n\n","offset":226,"fileType":"python3","requestStartTime":1517982963550}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nm = counter.\n\n","offset":275,"fileType":"python3","requestStartTime":1517983039919}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nm = counter.values.\n\n","offset":282,"fileType":"python3","requestStartTime":1517983045848}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        library = []\n        library.\n\n\n","offset":154,"fileType":"python3","requestStartTime":1517983057691}}
{"body": {"column":14,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq._heapify_max(max_heap)\n        heapq.heappush(min_heap, heapq._heappop_max(max_heap))\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > heapq.nlargest(1, max_heap)[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        heapq.\n        return float((heapq.nlargest(1, max_heap)[0] + heapq.nsmallest(1, min_heap)[0]) / 2)    \n    else:\n        return float(heapq.nlargest(1, max_heap)[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":665,"fileType":"python3","requestStartTime":1517983064280}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nm = max(counter.values())\nfor k,v in counter.\n\n","offset":308,"fileType":"python3","requestStartTime":1517983087139}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nm = max(counter.values())\nfor k,v in counter.\n\n","offset":308,"fileType":"python3","requestStartTime":1517983096570}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        library = []\n        score.\n        library.append([name, score])\n\n\n","offset":152,"fileType":"python3","requestStartTime":1517983113972}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nmode = []\nm = max(counter.values())\nfor k,v in counter.elements():\n    if v == m:\n        mode.\n\n","offset":358,"fileType":"python3","requestStartTime":1517983129763}}
{"body": {"column":14,"line":18,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nmode = []\nm = max(counter.values())\nprint(counter.)\nfor k,v in counter.elements():\n    if v == m:\n        mode.append(k)\n\nprint(mode)\n\n","offset":313,"fileType":"python3","requestStartTime":1517983171196}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nmode = []\ncounter = dict(counter)\nm = max(counter.values())\nprint(counter.elements())\nfor k,v in counter.:\n    if v == m:\n        mode.append(k)\n\nprint(mode)\n\n","offset":368,"fileType":"python3","requestStartTime":1517983207468}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport numpy as np\n\ndef diagonalDifference(a):\n    # Complete this function\n    array = np.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":120,"fileType":"python3","requestStartTime":1517983140153}}
{"body": {"column":11,"line":23,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nmode = []\ncounter = dict(counter)\nm = max(counter.values())\nfor k,v in counter.items():\n    if v == m:\n        mode.append(k)\n\nprint(mode.)\n\n","offset":401,"fileType":"python3","requestStartTime":1517983246075}}
{"body": {"column":5,"line":23,"wordToComplete":"","code":"\nfrom collections import Counter\n\nl = int(input())\ns = list(map(int, input().split()))\ns.sort()\n\nmean = sum(s)/len(s)\nprint(mean)\n\nif len(s)%2 == 0:\n    print((s[int((len(s)/2))]+s[int(len(s)/2)-1])/2)\nelse:\n    print(s[int(len(s)/2)])\n    \ncounter = Counter(s)\nmode = []\ncounter = dict(counter)\nm = max(counter.values())\nfor k,v in counter.items():\n    if v == m:\n        mode.append(k)\n\nmode.\nprint(mode.sort()[])\n\n","offset":395,"fileType":"python3","requestStartTime":1517983257513}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport numpy as np\n\ndef diagonalDifference(a):\n    # Complete this function\n    array = np.array(a)\n    diagonals_index1 = [(0,0), (1,1), (2,2)]\n    diagonals_index2 = [(0,2), (1,1), (2,1)]\n    diagonals_sum1 = np.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = []\n    for a_i in range(n):\n       a_t = [int(a_temp) for a_temp in input().strip().split(' ')]\n       a.append(a_t)\n    result = diagonalDifference(a)\n    print(result)\n\n\n","offset":243,"fileType":"python3","requestStartTime":1517983180303}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    sum_pos = 0\n    max_subarr = arr[0]\n    for a in arr:\n        if a >\n        max_item = max(max_item, a)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":175,"fileType":"python3","requestStartTime":1517983309640}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    sum_pos = 0\n    max_subarr = arr[0]\n    for a in arr:\n        if a > max_item:\n            max_item = a\n        if a > \n        max_item = max(max_item, a)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":226,"fileType":"python3","requestStartTime":1517983319480}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    sum_pos = 0\n    max_subarr = arr[0]\n    for a in arr:\n        if a > max_item:\n            max_item = a\n        if a > 0:\n            sum_pos += a\n        if max_subarr + x > \n        max_item = max(max_item, a)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":282,"fileType":"python3","requestStartTime":1517983340960}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    sum_pos = 0\n    max_subarr = arr[0]\n    for a in arr:\n        if a > max_item:\n            max_item = a\n        if a > 0:\n            sum_pos += a\n        if max_subarr >\n            \n        max_item = max(max_item, a)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":277,"fileType":"python3","requestStartTime":1517983357783}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    sum_pos = 0\n    max_subarr = arr[0]\n    for a in arr:\n        if a > max_item:\n            max_item = a\n        if a > 0:\n            sum_pos += a\n        if max_subarr + a > \n            \n        max_item = max(max_item, a)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":282,"fileType":"python3","requestStartTime":1517983367785}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if n % 2 == 0:\n        if n in range(2,5):\n            print(\"Not Weird\")\n        elif n in range(6,20):\n            print(\"Weird\")\n        elif n > \n    else:\n        print(\"Weird\")\n\n","offset":203,"fileType":"python3","requestStartTime":1517983454756}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    max_subarr = arr[0]\n    sum_pos = 0\n    if arr[0] > \n    for a in arr[1:]:\n        if a > max_item:\n            max_item = a\n        if a > 0:\n            sum_pos += a\n        if max_subarr + a > a:\n            max_subarr += a\n        else:\n            max_subarr = a\n    if sum_pos == 0:\n        return max_item, max_item\n    else:\n        return max_subarr, sum_pos\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":159,"fileType":"python3","requestStartTime":1517983480538}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maxSubarray(arr):\n    # Complete this function\n    max_item = arr[0]\n    max_subarr = arr[0]\n    max_curarr = arr[0]\n    sum_pos = 0\n    if arr[0] > 0:\n        sum_pos += arr[0]\n\n    for a in arr[1:]:\n        if a > max_item:\n            max_item = a\n        if a > 0:\n            sum_pos += a\n        if max_curarr + a > a:\n            max_curarr += a\n        else:\n            max_curarr = a\n        if max_curarr > \n    if sum_pos == 0:\n        return max_item, max_item\n    else:\n        return max_subarr, sum_pos\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        result = maxSubarray(arr)\n        print (\" \".join(map(str, result)))\n\n\n\n\n","offset":452,"fileType":"python3","requestStartTime":1517983562828}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef leftRotation(a, d):\n    # Complete this function\n    while d>0:\n        l = a[0]\n        l.\n\nif __name__ == \"__main__\":\n    n, d = input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    a = list(map(int, input().strip().split(' ')))\n    result = leftRotation(a, d)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":125,"fileType":"python3","requestStartTime":1517983591069}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef leftRotation(a, d):\n    # Complete this function\n    while d>0:\n        l = a[0]\n        a.\n\nif __name__ == \"__main__\":\n    n, d = input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    a = list(map(int, input().strip().split(' ')))\n    result = leftRotation(a, d)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":125,"fileType":"python3","requestStartTime":1517983593829}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    pos, neg, zero = 0\n    n = len(arr)\n    for i in arr:\n        if a >\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":122,"fileType":"python3","requestStartTime":1517983617798}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(n, arr):\n    # Complete this function\n    p = 0\n    n = 0\n    z = 0\n    for value in arr:\n        if value >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(n, arr)\n\n\n","offset":152,"fileType":"python3","requestStartTime":1517983563312}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef leftRotation(a, d):\n    # Complete this function\n    while d>0:\n        l = a.pop(0)\n        a.\n        \n\nif __name__ == \"__main__\":\n    n, d = input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    a = list(map(int, input().strip().split(' ')))\n    result = leftRotation(a, d)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":129,"fileType":"python3","requestStartTime":1517983661371}}
{"body": {"column":18,"line":15,"wordToComplete":"v","code":"\n#!/bin/python3\nfrom collections import defaultdict\nimport sys\n\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    arr = defaultdict(int)\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        arr[a] += k\n        arr[b + 1] -= k\n    for i in arr.v\n\n","offset":360,"fileType":"python3","requestStartTime":1517983762188}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys, heapq\n\nmax_heap = []\nmin_heap = []\n\ndef balance_heaps():\n    if len(min_heap) > len(max_heap):\n        heapq.heappush(max_heap, heapq.heappop(min_heap))\n        heapq.\n        heapq._heapify_max(max_heap)\n    elif (len(max_heap) - len(min_heap)) > 1:\n        heapq.heappush(min_heap, heapq._heappop_max(max_heap))\n\ndef add_to_heaps(value):\n    if len(max_heap) == 0:\n        heapq.heappush(max_heap, value)\n    else:\n        if value > max_heap[0]:\n            heapq.heappush(min_heap, value)\n        else:\n            heapq.heappush(max_heap, value)\n            heapq._heapify_max(max_heap)\n        \ndef get_median():\n    if len(max_heap) == len(min_heap):\n        return float((max_heap[0] + min_heap[0]) / 2)    \n    else:\n        return float(max_heap[0])\n\ndef calc_median(value):\n    add_to_heaps(value)\n    balance_heaps()\n    return get_median()\n\nn = int(input().strip())\na_i = 0\nfor a_i in range(n):\n    a_t = int(input().strip())\n    print(calc_median(a_t))\n\n\n","offset":197,"fileType":"python3","requestStartTime":1517983779554}}
{"body": {"column":13,"line":17,"wordToComplete":"pos/n)","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    pos= 0\n    neg = 0\n    zero = 0\n    n = len(arr)\n    for i in arr:\n        if i > 0:\n            pos+=1\n        if i < 0:\n            neg+=1\n        else:\n            zero+=1\n    print(\"%.pos/n)\n    print(neg/n)\n    print(zero/n)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":242,"fileType":"python3","requestStartTime":1517983802586}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    # Complete this function\n    rl = list(range(n))\n    for row in rl:\n        for col in rl:\n            if n - col >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":167,"fileType":"python3","requestStartTime":1517983717248}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nimport re\nnumTels = input()\n#cannot contain chars or special chars\nreObj = re.compile(r\"\"\"\n    ([7-9])\n    \"\"\", \n    re.VERBOSE)\n\nfor t in range(int(numTels)):\n    t = input()\n    if (len(t) == 10 and t.):\n        matchFound = reObj.match(t)\n        if (matchFound):\n            print (\"YES\")\n        else:\n            print (\"NO\")\n\n","offset":205,"fileType":"python3","requestStartTime":1517983879805}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    pos= 0\n    neg = 0\n    zero = 0\n    n = len(arr)\n    for i in arr:\n        if i > 0:\n            pos+=1\n        if i < 0:\n            neg+=1\n        else:\n            zero+=1\n    print(\"{%.6f}\".pos/n)\n    print(\"%.6f\",neg/n)\n    print(\"%.6f\",zero/n)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":248,"fileType":"python3","requestStartTime":1517983933252}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    students = []\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        students.append([name, score])\n    students = sorted(students, key = lambda tup: tup[1])\n    second_highest = students[1][0]\n    print('\\n'.)\n        \n\n","offset":283,"fileType":"python3","requestStartTime":1517983993110}}
{"body": {"column":18,"line":16,"wordToComplete":"v","code":"\n#!/bin/python3\nfrom collections import defaultdict\nimport sys\n\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    arr = defaultdict(int)\n    for a0 in range(m):\n        a, b, k = input().strip().split(' ')\n        a, b, k = [int(a), int(b), int(k)]\n        arr[a] += k\n        arr[b + 1] -= k\n    max = x = 0\n    for i in arr.v:\n        x = x + i;\n        if(max<x): max=x;\n    print(max)\n\n","offset":376,"fileType":"python3","requestStartTime":1517984028089}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    spaces = n-1\n    while (spaces >)\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517984242015}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef staircase(n):\n    spaces = n-1\n    while (spaces >)\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    staircase(n)\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517984247915}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    max_value = 0\n    out_count = 0\n    for value in ar:\n        if value >\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":166,"fileType":"python3","requestStartTime":1517984216872}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\nimport sys\nfrom copy import deepcopy\n\ndef solve(ice_cream_types, total_amout_per_trip):\n    ICT_hash = {}\n    for idx in range(len(ice_cream_types)):\n        ICT_hash[ice_cream_types[idx]] = idx + 1\n\n    sorted_ICT = sorted(ice_cream_types)\n    for ict in sorted_ICT:\n        diff = abs(total_amout_per_trip - ict)\n        second_ict = ICT_hash.get(diff, None)\n        if second_ict and second_ict != ict:\n            sorter = sorted([ICT_hash[ict], second_ict])\n            print(\" \".)\n\n    return None\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        money = int(input().strip())\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split(' ')))\n        solve(arr, money)\n\n\n","offset":502,"fileType":"python3","requestStartTime":1517984355883}}
{"body": {"column":32,"line":31,"wordToComplete":"","code":"\nfrom collections import defaultdict\nimport json\nimport sys\ndef tree(): return defaultdict(tree)\nlist = ['id','last','first','location','city','state','postalCode','active','type','list']\nlines = sys.stdin.readlines()\nsave = tree()\nusers = tree()\ntemp = tree()\nfor i in range(len(lines)):\n    if lines[i][0] == \"a\":\n        for x in range(len(lines[i])):\n            if lines[i][x] == ' ':\n                line = lines[i][x+1:]\n                m = json.dumps(line)\n                save[i] = json.loads(m)\n                users[i] = json.loads(save[i])\n                break\n    elif lines[i][0] == \"g\":\n        for x in range(len(lines[i])):\n            if(lines[i][x]) == ' ':\n                line = lines[i][x+1:]\n                m = json.dumps(line)\n                s = json.loads(m)\n                temp = json.loads(s)\n        for y in users:\n            for k in temp:\n                if k == \"location\":\n                    for l in temp['location']:\n                        if temp[k][l]!=users[y][k][l]:\n                            ans.\n                            break                  \n                else:\n                    if temp[k]!=users[y][k]:\n                        break\n\n\n                \n                       \n            \n\n    #elif lines[i][0] == \"d\":\n\n            \n        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":1046,"fileType":"python3","requestStartTime":1517984396352}}
{"body": {"column":30,"line":1,"wordToComplete":"","code":"\nn, k = tuple(map(int, input().))\n\n\n","offset":32,"fileType":"python3","requestStartTime":1517984605902}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nn, k = tuple(map(int, input().split()))\na = list(map(int, input.))\n\n","offset":66,"fileType":"python3","requestStartTime":1517984627131}}
{"body": {"column":34,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    hour = int(s[0:2])\n    min = int(s[3:5])\n    sec = int(s[6:8])\n    if s[8:10] == 'PM':\n        hour += 12\n    return '{0:02}:{1:02}:{2:02}'.\n    \n\ns = input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":226,"fileType":"python3","requestStartTime":1517984548200}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSafePaths(journeys):\n    length=len(journeys)\n    output=[]\n    for(i=1; i<len; i++):\n        output.jour(journeys[i][0],journeys[i][1],journeys[i][1] );\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    journeys_cnt = 0\n    journeys_cnt = int(input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = str(input())\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":180,"fileType":"python3","requestStartTime":1517985004140}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        cc = []\n        visited = set()\n        stack = []\n        component = []\n        for city in range(1, n+1):\n            if city in visited:\n                cc.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":335,"fileType":"python3","requestStartTime":1517985418992}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        cc = []\n        visited = set()\n        stack = []\n        component = []\n        for city in range(1, n+1):\n            if city in visited:\n                cc.append(component)\n            else:\n                stack.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":393,"fileType":"python3","requestStartTime":1517985471957}}
{"body": {"column":33,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        cc = []\n        visited = set()\n        stack = []\n        component = []\n        for city in range(1, n+1):\n            if city in visited:\n                cc.append(component)\n            else:\n                stack.append(city)\n                while stack:\n                    node = stack.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":468,"fileType":"python3","requestStartTime":1517985497727}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        cc = []\n        visited = set()\n        stack = []\n        component = []\n        for city in range(1, n+1):\n            if city in visited:\n                cc.append(component)\n            else:\n                stack.append(city)\n                while stack:\n                    node = stack.pop(0)\n                    stack.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":501,"fileType":"python3","requestStartTime":1517985515972}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findMutationDistance(start, end, bank):\n    mutation = []\n    if start == end:\n        return 0\n    if end not in bank:\n        return -1\n    if (sum[x != y for x,y in zip(start,end)])==1:\n        return 1\n    for i in bank:\n        if sum([x != y for x,y in zip(start,i)])==1:\n            nbank = [j for j in bank if j!=i]\n            temp = findMutationDistance(i,end,nbank)\n            if temp == -1:\n                continue\n            else\n            mutation.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _start = str(input())\nexcept:\n    _start = None\n\n\ntry:\n    _end = str(input())\nexcept:\n    _end = None\n\n\n_bank_cnt = 0\n_bank_cnt = int(input())\n_bank_i=0\n_bank = []\nwhile _bank_i < _bank_cnt:\n    try:\n        _bank_item = str(input())\n    except:\n        _bank_item = None\n    _bank.append(_bank_item)\n    _bank_i+=1\n    \n\nres = findMutationDistance(_start, _end, _bank)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":544,"fileType":"python3","requestStartTime":1517985562375}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"\ns = input()\norder = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1357902468'\ns = sorted(s, key=lambda x: s.)\nprint(*s,sep='')\n\n","offset":117,"fileType":"python3","requestStartTime":1517985581938}}
{"body": {"column":3,"line":7,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\nfirst_integer = int(input)\nsecond_integer = float(input)\nprint(i + first_integer)\nprint(d + second_integer)\npr.\n\n","offset":144,"fileType":"python3","requestStartTime":1517985598459}}
{"body": {"column":2,"line":3,"wordToComplete":"","code":"\nn, k = tuple(map(int, input().split()))\na = list(map(int, input().split()))\na.\npos = [0 for i in range(len(a))]\nif 2*k > n:\n    k = n-k\nst = int((n-2*k+1)//2)\nfor i in range(k):\n    pos[st+i*2] = 1\ns1 = [a[i] for i in range(n) if pos[i]== 1]\ns2 = [a[i] for i in range(n) if pos[i]== 0]\nret = 0\nfor i in range(len(s1)):\n    for j in range(len(s2)):\n        ret += abs(s1[i]-s2[j])\nprint(ret)\n\n\n","offset":80,"fileType":"python3","requestStartTime":1517985668030}}
{"body": {"column":26,"line":7,"wordToComplete":"","code":"\nfiles = int(input())\nfor i in range(files):\n    h, w = input().split()\n    numDots = int(input())\n    mainList = []\n    for j in range(numDots):\n        x, y, z = input().\ngrid = [][]\n\n\n","offset":173,"fileType":"python3","requestStartTime":1517985675111}}
{"body": {"column":29,"line":3,"wordToComplete":"","code":"\ndef capitalize(string):\n    str=string.split(' ')\n    [x for i in len(str) str.]\n    return listy\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":81,"fileType":"python3","requestStartTime":1517985687411}}
{"body": {"column":29,"line":3,"wordToComplete":"","code":"\ndef capitalize(string):\n    str=string.split(' ')\n    [x for i in len(str) str.]\n    return listy\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":81,"fileType":"python3","requestStartTime":1517985692259}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nfiles = int(input())\nmainList = []\nfor i in range(files):\n    h, w = input().split()\n    numDots = int(input())\n    fileList = []\n    for j in range(numDots):\n        x, y, z = input().split()\n        fileList.\ngrid = [][]\n\n\n","offset":212,"fileType":"python3","requestStartTime":1517985743310}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    str=string.split(' ')\n    for i in range(0,len(str))\n        str1=str(i).\n    return listy\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":103,"fileType":"python3","requestStartTime":1517985753862}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nfiles = int(input())\nmainList = []\nfor i in range(files):\n    h, w = input().split()\n    numDots = int(input())\n    fileList = []\n    for j in range(numDots):\n        x, y, z = input().split()\n        fileList.append([x, y, z])\n    mainList.\ngrid = [][]\n\n\n","offset":243,"fileType":"python3","requestStartTime":1517985769846}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\ndef capitalize(string):\n    str=string.split(' ')\n    n=len(str)\n    while (i<n):\n        str1=capitalize(str[i])\n        str.\n    return str\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":128,"fileType":"python3","requestStartTime":1517985936551}}
{"body": {"column":32,"line":7,"wordToComplete":"","code":"\ndef capitalize(string):\n    str=string.split(' ')\n    n=len(str)\n    i=0\n    while (i<n):\n        str1=str[i]\n        replace(str1[i],str1[i].)\n        \n    return str\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":144,"fileType":"python3","requestStartTime":1517986100235}}
{"body": {"column":18,"line":24,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    stack = []\n    for city in range(1, n+1):\n        if city in visited:\n            continue\n        else:\n            stack.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":547,"fileType":"python3","requestStartTime":1517986155318}}
{"body": {"column":33,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    stack = []\n    for city in range(1, n+1):\n        if city in visited:\n            continue\n        else:\n            stack.append(city)\n            while stack:\n                cur_city = stack.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":618,"fileType":"python3","requestStartTime":1517986178595}}
{"body": {"column":26,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    stack = []\n    for city in range(1, n+1):\n        if city in visited:\n            continue\n        else:\n            stack.append(city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    stack.\n        \n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":742,"fileType":"python3","requestStartTime":1517986240573}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\ndef capitalize(string):\n    str=string.split(' ')\n    n=len(str)\n    i=0\n    while (i<n):\n        str1=str(str[i])\n        str.\n    return str1\nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":129,"fileType":"python3","requestStartTime":1517986259397}}
{"body": {"column":19,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport itertools\ndef getSafePaths(journeys):\n    paths=len(journeys)\n    output=[]\n    for i in range(1,paths):\n        output.append(jour(int(journeys[i][0]),int(journeys[i][2]),int(journeys[i][4])))\n    return output\n\n\ndef jour(x, y, k):\n    jou_len=x+y;\n    #0 is H and 1 is V\n    allCombo=list(itertools.product([0,1], repeat=jou_len))\n    #to check which combinations are valid\n    x_check=0\n    y_check=0\n    remove=[]\n    for i in range(0, len(allCombo)):\n        for j in range(0,len(allCombo[i])):\n            if(allCombo[i][j]==0):\n                x_check++\n            else:\n                y_check++\n         if(x_check>x or y_check>y):\n            remove.\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    journeys_cnt = 0\n    journeys_cnt = int(input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = str(input())\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":739,"fileType":"python3","requestStartTime":1517986329291}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ninput_int = input()\n# Read and save an integer, double, and String to your variables.\ninput_double = input()\n# Print the sum of both integer variables on a new line.\nprint(\"{}\".)\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":267,"fileType":"python3","requestStartTime":1517986347663}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ninput_int = input()\n# Read and save an integer, double, and String to your variables.\ninput_double = input()\n# Print the sum of both integer variables on a new line.\nprint(\"{}\".format(i+input_int))\n# Print the sum of the double variables on a new line.\nprint(\"{}\".)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":354,"fileType":"python3","requestStartTime":1517986370379}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ninput_int = input()\n# Read and save an integer, double, and String to your variables.\ninput_double = input()\n# Print the sum of both integer variables on a new line.\nprint(\"{}\".format(i+input_int))\n# Print the sum of the double variables on a new line.\nprint(\"{}\".)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":354,"fileType":"python3","requestStartTime":1517986372663}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print '.'\nprint \nfor i in range(N-2,-1,-2): \n    print \n\n\n","offset":151,"fileType":"python3","requestStartTime":1517986378515}}
{"body": {"column":14,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print '.|.'\nprint \nfor i in range(N-2,-1,-2): \n    print \n\n\n","offset":153,"fileType":"python3","requestStartTime":1517986382793}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print '.|.'.\nprint \nfor i in range(N-2,-1,-2): \n    print \n\n\n","offset":155,"fileType":"python3","requestStartTime":1517986384097}}
{"body": {"column":40,"line":41,"wordToComplete":"","code":"\nfrom collections import defaultdict\nimport json\nimport sys\ndef tree(): return defaultdict(tree)\nlist = ['id','last','first','location','city','state','postalCode','active','type','list']\nlines = sys.stdin.readlines()\nsave = tree()\nusers = tree()\ntemp = tree()\nfor i in range(len(lines)):\n    if lines[i][0] == \"a\":\n        for x in range(len(lines[i])):\n            if lines[i][x] == ' ':\n                line = lines[i][x+1:]\n                m = json.dumps(line)\n                save[i] = json.loads(m)\n                users[i] = json.loads(save[i])\n                break\n    elif lines[i][0] == \"g\":\n        for x in range(len(lines[i])):\n            if(lines[i][x]) == ' ':\n                line = lines[i][x+1:]\n                m = json.dumps(line)\n                s = json.loads(m)\n                temp = json.loads(s)\n        ans = []\n        if s == \"\":\n            for y in users and users[y]!=-1:\n                print(save[y], end = '', flush = True)\n        else:\n            for y in users:\n                for k in temp:\n                    if k == \"location\":\n                        for l in temp['location']:\n                            if temp[k][l]!=users[y][k][l]:\n                                ans.append(y)\n                                break \n                    elif k == \"list\":\n                        ##handle the list\n                        ##if temp[k] is a subset of users[y][k]\n                        if set(temp[k]).users[y][k]:\n                            ans.append(y)\n                    else:\n                        if temp[k]!=users[y][k]:\n                            ans.append(y)\n                            break\n            for y in users:\n                if users[y]!=-1 and y not in ans:\n                    print(save[y], end = '', flush = True)\n                \n                      \n    elif lines[i][0] == \"d\":\n        for x in range(len(lines[i])):\n            if(lines[i][x]) == ' ':\n                line = lines[i][x+1:]\n                m = json.dumps(line)\n                s = json.loads(m)\n                temp = json.loads(s)\n        ans = []\n        for y in users:\n            for k in temp:\n                if k == \"location\":\n                    for l in temp['location']:\n                        if temp[k][l]!=users[y][k][l]:\n                            ans.append(y)\n                            break                  \n                else:\n                    if temp[k]!=users[y][k]:\n                        ans.append(y)\n                        break\n        for y in users:\n            if y not in ans:\n                save[y] = -1\n                users[y] = -1\n\n\n            \n        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n","offset":1454,"fileType":"python3","requestStartTime":1517986399672}}
{"body": {"column":11,"line":14,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\ninput_int = input()\n# Declare second integer, double, and String variables.\ninput_double = input()\n# Read and save an integer, double, and String to your variables.\ninput_string = input()\n# Print the sum of both integer variables on a new line.\nprint(\"{}\".format(i+input_int))\n# Print the sum of the double variables on a new line.\nprint(\"{}\".format(d+input_double))\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint(\"{}\".)\n\n","offset":520,"fileType":"python3","requestStartTime":1517986448858}}
{"body": {"column":23,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    for u, v in cities:\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":994,"fileType":"python3","requestStartTime":1517986440925}}
{"body": {"column":20,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print(('.|.'*i).)\nprint \nfor i in range(N-2,-1,-2): \n    print \n\n\n","offset":159,"fileType":"python3","requestStartTime":1517986530372}}
{"body": {"column":41,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    for u, v in cities:\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, []).\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":1012,"fileType":"python3","requestStartTime":1517986557228}}
{"body": {"column":23,"line":38,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    for u, v in cities:\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, []).append(v)\n        adjacency_list.\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":1045,"fileType":"python3","requestStartTime":1517986564967}}
{"body": {"column":41,"line":38,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    for u, v in cities:\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, []).append(v)\n        adjacency_list.setdefault(v, []).\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":1063,"fileType":"python3","requestStartTime":1517986570702}}
{"body": {"column":18,"line":4,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print(('.|.'*i).center(M, '-'))\nprint ('WELCOME').\nfor i in range(N-2,-1,-2): \n    print \n\n\n","offset":193,"fileType":"python3","requestStartTime":1517986583283}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print(('.|.'*i).center(M, '-'))\nprint(('WELCOME').center(M, '-'))\nfor i in range(N-2,-1,-2): \n    print(('.'))\n\n\n","offset":250,"fileType":"python3","requestStartTime":1517986606660}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print(('.|.'*i).center(M, '-'))\nprint(('WELCOME').center(M, '-'))\nfor i in range(N-2,-1,-2): \n    print(('.|.'))\n\n\n","offset":252,"fileType":"python3","requestStartTime":1517986609052}}
{"body": {"column":26,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    stack.\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":853,"fileType":"python3","requestStartTime":1517986615250}}
{"body": {"column":48,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    stack.extend(adjacency_list.)\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":875,"fileType":"python3","requestStartTime":1517986626054}}
{"body": {"column":48,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    stack.extend(adjacency_list.)\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":875,"fileType":"python3","requestStartTime":1517986628363}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print(('.|.'*i).center(M, '-'))\nprint(('WELCOME').center(M, '-'))\nfor i in range(N-2,-1,-2): \n    print(('.|.'*i).)\n\n\n","offset":257,"fileType":"python3","requestStartTime":1517986638880}}
{"body": {"column":50,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    if cur_city in adjacency_list.\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":877,"fileType":"python3","requestStartTime":1517986677408}}
{"body": {"column":26,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    stack.\n                        \n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":853,"fileType":"python3","requestStartTime":1517986698643}}
{"body": {"column":48,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    stack.extend(adjacency_list.)\n                        \n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":875,"fileType":"python3","requestStartTime":1517986704335}}
{"body": {"column":33,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            connected_components.\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    visited.append(cur_city)\n                    stack.extend(adjacency_list.get(cur_city, []))\n                        \n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":622,"fileType":"python3","requestStartTime":1517986775488}}
{"body": {"column":30,"line":32,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            component = [start_city]\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    component.\n                    visited.append(cur_city)\n                    stack.extend(adjacency_list.get(cur_city, []))\n                        \n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":849,"fileType":"python3","requestStartTime":1517986798588}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        Player.\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n      \n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":101,"fileType":"python3","requestStartTime":1517986797273}}
{"body": {"column":33,"line":35,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef roadsAndLibraries(n, c_lib, c_road, cities):\n    # Complete this function\n    if c_lib <= c_road:\n        return n * c_lib\n    else:\n        connected_components = runDFS(n, cities)\n        cost = 0\n        for c in connected_components:\n            cost += c_lib + (len(c) - 1) * c_road\n        return cost\n    \ndef runDFS(n, cities):\n    connected_components = []\n    visited = set()\n    adjacency_list = buildAdjacencyList(cities)\n    stack = []\n    for start_city in range(1, n+1):\n        if start_city in visited:\n            continue\n        else:\n            component = [start_city]\n            stack.append(start_city)\n            while stack:\n                cur_city = stack.pop(0)\n                if cur_city in visited:\n                    continue\n                else:\n                    component.append(cur_city)\n                    visited.append(cur_city)\n                    stack.extend(adjacency_list.get(cur_city, []))\n            connected_components.\n                        \ndef buildAdjacencyList(cities):\n    adjacency_list = {}\n    for u,v in cities:\n        adjacency_list.setdefault(u, set()).add(v)\n        adjacency_list.setdefault(v, set()).add(u)\n    return adjacency_list\n\nif __name__ == \"__main__\":\n    q = int(input().strip())\n    for a0 in range(q):\n        n, m, c_lib, c_road = input().strip().split(' ')\n        n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n        cities = []\n        for cities_i in range(m):\n           cities_t = [int(cities_temp) for cities_temp in input().strip().split(' ')]\n           cities.append(cities_t)\n        result = roadsAndLibraries(n, c_lib, c_road, cities)\n        print(result)\n\n\n","offset":1011,"fileType":"python3","requestStartTime":1517986827216}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nwhile True:\n    input().\n\n\n","offset":96,"fileType":"python3","requestStartTime":1517986857445}}
{"body": {"column":17,"line":37,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport itertools\ndef getSafePaths(journeys):\n    paths=len(journeys)\n    output=[]\n    for i in range(1,paths):\n        output.append(jour(int(journeys[i][0]),int(journeys[i][2]),int(journeys[i][4])))\n    return output\n\n\ndef jour(x, y, k):\n    jou_len=x+y;\n    #0 is H and 1 is V\n    allCombo=list(itertools.product([0,1], repeat=jou_len))\n    #to check which combinations are valid\n    x_check=0\n    y_check=0\n    remov=[]\n    for i in range(0, len(allCombo)):\n        for j in range(0,len(allCombo[i])):\n            if allCombo[i][j]==0:\n                x_check=x_check+1\n            else:\n                y_check=y_check+1\n        if x_check>x and y_check>y:\n            remov.append(i)\n     \n    #remove all non valid combinations to get final combos\n    print(allCombo)\n    print(remov)\n    for i in range(0, len(remov)):\n        allCombo.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    journeys_cnt = 0\n    journeys_cnt = int(input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = str(input())\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":915,"fileType":"python3","requestStartTime":1517986858361}}
{"body": {"column":30,"line":37,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport itertools\ndef getSafePaths(journeys):\n    paths=len(journeys)\n    output=[]\n    for i in range(1,paths):\n        output.append(jour(int(journeys[i][0]),int(journeys[i][2]),int(journeys[i][4])))\n    return output\n\n\ndef jour(x, y, k):\n    jou_len=x+y;\n    #0 is H and 1 is V\n    allCombo=list(itertools.product([0,1], repeat=jou_len))\n    #to check which combinations are valid\n    x_check=0\n    y_check=0\n    remov=[]\n    for i in range(0, len(allCombo)):\n        for j in range(0,len(allCombo[i])):\n            if allCombo[i][j]==0:\n                x_check=x_check+1\n            else:\n                y_check=y_check+1\n        if x_check>x and y_check>y:\n            remov.append(i)\n     \n    #remove all non valid combinations to get final combos\n    print(allCombo)\n    print(remov)\n    for i in range(0, len(remov)):\n        allCombo.remove(remov.)\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    journeys_cnt = 0\n    journeys_cnt = int(input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = str(input())\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":928,"fileType":"python3","requestStartTime":1517986865803}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\ndef print_formatted(number):\n    # your code goes here\n    for i in range(n):\n        '\\t'.\nif __name__ == '__main__':\n    n = int(input())\n    print_formatted(n)\n","offset":93,"fileType":"python3","requestStartTime":1517986940216}}
{"body": {"column":37,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = [[i for i in input().]]\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":206,"fileType":"python3","requestStartTime":1517986943281}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\nprint(' '.)\n\n","offset":131,"fileType":"python3","requestStartTime":1517986996714}}
{"body": {"column":8,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn=0\nSum=0\nSumSq=0\nwhile True:\n    v=input().strip()\n    if(v==\"\"):\n        break\n    else:\n        n=n+1\n        Sum=Sum+v\n        SumSq=SumSq+v*v\nsd=math.(SumSq − (Sum × Sum) / n) / (n − 1)\n        \n\n\n","offset":227,"fileType":"python3","requestStartTime":1517987074764}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    col_p=board.\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":75,"fileType":"python3","requestStartTime":1517987136276}}
{"body": {"column":19,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    col_p=board[1].\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":78,"fileType":"python3","requestStartTime":1517987142130}}
{"body": {"column":43,"line":3,"wordToComplete":"","code":"\n#print(*sorted(input(), key=lambda c: (c.isdigit() - c.islower(), c in '02468', c)), sep='')\nstring = input()\nresult = sorted(string, key = lambda x: (x.))\n\n","offset":155,"fileType":"python3","requestStartTime":1517987159095}}
{"body": {"column":57,"line":3,"wordToComplete":"","code":"\n#print(*sorted(input(), key=lambda c: (c.isdigit() - c.islower(), c in '02468', c)), sep='')\nstring = input()\nresult = sorted(string, key = lambda x: (x.isdigit()), x.)\nprint(result)\n\n","offset":169,"fileType":"python3","requestStartTime":1517987215081}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    col_p=board[1][0].index(\"P\")\n    r=7\n    c=col_p\n    while r>=0 and c>\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":133,"fileType":"python3","requestStartTime":1517987377526}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn = []\n    blackking = [0,0]\n    \n    i,j = 0,0\n    for y in range(len(board)):\n        for x in range(len(board)):\n            if board[y,x].                \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":237,"fileType":"python3","requestStartTime":1517987476059}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        name = name\n        score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        if a.>b:\n            \n      \n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":209,"fileType":"python3","requestStartTime":1517987501619}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        name = name\n        score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        if a.score>b.:\n            \n      \n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":217,"fileType":"python3","requestStartTime":1517987507088}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn = []\n    blackking = [0,0]\n    \n    i,j = 0,0\n    for y in range(len(board)):\n        for x in range(len(board)):\n            if board[y,x] == \"k\":\n                blackking = [y,x]\n            elif board[y,x] == \"P\":\n                pawn.\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":336,"fileType":"python3","requestStartTime":1517987542177}}
{"body": {"column":21,"line":19,"wordToComplete":"2.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nn=0\nSum=0\nSumSq=0\nwhile True:\n    try:\n        v=input().strip()\n    except:\n        break\n\n    else:\n        n=n+1\n        Sum=Sum+float(v)\n        SumSq=SumSq+float(v)*float(v)\nif(n>1):\n        var=SumSq-Sum*Sum)/n)/(n-1)\n        print(var)\n        sd=var**(1/2.) \nelse:\n        sd=float(0.0000)\nprint(\"%.4f\"%sd)\n\n","offset":348,"fileType":"python3","requestStartTime":1517987630660}}
{"body": {"column":43,"line":8,"wordToComplete":"","code":"\n#Replace all ______ with rjust, ljust or center. \n\nthickness = int(input()) #This must be an odd number\nc = 'H'\n\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).(thickness-1))\n\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).______(thickness*2)+(c*thickness).______(thickness*6))\n\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).______(thickness*6))    \n\n#Bottom Pillars\nfor i in range(thickness+1):\n    print((c*thickness).______(thickness*2)+(c*thickness).______(thickness*6))    \n\n#Bottom Cone\nfor i in range(thickness):\n    print(((c*(thickness-i-1)).______(thickness)+c+(c*(thickness-i-1)).______(thickness)).______(thickness*6))  \n\n\n","offset":195,"fileType":"python3","requestStartTime":1517987636262}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    col_p=board[1][0].index(\"P\")\n    r=1\n    c=col_p-1\n    while r<=7 and c>=0 and c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c-=1\n        \n    r=1\n    c=col_p+1\n    while r<=7 and c>=0 and c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c+=1 \n        \n    c=col_p-1\n    while c>\n    \n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":567,"fileType":"python3","requestStartTime":1517987643791}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    pass\nclass Pawn:\n    pass\nclass Knight:\n    pass\nclass Rook:\n    pass\nclass Bishop:\n    pass\nclass Queen:\n    def __init__(self, x):\n        self.\n    def check():\n        pass\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":192,"fileType":"python3","requestStartTime":1517987696574}}
{"body": {"column":61,"line":10,"wordToComplete":"dollars.\"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    total_cost = round(meal_cost * (1 + tip_percent/100 + tax_percent/100))\n    print(\"The total meal cost is \" + total_cost + \" dollars.\")\n\n","offset":311,"fileType":"python3","requestStartTime":1517987731472}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.\n    def check(self, king, board):\n        return False\nclass Pawn:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\nclass Rook:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\nclass Queen:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517987764862}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.\n        \n    \n    def peek(self):\n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":62,"fileType":"python3","requestStartTime":1517987823381}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nseqList = []\nlastAnswer = 0\n\nquery = input()\nn,q = query.\nseqList = [None]*n\nfor i in range(n):\n    seqList[i] = []\n    \nfor i in range(q):\n    query = input()\n    cho,x,y = (int(j) for j in query.split(\" \"))\n    \n    if (cho == 1):\n        seq = (x ^ lastAnswer) % n\n        seqList[seq].append(y)\n    elif (cho == 2):\n        seq = (x ^ lastAnswer) % n\n        size = len(seqList[seq])\n        lastAnswer = seqList[seq][y % size]\n        print(lastAnswer)\n\n","offset":59,"fileType":"python3","requestStartTime":1517987854913}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.\n    def check(self, king, board):\n        \n        return False\nclass Rook:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        \n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\nclass Queen:\n    def __init__(self, x):\n        self.x = x\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":184,"fileType":"python3","requestStartTime":1517987901052}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.\n        \n    \n    def peek(self):\n        return \n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":62,"fileType":"python3","requestStartTime":1517987904323}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\ncube = lambda x: x ** 3# complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,1]\n    elif n > 2:\n        res = [0,1]\n        for i in range(2,n):\n            res.\nif __name__ == '__main__':\n    n = int(input())\n    print(list(map(cube, fibonacci(n))))\n","offset":305,"fileType":"python3","requestStartTime":1517987915481}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.l = []\n        \n    \n    def peek(self):\n        return \n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        self.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":213,"fileType":"python3","requestStartTime":1517987926536}}
{"body": {"column":15,"line":14,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.l = []\n        \n    \n    def peek(self):\n        return \n        \n        \n    def pop(self):\n        \n        \n    def put(self, value):\n        self.l.\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":215,"fileType":"python3","requestStartTime":1517987927549}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.l = []\n        \n    \n    def peek(self):\n        return \n        \n        \n    def pop(self):\n        self.\n        \n    def put(self, value):\n        self.l.append(value)\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":169,"fileType":"python3","requestStartTime":1517987937090}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.l = []\n        \n    \n    def peek(self):\n        return \n        \n        \n    def pop(self):\n        self.l.\n        \n    def put(self, value):\n        self.l.append(value)\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":171,"fileType":"python3","requestStartTime":1517987938024}}
{"body": {"column":35,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pieces {\"P\":[],\"p\":[],\"K\":[],\"k\":[],\"Q\":[],\"q\":[],\"R\":[],\"r\":[],\"B\":[],\"b\":[],\"N\":[],\"n\":[]}\n    pawn = []\n    blackking = [0,0]\n    \n    i,j = 0,0\n    for y in range(len(board)):\n        for x in range(len(board)):\n            if board[y,x] != \"#\":\n                pieces[board[y,x]].\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":377,"fileType":"python3","requestStartTime":1517987948261}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.\n        return False\nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        \n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":240,"fileType":"python3","requestStartTime":1517987958714}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\nclass MyQueue(object):\n    def __init__(self):\n        self.l = []\n        \n    \n    def peek(self):\n        return self.\n        \n        \n    def pop(self):\n        self.l.pop(0)\n        \n    def put(self, value):\n        self.l.append(value)\n        \n\nqueue = MyQueue()\nt = int(input())\nfor line in range(t):\n    values = map(int, input().split())\n    values = list(values)\n    if values[0] == 1:\n        queue.put(values[1])        \n    elif values[0] == 2:\n        queue.pop()\n    else:\n        print(queue.peek())\n        \n\n\n","offset":123,"fileType":"python3","requestStartTime":1517987960152}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.\n        return False\nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        \n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":250,"fileType":"python3","requestStartTime":1517987997418}}
{"body": {"column":41,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.\n        return False\nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        \n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":265,"fileType":"python3","requestStartTime":1517988056173}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\n#Replace all ______ with rjust, ljust or center. \n\nthickness = int(input()) #This must be an odd number\nc = 'H'\n\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).center(thickness*6))    \n\n#Bottom Pillars\nfor i in range(thickness+1):\n    print((c*thickness).(thickness*2)+(c*thickness).______(thickness*6))    \n\n#Bottom Cone\nfor i in range(thickness):\n    print(((c*(thickness-i-1)).______(thickness)+c+(c*(thickness-i-1)).______(thickness)).______(thickness*6))  \n\n\n","offset":506,"fileType":"python3","requestStartTime":1517987678269}}
{"body": {"column":51,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.\n        return False\nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        \n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":275,"fileType":"python3","requestStartTime":1517988058971}}
{"body": {"column":20,"line":2,"wordToComplete":"","code":"import textwrap\ndef wrap(string, max_width):\n    return textwrap.\nif __name__ == '__main__':\n    string, max_width = input(), int(input())\n    result = wrap(string, max_width)\n    print(result)\n","offset":66,"fileType":"python3","requestStartTime":1517988103352}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n            \n      \n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":99,"fileType":"python3","requestStartTime":1517988158259}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n            \n      \n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":124,"fileType":"python3","requestStartTime":1517988162978}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.\n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":705,"fileType":"python3","requestStartTime":1517988204921}}
{"body": {"column":26,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    \n    pieces = {\"P\":[],\"p\":[],\"K\":[],\"k\":[],\"Q\":[],\"q\":[],\"R\":[],\"r\":[],\"B\":[],\"b\":[],\"N\":[],\"n\":[]}\n    pawn = []\n    blackking = [0,0]\n    \n    for y in range(0,len(board)):\n        x = 0\n        for i in board[y].:\n            if i != \"#\":\n                pieces[i].append([y,x])\n            x+=1\n    return pieces\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":307,"fileType":"python3","requestStartTime":1517988212544}}
{"body": {"column":26,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.\n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":715,"fileType":"python3","requestStartTime":1517988214003}}
{"body": {"column":63,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    if v2 == v1:\n        print('NO')\n    elif (x1 - x2) % (v2 - v1) == 0 and (x1 - x2) / (v2 - v1) >\n\nx1, v1, x2, v2 = input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":189,"fileType":"python3","requestStartTime":1517988216234}}
{"body": {"column":15,"line":7,"wordToComplete":"1.","code":"\n#!/bin/python3\n\nimport sys\n\ndef simpleArraySum(n, ar):\n    # Complete this function\n    for i in 1.:\n        sum = sum + ar\n    return sum\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = simpleArraySum(n, ar)\nprint(result)\n\n\n","offset":101,"fileType":"python3","requestStartTime":1517988160059}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef simpleArraySum(n, ar):\n    # Complete this function\n    for i in 1..:\n        sum = sum + ar\n    return sum\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = simpleArraySum(n, ar)\nprint(result)\n\n\n","offset":102,"fileType":"python3","requestStartTime":1517988160266}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef simpleArraySum(n, ar):\n    # Complete this function\n    for i in 1...:\n        sum = sum + ar\n    return sum\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = simpleArraySum(n, ar)\nprint(result)\n\n\n","offset":103,"fileType":"python3","requestStartTime":1517988160457}}
{"body": {"column":36,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.x or king.\n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":725,"fileType":"python3","requestStartTime":1517988224918}}
{"body": {"column":46,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        if king.x == self.x or king.y == self.\n        return False\nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 8\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":735,"fileType":"python3","requestStartTime":1517988228078}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    t=board.\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":71,"fileType":"python3","requestStartTime":1518026450932}}
{"body": {"column":25,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\n\nm,n=map(int,input().strip().split(' '))\nmat=numpy.array([input().])\n\n","offset":93,"fileType":"python3","requestStartTime":1517988483057}}
{"body": {"column":33,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\n\nm,n=map(int,input().strip().split(' '))\nmat=numpy.array([input().strip().])\n\n","offset":101,"fileType":"python3","requestStartTime":1517988486895}}
{"body": {"column":27,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef twoPluses(grid):\n    for i in range(n):\n        for j in range(m):\n            if ( grid[i][j] == 'G' ):\n                left = right = above = below = 0\n                x = i\n                y = j+1\n                while ( y < n and grid[i][j] == 'G' ):\n                    right += 1\n                    y += 1\n                x = i\n                y = j-1\n                while ( y >= 0 and grid[i][j] == 'G' ):\n                    left += 1\n                    y -= 1\n                x = i - 1\n                y = j\n                while ( x >)\n\nif __name__ == \"__main__\":\n    n, m = input().strip().split(' ')\n    n, m = [int(n), int(m)]\n    grid = []\n    grid_i = 0\n    for grid_i in range(n):\n        grid_t = str(input().strip())\n        grid.append(grid_t)\n    result = twoPluses(grid)\n    print(result)\n\n\n","offset":581,"fileType":"python3","requestStartTime":1517988430518}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy\n\nm,n=map(int,input().strip().split(' '))\nmat=numpy.array([input().strip().split(' ') for _ in range(n)],int)\nprint(mat.)\n\n","offset":146,"fileType":"python3","requestStartTime":1517988507922}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\n\nm,n=map(int,input().strip().split(' '))\nmat=numpy.array([input().strip().split(' ') for _ in range(n)],int)\nprint(mat.transpose())\nprint(mat.)\n\n","offset":169,"fileType":"python3","requestStartTime":1517988516958}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pr=1\n    pc=board[1].\n    flag=0\n    kr=0\n    kc=0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            print(board[i][j])\n            if(board[i][j]=='k'):\n                kr=i\n                kc=j\n                flag=1\n                break\n        if(flag==1):\n            break\n    print(kr,kc)        \n    if(pr==kr-1):\n        if(pc==kc-1 or pc==kc+1):\n            return 1\n        else:\n            return 0\n    elif(pr==kr):\n        if(pc==kr-2 or pc==kr+2):\n            return 1\n        else:\n            return 0\n    pr-=1\n    if(pr==kr or pc==kc):\n        return 2\n    elif(abs(kr-pr)==abs(kc-pc)):\n        return 2\n    else:\n        return 0\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = list(0 for i in range(8))\n        for board_i in range(8):\n            board[board_i]=[board_temp for board_temp in input().strip().split(' ')]    \n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517988546860}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pr=1\n    l=list(board[1].)\n    #pc=l.index('P')\n    print(l,pr)\n    flag=0\n    kr=0\n    kc=0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            print(board[i][j])\n            if(board[i][j]=='k'):\n                kr=i\n                kc=j\n                flag=1\n                break\n        if(flag==1):\n            break\n    print(kr,kc)        \n    if(pr==kr-1):\n        if(pc==kc-1 or pc==kc+1):\n            return 1\n        else:\n            return 0\n    elif(pr==kr):\n        if(pc==kr-2 or pc==kr+2):\n            return 1\n        else:\n            return 0\n    pr-=1\n    if(pr==kr or pc==kc):\n        return 2\n    elif(abs(kr-pr)==abs(kc-pc)):\n        return 2\n    else:\n        return 0\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = list(0 for i in range(8))\n        for board_i in range(8):\n            board[board_i]=[board_temp for board_temp in input().strip().split(' ')]    \n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":88,"fileType":"python3","requestStartTime":1517988660090}}
{"body": {"column":13,"line":2,"wordToComplete":"0.","code":"\ndef phi(x, mu, sigma):\n    return 0.\n\n","offset":38,"fileType":"python3","requestStartTime":1517988690569}}
{"body": {"column":17,"line":24,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef connectedCities(n, g, originCities, destinationCities):\n    def gcd(x, y):\n        \"\"\"return the greatest common divisor\"\"\"\n        if x > y:\n            smaller = y\n        else:\n            smaller = x\n        for i in range(1, smaller + 1):\n            if((x % i == 0) and (y % i == 0)):\n                common_divisor = i\n        return common_divisor\n    path = []\n    for city1, city2 in zip(originCities, destinationCities):\n        if gcd(city1, city2) > g:\n            path.append(1)\n        else:\n            path.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    g = int(input())\n\n    originCities_cnt = 0\n    originCities_cnt = int(input())\n    originCities_i = 0\n    originCities = []\n    while originCities_i < originCities_cnt:\n        originCities_item = int(input())\n        originCities.append(originCities_item)\n        originCities_i += 1\n\n\n    destinationCities_cnt = 0\n    destinationCities_cnt = int(input())\n    destinationCities_i = 0\n    destinationCities = []\n    while destinationCities_i < destinationCities_cnt:\n        destinationCities_item = int(input())\n        destinationCities.append(destinationCities_item)\n        destinationCities_i += 1\n\n\n    res = connectedCities(n, g, originCities, destinationCities);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":600,"fileType":"python3","requestStartTime":1517988777102}}
{"body": {"column":11,"line":11,"wordToComplete":"4}'","code":"\nfrom math import sqrt, erf\n\ndef normal_distribution(n, mu, sigma):\n    return mu*n, sigma*sqrt(n)\n\ndef phi(x, mu, sigma):\n    x_prime = (x-mu)/sigma\n    return 0.5 * (1 + erf(x_prime/sqrt(2)))\n\nn, x, mu, sigma = [float(input()) for _ in range(4)]\nprint('{:.4}')\n\n","offset":260,"fileType":"python3","requestStartTime":1517988791713}}
{"body": {"column":16,"line":11,"wordToComplete":"f","code":"\nfrom math import sqrt, erf\n\ndef normal_distribution(n, mu, sigma):\n    return mu*n, sigma*sqrt(n)\n\ndef phi(x, mu, sigma):\n    x_prime = (x-mu)/sigma\n    return 0.5 * (1 + erf(x_prime/sqrt(2)))\n\nn, x, mu, sigma = [float(input()) for _ in range(4)]\nprint('{:.4f}'.f)\n\n","offset":265,"fileType":"python3","requestStartTime":1517988793587}}
{"body": {"column":39,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    print(board)\n    pr=1\n    l=list(board[1].strip())\n    #pc=l.index('P')\n    print(l,pr)\n    flag=0\n    kr=0\n    kc=0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            print(board[i][j])\n            if(board[i][j]=='k'):\n                kr=i\n                kc=j\n                flag=1\n                break\n        if(flag==1):\n            break\n    print(kr,kc)        \n    if(pr==kr-1):\n        if(pc==kc-1 or pc==kc+1):\n            return 1\n        else:\n            return 0\n    elif(pr==kr):\n        if(pc==kr-2 or pc==kr+2):\n            return 1\n        else:\n            return 0\n    pr-=1\n    if(pr==kr or pc==kc):\n        return 2\n    elif(abs(kr-pr)==abs(kc-pc)):\n        return 2\n    else:\n        return 0\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = list(0 for i in range(8))\n        for board_i in range(8):\n            board[board_i]=[board_temp. for board_temp in input().strip().split(' ')]    \n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1018,"fileType":"python3","requestStartTime":1517988823264}}
{"body": {"column":10,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n'''\nMAX\nRES=No. of locked doors\n---\nMIN\n1. Check for locked door\n2. If locked door found, add 1 to RES.\n3. Ignore next door\n'''\nfrom collections import Counter\ndef revisedRussianRoulette(doors):\n    #MAX\n    x=Counter(doors)\n    max=x.\nn=int(input())\ndoors=list(input())\nresult=revisedRusssianRoulette(doors)\nprint(result,rezult)\n\n","offset":252,"fileType":"python3","requestStartTime":1517988847403}}
{"body": {"column":73,"line":35,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[king.][king.x] != \"#\") == 0:\n                    return True \n            else:\n                \n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":966,"fileType":"python3","requestStartTime":1517988847464}}
{"body": {"column":18,"line":31,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    header = list\n    while list:\n        if header.\n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":590,"fileType":"python3","requestStartTime":1517989170883}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for i in range(8):\n        if board[1][0][i]==\"P\" and board[0][0][i]==\"#\":\n            col_p=i\n    \n    #open \n    op=0\n    if col_p<=6 and (board[0][0][col_p+1]=='Q' or board[0][0][col_p+1]=='B'):\n        c=col_p-1\n        r=2\n        while r<=7 and c>\n        \n    #left diagonal\n    r=1\n    c=col_p-1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c-=1\n        \n    #right diagonal\n    r=1\n    c=col_p+1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c+=1 \n        \n    #left horizontal    \n    c=col_p-1\n    while c>=0:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c-=1\n        \n    #right horizontal\n    c=col_p+1\n    while c<=7:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c+=1    \n    \n    #vertical\n    r=2\n    while r<=7:\n        if board[r][0][col_p]!=\"#\":\n            if board[r][0][col_p]==\"k\":\n                return 2\n            else:\n                break      \n        r+=1\n        \n    moves_K=[(1,2),(1,-2),(2,1),(2,-1)]\n    for m in moves_K:\n        r=m[0]\n        c=col_p+m[1]\n        if 0<=c<=7 and board[r][0][c]=='k':\n            return 1\n        \n    return 0\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":316,"fileType":"python3","requestStartTime":1517989242677}}
{"body": {"column":16,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1303,"fileType":"python3","requestStartTime":1517989324080}}
{"body": {"column":25,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1312,"fileType":"python3","requestStartTime":1517989331058}}
{"body": {"column":35,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.y == self.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1322,"fileType":"python3","requestStartTime":1517989334259}}
{"body": {"column":42,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.y == self.x-self.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1329,"fileType":"python3","requestStartTime":1517989338192}}
{"body": {"column":16,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.y == self.x-self.y:\n            pass\n        if king.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1365,"fileType":"python3","requestStartTime":1517989350991}}
{"body": {"column":23,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.y == self.x-self.y:\n            pass\n        if king.y+king.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1372,"fileType":"python3","requestStartTime":1517989355653}}
{"body": {"column":33,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.y == self.x-self.y:\n            pass\n        if king.y+king.x == self.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1382,"fileType":"python3","requestStartTime":1517989358280}}
{"body": {"column":40,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if (self.x - king.x)>0:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x - king.y == self.x-self.y:\n            pass\n        if king.y+king.x == self.x+self.\n        return False\n    \nclass Queen:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1389,"fileType":"python3","requestStartTime":1517989361573}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for i in range(8):\n        if board[1][0][i]==\"P\" and board[0][0][i]==\"#\":\n            col_p=i\n    \n    #open \n    op=0\n    if col_p<=6 and (board[0][0][col_p+1]=='Q' or board[0][0][col_p+1]=='B'):\n        c=col_p-1\n        r=2\n        while r<=7 and c>=0:\n            if board[r][0][c]!=\"#\":\n                if board[r][0][c]==\"k\":\n                    op=4\n                else:\n                    break            \n        \n    if col_p>=1 and (board[0][0][col_p-1]=='Q' or board[0][0][col_p-1]=='B'):\n        c=col_p+1\n        r=2\n        while r> and c>=0:\n            if board[r][0][c]!=\"#\":\n                if board[r][0][c]==\"k\":\n                    op=4\n                else:\n                    break     \n                    \n    #left diagonal\n    r=1\n    c=col_p-1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c-=1\n        \n    #right diagonal\n    r=1\n    c=col_p+1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c+=1 \n        \n    #left horizontal    \n    c=col_p-1\n    while c>=0:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c-=1\n        \n    #right horizontal\n    c=col_p+1\n    while c<=7:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c+=1    \n    \n    #vertical\n    r=2\n    while r<=7:\n        if board[r][0][col_p]!=\"#\":\n            if board[r][0][col_p]==\"k\":\n                return 2\n            else:\n                break      \n        r+=1\n        \n    moves_K=[(1,2),(1,-2),(2,1),(2,-1)]\n    for m in moves_K:\n        r=m[0]\n        c=col_p+m[1]\n        if 0<=c<=7 and board[r][0][c]=='k':\n            return 1\n        \n    return 0\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":614,"fileType":"python3","requestStartTime":1517989363308}}
{"body": {"column":17,"line":33,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    header = list\n    ans = LinkedListNode()\n    while list:\n        if header.val > x:\n            list.\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":643,"fileType":"python3","requestStartTime":1517989365546}}
{"body": {"column":24,"line":33,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    header = list\n    ans = LinkedListNode()\n    while list:\n        if header.val > x:\n            list = list.\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":650,"fileType":"python3","requestStartTime":1517989371955}}
{"body": {"column":28,"line":34,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    header = list\n    ans = LinkedListNode()\n    while list:\n        if header.val > x:\n            list = list.next\n            header = header.\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":683,"fileType":"python3","requestStartTime":1517989383469}}
{"body": {"column":39,"line":24,"wordToComplete":"","code":"\ndef modMultiInv(a,m):\n    #A = []\n    t1 = 0\n    t2 = 1 \n    #stack = []\n    mod = m \n    while a>1:\n        #stack.append([mod//a,mod,a,mod%a])\n        j = mod//a\n        r = mod%a\n        mod = a\n        a = r\n        #t = t1-(stack[-1][0]*t2)\n        #A.append([t1,t2,t])\n        t = t1-((j)*t2)\n        t1 = t2\n        t2 = t\n    #print(t)\n    if t>0:\n        return(t)\n    else:\n        return(t%m)\nfor i in range(int(input())):\n    np,sp,nc,sc = list(map(int,input().))\n    p = 0\n    for i in range(sp):\n        for j in range(sc):\n            if i > j:\n                p+=1\n    q = sp*sc\n    z = modMultiInv(q,1012924417)\n    print((p*z)%1012924417)\n    \n\n","offset":475,"fileType":"python3","requestStartTime":1517989434833}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\nn, mu, sigma, p, z = [float(input()) for _ in range(5)]\n\nprint('{:.}')\n\n","offset":69,"fileType":"python3","requestStartTime":1517989499017}}
{"body": {"column":16,"line":3,"wordToComplete":"f","code":"\nn, mu, sigma, p, z = [float(input()) for _ in range(5)]\n\nprint('{:.2f}'.f)\n\n","offset":75,"fileType":"python3","requestStartTime":1517989500626}}
{"body": {"column":18,"line":3,"wordToComplete":"2f}\\n{:.}'","code":"\nn, mu, sigma, p, z = [float(input()) for _ in range(5)]\n\nprint('{:.2f}\\n{:.}'.format(mu ))\n\n","offset":77,"fileType":"python3","requestStartTime":1517989527345}}
{"body": {"column":29,"line":36,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for i in range(8):\n        if board[1][0][i]==\"P\" and board[0][0][i]==\"#\":\n            col_p=i\n    \n    #open \n    op=0\n    if col_p<=6 and (board[0][0][col_p+1]=='Q' or board[0][0][col_p+1]=='B'):\n        c=col_p-1\n        r=2\n        while r<=7 and c>=0:\n            if board[r][0][c]!=\"#\":\n                if board[r][0][c]==\"k\":\n                    op=4\n                else:\n                    break   \n            r+=1\n            c-=1\n        \n    if col_p>=1 and (board[0][0][col_p-1]=='Q' or board[0][0][col_p-1]=='B'):\n        c=col_p+1\n        r=2\n        while r<=7 and c<=7:\n            if board[r][0][c]!=\"#\":\n                if board[r][0][c]==\"k\":\n                    op=4\n                else:\n                    break   \n            r+=1\n            c+=1\n            \n    if board[1][0][col_p+1:].        \n            \n            \n    if op==4:\n        return 4\n                    \n    #left diagonal\n    r=1\n    c=col_p-1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c-=1\n        \n    #right diagonal\n    r=1\n    c=col_p+1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c+=1 \n        \n    #left horizontal    \n    c=col_p-1\n    while c>=0:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c-=1\n        \n    #right horizontal\n    c=col_p+1\n    while c<=7:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c+=1    \n    \n    #vertical\n    r=2\n    while r<=7:\n        if board[r][0][col_p]!=\"#\":\n            if board[r][0][col_p]==\"k\":\n                return 2\n            else:\n                break      \n        r+=1\n        \n    moves_K=[(1,2),(1,-2),(2,1),(2,-1)]\n    for m in moves_K:\n        r=m[0]\n        c=col_p+m[1]\n        if 0<=c<=7 and board[r][0][c]=='k':\n            return 1\n        \n    return 0\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":880,"fileType":"python3","requestStartTime":1517989545225}}
{"body": {"column":16,"line":38,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for i in range(8):\n        if board[1][0][i]==\"P\" and board[0][0][i]==\"#\":\n            col_p=i\n    \n    #open \n    op=0\n    if col_p<=6 and (board[0][0][col_p+1]=='Q' or board[0][0][col_p+1]=='B'):\n        c=col_p-1\n        r=2\n        while r<=7 and c>=0:\n            if board[r][0][c]!=\"#\":\n                if board[r][0][c]==\"k\":\n                    op=4\n                else:\n                    break   \n            r+=1\n            c-=1\n        \n    if col_p>=1 and (board[0][0][col_p-1]=='Q' or board[0][0][col_p-1]=='B'):\n        c=col_p+1\n        r=2\n        while r<=7 and c<=7:\n            if board[r][0][c]!=\"#\":\n                if board[r][0][c]==\"k\":\n                    op=4\n                else:\n                    break   \n            r+=1\n            c+=1\n            \n    if board[1][0][col_p+1:].index(\"Q\")>=0 or board[1][0][col_p+1:].index(\"R\")>=0:\n        c=col_p-1\n        while c>\n            \n            \n    if op==4:\n        return 4\n                    \n    #left diagonal\n    r=1\n    c=col_p-1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c-=1\n        \n    #right diagonal\n    r=1\n    c=col_p+1\n    while r<=7 and 0<=c<=7:\n        if board[r][0][c]!=\"#\":\n            if board[r][0][c]==\"k\":\n                return 2\n            else:\n                break\n        r+=1\n        c+=1 \n        \n    #left horizontal    \n    c=col_p-1\n    while c>=0:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c-=1\n        \n    #right horizontal\n    c=col_p+1\n    while c<=7:\n        if board[0][0][c]!=\"#\":\n            if board[0][0][c]==\"k\":\n                return 2\n            else:\n                break      \n        c+=1    \n    \n    #vertical\n    r=2\n    while r<=7:\n        if board[r][0][col_p]!=\"#\":\n            if board[r][0][col_p]==\"k\":\n                return 2\n            else:\n                break      \n        r+=1\n        \n    moves_K=[(1,2),(1,-2),(2,1),(2,-1)]\n    for m in moves_K:\n        r=m[0]\n        c=col_p+m[1]\n        if 0<=c<=7 and board[r][0][c]=='k':\n            return 1\n        \n    return 0\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":968,"fileType":"python3","requestStartTime":1517989599070}}
{"body": {"column":28,"line":32,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    header = list\n    while list:\n        if header.val > x:\n            header = header.\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":627,"fileType":"python3","requestStartTime":1517989766233}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    header = list\n    while list:\n        if header.val > x:\n            header = header.next\n        list = list.\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":652,"fileType":"python3","requestStartTime":1517989789206}}
{"body": {"column":23,"line":34,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x >king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x-king.y == self.x-self.y and :\n            if sum(1 for i in range(1,king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True \n        if king.y+king.x == self.x+self.y and king.x<:\n            if sum(1 for i in range(1,king.x) if board[0][i] != \"#\") == 0:\n                    return True \n        return False\n    \nclass Queen: # no need cuz if bishop or rook queen is check\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":880,"fileType":"python3","requestStartTime":1517989853275}}
{"body": {"column":51,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x-king.y == self.x-self.y and king.:\n            if sum(1 for i in range(1,king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True \n        if king.y+king.x == self.x+self.y and king.x>self.x:\n            if sum(1 for i in range(1,king.x) if board[0][i] != \"#\") == 0:\n                    return True \n        return False\n    \nclass Queen: # no need cuz if bishop or rook queen is check\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1334,"fileType":"python3","requestStartTime":1517989871198}}
{"body": {"column":58,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Knight:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    \nclass Rook:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Bishop:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        if king.x-king.y == self.x-self.y and king.y>self.:\n            if sum(1 for i in range(1,king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True \n        if king.y+king.x == self.x+self.y and king.x>self.x:\n            if sum(1 for i in range(1,king.x) if board[0][i] != \"#\") == 0:\n                    return True \n        return False\n    \nclass Queen: # no need cuz if bishop or rook queen is check\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def check(self, king, board):\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1341,"fileType":"python3","requestStartTime":1517989876566}}
{"body": {"column":15,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print (i*\".\")\nprint ('WELCOME'.center(M,'-'))\nfor i in range(N-2,-1,-2): \n    print #Enter Code Here\n\n\n","offset":154,"fileType":"python3","requestStartTime":1517989943019}}
{"body": {"column":17,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print (i*\".|.\")\nprint ('WELCOME'.center(M,'-'))\nfor i in range(N-2,-1,-2): \n    print #Enter Code Here\n\n\n","offset":156,"fileType":"python3","requestStartTime":1517989945359}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"\nN, M = map(int,input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in range(1,N,2): \n    print (i*\".|.\".)\nprint ('WELCOME'.center(M,'-'))\nfor i in range(N-2,-1,-2): \n    print #Enter Code Here\n\n\n","offset":158,"fileType":"python3","requestStartTime":1517989950290}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"\nfrom functools import cmp_to_key\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score \n        \n    def __repr__(self):\n        repr(name , score)\n        \n        \n    def comparator(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return -1 \n            elif a.name > b.name:\n                return 1\n            else:\n                return 0\n        else:\n            return b.score - a.score\n            \n            \n      \n        \n        \n\nn = int(input())\ndata = []\nfor i in range(n):\n    name, score = input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, key=cmp_to_key(Player.comparator))\nfor i in data:\n    print(i.name, i.score)\n","offset":358,"fileType":"python3","requestStartTime":1517990195924}}
{"body": {"column":61,"line":35,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    ans = _insert_node_into_singlylinkedlist(None, None, list.val)\n    while list:\n        if list.val < x:\n            if not ans:\n                ans = _insert_node_into_singlylinkedlist(None, None, list.val)\n            else:\n                ans = _insert_node_into_singlylinkedlist(ans., None, list.val)\n            \n        list = list.next\n    return ans\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":828,"fileType":"python3","requestStartTime":1517990200903}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\ntext1   = input()\ntext2   = input()\nlist1    = input().split(\"\")\nlist2    = []\nfor item in list1:\n    if item=='*'\n        list2.append('?')\n        list2.\nprint(re.findall(r'aa*b',text1))\n\n","offset":237,"fileType":"python3","requestStartTime":1517990240856}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\np = int(input().strip())\nfor a0 in range(p):\n    n = int(input().strip())\n    arr = []\n    if n==1:\n        print('Prime')\n    elif n==2:\n        print('Prime')\n    else:\n        arr.\n        for i in range(2,n):\n            if n%i==0:\n                print('Not prime')\n                break\n            if i==n-1:\n                print('Prime')        \n\n\n","offset":185,"fileType":"python3","requestStartTime":1517990255624}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\np = int(input().strip())\nfor a0 in range(p):\n    n = int(input().strip())\n    arr = []\n    if n==1:\n        print('Prime')\n    elif n==2:\n        print('Prime')\n    else:\n        arr.append(1)\n        arr.\n        for i in range(2,n):\n            if n%i==0:\n                print('Not prime')\n                break\n            if i==n-1:\n                print('Prime')        \n\n\n","offset":207,"fileType":"python3","requestStartTime":1517990260867}}
{"body": {"column":20,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    #Create fp implementation, check for fp instance and return status\n\n    fp = io.StringIO(zenPython)\n    print(isinstace.fp)\n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = main();\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1191,"fileType":"python3","requestStartTime":1517990316861}}
{"body": {"column":8,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ninput().\n\n","offset":81,"fileType":"python3","requestStartTime":1517990194107}}
{"body": {"column":27,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef checkCol(board, c):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j].\n\ndef waysToGiveACheck(board):\n    for i in range(len(board[1])):\n        c = board[1][i]\n        if c == 'P' && board[0][i] == '#':\n            return checkCol(board, i)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":149,"fileType":"python3","requestStartTime":1517990437082}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ASAM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>)\n\n","offset":145,"fileType":"python3","requestStartTime":1517990443645}}
{"body": {"column":47,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    print(\"The total meal cost is 15 dollars.\". round(meal_cost * (100 + tip_percent + tax_percent) / 100))\n\n\n","offset":221,"fileType":"python3","requestStartTime":1517990449859}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ASAM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>B):\n        return \"Not enough balance\"\n    else:\n        packets.\n\n","offset":211,"fileType":"python3","requestStartTime":1517990467095}}
{"body": {"column":17,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    #Create fp implementation, check for fp instance and return status\n\n    fp = io.StringIO(zenPython)\n    content = fp.\n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = main();\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1188,"fileType":"python3","requestStartTime":1517990491650}}
{"body": {"column":9,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\ntext1   = input()\ntext2   = input()\nlist1   = []\nfor c in text2:\n    list1.append(c)\nlist2    = []\nfor item in list1:\n    if item=='*':\n        list2.append('?')\n        list2.append('*')\n    else:\n        list2.append(item)\nprint(\"\".list2)\nprint(re.findall(\"\".join(list2),text1))\n\n","offset":316,"fileType":"python3","requestStartTime":1517990533782}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    numbers.\n    \n    # Swap adjacent elements\n    for i in range(0,n-1,2):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n \n    for i in range(0,len(numbers),2):\n        if (i> 0 and numbers[i] < numbers[i-1]):\n            numbers[i],numbers[i-1] = numbers[i-1],numbers[i]\n\n        if (i < len(numbers)-1 and numbers[i] < numbers[i+1]):\n            numbers[i],numbers[i+1] = numbers[i+1],numbers[i]\nfor i in range(0,len(numbers)):\n   print(numbers[0])\n    \ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":182,"fileType":"python3","requestStartTime":1517990515318}}
{"body": {"column":19,"line":37,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    #Create fp implementation, check for fp instance and return status\n\n    fp = io.StringIO(zenPython)\n    content = fp.read\n    return content.\n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = main();\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1212,"fileType":"python3","requestStartTime":1517990521386}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    str1 = \"##\" +  board[1][0] + \"##\"\n    str2 = \"##\" +  board[2][0] + \"##\"\n    i = str1.find(\"P\")\n    kpos = str1[i-2] + str1[i+2] + str2[i-1] + str2[i+1]\n    if kpos.count(\"k\") > 0:\n        #print(\"Конь 1\")\n        return 1\n    \n    str0 = board[0][0][0:i-2] + \"P\" + board[0][0][i-1:]\n    str0 = str0.replace(\"#\",\"\")\n    if (str0.)\n    \n    \n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":420,"fileType":"python3","requestStartTime":1517990642683}}
{"body": {"column":22,"line":34,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    ans = None\n    ans_tail = None\n    while list:\n        if list.val < x:\n            ans = _insert_node_into_singlylinkedlist(ans, ans_tail, list.val)\n            print(ans.)\n            ans_tail = ans\n            \n        list = list.next\n    return ans\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":714,"fileType":"python3","requestStartTime":1517990645676}}
{"body": {"column":19,"line":35,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    fp = io.StringIO(zenPython)\n    readlines = fp.\n    \n    #Add Implementation step here\n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = main();\n    f.write(str(res) + \"\\n\")\n    f.close()\n\n","offset":1119,"fileType":"python3","requestStartTime":1517990654913}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    wp = None\n    \n    while wp == None:\n        wp = board.index\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n        \n\n","offset":119,"fileType":"python3","requestStartTime":1517990660964}}
{"body": {"column":32,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    str1 = \"##\" +  board[1][0] + \"##\"\n    str2 = \"##\" +  board[2][0] + \"##\"\n    i = str1.find(\"P\")\n    kpos = str1[i-2] + str1[i+2] + str2[i-1] + str2[i+1]\n    if kpos.count(\"k\") > 0:\n        #print(\"Конь 1\")\n        return 1\n    \n    str0 = board[0][0][0:i-2] + \"P\" + board[0][0][i-1:]\n    str0 = str0.replace(\"#\",\"\")\n    if (str0.count(\"kP\") + str0.)\n    \n    \n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":439,"fileType":"python3","requestStartTime":1517990662578}}
{"body": {"column":27,"line":35,"wordToComplete":"readline","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    fp = io.StringIO(zenPython)\n    readlines = fp.readline\n    \n    #Add Implementation step here\n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = main();\n    f.write(str(res) + \"\\n\")\n    f.close()\n\n","offset":1127,"fileType":"python3","requestStartTime":1517990675420}}
{"body": {"column":21,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    fp = io.StringIO(zenPython)\n    readlines = fp.readlines()\n    return readlines.\n    \n    #Add Implementation step here\n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = main();\n    f.write(str(res) + \"\\n\")\n    f.close()\n\n","offset":1152,"fileType":"python3","requestStartTime":1517990715672}}
{"body": {"column":29,"line":50,"wordToComplete":"","code":"\ndef find_king(board):\n    for i, rank in enumerate(board):\n        if 'k' in rank:\n            return (i, rank.index('k'))\n\ndef l_check(board, p_row, p_col, k_row, k_col):\n    return abs(p_row - k_row) + abs(p_col - k_col) == 3\n        \ndef line_check(board, p_row, p_col, k_row, k_col):       \n    if p_row == k_row:\n        min_col = min(p_col, k_col)\n        max_col = max(p_col, k_col)\n        return all(board[k_row][i] == '#' \n                   for i in range(min_col+1, max_col))\n    if p_col == k_col:\n        return all(board[i][k_col] == '#' \n                   for i in range(1, k_row))\n    return False\n\ndef diag_check(board, p_row, p_col, k_row, k_col):\n    if abs(p_row - k_row) != abs(p_col - k_col):\n        return False\n    else:\n        row_sign = [-1, 1][k_row - p_row > 0]\n        col_sign = [-1, 1][k_col - p_col > 0]\n        return all(board[row][col] == '#' \n                   for row, col in zip(\n                       range(p_row+row_sign, k_row, row_sign),\n                       range(p_col+col_sign, k_col, col_sign)\n                   ))\n    \ndef num_checks(board):\n    p_row, p_col = 0, board[1].index('P')\n    k_row, k_col = find_king(board)\n    #print(board)\n    #print('pawn_pos:', p_row, p_col)\n    #print('king_pos:', k_row, k_col)\n    \n    board[p_row][p_col] = '#'\n    if l_check(board, p_row, p_col, k_row, k_col):\n        return 1\n    \n    if line_check(board, p_row, p_col, k_row, k_col)\\\n    or diag_check(board, p_row, p_col, k_row, k_col):\n        return 2\n    \n    return 0\n   \nfor _ in range(int(input())):\n    board = [input().strip(). for _ in range(8)]\n    result = num_checks(board)\n    print(result)\n\n\n","offset":1586,"fileType":"python3","requestStartTime":1517990727596}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ASAM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>B):\n        return \"Not enough balance\"\n    else:\n        packets.sort()\n        res=''\n        for i in range(len(packets)):\n            if((W%packets[i])<packets[i]):\n                temp=int(W/packets[i])\n                res=str(temp)+':'+str(packets[i])+''+res\n                W=W-((int(W/packets[i]))*packets[i])\n                \n        if(W==0):\n            balance=B-amt\n            return res+''+str(balance)\n        if(W!=0):\n            return 'Cannot put into pack'\n        \n#driver code\nB,W,N=map(int,input().)\n            \n\n","offset":667,"fileType":"python3","requestStartTime":1517990746678}}
{"body": {"column":28,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ASAM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>B):\n        return \"Not enough balance\"\n    else:\n        packets.sort()\n        res=''\n        for i in range(len(packets)):\n            if((W%packets[i])<packets[i]):\n                temp=int(W/packets[i])\n                res=str(temp)+':'+str(packets[i])+''+res\n                W=W-((int(W/packets[i]))*packets[i])\n                \n        if(W==0):\n            balance=B-amt\n            return res+''+str(balance)\n        if(W!=0):\n            return 'Cannot put into pack'\n        \n#driver code\nB,W,N=map(int,input().strip.)\n            \n\n","offset":673,"fileType":"python3","requestStartTime":1517990749174}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ASAM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>B):\n        return \"Not enough balance\"\n    else:\n        packets.sort()\n        res=''\n        for i in range(len(packets)):\n            if((W%packets[i])<packets[i]):\n                temp=int(W/packets[i])\n                res=str(temp)+':'+str(packets[i])+''+res\n                W=W-((int(W/packets[i]))*packets[i])\n                \n        if(W==0):\n            balance=B-amt\n            return res+''+str(balance)\n        if(W!=0):\n            return 'Cannot put into pack'\n        \n#driver code\nB,W,N=map(int,input().strip.split(''))\npackets=[]\nif(N==0):\n    print('Cannot put into packets')\nelse:\n    for i in rnage(N):\n        packets.\n\n","offset":787,"fileType":"python3","requestStartTime":1517990811296}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    if a0 > b0:\n        a = 1\n    if a2 < b2:\n        b = 1\n    return a .b\n    # Complete this function\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":139,"fileType":"python3","requestStartTime":1517990811783}}
{"body": {"column":35,"line":30,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef ASAM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>B):\n        return \"Not enough balance\"\n    else:\n        packets.sort()\n        res=''\n        for i in range(len(packets)):\n            if((W%packets[i])<packets[i]):\n                temp=int(W/packets[i])\n                res=str(temp)+':'+str(packets[i])+''+res\n                W=W-((int(W/packets[i]))*packets[i])\n                \n        if(W==0):\n            balance=B-amt\n            return res+''+str(balance)\n        if(W!=0):\n            return 'Cannot put into pack'\n        \n#driver code\nB,W,N=map(int,input().strip.split(''))\npackets=[]\nif(N==0):\n    print('Cannot put into packets')\nelse:\n    for i in rnage(N):\n        packets.append(int(input().))\n\n","offset":806,"fileType":"python3","requestStartTime":1517990819049}}
{"body": {"column":20,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    ans = None\n    ans_tail = None\n    while list:\n        if list.val < x:\n            if not ans:\n                ans = LinkedListNode(list.val)\n            else:\n                ans. = \n            print(ans.val)\n            ans_tail = ans\n            \n        list = list.next\n    return ans\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":723,"fileType":"python3","requestStartTime":1517990861446}}
{"body": {"column":37,"line":61,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.y:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if checkRook(king, board):\n            ways+=1\n        if checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k ,K):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).\n        if board[1][i] == \"p\"  and board[0][i] == \"#\": # use K\n            pass\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        K=None\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            elif \"K\" in board_t:\n                K=King(board_i, board_t.index(\"K\"))\n            board.append(board_t)\n            \n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2039,"fileType":"python3","requestStartTime":1517990898177}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\ndef getAndMax(n,k):\n    andVals=[]\n    for i in range (1,n+1):\n        for j in range(i+1,n+1):\n            c=i&j\n            if c <k :\n                andVals.\n\n\nt = int(input().strip())\nfor a0 in range(t):\n    n,k = input().strip().split(' ')\n    n,k = [int(n),int(k)]\n    getAndMax(n,k)\n\n","offset":189,"fileType":"python3","requestStartTime":1517990906404}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\ndef getAndMax(n,k):\n    andVals=[]\n    for i in range (1,n+1):\n        for j in range(i+1,n+1):\n            c=i&j\n            if c <k :\n                andVals.append(c)\n    print(andVals.)\n\nt = int(input().strip())\nfor a0 in range(t):\n    n,k = input().strip().split(' ')\n    n,k = [int(n),int(k)]\n    getAndMax(n,k)\n\n","offset":217,"fileType":"python3","requestStartTime":1517990924746}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\ndef getAndMax(n,k):\n    andVals=[]\n    for i in range (1,n+1):\n        for j in range(i+1,n+1):\n            c=i&j\n            if c <k :\n                andVals.append(c)\n    andVals.\n    print(andVals.sort())\n\nt = int(input().strip())\nfor a0 in range(t):\n    n,k = input().strip().split(' ')\n    n,k = [int(n),int(k)]\n    getAndMax(n,k)\n\n","offset":211,"fileType":"python3","requestStartTime":1517990960955}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys, os, copy\n\n\n# Complete the function below.\n# function doesn't have to return anything\n# modify 'numbers' itself\n\n\ndef  unusual_sort(numbers):\n    numbers.sort()\n    for i in range(0,len(numbers)-1,2):\n        numbers[i],numbers[i+1] = numbers[i+1],numbers[i]\n    for i in range(1,len(numbers)):\n        print(numbers.)\n\n    \ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n\n","offset":345,"fileType":"python3","requestStartTime":1517991014093}}
{"body": {"column":37,"line":36,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    fp = io.StringIO(zenPython)\n    \n    zenlines = fp.readlines()\n    return zenlines.strip('\\n',' ','.')\n    \n    #Add implementation step here\n    \n    \n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = main();\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1171,"fileType":"python3","requestStartTime":1517991062925}}
{"body": {"column":32,"line":5,"wordToComplete":"r\"//.*\\n|/*.\"","code":"\nimport re\nimport sys\n\nsource = sys.stdin.read()\nprint(str(re.search(r\"//.*\\n|/*.\", source).group(0)))\n\n\n","offset":82,"fileType":"python3","requestStartTime":1517991086589}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef AMSM(W,B,packets):\n    amt=W\n    if(W==0):\n        return 0\n    if(W>B):\n        return \"Not enough balance\"\n    else:\n        packets.sort().\n        res=''\n        for i in range(len(packets)):\n            if((W%packets[i])<packets[i]):\n                temp=int(W/packets[i])\n                res=str(temp)+':'+str(packets[i])+''+res\n                W=W-((int(W/packets[i]))*packets[i])\n                \n        if(W==0):\n            balance=B-amt\n            return res+''+str(balance)\n        if(W!=0):\n            return 'Cannot put into packets1'\n        \n#driver code\nB,W,N=map(int,input().strip().split(' '))\npackets=[]\nif(N==0):\n    print('Cannot put into packets')\nelse:\n    for i in range(N):\n        packets.append(int(input().strip()))\n    print(AMSM(W,B,packets))\n        \n \n\n","offset":218,"fileType":"python3","requestStartTime":1517991096105}}
{"body": {"column":29,"line":35,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    ans = None\n    ans_tail = None\n    while list:\n        if list.val < x:\n            if not ans:\n                ans = LinkedListNode(list.val)\n                header = ans.\n            else:\n                ans.next = LinkedListNode(list.val)\n        list = list.next\n    return ans\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":714,"fileType":"python3","requestStartTime":1517991160530}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef binary_search(values, value):\n    left = 0\n    right = len(values)\n    \n    mid = (right + left) // 2\n    if mid == value:\n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    \n    unique_scores = set(scores)\n    seen = set()\n    for score in scores:\n        if score not in seen:\n            unique_scores.\n    \n    for score in alice:\n        print(binary_search(scores, score))\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":362,"fileType":"python3","requestStartTime":1517991166881}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef binary_search(values, value):\n    left = 0\n    right = len(values)\n    \n    mid = (right + left) // 2\n    if mid == value:\n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    \n    unique_scores = set(scores)\n    seen = set()\n    for score in scores:\n        if score not in seen:\n            seen.\n            unique_scores.append(score)\n    \n    for score in alice:\n        print(binary_search(scores, score))\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":353,"fileType":"python3","requestStartTime":1517991176337}}
{"body": {"column":16,"line":46,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.y:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k ,K):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n        if board[1][i] == \"p\"  and board[0][i] == \"#\": # use K\n            ways += PawnPromotion(i).checkAll(K,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        K=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            elif \"K\" in board_t:\n                K=King(board_i, board_t.index(\"K\"))\n            board.append(board_t)\n        print(board)\n        result = waysToGiveACheck(board, k, K)\n        print(result)\n\n\n","offset":1586,"fileType":"python3","requestStartTime":1517991184509}}
{"body": {"column":69,"line":37,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    ans = None\n    ans_tail = None\n    while list:\n        if list.val < x:\n            if not ans:\n                ans = LinkedListNode(list.val)\n                header = ans.next\n            else:\n                _insert_node_into_singlylinkedlist(ans, header, list.val)\n        list = list.next\n    return ans\n            \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = int(input())\n_list_i=0\nwhile _list_i < _list_size:\n    _list_item = int(input());\n    if _list_i == 0:\n        _list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n        _list_tail = _list\n    else:\n        _list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":806,"fileType":"python3","requestStartTime":1517991186846}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for i in xrange(0, len(board)):\n        if board[1][i] == \"P\" and board[0][i] == \"#\":\n            pawnPos = i\n            break\n    for i in xrange(0, len(board)):\n        board[0][i].\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":247,"fileType":"python3","requestStartTime":1517991200884}}
{"body": {"column":19,"line":79,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.y:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if self.checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if self.checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k ,K):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n        if board[1][i] == \"p\"  and board[0][i] == \"#\": # use K\n            ways += PawnPromotion(i).checkAll(K,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        K=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            elif \"K\" in board_t:\n                K=King(board_i, board_t.index(\"K\"))\n            board.append(board_t)\n        print(\"\\n\".board)\n        result = waysToGiveACheck(board, k, K)\n        print(result)\n\n\n","offset":2628,"fileType":"python3","requestStartTime":1517991226445}}
{"body": {"column":25,"line":2,"wordToComplete":"","code":"\nn_shops = int(input())\nshopst = input().strip().split(\" \")\nshops = [int(x) for x in shopst]\n\ndef getMax(a,b):\n    if(a>b):\n        return a\n    return b\n\nmax_gl = shops[0]\nmax_current = shops[0]\nfor i in range(1,n_shops):\n    max_current = getMax(max_current+shops[i],shops[i])\n    if max_current > max_gl:\n        max_gl = max_current\n\nprint(max_gl)\n    \n\n","offset":50,"fileType":"python3","requestStartTime":1517990952572}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.\n\n","offset":186,"fileType":"python3","requestStartTime":1517991254554}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>)\n\n","offset":211,"fileType":"python3","requestStartTime":1517991272916}}
{"body": {"column":30,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>)\n\n","offset":228,"fileType":"python3","requestStartTime":1517991285852}}
{"body": {"column":34,"line":79,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.y:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if self.checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if self.checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k ,K):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n        if board[1][i] == \"p\"  and board[0][i] == \"#\": # use K\n            ways += PawnPromotion(i).checkAll(K,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        K=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            elif \"K\" in board_t:\n                K=King(board_i, board_t.index(\"K\"))\n            board.append(board_t)\n        print(\"\\n\".join(board), k.)\n        result = waysToGiveACheck(board, k, K)\n        print(result)\n\n\n","offset":2643,"fileType":"python3","requestStartTime":1517991288695}}
{"body": {"column":125,"line":17,"wordToComplete":"the problem is here! if change is -0.05, then we should have bought for several times, not only once! No time..","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    if len(prices) == 0 or not prices:\n        return 'No Action'\n    base = prices[0]\n    buy_amount = sell_amount = 0\n    profit = 0\n    for i in range(1, len(prices) - 1):\n        change = (prices[i] - base) / base\n        if change <= -0.01:\n            # the problem is here! if change is -0.05, then we should have bought for several times, not only once! No time..\n            buy_amount += 1\n            profit -= base*0.99\n            base *= 0.99\n            \n        if change >= 0.01:\n            sell_amount += 1\n            profit += base*1.01\n            base *= 1.01\n    return str(round(profit + (buy_amount - sell_amount) * prices[-1], 2))\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":470,"fileType":"python3","requestStartTime":1517991297351}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.\n\n","offset":278,"fileType":"python3","requestStartTime":1517991308567}}
{"body": {"column":7,"line":10,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    import numpy as np\n    np.\n    if len(temperature) == 1:\n        \n        \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":162,"fileType":"python3","requestStartTime":1517991388490}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.\n\n","offset":564,"fileType":"python3","requestStartTime":1517991409105}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nn=int(input())\narr=list(map(int, input().))\n\n","offset":43,"fileType":"python3","requestStartTime":1517991197498}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\nn=int(input())\narr=list(map(int, input().split()))\nfor i in arr:\n    print(arr.)\n\n","offset":81,"fileType":"python3","requestStartTime":1517991210706}}
{"body": {"column":19,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.\n\n","offset":652,"fileType":"python3","requestStartTime":1517991433953}}
{"body": {"column":49,"line":28,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helpedPath(maze,visited,x,y,result,val.)\n\n","offset":773,"fileType":"python3","requestStartTime":1517991483115}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"\ndef capitalize(string):\n    '''\n    list = string.split()\n    result = []\n    #print(list)\n    for i in list:\n        result.append(i.capitalize())\n    #print(result)\n    return \" \".join(result)\n    '''\n    result_string=\"\"\n    new_word = true\n    for char in string:\n        #print(char)\n        if(char == ' '):\n            new_word = true\n        else:\n            new_word = false\n        if(char.isalpha() && (new_word == true)):\n            result_string.append(char.upper())\n        else:\n            result.\n            \n            \n        \nif __name__ == '__main__':\n    string = input()\n    capitalized_string = capitalize(string)\n    print(capitalized_string)\n","offset":517,"fileType":"python3","requestStartTime":1517991556951}}
{"body": {"column":17,"line":6,"wordToComplete":"ac","code":"\nfrom fractions import gcd\n\nT = int(input())\nfor _ in range(T):\n    [a,b,c] = map(int,input().split())\n    if c <= max(ac % gcd(a,b) == 0: print('YES')\n    else: print('NO')\n\n","offset":121,"fileType":"python3","requestStartTime":1517991666319}}
{"body": {"column":14,"line":30,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef find_rank(values, value):\n    left = 0\n    right = len(values) - 1\n    \n    while left <= right:\n        mid = (right + left) // 2\n        if mid == value:\n            return mid\n        elif mid > value:\n            right = mid - 1   \n        elif mid < value:\n            left = mid + 1\n            \n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    unique_scores = []\n    seen = set()\n    for score in scores:\n        if score not in seen:\n            seen.add(score)\n            unique_scores.append(score)\n    \n    ranks = [] \n    for score in alice:\n        ranks.find_rank(unique_scores, score))\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":628,"fileType":"python3","requestStartTime":1517991692505}}
{"body": {"column":19,"line":48,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helpedPath(maze,visited,x,y,result,val,'R')\n        if(flag==1):\n            return finalpath\n        b=helpedPath(maze,visited,x,y,result,val,'U')\n        if(flag==1):\n            return finalpath\n        c=helpedPath(maze,visited,x,y,result,val,'D')\n        if(flag==1):\n            return finalpath\n        d=helpedPath(maze,visited,x,y,result,val,'L')\n        if(flag==1):\n            return finalpath\n        \n        found=a or b or c or d\n        \n        if found:\n            finalpath=result\n            visited[x,y]='R'\n        else:\n            visited[x,y]='X'\n            result.\n\n","offset":1327,"fileType":"python3","requestStartTime":1517991709498}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\ni=int(input())\nn=int(input())\narr=list(map(int, input().split()))\nprint(arr.)\n\n","offset":78,"fileType":"python3","requestStartTime":1517991593414}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"users=[]  ## start with an empty list\nuser =input()  ## read first value in\nwhile user != '':  ## keep going til you read an empty space (ie no more input)\n    users += [user] ## add the value read in to the users list\n    user =input()    ## read the next value...\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ni = 0\nfor i in range(len(users)):\n   print (users[i]).\n   i += 1\n\n","offset":391,"fileType":"python3","requestStartTime":1517991850100}}
{"body": {"column":21,"line":67,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helpedPath(maze,visited,x,y,result,val,'R')\n        if(flag==1):\n            return finalpath\n        b=helpedPath(maze,visited,x,y,result,val,'U')\n        if(flag==1):\n            return finalpath\n        c=helpedPath(maze,visited,x,y,result,val,'D')\n        if(flag==1):\n            return finalpath\n        d=helpedPath(maze,visited,x,y,result,val,'L')\n        if(flag==1):\n            return finalpath\n        \n        found=a or b or c or d\n        \n        if found:\n            finalpath=result\n            visited[x,y]='R'\n        else:\n            visited[x,y]='X'\n            result.pop()\n            \n        return finalpath\n   \n    def findSource(maze):\n        x,y=0,0\n        for i in range(len(maze)):\n            for j in range(len(maze[0])):\n                if(maze[i][j]=='S'):\n                    x,y=i,j\n                    return x,y\n                \n    def FindPath(maze):\n        global finalpath\n        finalpath=[]\n        global flag\n        flag=0\n        result=[]\n        \n        N=int(input).\n\n","offset":1760,"fileType":"python3","requestStartTime":1517991946187}}
{"body": {"column":25,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    ind = -1\n    res = 0\n    while 1:\n         ind = board[1].index(\"P\", ind+1)\n        if board[0][ind] == \"#\":\n            break\n    if \"k\" in board[0]:\n        k_ind = board[0].\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n        \n\n","offset":239,"fileType":"python3","requestStartTime":1517991952195}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nn=int(input())\narr=list(map(int, input().))\n\n","offset":43,"fileType":"python3","requestStartTime":1517991766876}}
{"body": {"column":27,"line":4,"wordToComplete":"","code":"\nn=int(input())\narr=list(map(int, input().split()))\nq=int(input())\nqarr=list(map(int, input().))\n\n","offset":95,"fileType":"python3","requestStartTime":1517991792193}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\nn=int(input())\narr=set(map(int, input().split()))\nq=int(input())\nqarr=set(map(int, input().split()))\nprint(' '.)\n\n","offset":113,"fileType":"python3","requestStartTime":1517991809777}}
{"body": {"column":9,"line":71,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helpedPath(maze,visited,x,y,result,val,'R')\n        if(flag==1):\n            return finalpath\n        b=helpedPath(maze,visited,x,y,result,val,'U')\n        if(flag==1):\n            return finalpath\n        c=helpedPath(maze,visited,x,y,result,val,'D')\n        if(flag==1):\n            return finalpath\n        d=helpedPath(maze,visited,x,y,result,val,'L')\n        if(flag==1):\n            return finalpath\n        \n        found=a or b or c or d\n        \n        if found:\n            finalpath=result\n            visited[x,y]='R'\n        else:\n            visited[x,y]='X'\n            result.pop()\n            \n        return finalpath\n   \n    def findSource(maze):\n        x,y=0,0\n        for i in range(len(maze)):\n            for j in range(len(maze[0])):\n                if(maze[i][j]=='S'):\n                    x,y=i,j\n                    return x,y\n                \n    def FindPath(maze):\n        global finalpath\n        finalpath=[]\n        global flag\n        flag=0\n        result=[]\n\n#driver code\nN=int(input().strip())\nmaze=[]\nfor i in range(N):\n    maze.\n\n","offset":1803,"fileType":"python3","requestStartTime":1517992033243}}
{"body": {"column":29,"line":71,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helpedPath(maze,visited,x,y,result,val,'R')\n        if(flag==1):\n            return finalpath\n        b=helpedPath(maze,visited,x,y,result,val,'U')\n        if(flag==1):\n            return finalpath\n        c=helpedPath(maze,visited,x,y,result,val,'D')\n        if(flag==1):\n            return finalpath\n        d=helpedPath(maze,visited,x,y,result,val,'L')\n        if(flag==1):\n            return finalpath\n        \n        found=a or b or c or d\n        \n        if found:\n            finalpath=result\n            visited[x,y]='R'\n        else:\n            visited[x,y]='X'\n            result.pop()\n            \n        return finalpath\n   \n    def findSource(maze):\n        x,y=0,0\n        for i in range(len(maze)):\n            for j in range(len(maze[0])):\n                if(maze[i][j]=='S'):\n                    x,y=i,j\n                    return x,y\n                \n    def FindPath(maze):\n        global finalpath\n        finalpath=[]\n        global flag\n        flag=0\n        result=[]\n\n#driver code\nN=int(input().strip())\nmaze=[]\nfor i in range(N):\n    maze.append(list(input().))\n\n","offset":1823,"fileType":"python3","requestStartTime":1517992043059}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ninp = input().split(\" \")\nx = int(inp[0])\ny = int(inp[2])\nz = int(inp[1])\nres = 0\n\ndef bestval(x,y,z,val):\n    x_val = [x,x+1,x-1]\n    bestval(x_val[val],y,z-1,1)\n    if z == 0:\n        if x != y:\n            return -1\n    if z == 1 and y in x_val:\n        if x >\n        return x\n    else:\n        \n\nif (x-z) == y:\n    res = x\nelif (x-z) > y:\n    res = -1\nelse:\n    if (x-z) > 0:\n        for i in range(1,z):\n            if ((x+i)-(z-i)) == y:\n                res = x+i\n                break\n    else:\n        \n\n                \nprint(res)      \n\n","offset":335,"fileType":"python3","requestStartTime":1517991920455}}
{"body": {"column":37,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    chess = {}\n    \n    for i in range(0, len(board)):\n        string = board[i][0]\n        for j in range(0, len(string)):\n            if string[j] != \"#\":\n                if string[j] not in chess:\n                    chess[string[j]] = []\n                    chess[string[j]].\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":367,"fileType":"python3","requestStartTime":1517992058251}}
{"body": {"column":27,"line":35,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport io\n\n# Complete the function below.\n\ndef main():\n    zenPython = '''\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    '''\n    \n    fp = io.StringIO(zenPython)\n    zenlines = fp.readlines()\n    print ((str(zenlines)).)\n    #zenlines = zenlines.strip(',')\n    #zenlines = zenlines.strip('\\n')\n    print (zenlines)\n    #return (zenlines.strip(','))\n    \n    #Add implementation step here\n    \n    \n\n'''For testing the code, no input is to be provided'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = main();\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1156,"fileType":"python3","requestStartTime":1517992161406}}
{"body": {"column":30,"line":49,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef getPhoneX(board):\n    return board[1][0].index('P')\n\ndef getKingXY(board):\n    for y, row in enumerate(board):\n        if 'k' in row[0]:\n            return row[0].index('k'), y\n\ndef isKnightPath(px, py, kx, ky):\n    return (abs(px - kx) == 1 and abs(py - ky) == 2) or (abs(px - kx) == 2 and abs(py - ky) == 1)\n    \n        \ndef isDiagonalPath(px, py, kx, ky, board): \n    if ky == abs(px - kx):\n        inc = 1 if kx > px else -1\n        x = px\n        for y in range(1, ky):\n            x += inc\n            if board[y][0][x] != '#': return False\n        return True\n            \n    else:\n        return False\n\n\ndef isStraightPath(px, py, kx, ky, board):\n    if px == kx:\n        for y in range(1, ky):\n            if board[y][0][px] != '#': return False\n        return True\n        \n    elif py == ky: # ky == 0\n        for x in range(min(px, kx) + 1, max(px, kx)):\n            if board[0][0][x] != '#': return False\n        return True\n    \n    else:\n        return False\n\n    \ndef isDiscovered(px, kx, ky, board):\n    if 'R' in board[1][0]:\n        rx = board[1][0].index('R')\n        sub = board[1][0][min(kx, rx) + 1:max(kx, rx)]\n        if 'P' in sub and sub.\n    for x in range(8):\n        if board[1][0][x] == 'R' or board[1][0][x] == 'Q':\n            if min(kx, x) < px < max(kx, x): return True   \n        if board[0][0][x] == 'B' or board[0][0][x] == 'Q':\n            if (ky == abs(x - kx)) and ((ky - 1) == abs(px - kx)): return True\n            \n            \n    return False\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    count = 0\n\n    py = 0\n    for px in range(0, 8):\n        if board[1][0][px] != 'P': continue\n\n        kx, ky = getKingXY(board)\n\n        if isDiscovered(px, kx, ky, board): \n            count += 4\n            continue\n        \n        if isKnightPath(px, py, kx, ky): count += 1\n        isDiagonal = isDiagonalPath(px, py, kx, ky, board)\n        isStraight = isStraightPath(px, py, kx, ky, board)\n        \n        if isDiagonal: count += 2\n        if isStraight: count += 2\n        if isDiagonal and isStraight: count -= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1201,"fileType":"python3","requestStartTime":1517992201459}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":135,"fileType":"python3","requestStartTime":1517992207181}}
{"body": {"column":18,"line":70,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helpedPath(maze,visited,x,y,result,val,'R')\n        if(flag==1):\n            return finalpath\n        b=helpedPath(maze,visited,x,y,result,val,'U')\n        if(flag==1):\n            return finalpath\n        c=helpedPath(maze,visited,x,y,result,val,'D')\n        if(flag==1):\n            return finalpath\n        d=helpedPath(maze,visited,x,y,result,val,'L')\n        if(flag==1):\n            return finalpath\n        \n        found=a or b or c or d\n        \n        if found:\n            finalpath=result\n            visited[x,y]='R'\n        else:\n            visited[x,y]='X'\n            result.pop()\n            \n        return finalpath\n   \n    def findSource(maze):\n        x,y=0,0\n        for i in range(len(maze)):\n            for j in range(len(maze[0])):\n                if(maze[i][j]=='S'):\n                    x,y=i,j\n                    return x,y\n                \n    def FindPath(maze):\n        global finalpath\n        finalpath=[]\n        global flag\n        flag=0\n        result=[]\n        x,y=findSource(maze)\n        visited={(i,j):0 for i in rnage(len(maze)) for j in range(len(maze[0]))}\n        \n        path=helperPath(maze,visited,x,y,result,'')\n        return ''.\n\n#driver code\nN=int(input().strip())\nmaze=[]\nfor i in range(N):\n    maze.append(list(input().strip()))\n\nprint(FindPath(maze))\n\n","offset":1919,"fileType":"python3","requestStartTime":1517992275433}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    king_pos = []\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == \"k\":\n                king_pos. = [i,j]\n                break\n        if king_pos:\n            break\n    ways = 0        \n    for i in range(8):\n        if board[1][i] == P:\n            if i == king_pos[1] or king_pos[0] == 0:\n                ways+=2\n            elif abs(king_pos[0]-0) == abs(king_pos[1]-i):\n                ways+=2\n            elif (abs(i-king_pos[1]) == 1 and abs(0-king_pos[0]) == 2) or (abs(i-king_pos[1]) == 2 and abs(0-king_pos[0]) == 1):\n                ways+=1\n    return ways            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":216,"fileType":"python3","requestStartTime":1517992282108}}
{"body": {"column":9,"line":6,"wordToComplete":"ac","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if ac\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":66,"fileType":"python3","requestStartTime":1517992322357}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if acid_name.\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":74,"fileType":"python3","requestStartTime":1517992324409}}
{"body": {"column":38,"line":6,"wordToComplete":"ac","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if acid_name[:5] == \"hydro\" and ac\n    \nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":95,"fileType":"python3","requestStartTime":1517992346737}}
{"body": {"column":30,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            print(king.y , \"\".(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\"))\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if self.checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if self.checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            board.append(board_t)\n        #print(\"\\n\".join(board))\n        result = waysToGiveACheck(board, k)\n        print(result)\n\n\n","offset":1406,"fileType":"python3","requestStartTime":1517992368363}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = [input().\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":194,"fileType":"python3","requestStartTime":1517992404011}}
{"body": {"column":11,"line":8,"wordToComplete":"","code":"\nn=int(input())\narr=set(map(int, input().split()))\nq=int(input())\nqarr=set(map(int, input().split()))\nelem=set(arr)\nmissing=[]\nfor i in elem:\n    if arr.\n\n","offset":154,"fileType":"python3","requestStartTime":1517992188056}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"\nn=int(input())\narr=set(map(int, input().split()))\nq=int(input())\nqarr=set(map(int, input().split()))\nelem=set(arr)\nmissing=[]\nfor i in elem:\n    if arr.count(i)!=qarr.\n\n","offset":169,"fileType":"python3","requestStartTime":1517992195677}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nn=int(input())\narr=set(map(int, input().split()))\nq=int(input())\nqarr=set(map(int, input().split()))\nelem=set(arr)\nmissing=[]\nfor i in elem:\n    if arr.count(i)!=qarr.count(i):\n        missing.\n\n","offset":195,"fileType":"python3","requestStartTime":1517992201843}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\nn=int(input())\narr=set(map(int, input().split()))\nq=int(input())\nqarr=set(map(int, input().split()))\nelem=set(arr)\nmissing=set()\nfor i in elem:\n    if arr.count(i)!=qarr.count(i):\n        missing.add(i)\nprint(' '.)\n\n","offset":215,"fileType":"python3","requestStartTime":1517992217643}}
{"body": {"column":23,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            print(king.king.y , [(self.y+1,self.x-i )for i in range(1,king.y)] )\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if self.checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if self.checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            board.append(board_t)\n        #print(\"\\n\".join(board))\n        result = waysToGiveACheck(board, k)\n        print(result)\n\n\n","offset":1399,"fileType":"python3","requestStartTime":1517992521225}}
{"body": {"column":11,"line":26,"wordToComplete":"1.","code":"\ndef modMultiInv(a,m):\n    #A = []\n    t1 = 0\n    t2 = 1 \n    #stack = []\n    mod = m \n    while a>1:\n        #stack.append([mod//a,mod,a,mod%a])\n        j = mod//a\n        r = mod%a\n        mod = a\n        a = r\n        #t = t1-(stack[-1][0]*t2)\n        #A.append([t1,t2,t])\n        t = t1-((j)*t2)\n        t1 = t2\n        t2 = t\n    #print(t)\n    if t>0:\n        return(t)\n    else:\n        return(t%m)\nfor i in range(int(input())):\n    np,sp,nc,sc = list(map(int,input().split()))\n    n = pow(sp,np)*pow(sc,nc)\n    p = (1.)\n        \n    q = sp*sc\n    z = modMultiInv(q,1012924417)\n    print((p*z)%1012924417)\n    \n\n","offset":526,"fileType":"python3","requestStartTime":1517992547782}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef predictTemperature(startDate, endDate, temperature, n):\n    import numpy as np\n    \n    temp = np.array(temperature)\n    ave_temp = np.array(temperature)\n    \n    if len(temp) >= 48:\n        temp1 = np.array(temperature[-48:-25])\n        temp2 = np.temperature[-24:]\n        ave_temp = (temp1 + temp2) / 2\n    \n    answer = []\n    for num in range(n):\n        pred = ave_temp * 1.02\n        for num in pred:\n            answer.append(num)\n    \n    return answer\n    \n    \n        \n\n        \n        \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        startDate = str(input())\n    except:\n        startDate = None\n\n    try:\n        endDate = str(input())\n    except:\n        endDate = None\n\n    temperature_cnt = 0\n    temperature_cnt = int(input())\n    temperature_i = 0\n    temperature = []\n    while temperature_i < temperature_cnt:\n        temperature_item = float(input())\n        temperature.append(temperature_item)\n        temperature_i += 1\n\n\n    n = int(input())\n\n    res = predictTemperature(startDate, endDate, temperature, n);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":325,"fileType":"python3","requestStartTime":1517992566924}}
{"body": {"column":23,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            print(self.king.y, king.x , [(self.y+i,self.x-i )for i in range(1,king.y)] )\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if self.checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if self.checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            board.append(board_t)\n        #print(\"\\n\".join(board))\n        result = waysToGiveACheck(board, k)\n        print(result)\n\n\n","offset":1399,"fileType":"python3","requestStartTime":1517992589432}}
{"body": {"column":31,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n\nclass PawnPromotion:\n    def __init__(self, x):\n        self.x = x\n        self.y = 0\n    def checkKnight(self, king):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        return False\n    def checkRook(self, king, board):\n        if king.x == self.x:\n            if sum(1 for i in range(2,king.y) if board[i][king.x] != \"#\") == 0:\n                return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x,king.x, -1) if board[0][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x,king.x) if board[0][i] != \"#\") == 0:\n                    return True\n        return False\n    def checkBishop(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            print(self.y, self.king.y, king.x , [(self.y+i,self.x-i )for i in range(1,king.y)] )\n            if sum(1 for i in range(1,king.y) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        return False\n    def checkAll(self, king, board):\n        ways=0\n        if self.checkRook(king, board):\n            ways+=1\n        if self.checkBishop(king, board):\n            ways+=1\n        if ways >= 1: # queen can check = rook or bishop can check\n            ways+=1\n        if self.checkKnight(king):\n            ways+=1\n        return ways\n\ndef waysToGiveACheck(board, k):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            ways += PawnPromotion(i).checkAll(k,board)\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        for board_i in range(8):\n            board_t = input().strip()\n            if \"k\" in board_t:\n                k=King(board_i, board_t.index(\"k\"))\n            board.append(board_t)\n        #print(\"\\n\".join(board))\n        result = waysToGiveACheck(board, k)\n        print(result)\n\n\n","offset":1407,"fileType":"python3","requestStartTime":1517992591876}}
{"body": {"column":19,"line":33,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\ndef printList(list)\n    temp = list\n    print(temp.val)\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n        print(temp.)\n    return temp\ndef getEnd(list):\n    temp = list\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n    return temp\n\ndef getIndex(list, n):\n    temp = list\n    for i in range(n - 1):\n        temp2 = list.next\n        temp = temp2\n    return temp\n\ndef mergeInBetween(list1, list2, a, b):\n    print(\"this is working\")\n    print(list1.val)\n    a_node = getIndex(list1, a)\n    a_node.next = list2\n    b_node = getIndex(list1, b)\n    list2_end = getEnd(list2)\n    list2_end.next = b_node\n    return list1\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    list1 = None\n    list1_tail = None\n    list1_size = int(input())\n    list1_i = 0\n    while list1_i < list1_size:\n        list1_item = int(input())\n\n        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item)\n        if list1_i == 0:\n            list1 = list1_tail\n        list1_i += 1\n\n\n    list2 = None\n    list2_tail = None\n    list2_size = int(input())\n    list2_i = 0\n    while list2_i < list2_size:\n        list2_item = int(input())\n\n        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item)\n        if list2_i == 0:\n            list2 = list2_tail\n        list2_i += 1\n\n\n    a = int(input())\n\n    b = int(input())\n\n    res = mergeInBetween(list1, list2, a, b);\n    while (res != None):\n        f.write(str(res.val) + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":661,"fileType":"python3","requestStartTime":1517992607012}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    if a0>\n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517992612736}}
{"body": {"column":11,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\nimport bisect\nimport sys\n\ndef find_rank(values, value):\n    bisect.\n    left = 0\n    right = len(values) - 1\n    \n    while left < right:\n        mid = (right + left) // 2\n        if values[mid] == value:\n            return mid\n        if values[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return len(values) - right\n    \n            \n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    unique_scores = []\n    seen = set()\n    for score in scores:\n        if score not in seen:\n            seen.add(score)\n            unique_scores.append(score)\n    ranks = [] \n    for score in alice:\n        ranks.append(find_rank(unique_scores, score))\n    \n    return ranks\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":84,"fileType":"python3","requestStartTime":1517992672696}}
{"body": {"column":14,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    a_score = 0\n    b_score = 0\n    if a0>b0 or a1>b1 or a2>b2 :\n        a_score +=1\n    elif a0<b0 or a1<b1 or a2<b2:\n        b_score +=1\n    return (a_score,b_score)    \n        \n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\n#print (\" \".join(map(str, result)))\nprint(\"{} {}\".)\n\n\n\n\n","offset":527,"fileType":"python3","requestStartTime":1517992833268}}
{"body": {"column":14,"line":78,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nglobal flag\nflag=0\nglobal finalpath\nfinalpath=[]\n\ndef helperPath(maze,visited,x,y,result,val):\n    global flag\n    global finalpath\n    if(flag==0):\n        result.append(val)\n        if(x>len(maze)-1 or y>len(maze[0])-1 or x<0 or y<0):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='F'):\n            #print('Found end point')\n            finalpath=result\n            flag=1\n            visited[x,y]='R'\n            return True\n        \n        if(visited[x,y]==1 or visited[x,y]=='X'):\n            result.pop()\n            return False\n        \n        if(maze[x][y]=='@'):\n            result.pop()\n            return False\n        \n        visited[x,y]=1\n        \n        a=helperPath(maze,visited,x,y+1,result,'R')\n        if(flag==1):\n            return finalpath\n        b=helperPath(maze,visited,x-1,y,result,'U')\n        if(flag==1):\n            return finalpath\n        c=helperPath(maze,visited,x+1,y,result,'D')\n        if(flag==1):\n            return finalpath\n        d=helperPath(maze,visited,x,y-1,result,'L')\n        if(flag==1):\n            return finalpath\n        \n        found=a or b or c or d\n        \n        if found:\n            finalpath=result\n            visited[x,y]='R'\n        else:\n            visited[x,y]='X'\n            result.pop()\n            \n    return finalpath\n   \ndef findSource(maze):\n    x,y=0,0\n    for i in range(len(maze)):\n        for j in range(len(maze[0])):\n            if(maze[i][j]=='S'):\n                x,y=i,j\n                return x,y\n                 \n                    \n                \ndef FindPath(maze):\n    global finalpath\n    finalpath=[]\n    global flag\n    flag=0\n    result=[]\n    x,y=findSource(maze)\n    visited={(i,j):0 for i in range(len(maze)) for j in range(len(maze[0]))}\n        \n    path=helperPath(maze,visited,x,y,result,'')\n    return ''.''path)\n\n#driver code\nN=int(input().strip())\nmaze=[]\nfor i in range(N):\n    maze.append(list(input().strip()))\n\nprint(FindPath(maze))\n\n","offset":1929,"fileType":"python3","requestStartTime":1517992881667}}
{"body": {"column":22,"line":40,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef check_bishop(i,j,ik,jk):\n    if abs((i-ik)/(j-jk)) == 1:\n        return 1\n    else:\n        return 0\n    \ndef check_rook(i,j,ik,jk):\n    if i == ik or j == jk:\n        return 1\n    else:\n        return 0\n\ndef check_queen(i,j,iking,jking):\n    if check_bishop(i,j,iking,jking) or check_rook(i,j,iking,jking):\n        return 1\n    else:\n        return 0\n    \ndef check_knight(i,j,ik,jk):\n    if (abs(ik-i) == 1 and abs(j- jk)==2) or (abs(ik-i) == 2 and abs(j- jk)==1):\n        return 1\n    else:\n        return 0\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    #print(board)\n    pawns = []\n    for i in range(8):\n        for j in range(8):\n            if board[i][0][j] == 'k':\n                pos_king = (i,j)\n            elif board[i][0][j] == 'P':\n                pos_pawn = (i-1,j)\n                pawns.\n            elif board[i][0][j] == 'K':\n                pos_myking= (i,j)\n                \n    return check_bishop(*pos_pawn,*pos_king) + check_knight(*pos_pawn,*pos_king) + check_rook(*pos_pawn,*pos_king) + check_queen(*pos_pawn,*pos_king)\n        \n    \n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":856,"fileType":"python3","requestStartTime":1517992909657}}
{"body": {"column":34,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef dfs(x, y, chess, nari):\n    ans = 0\n    if nari == \"K\":\n        direct = [[-1,-2],[-2,-1].]\n    return ans\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    chess = {}\n    ans = 0\n    # Set all chess's location\n    for i in range(0, len(board)):\n        string = board[i][0]\n        for j in range(0, len(string)):\n            if string[j] != \"#\":\n                if string[j] not in chess:\n                    chess[string[j]] = []\n                    chess[string[j]].append([i, j])\n                else:\n                    chess[string[j]].append([i, j])\n    print(chess)\n    \n    # No pawn\n    if 'P' not in chess:\n        return 0\n    \n    for wPawn in chess['P']:\n        if chess['k'] == [wPawn[0]-1,wPawn[1]]:\n            ans += 1\n        else:\n            # 開始算\n            naris = ['K','Q','R','B']\n            for nari in naris:\n                ans += dfs(wPawn[0]-1, wPawn[1], chess, nari)\n    \n    return ans\n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":124,"fileType":"python3","requestStartTime":1517992912425}}
{"body": {"column":18,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\nshop_pl = input().\n\n","offset":108,"fileType":"python3","requestStartTime":1517992885369}}
{"body": {"column":23,"line":55,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\ndef printList(list):\n    temp = list\n    print(temp.val)\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n        print(temp.val, sep = \" \")\n\ndef getEnd(list):\n    temp = list\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n    return temp\n\ndef getIndex(list, n):\n    temp = list\n    for i in range(n - 2):\n        temp2 = list.next\n        temp = temp2\n    return temp\n\ndef mergeInBetween(list1, list2, a, b):\n    print(\"list1\")\n    printList(list1)\n    print('list2')\n    printList(list2)\n    print('a value')\n    getIndex(list1, a).\n    print(a, b)\n    '''\n    print(\"this is working\")\n    print(list1.val)\n    a_node = getIndex(list1, a)\n    a_node.next = list2\n    b_node = getIndex(list1, b)\n    list2_end = getEnd(list2)\n    list2_end.next = b_node\n    return list1\n    '''\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    list1 = None\n    list1_tail = None\n    list1_size = int(input())\n    list1_i = 0\n    while list1_i < list1_size:\n        list1_item = int(input())\n\n        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item)\n        if list1_i == 0:\n            list1 = list1_tail\n        list1_i += 1\n\n\n    list2 = None\n    list2_tail = None\n    list2_size = int(input())\n    list2_i = 0\n    while list2_i < list2_size:\n        list2_item = int(input())\n\n        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item)\n        if list2_i == 0:\n            list2 = list2_tail\n        list2_i += 1\n\n\n    a = int(input())\n\n    b = int(input())\n\n    res = mergeInBetween(list1, list2, a, b);\n    while (res != None):\n        f.write(str(res.val) + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":1100,"fileType":"python3","requestStartTime":1517993045251}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef TimeMachine(message):\n    global msg\n    msg=list(message)\n    global value\n    value=[0]*len(msg)\n    \n    #checks for star and multiply by 2\n    def star(pointer,mul):\n        pointer-=2\n        if(pointer<0):\n            return\n        if(msg[pointer]=='*'):\n            mul*=2\n            star(pointer,mul)\n        if(msg[pointer]=='>')\n\n","offset":415,"fileType":"python3","requestStartTime":1517993047237}}
{"body": {"column":34,"line":55,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\ndef printList(list):\n    temp = list\n    print(temp.val)\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n        print(temp.val, sep = \" \")\n\ndef getEnd(list):\n    temp = list\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n    return temp\n\ndef getIndex(list, n):\n    temp = list\n    for i in range(n - 2):\n        temp2 = list.next\n        temp = temp2\n    return temp\n\ndef mergeInBetween(list1, list2, a, b):\n    print(\"list1\")\n    printList(list1)\n    print('list2')\n    printList(list2)\n    print('a value')\n    print(getIndex(list1, a).next.)\n    print(a, b)\n    '''\n    print(\"this is working\")\n    print(list1.val)\n    a_node = getIndex(list1, a)\n    a_node.next = list2\n    b_node = getIndex(list1, b)\n    list2_end = getEnd(list2)\n    list2_end.next = b_node\n    return list1\n    '''\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    list1 = None\n    list1_tail = None\n    list1_size = int(input())\n    list1_i = 0\n    while list1_i < list1_size:\n        list1_item = int(input())\n\n        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item)\n        if list1_i == 0:\n            list1 = list1_tail\n        list1_i += 1\n\n\n    list2 = None\n    list2_tail = None\n    list2_size = int(input())\n    list2_i = 0\n    while list2_i < list2_size:\n        list2_item = int(input())\n\n        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item)\n        if list2_i == 0:\n            list2 = list2_tail\n        list2_i += 1\n\n\n    a = int(input())\n\n    b = int(input())\n\n    res = mergeInBetween(list1, list2, a, b);\n    while (res != None):\n        f.write(str(res.val) + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":1111,"fileType":"python3","requestStartTime":1517993088402}}
{"body": {"column":9,"line":59,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef movePawn(board):\n    file = next(i for i in range(0,8) if board[0][i] == '#' and board[1][i] == 'P')\n    board[0][file] = '*'\n    board[1][file] = '#'\n    promotedPiece = (file, 0)\n    return promotedPiece\n\ndef locateBlackKing(board):\n    king = next((f,r) for (f, r) in zip(range(0,8), range(0,8)) if board[f][r] == 'k')\n    return king\n\ndef discovered(board, king):\n    file = king[0]\n    rank = king[1]\n    if rank != 1:\n        return False\n    row = board[1]\n    # check right, then left\n    checkRanges = [range(file + 1, 8), range(0, file)[::-1]]\n    for checkRange in checkRanges:\n        for i in checkRanges:\n            if row[i] == '#':\n                continue\n            elif row[i] == 'R' or row[i] == 'Q':\n                return True\n            else:\n                break\n    return False\n\ndef knight(board, king, promotedPiece):\n    d = (abs(king[i] - promotedPiece[i]) for i in range(0,2))\n    if d == (1,2) or d == (2,1):\n        return True\n    else:\n        return False\n\ndef rook(board, king, promotedPiece):\n    d = (king[i] - promotedPiece[i] for i in range(0,2))\n    if d[0] == 0:\n        file = king[0]\n        minMax = sorted(king[1], promotedPiece[1])\n        return all(board[i][file] == '#' for i in range(minMax[0] + 1, minMax[1]))\n    elif d[1] == 0:\n        rank = king[1]\n        minMax = sorted(king[0], promotedPiece[0])\n        return all(board[rank][i] == '#' for i in range(minMax[0] + 1, minMax[1]))\n    else:\n        return False\n\ndef bishop(board):\n    d = (king[i] - promotedPiece[i] for i in range(0,2))\n    if d[0] == d[1]:\n        \n        \n    else:\n    \n    if d[0] == 0:\n        file = king[0]\n        minMax = sorted(king[1], promotedPiece[1])\n        return all(board[i][file] == '#' for i in range(minMax[0] + 1, minMax[1]))\n    elif d[1] == 0:\n        rank = king[1]\n        minMax = sorted(king[0], promotedPiece[0])\n        return all(board[rank][i] == '#' for i in range(minMax[0] + 1, minMax[1]))\n    else:\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    return 1\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1633,"fileType":"python3","requestStartTime":1517993158137}}
{"body": {"column":31,"line":26,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef TimeMachine(message):\n    global msg\n    msg=list(message)\n    global value\n    value=[0]*len(msg)\n    \n    #checks for star and multiply by 2\n    def star(pointer,mul):\n        pointer-=2\n        if(pointer<0):\n            return\n        if(msg[pointer]=='*'):\n            mul*=2\n            star(pointer,mul)\n        if(msg[pointer]=='>'):\n            value[pointer]=mul*1\n        if(msg[pointer]=='<'):\n            value[pointer]=mul*-1\n            \n            \n    def decode(msg):\n        pointer=0\n        while(pointer<len(msg)):\n            if(msg[pointer]=='>')\n\n","offset":646,"fileType":"python3","requestStartTime":1517993159851}}
{"body": {"column":34,"line":29,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef TimeMachine(message):\n    global msg\n    msg=list(message)\n    global value\n    value=[0]*len(msg)\n    \n    #checks for star and multiply by 2\n    def star(pointer,mul):\n        pointer-=2\n        if(pointer<0):\n            return\n        if(msg[pointer]=='*'):\n            mul*=2\n            star(pointer,mul)\n        if(msg[pointer]=='>'):\n            value[pointer]=mul*1\n        if(msg[pointer]=='<'):\n            value[pointer]=mul*-1\n            \n            \n    def decode(msg):\n        pointer=0\n        while(pointer<len(msg)):\n            if(msg[pointer]=='>'):\n                value[pointer]=1\n            if(msg[pointer]=='<'):\n                value[pointer]=='>'\n\n","offset":752,"fileType":"python3","requestStartTime":1517993201655}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\nshop = [int(x) for x in input().strip().split(\" \")]\n\ndef max_get(a,b):\n    if(a>b):\n        return a\n    return b\n\nglob_shop = shop[0]\nloc_shop = shop[0]\n\nfor i in range(1,n):\n    loc_shop = max_get(loc_shop + shop[i],shop[i])\n    if loc_shop >\n    \n\n","offset":334,"fileType":"python3","requestStartTime":1517993203358}}
{"body": {"column":20,"line":42,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef TimeMachine(message):\n    global msg\n    msg=list(message)\n    global value\n    value=[0]*len(msg)\n    \n    #checks for star and multiply by 2\n    def star(pointer,mul):\n        pointer-=2\n        if(pointer<0):\n            return\n        if(msg[pointer]=='*'):\n            mul*=2\n            star(pointer,mul)\n        if(msg[pointer]=='>'):\n            value[pointer]=mul*1\n        if(msg[pointer]=='<'):\n            value[pointer]=mul*-1\n            \n            \n    def decode(msg):\n        pointer=0\n        while(pointer<len(msg)):\n            if(msg[pointer]=='>'):\n                value[pointer]=1\n            if(msg[pointer]=='<'):\n                value[pointer]=-1\n            if(msg[pointer]=='*'):\n                star(pointer,2)\n            pointer+=1\n    \n    decode(msg)\n    sum=0\n    #sum the result\n    for i in range(len(value)):\n        sum+=value[i]\n    return sum+2017\n\n#drivers Code\nmessage=str(input().)\n\n","offset":1002,"fileType":"python3","requestStartTime":1517993360661}}
{"body": {"column":11,"line":59,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\ndef printList(list):\n    temp = list\n    print(temp.val)\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n        print(temp.val, sep = \" \")\n\ndef getEnd(list):\n    temp = list\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n    return temp\n\ndef getIndex(list, n):\n    temp = list\n    for i in range(n - 2):\n        temp2 = list.next\n        temp = temp2\n    return temp\n\ndef mergeInBetween(list1, list2, a, b):\n    \n    print(\"list1\")\n    printList(list1)\n    print('list2')\n    printList(list2)\n    print(a, b)\n    \n    at_a = getIndex(list1, a)\n    b_node = getIndex(list1, b + 2)\n    b_node.\n    list2_end = getEnd(list2)\n    list2_end.next = b_node\n    at_a.next = list2\n    return list1\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    list1 = None\n    list1_tail = None\n    list1_size = int(input())\n    list1_i = 0\n    while list1_i < list1_size:\n        list1_item = int(input())\n\n        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item)\n        if list1_i == 0:\n            list1 = list1_tail\n        list1_i += 1\n\n\n    list2 = None\n    list2_tail = None\n    list2_size = int(input())\n    list2_i = 0\n    while list2_i < list2_size:\n        list2_item = int(input())\n\n        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item)\n        if list2_i == 0:\n            list2 = list2_tail\n        list2_i += 1\n\n\n    a = int(input())\n\n    b = int(input())\n\n    res = mergeInBetween(list1, list2, a, b);\n    while (res != None):\n        f.write(str(res.val) + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":1159,"fileType":"python3","requestStartTime":1517993422603}}
{"body": {"column":42,"line":73,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef movePawn(board):\n    file = next(i for i in range(0,8) if board[0][i] == '#' and board[1][i] == 'P')\n    board[0][file] = '*'\n    board[1][file] = '#'\n    promotedPiece = (file, 0)\n    return promotedPiece\n\ndef locateBlackKing(board):\n    king = next((f,r) for (f, r) in zip(range(0,8), range(0,8)) if board[f][r] == 'k')\n    return king\n\ndef discovered(board, king):\n    file = king[0]\n    rank = king[1]\n    if rank != 1:\n        return False\n    row = board[1]\n    # check right, then left\n    checkRanges = [range(file + 1, 8), range(0, file)[::-1]]\n    for checkRange in checkRanges:\n        for i in checkRanges:\n            if row[i] == '#':\n                continue\n            elif row[i] == 'R' or row[i] == 'Q':\n                return True\n            else:\n                break\n    return False\n\ndef knight(board, king, promotedPiece):\n    d = (abs(king[i] - promotedPiece[i]) for i in range(0,2))\n    if d == (1,2) or d == (2,1):\n        return True\n    else:\n        return False\n\ndef rook(board, king, promotedPiece):\n    d = (king[i] - promotedPiece[i] for i in range(0,2))\n    if d[0] == 0:\n        file = king[0]\n        minMax = sorted(king[1], promotedPiece[1])\n        return all(board[i][file] == '#' for i in range(minMax[0] + 1, minMax[1]))\n    elif d[1] == 0:\n        rank = king[1]\n        minMax = sorted(king[0], promotedPiece[0])\n        return all(board[rank][i] == '#' for i in range(minMax[0] + 1, minMax[1]))\n    else:\n        return False\n\ndef bishop(board):\n    d = (king[i] - promotedPiece[i] for i in range(0,2))\n    if d[0] == d[1]:\n        return all(board[promotedPiece[1] + i][promotedPiece[0] + i] == '#' for i in range(1, -d[1]))\n    elif d[0] == -d[1]:\n        return all(board[promotedPiece[1] + i][promotedPiece[0] - i] == '#' for i in range(1, -d[1]))\n    else:\n        return False\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    promotedPiece = movePawn(board)\n    king = locateKing(board)\n    if discovered(board, king):\n        return 4\n    if knight(board, king, promotedPiece):\n        return 1\n    if rook(board, king, promotedPiece):\n        return 2\n    if bishop(board, king, promotedPiece):\n    return 1\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2198,"fileType":"python3","requestStartTime":1517993483877}}
{"body": {"column":24,"line":107,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef checkCol(board, c):\n    king = None\n    for i in range(len(board)):\n        b = False\n        for j in range(len(board)):\n            if board[i][j] == 'k':\n                king = (i, j)\n                b = True\n                break\n        if b:\n            break\n    if abs(king[0]) == abs(king[1] - c):\n        direction = (c - king[1])\n        direction = direction // abs(direction)\n        for i in range(1, abs(c - king[0])):\n            works = True\n            if board[king[0] + i * direction][king[1] + i] != '#':\n                works = False\n                break\n            if works:\n                return 2\n            else:\n                return 0\n    if king[1] == c:\n        for i in range(king[0] - 1, 0, -1):\n            if board[i][c] != '#':\n                return 2\n        return 0\n    \n    if king[0] == 0:\n        direction = (c - king[1])\n        direction = direction // abs(direction)\n        for i in range(king[1] + direction, c, direction):\n            if board[i][c] != '#':\n                return 2\n            else:\n                return 0\n            \n    if (abs(c - king[1]) == 2 and king[0] == 1) or (abs(c -king[1]) == 1 and king[0] == 2):\n        return 1\n    \n    if king[0] == 1:\n        direction = c - king[1]\n        direction = direction / abs(direction)\n        for i in range(c + direction, [-1, 8][direction == 1], direction):\n            if board[1][c + i * direction] == 'R' or board[1][c + i * direction] == 'Q':\n                return 1\n            elif board[1][c + i * direction] != '#':\n                return 0\n    if abs(king[0] - 1) == abs(king[1] - c):\n        direction = king[1] - c\n        direction = direction // abs(direction)\n        if board[0][c - direction] == 'B' or board[0][c - direction] == 'Q':\n            for i in range(0, king[1]):\n                if board[i][c + i * direction] != '#':\n                    return 0\n            return 1\n    return 0\n        \ndef checkDiscoveries(board, c):\n    king = None\n    for i in range(len(board)):\n        b = False\n        for j in range(len(board)):\n            if board[i][j] == 'K':\n                king = (i, j)\n                b = True\n                break\n        if b:\n            break\n    \n    if king[0] == 1:\n        direction = c - king[1]\n        direction = direction / abs(direction)\n        for i in range(c + direction, [-1, 8][direction == 1], direction):\n            if board[1][c + i * direction] == 'r' or direction == 'q':\n                return True\n            elif board[1][c + i * direction] != '#':\n                return False\n    if king[0] == 0 and abs(king[1] - c) == 1:\n        direction = king[1] - c\n        direction = direction // abs(direction)\n        if board[0][c - direction] == 'b' or board[0][c - direction] == 'q':\n            for i in range(0, king[1]):\n                if board[i][c + i * direction] != '#':\n                    return True\n            return False\n    return False\n\ndef waysToGiveACheck(board):\n    print(board[1])\n    for i in range(len(board[1])):\n        c = board[1][i]\n        if c == 'P' and board[0][i] == '#': # and (not checkDiscoveries(board, c)):\n            return checkCol(board, i)\n    return 'none found'\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = ''.[str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":3401,"fileType":"python3","requestStartTime":1517993501484}}
{"body": {"column":28,"line":61,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\ndef printList(list):\n    temp = list\n    print(temp.val)\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n        print(temp.val, sep = \" \")\n\ndef getEnd(list):\n    temp = list\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n    return temp\n\ndef getIndex(list, n):\n    temp = list\n    for i in range(n - 2):\n        temp2 = list.next\n        temp = temp2\n    return temp\n\ndef mergeInBetween(list1, list2, a, b):\n    \n    print(\"list1\")\n    printList(list1)\n    print('list2')\n    printList(list2)\n    print(a, b)\n    \n    at_a = getIndex(list1, a)\n    b_node = getIndex(list1, b + 2)\n    print(b_node.val)\n    list2_end = getEnd(list2)\n    list2_end.next = b_node.\n    at_a.next = list2\n    return list1\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    list1 = None\n    list1_tail = None\n    list1_size = int(input())\n    list1_i = 0\n    while list1_i < list1_size:\n        list1_item = int(input())\n\n        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item)\n        if list1_i == 0:\n            list1 = list1_tail\n        list1_i += 1\n\n\n    list2 = None\n    list2_tail = None\n    list2_size = int(input())\n    list2_i = 0\n    while list2_i < list2_size:\n        list2_item = int(input())\n\n        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item)\n        if list2_i == 0:\n            list2 = list2_tail\n        list2_i += 1\n\n\n    a = int(input())\n\n    b = int(input())\n\n    res = mergeInBetween(list1, list2, a, b);\n    while (res != None):\n        f.write(str(res.val) + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":1228,"fileType":"python3","requestStartTime":1517993514881}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef decodeInput(input):\n    strng=list(input)\n    charIndexMap={}\n    \n    charIndexMap[strng[0]]=1\n    i=0\n    j=1\n    \n    while j<len(strng) and i<len(strng):\n        if(i==1):\n            i+=1\n            continue\n        if(charIndexMap.)\n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        input = str(input())\n    except:\n        input = None\n\n    res = decodeInput(input);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":314,"fileType":"python3","requestStartTime":1517993577789}}
{"body": {"column":18,"line":3,"wordToComplete":"a","code":"import numpy\ndef arrays(arr):\n    reversed_arr = arr[::-1]\n    return numpy.a\n    for element in range(len(arr), 0, -1):\n         print(element)                \n        \n    # complete this function\n    # use numpy.array \n\n\narr = input().strip().split(' ')\nresult = arrays(arr)\nprint(result)\n","offset":78,"fileType":"python3","requestStartTime":1517993590377}}
{"body": {"column":27,"line":28,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef decodeInput(input):\n    strng=list(input)\n    charIndexMap={}\n    \n    charIndexMap[strng[0]]=1\n    i=0\n    j=1\n    \n    while j<len(strng) and i<len(strng):\n        if(i==1):\n            i+=1\n            continue\n        if(charIndexMap.get(strng[j]) is None):\n            charIndex[strng[j]]=i\n            i+=1\n        j+=1\n        \n    base=i\n    result=0\n    for i in rnage(len(strng)):\n        value=charIndexMap.\n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        input = str(input())\n    except:\n        input = None\n\n    res = decodeInput(input);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":494,"fileType":"python3","requestStartTime":1517993722272}}
{"body": {"column":10,"line":97,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef checkMore(board, i):\n    res = 0\n    board[1] = board[1][:i]+\"#\"+board[1][i+1:] #take out pawn\n    board[0] = board[0][:i]+\"P\"+board[0][i+1:]\n        \n    for x in range(8):\n        for y in range(8):\n            if board[y][x] == \"k\":\n                kx = x\n                ky = y\n     \n    # check for checks if pawn is removed\n    # rook\n    # up\n    for i in range(ky-1, -1, -1):\n        if board[i][kx] != \"#\" and board[i][kx] != \"R\" and board[i][kx] != \"Q\":\n            break\n        if board[i][kx] == \"R\" or board[i][kx] == \"Q\":\n            res += 1\n            break\n    # down\n    for i in range(ky+1, 8):\n        if board[i][kx] != \"#\" and board[i][kx] != \"R\" and board[i][kx] != \"Q\":\n            break\n        if board[i][kx] == \"R\" or board[i][kx] == \"Q\":\n            res += 1\n            break\n    # right\n    for i in range(kx+1, 8):\n        if board[ky][i] != \"#\" and board[ky][i] != \"R\" and board[ky][i] != \"Q\":\n            break\n        if board[ky][i] == \"R\" or board[ky][i] == \"Q\":\n            res += 1\n            break\n    # left\n    for i in range(kx-1, -1, -1):\n        if board[ky][i] != \"#\" and board[ky][i] != \"R\" and board[ky][i] != \"Q\":\n            break\n        if board[ky][i] == \"R\" or board[ky][i] == \"Q\":\n            res += 1\n            break\n    \n    # bishop\n    x = kx+1\n    y = ky-1\n    while (x < 8 and y >= 0):\n        if board[y][x] != \"#\" and board[y][x] != \"B\" and board[y][x] != \"Q\":\n            break\n        if board[y][x] == \"B\" or board[y][x] == \"Q\":\n            res += 1\n            break\n        x += 1\n        y -= 1\n    x = kx+1\n    y = ky+1\n    while (x < 8 and y < 8):\n        if board[y][x] != \"#\" and board[y][x] != \"B\" and board[y][x] != \"Q\":\n            break\n        if board[y][x] == \"B\" or board[y][x] == \"Q\":\n            res += 1\n            break\n        x += 1\n        y += 1\n    x = kx-1\n    y = ky+1\n    while (x >= 0 and y < 8):\n        if board[y][x] != \"#\" and board[y][x] != \"B\" and board[y][x] != \"Q\":\n            break\n        if board[y][x] == \"B\" or board[y][x] == \"Q\":\n            res += 1\n            break\n        x -= 1\n        y += 1\n    x = kx-1\n    y = ky-1\n    while (x >= 0 and y >= 0):\n        if board[y][x] != \"#\" and board[y][x] != \"B\" and board[y][x] != \"Q\":\n            break\n        if board[y][x] == \"B\" or board[y][x] == \"Q\":\n            res += 1\n            break\n        x -= 1\n        y -= 1\n    return res \n    \ndef waysToGiveACheck(board):\n    res = 0\n    n = 0\n    for i in range(len(board[1])):\n        if board[1][i] == \"P\" and board[0][i] == \"#\":\n            n += 1\n            pawn_pos = i\n    if n >\n    # rook & queen\n    # right\n    for i in range(pawn_pos+1, 8):\n        if board[0][i] != \"#\" and board[0][i] != \"k\":\n            break\n        if board[0][i] == \"k\":\n            res += 2\n    for i in range(pawn_pos-1, -1, -1):\n        if board[0][i] != \"#\" and board[0][i] != \"k\":\n            break\n        if board[0][i] == \"k\":\n            res += 2\n    for i in range(2, 8):\n        if board[i][pawn_pos] != \"#\" and board[i][pawn_pos] != \"k\":\n            break\n        if board[i][pawn_pos] == \"k\":\n            res += 2\n    # knight\n    for x,y in [(-1, 2), (1, 2), (-2, 1), (2, 1)]:\n        if x+pawn_pos >= 0 and x+pawn_pos < 8 and board[y][x+pawn_pos] == \"k\":\n            res += 1\n    # bishop & queen\n    y = 0\n    x = pawn_pos\n    while (x >= 0):\n        if board[y][x] != \"#\" and board[y][x] != \"k\":\n            break\n        if board[y][x] == \"k\":\n            res += 2\n        y += 1\n        x -= 1\n    y = 0\n    x = pawn_pos\n    while (x < 8):\n        if board[y][x] != \"#\" and board[y][x] != \"k\":\n            break\n        if board[y][x] == \"k\":\n            res += 2\n        y += 1\n        x += 1\n    return res + checkMore(board, pawn_pos)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t[0])\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2637,"fileType":"python3","requestStartTime":1517993774189}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport urllib.request\nimport json\n\n# Complete the function below.\nimport requests\n\ndef  getTopicCount(topic):\n    url = https://en.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _topic = str(input())\nexcept:\n    _topic = None\n\nres = getTopicCount(_topic)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":169,"fileType":"python3","requestStartTime":1517993815705}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\ndef solve(s1,s2):\n    if \"*\" in s2:\n        s2 = s2.\nif __name__==\"__main__\":\n    s1 = input();\n    s2 = input();\n    ans = solve(s1,s2)\n\n","offset":54,"fileType":"python3","requestStartTime":1517994006982}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\ndef solve(s1,s2):\n    count=0\n    if \"*\" in s2:\n        s2 = s2.replace(\"*\",\"\")\n        count = s1.\nif __name__==\"__main__\":\n    s1 = input();\n    s2 = input();\n    ans = solve(s1,s2)\n\n","offset":101,"fileType":"python3","requestStartTime":1517994028101}}
{"body": {"column":36,"line":39,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef clear(i, j, board):\n    return not hasPiece(i, j, board)\n\ndef hasPiece(i, j, board):\n    if i >= len(board) or j >= len(board[0]):\n        return False\n    return board[i][j] != '#'\n\ndef rookAttack(fr, to, board):\n    row_from, col_from = fr\n    row_to, col_to = to\n    if row_to == row_from:\n        for i in range(min(col_from, col_to) + 1, max(col_from, col_to)):\n            if hasPiece(row_to, i, board):\n                return False\n        return True\n    if col_to == col_from:\n        for i in range(min(row_from, row_to) + 1, max(row_from, row_to)):\n            if hasPiece(i, col_from, board):\n                return False\n        return True\n    return False\n\ndef kingAttack(fr, to, board):\n    row_from, col_from = fr\n    row_to, col_to = to\n    return abs(col_from - col_to) <= 1 and abs(row_from, row_to) <= 1\n\ndef knightAttack(fr, to, board):\n    row_from, col_from = fr\n    row_to, col_to = to\n    if abs(row_to - row_from) == 1 and (col_to == col_from + 2 or col_to == col_from - 2):\n        j_direction = 1 if col_to > col_from else -1\n        i_direction = 1 if row_to > \n        return clear(0, direction + col_from, board) and clear(0, direction*2 + col_from, board)\n    if row_to == 2 and (col_to == col_from + 1 or col_to == col_from - 1):\n        direction = 1 if col_to > col_from else -1\n        return clear(0, direction + col_from, board) and clear(1, direction + col_from, board)\n    return False\n\ndef bishopAttack(fr, to, board):\n    row_from, col_from = fr\n    row_to, col_to = to\n    if abs(col_from - col_to) != abs(row_from - row_to):\n        return False\n    j_direction = 1 if col_to > col_from else -1\n    i_direction = 1 if row_to > row_from else -1\n    for i in range(1, row_to):\n        if hasPiece(i_direction * i + row_from, j_direction * i + col_from, board):\n            return False\n    return True\n\ndef queenAttack(fr, to, board):\n    row_from, col_from = fr\n    return rookAttack(col_from, to, board) or bishopAttack(col_from, to, board)\n\n    \ndef waysToGiveACheck(board):\n    pawnPosition = (1,0)\n    for j in range(8):\n        if board[1][j] == 'P':\n            pawnPosition = (1, j)\n            break\n    kingPosition = (0,0)\n    myPieces = dict([])\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'k':\n                kingPosition = (i, j)\n            if board[i][j] == 'K' or board[i][j] == 'Q' or board[i][j]\n    board[1][pawnPosition[1]] = '#'\n    rook = rookAttack(pawnPosition[1], kingPosition, board)\n    knight = knightAttack(pawnPosition[1], kingPosition, board)\n    bishop = bishopAttack(pawnPosition[1], kingPosition, board)\n    queen = rook or bishop\n    return rook + knight + bishop + queen\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_row = list(input())\n            board.append(board_row)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n\n","offset":1126,"fileType":"python3","requestStartTime":1517994007431}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport urllib.request\nimport json\n\n# Complete the function below.\nimport requests\n\ndef  getTopicCount(topic):\n    url = 'https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page=' + topic\n    response = urllib.request.urlopen(url)\n    data = response.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _topic = str(input())\nexcept:\n    _topic = None\n\nres = getTopicCount(_topic)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":317,"fileType":"python3","requestStartTime":1517994110408}}
{"body": {"column":54,"line":2,"wordToComplete":"","code":"\ndef print_full_name(a, b):\n    print(\"Hello %s %s! You just delved into python.\".(a,b))\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":83,"fileType":"python3","requestStartTime":1517994134013}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef get_promotions(board):\n    ret = []\n    for col in range(8):\n        if board[1][col] == 'P' and board[0][col] == '#':\n            for piece in 'QRBN':\n                cand = [r[:] for r in board]\n                cand[1][col] = '#'\n                cand[0][col] = piece\n                ret.\n\ndef waysToGiveACheck(board):\n    promos = get_promotions(board)\n    ret = 0\n    for promo in promos:\n        if valid_promo(promo):\n            ret += 1\n    return ret\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [list(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":323,"fileType":"python3","requestStartTime":1517994194375}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nt = int(input())\n\nfor _ in range(t):\nfor _ in range(8):\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":38,"fileType":"python3","requestStartTime":1517994216514}}
{"body": {"column":25,"line":10,"wordToComplete":"","code":"\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\nfor _ in range(t):\n    P = []\n    \n    for _ in range(8):\n        for c in input():\n\n\n","offset":130,"fileType":"python3","requestStartTime":1517994399951}}
{"body": {"column":15,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board, kr):\n    ind = -1\n    res = 0\n    pi = False\n    while 1:\n         ind = board[1].index(\"P\", ind+1)\n        if board[0][ind] == \"#\":\n            break\n    if \"k\" in board[0]:\n        k_ind = board[0].index(\"k\")\n        for i in range(ind+1, k_ind):\n            if i != \"#\":\n                pi = True\n                break\n        if not pi:\n            return(2)\n        else:\n            return(0)\n    k_ind = kr.\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split()]\n            if 'k' in board_t:\n                k_row = board_i  \n            board.append(board_t)\n        result = waysToGiveACheck(board, k_row)\n        print(result)\n        \n\n","offset":472,"fileType":"python3","requestStartTime":1517994400811}}
{"body": {"column":10,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Suche\n    #print(board)\n    kingx = -1\n    kingy = -1\n    px1 = -1\n    py1 = -1\n    px2 = -1\n    py2 = -1\n    px3 = -1\n    py3 = -1\n    pawn = 0\n    for x in range(8):\n        line = str(board[x])\n        #print(line)\n        for y in range(8):\n            #print(line[y])               \n            if line[y+2] == \"k\":\n                kingx = x\n                kingy = y\n                #print(\"gefunden\")\n            if line[y+2] == \"P\":\n                if pawn == 0:\n                    px1 = x\n                    py1 = y\n                if pawn == 1:\n                    px2 = x\n                    py2 = y                   \n                if pawn == 2:\n                    px3 = x\n                    py3 = y    \n                pawn += 1\n                #print(\"gefunden\")           \n    print(kingx,kingy)\n    print(px1,py1)    \n    print(px2,py2) \n    print(px3,py3) \n    print(pawn)\n    \n    #Checkberechnung\n    check = 0\n    px = -1\n    py = .\n    for z in range(pawn):\n        if z == 1:\n            px = px1 +1\n            py = py1\n        if z == 2:\n            px = px2 +1\n            py = py2        \n        if z == 3:\n            px = px3 +1\n            py = py3           \n        #dame\n        if px == kingx:\n            check + 1\n        if py == kingy:\n            check + 1\n        if px - kingx == py - kingy:\n            check + 1\n        #bischof\n        if px - kingx == py - kingy:\n            check + 1\n        #turm\n        if px == kingx:\n            check + 1\n        if py == kingy:\n            check + 1   \n        #pferd\n    \n    \n    return(check)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1023,"fileType":"python3","requestStartTime":1517994395955}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\nfor _ in range(t):\n    P = []\n    \n    for y in range(8):\n        s = input()\n        for x in range(8):\n            if s[x] != '#':\n\n\n","offset":179,"fileType":"python3","requestStartTime":1517994447628}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\nfor _ in range(t):\n    P = []\n    \n    for y in range(8):\n        s = input()\n        for x in range(8):\n            if s[x] != '#':\n                P.\n\n\n","offset":198,"fileType":"python3","requestStartTime":1517994457640}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef get_promotions(board):\n    ret = []\n    for col in range(8):\n        if board[1][col] == 'P' and board[0][col] == '#':\n            for piece in 'QRBN':\n                cand = [r[:] for r in board]\n                cand[1][col] = '#'\n                cand[0][col] = piece\n                ret.append(cand)\n    return ret\n\ndef check_knights(king,.)\n\ndef valid_promo(board):\n    king = get_king_pos(board)\n    if check_knights(king, board) or check_diags(king, board) or check_rooks(king, board):\n        return True\n    return False    \n\ndef waysToGiveACheck(board):\n    promos = get_promotions(board)\n    ret = 0\n    for promo in promos:\n        if valid_promo(promo):\n            ret += 1\n    return ret\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [list(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":376,"fileType":"python3","requestStartTime":1517994459036}}
{"body": {"column":21,"line":18,"wordToComplete":"1.","code":"\n#!/bin/python3\n\nimport sys\n\ndef get_promotions(board):\n    ret = []\n    for col in range(8):\n        if board[1][col] == 'P' and board[0][col] == '#':\n            for piece in 'QRBN':\n                cand = [r[:] for r in board]\n                cand[1][col] = '#'\n                cand[0][col] = piece\n                ret.append(cand)\n    return ret\n\ndef check_knights(king, board):\n    for x in [-2, +2]:\n        for y in [+1.\n\ndef valid_promo(board):\n    king = get_king_pos(board)\n    if check_knights(king, board) or check_diags(king, board) or check_rooks(king, board):\n        return True\n    return False    \n\ndef waysToGiveACheck(board):\n    promos = get_promotions(board)\n    ret = 0\n    for promo in promos:\n        if valid_promo(promo):\n            ret += 1\n    return ret\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [list(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":428,"fileType":"python3","requestStartTime":1517994543615}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\nfor _ in range(t):\n    P = dd(list)\n    \n    for y in range(8):\n        s = input()\n        for x in range(8):\n            if s[x] != '#':\n                P[s[x]].append((x,y))\n    \n    for p in P['p']:\n\n\n","offset":292,"fileType":"python3","requestStartTime":1517994589453}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\nfor _ in range(t):\n    P = dd(list)\n    \n    for y in range(8):\n        s = input()\n        for x in range(8):\n            if s[x] != '#':\n                P[s[x]].append((x,y))\n    \n    for p in P['p']:\n        if y == 1:\n\n\n","offset":311,"fileType":"python3","requestStartTime":1517994613213}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\nfor _ in range(t):\n    P = dd(list)\n    board = []\n    for y in range(8):\n        s = input()\n        board.\n        for x in range(8):\n            if s[x] != '#':\n                P[s[x]].append((x,y))\n    \n    for p in P['p']:\n        if y == 1:\n\n\n","offset":198,"fileType":"python3","requestStartTime":1517994659024}}
{"body": {"column":18,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef get_promotions(board):\n    ret = []\n    for col in range(8):\n        if board[1][col] == 'P' and board[0][col] == '#':\n            for piece in 'QRBN':\n                cand = [r[:] for r in board]\n                cand[1][col] = '#'\n                cand[0][col] = piece\n                ret.append(cand)\n    return ret\n\ndef check_knights(king, board):\n    cands = []\n    for x in [-2, +2]:\n        for y in [-1, +1]:\n            a = (king[0] + x, king[1] + y)\n            b = (king[0] + y, king[1] + x)\n            cands.\n\ndef valid_promo(board):\n    king = get_king_pos(board)\n    if check_knights(king, board) or check_diags(king, board) or check_rooks(king, board):\n        return True\n    return False    \n\ndef waysToGiveACheck(board):\n    promos = get_promotions(board)\n    ret = 0\n    for promo in promos:\n        if valid_promo(promo):\n            ret += 1\n    return ret\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [list(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":553,"fileType":"python3","requestStartTime":1517994673215}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    m=list(magazine)\n    r=list(ransom)\n    a=list(set(m))\n    b=list(set(r))\n    for i in b:\n        if m.\n    \n    \n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":144,"fileType":"python3","requestStartTime":1517994678306}}
{"body": {"column":24,"line":7,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    m=list(magazine)\n    r=list(ransom)\n    a=list(set(m))\n    b=list(set(r))\n    for i in b:\n        if m.count(i)>r.\n    \n    \n\nm, n = map(int, input().strip().split(' '))\nmagazine = input().strip().split(' ')\nransom = input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n\n\n","offset":155,"fileType":"python3","requestStartTime":1517994693107}}
{"body": {"column":81,"line":48,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    k=[0,0]\n    K=[0,0]\n    P=[0,0]\n    a=[]\n    t=0\n    for i in range(1,len(board)+1):\n        if board[i-1][0].find('k')!=-1:\n            k=[8-i+1,board[i-1][0].find('k')+1]\n        if board[i-1][0].find('K')!=-1:\n            K=[8-i+1,board[i-1][0].find('K')+1]\n        if board[i-1][0].find('P')!=-1 and i==2:\n            P=[8-i+1+1,board[i-1][0].find('P')+1]\n        for j in range(len(board[i-1][0])):\n            if board[i-1][0][j]!='#' and board[i-1][0][j]!='k' and board[i-1][0][j]!='K' and board[i-1][0][j]!='P':\n                a.append([8-i+1,j+1])\n    \n    if (P[0]==k[0] or P[1]==k[1]):\n        if (K[0]!=k[0]) and (K[1]!=k[1]):\n            t=2\n        elif (K[0]==k[0] and K[1]>k[1] and K[1]<P[1]):\n            t=0\n        elif (K[1]==k[1] and K[0]>k[0] and K[0]<P[0]):\n            t=0\n            \n        \n    if (P[0]-2==k[0] and P[1]-1==k[1]) or (P[0]-1==k[0] and P[1]-2==k[1]) or (P[0]-2==k[0] and P[1]+1==k[1]) or (P[0]-1==k[0] and P[1]+2==k[1]):\n        t=1\n        \n    if (P[0]-P[1]==k[0]-k[1]):\n        if (K[0]-K[1]!=P[0]-P[1]):\n            t=2\n        elif (K[0]>k[0] and K[1]>k[1]):\n              t=0\n            \n    if ((P[0]-k[0])==-(P[1]-k[1])):\n        if ((P[0]-K[0])==-(P[1]-K[1]) and (abs(P[0]-K[0])<abs(P[0]-k[0]))):\n            t=0\n        else:\n            t=2      \n    \n    for i in a:\n        if (P[0]==k[0] or P[1]==k[1]):\n            if (i[0]==k[0] and ((i[1]>k[1] and i[1]<P[1]) or (i[1]<k[1] and i[1]>P[1])) : \n                t=0\n            if (i[1]==k[1] and i[0]>k[0] and i[0]<P[0]):\n                t=0\n        if (P[0]-P[1]==k[0]-k[1]):\n            if (i[0]>k[0] and i[1]>k[1]):\n                t=0\n        if ((P[0]-k[0])==-(P[1]-k[1])):\n            if ((P[0]-i[0])==-(P[1]-i[1]) and (abs(P[0]-i[0])<abs(P[0]-k[0]))):\n                t=0\n        \n        \n    return t\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1507,"fileType":"python3","requestStartTime":1517994729610}}
{"body": {"column":34,"line":24,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\nfor _ in range(t):\n    P = dd(list)\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n        for x in range(8):\n            if s[x] != '#':\n                P[s[x]].append((x,y))\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n\n\n","offset":453,"fileType":"python3","requestStartTime":1517994830168}}
{"body": {"column":45,"line":26,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\nfor _ in range(t):\n    P = dd(list)\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n        for x in range(8):\n            if s[x] != '#':\n                P[s[x]].append((x,y))\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                pass # Promote forward\n            elif ok(0,x-1) and board[0][x-1].:\n\n\n","offset":538,"fileType":"python3","requestStartTime":1517994868404}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n\nfor _ in range(t):\n    P = dd(list)\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n        for x in range(8):\n            if s[x] != '#':\n                P[s[x]].append((x,y))\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                pass # Promote forward\n            elif ok(0,x-1) and board[0][x-1].islower():\n                pass # Capture promote\n            elif ok(0,x+1) and board[0][x+1].islower():\n                pass # Capture promote\n\n\n","offset":150,"fileType":"python3","requestStartTime":1517994930207}}
{"body": {"column":42,"line":35,"wordToComplete":"No black king found.\"","code":"\n#!/bin/python3\n\nimport sys\n\ndef get_promotions(board):\n    ret = []\n    for col in range(8):\n        if board[1][col] == 'P' and board[0][col] == '#':\n            for piece in 'QRBN':\n                cand = [r[:] for r in board]\n                cand[1][col] = '#'\n                cand[0][col] = piece\n                ret.append(cand)\n    return ret\n\ndef check_knights(king, board):\n    cands = []\n    for x in [-2, +2]:\n        for y in [-1, +1]:\n            a = (king[0] + x, king[1] + y)\n            b = (king[0] + y, king[1] + x)\n            cands.append(a)\n            cands.append(b)\n    for cand in cands:\n        if 0 <= cand[0] < 8 and 0 <= cand[1] < 8:\n            if board[cand[0]][cand[1]] == 'N':\n                return True\n    return False\n\ndef get_king_pos(board):\n    for row in range(8):\n        for col in range(8):\n            if board[row][col] = k:\n                return (row, col)\n    raise ValueError(\"No black king found.\")\n\ndef valid_promo(board):\n    king = get_king_pos(board)\n    if check_knights(king, board) or check_diags(king, board) or check_rooks(king, board):\n        return True\n    return False    \n\ndef waysToGiveACheck(board):\n    promos = get_promotions(board)\n    ret = 0\n    for promo in promos:\n        if valid_promo(promo):\n            ret += 1\n    return ret\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [list(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":948,"fileType":"python3","requestStartTime":1517994956014}}
{"body": {"column":34,"line":78,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Suche\n    #print(board)\n    kingx = -1\n    kingy = -1\n    px1 = -1\n    py1 = -1\n    px2 = -1\n    py2 = -1\n    px3 = -1\n    py3 = -1\n    pawn = 0\n    for x in range(8):\n        line = str(board[x])\n        #print(line)\n        for y in range(8):\n            #print(line[y])               \n            if line[y+2] == \"k\":\n                kingx = x\n                kingy = y\n                #print(\"gefunden\")\n            if line[y+2] == \"P\":\n                if pawn == 0:\n                    px1 = x\n                    py1 = y\n                if pawn == 1:\n                    px2 = x\n                    py2 = y                   \n                if pawn == 2:\n                    px3 = x\n                    py3 = y    \n                pawn += 1\n                #print(\"gefunden\")           \n    #print(kingx,kingy)\n    #print(px1,py1)    \n    #print(px2,py2) \n    #print(px3,py3) \n    #print(pawn)\n    \n    #Checkberechnung\n    check = 0\n    px = -1\n    py = -1\n    for z in range(pawn):\n        if z == 0:\n            px = px1 +1\n            py = py1\n        if z == 1:\n            px = px2 +1\n            py = py2        \n        if z == 2:\n            px = px3 +1\n            py = py3   \n            #dame\n        if px == kingx:\n            check += 1\n        if py == kingy:\n            check += 1\n        if px - kingx == py - kingy:\n            check += 1\n        #bischof\n        if px - kingx == py - kingy:\n            check += 1\n        #turm\n        if px == kingx:\n            check += 1\n        if py == kingy:\n            check += 1   \n        #pferd\n        if abs(px-kingx) == 1:\n            if abs(py-kingy) == 2:\n                check += 1\n        if abs(py-kingy) == 1:\n            if abs(px-kingx) == 2:\n    \n    return(check)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1792,"fileType":"python3","requestStartTime":1517994948499}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    list(set(arr))\n    arr.\n\n\n","offset":113,"fileType":"python3","requestStartTime":1517995005046}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy as np\ndim_str = input()\ndim = np.array(dim_str.split(),int)\n\nprint(np.)\n\n\n","offset":97,"fileType":"python3","requestStartTime":1517995054852}}
{"body": {"column":33,"line":31,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                tmp = [board[y][:]]\n                pass # Promote forward\n            elif ok(0,x-1) and board[0][x-1].islower():\n                pass # Capture promote\n            elif ok(0,x+1) and board[0][x+1].islower():\n                pass # Capture promote\n\n\n","offset":585,"fileType":"python3","requestStartTime":1517995065960}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy as np\ndim_str = input()\ndim = np.array(dim_str.split(),int)\n\nprint(np.zeros(dim,int))\nprint(np.)\n\n\n","offset":122,"fileType":"python3","requestStartTime":1517995068066}}
{"body": {"column":24,"line":61,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\ndef printList(list):\n    temp = list\n    print(temp.val)\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n        print(temp.val, sep = \" \")\n\ndef getEnd(list):\n    temp = list\n    while temp.next != None:\n        temp2 = temp.next\n        temp = temp2\n    return temp\n\ndef getIndex(list, n):\n    temp = list\n    for i in range(n - 2):\n        temp2 = list.next\n        temp = temp2\n    return temp\n\ndef mergeInBetween(list1, list2, a, b):\n    \n    print(\"list1\")\n    printList(list1)\n    print('list2')\n    printList(list2)\n    print(a, b)\n    \n    at_a = getIndex(list1, a)\n    at_b = getIndex(list1, b + 1)\n    print(\"b node\", at_b.val)\n    list2_end = getEnd(list2)\n    list2_end.next = at.\n    at_a.next = list2\n    return list1\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    list1 = None\n    list1_tail = None\n    list1_size = int(input())\n    list1_i = 0\n    while list1_i < list1_size:\n        list1_item = int(input())\n\n        list1_tail = _insert_node_into_singlylinkedlist(list1, list1_tail, list1_item)\n        if list1_i == 0:\n            list1 = list1_tail\n        list1_i += 1\n\n\n    list2 = None\n    list2_tail = None\n    list2_size = int(input())\n    list2_i = 0\n    while list2_i < list2_size:\n        list2_item = int(input())\n\n        list2_tail = _insert_node_into_singlylinkedlist(list2, list2_tail, list2_item)\n        if list2_i == 0:\n            list2 = list2_tail\n        list2_i += 1\n\n\n    a = int(input())\n\n    b = int(input())\n\n    res = mergeInBetween(list1, list2, a, b);\n    while (res != None):\n        f.write(str(res.val) + \"\\n\")\n        res = res.next;\n\n\n\n    f.close()\n\n","offset":1230,"fileType":"python3","requestStartTime":1517995093821}}
{"body": {"column":17,"line":22,"wordToComplete":"If < and >       ","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef TimeMachine(message):\n    global msg\n    msg=list(message)\n    global value\n    value=[0]*len(msg)\n    \n    #checks for star and multiply by 2\n    def star(pointer,mul):\n        pointer-=2\n        if(pointer<0):\n            return\n        if(msg[pointer]=='*'):\n            mul*=2\n            star(pointer,mul)\n        if(msg[pointer]=='>'):\n            value[pointer]=mul*1\n        if(msg[pointer]=='<'):\n            value[pointer]=mul*-1\n            \n     # If < and >       \n    def decode(msg):\n        pointer=0\n        while(pointer<len(msg)):\n            if(msg[pointer]=='>'):\n                value[pointer]=1\n            if(msg[pointer]=='<'):\n                value[pointer]=-1\n            if(msg[pointer]=='*'):\n                star(pointer,2)\n            pointer+=1\n    \n    decode(msg)\n    sum=0\n    #sum the result\n    for i in range(len(value)):\n        sum+=value[i]\n    return sum+2017\n\n#drivers Code\nmessage=str(input().strip())\nprint(TimeMachine(message))\n\n","offset":547,"fileType":"python3","requestStartTime":1517995134604}}
{"body": {"column":63,"line":22,"wordToComplete":"If < and > is encountered, assign -1 and +1 accordingly.       ","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef TimeMachine(message):\n    global msg\n    msg=list(message)\n    global value\n    value=[0]*len(msg)\n    \n    #checks for star and multiply by 2\n    def star(pointer,mul):\n        pointer-=2\n        if(pointer<0):\n            return\n        if(msg[pointer]=='*'):\n            mul*=2\n            star(pointer,mul)\n        if(msg[pointer]=='>'):\n            value[pointer]=mul*1\n        if(msg[pointer]=='<'):\n            value[pointer]=mul*-1\n            \n     # If < and > is encountered, assign -1 and +1 accordingly.       \n    def decode(msg):\n        pointer=0\n        while(pointer<len(msg)):\n            if(msg[pointer]=='>'):\n                value[pointer]=1\n            if(msg[pointer]=='<'):\n                value[pointer]=-1\n            if(msg[pointer]=='*'):\n                star(pointer,2)\n            pointer+=1\n    \n    decode(msg)\n    sum=0\n    #sum the result\n    for i in range(len(value)):\n        sum+=value[i]\n    return sum+2017\n\n#drivers Code\nmessage=str(input().strip())\nprint(TimeMachine(message))\n\n","offset":593,"fileType":"python3","requestStartTime":1517995165243}}
{"body": {"column":4,"line":6,"wordToComplete":"","code":"\n#f __name__ == '__main__':\nfrom collections import OrderedDict\nn = int(input())\narr = map(int, input().split())\narr=list(OrderedDict.fromkeys(arr))\narr.\nprint(arr)\n\n","offset":154,"fileType":"python3","requestStartTime":1517995182940}}
{"body": {"column":32,"line":33,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                tmp[0][x] = 'QRBN'\n                pass # Promote forward\n            elif ok(0,x-1) and board[0][x-1].islower():\n                pass # Capture promote\n            elif ok(0,x+1) and board[0][x+1].islower():\n                pass # Capture promote\n\n\n","offset":660,"fileType":"python3","requestStartTime":1517995189812}}
{"body": {"column":26,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\ndim_str = input()\ndim = np.array(dim_str.split(),int)\nif all(dim>=1 and dim=<3):\n    print(np.zeros(dim,int))\n    print(np.ones(dim,int))\n\n\n","offset":113,"fileType":"python3","requestStartTime":1517995235768}}
{"body": {"column":4,"line":6,"wordToComplete":"","code":"\n#f __name__ == '__main__':\nfrom collections import OrderedDict\nn = int(input())\narr = map(int, input().split())\narr=list(OrderedDict.fromkeys(arr))\narr.\nprint(arr)\n\n","offset":154,"fileType":"python3","requestStartTime":1517995249028}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\nint = input()\nvowels = \"A,E,I,O,U\"\ncurrentLetter = eachletter\nif currentLetter = vowels\nreplace(int.)\n\n\n","offset":547,"fileType":"python3","requestStartTime":1517995363901}}
{"body": {"column":39,"line":4,"wordToComplete":"","code":"inputList = input().split() ## reads in a list of words...\n# there is a sneaky way to do this using the max() function, but here is a step-by-step way that you MUST implement.\n\n# set a variable eg longestWord to the first word on inputList (see input statement above)\nlongestWord=input(\"I\", \"Love\", \"dogs\").\n# for each word (currentWord) in the inputList\n\n    # if the currentWord is (strictly) longer than the longestWord\n    \n        # set longestWord to the currentWord\n        \n# print the longestWord\n\n","offset":308,"fileType":"python3","requestStartTime":1517995478953}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\n\ndim_str = input()\ndim = dim_str.\n\n","offset":66,"fileType":"python3","requestStartTime":1517995497958}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\n\ndim_str = input()\ndim = np.dim_str.splite()\n\n","offset":61,"fileType":"python3","requestStartTime":1517995521398}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy as np\n\ndim_str = input()\ndim = np.array(dim_str.split(),int)\n\nprint(np.eye(dim))\n\n","offset":98,"fileType":"python3","requestStartTime":1517995594004}}
{"body": {"column":4,"line":21,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(tmp):\n    \n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":344,"fileType":"python3","requestStartTime":1517995595568}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    pos = 0\n    neg = 0\n    zeroes = 0\n    for num in arr:\n        if num >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":125,"fileType":"python3","requestStartTime":1517995595662}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    print('-----------')\n    for b in board:\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":386,"fileType":"python3","requestStartTime":1517995609034}}
{"body": {"column":8,"line":23,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    print('-----------')\n    for b in board:\n        \n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['p']:\n        if y == 1:\n            c = board[y][x]\n            if board[0][x] == '#':\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp = [b[:] for b in board]\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":395,"fileType":"python3","requestStartTime":1517995614288}}
{"body": {"column":43,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport urllib.request\nimport json\n\n# Complete the function below.\nimport requests\n\ndef  getTopicCount(topic):\n    url = 'https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page=' + topic\n    response = urllib.request.urlopen(url).\n    data = json.load(response)\n    print(data[\"text\"])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _topic = str(input())\nexcept:\n    _topic = None\n\nres = getTopicCount(_topic)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":297,"fileType":"python3","requestStartTime":1517995703296}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    for _ in range():\n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":389,"fileType":"python3","requestStartTime":1517995721854}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\norigAlpha = string.\nprint(int(input(converting to uppercase))\n\n\n","offset":466,"fileType":"python3","requestStartTime":1517995865318}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    n= len(arr)\n    pos = 0\n    neg = 0\n    zeroes = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg +=1\n        else:\n            zeroes += 1\n    print(\"%.\"pos/n, neg/n,zeroes/n)       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":259,"fileType":"python3","requestStartTime":1517995950251}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    n= len(arr)\n    pos = 0\n    neg = 0\n    zeroes = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg +=1\n        else:\n            zeroes += 1\n    print(\"%.6f,%.6f,%.6f\".pos/n, neg/n,zeroes/n)       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":273,"fileType":"python3","requestStartTime":1517995963996}}
{"body": {"column":30,"line":78,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef get_promotions(board):\n    ret = []\n    for col in range(8):\n        if board[1][col] == 'P' and board[0][col] == '#':\n            for piece in 'QRBN':\n                cand = [r[:] for r in board]\n                cand[1][col] = '#'\n                cand[0][col] = piece\n                ret.append(cand)\n    return ret\n\ndef check_knights(king, board):\n    cands = []\n    for x in [-2, +2]:\n        for y in [-1, +1]:\n            a = (king[0] + x, king[1] + y)\n            b = (king[0] + y, king[1] + x)\n            cands.append(a)\n            cands.append(b)\n    for cand in cands:\n        if 0 <= cand[0] < 8 and 0 <= cand[1] < 8:\n            if board[cand[0]][cand[1]] == 'N':\n                return True\n    return False\n\ndef check_dirs(king, board, dirs, pieces):\n    for dir in dirs:\n        x,y = dir\n        cur = list(king)\n        while 0 <= cur[0] < 8 and 0 <= cur[1] < 8:    \n            cur[0] += x\n            cur[1] += y\n    \n            row,col = cur\n            if board[row][col] in pieces:\n                return True\n            if board[row][col] != '#':\n                break\n    return False\n\ndef check_diag(king, board):\n    dirs = [(1,1),(1,-1),(-1,-1),(-1,1)]\n    return check_dirs(king, board, dirs, \"QB\")\n\ndef check_rook(king, board):\n    dirs = [(1,0),(0,-1),(-1,0),(0,1)]\n    return check_dirs(king, board, dirs, \"QR\")\n\ndef get_king_pos(board, king_sym):\n    for row in range(8):\n        for col in range(8):\n            if board[row][col] == king_sym:\n                return (row, col)\n    raise ValueError(\"No king found.\")\n\ndef valid_promo(board):\n    king = get_king_pos(board, 'k')\n    if check_knights(king, board) or check_diags(king, board) or check_rooks(king, board):\n        return True\n    return False    \n\ndef waysToGiveACheck(board):\n    promos = get_promotions(board)\n    ret = 0\n    for promo in promos:\n        if valid_promo(promo):\n            ret += 1\n    return ret\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = [list(input().) for _ in range(8)]\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2089,"fileType":"python3","requestStartTime":1517995994318}}
{"body": {"column":58,"line":24,"wordToComplete":"n.'","code":"\n#!/bin/python3\n\nimport sys\n\ndef getPlace(board , letter):\n    for i in range(8):\n        for j in range(8):\n            if board[i][0][j] == letter:\n                n =  i*8 + j + 1\n                x = n % 8\n                y = n // 8\n                if letter == 'P':\n                    return {'x':x , 'y':y}\n                else:\n                    return {'x':x , 'y':y+1}\n                \ndef checkInterupt(pawn , king , pices):\n    \n\n\ndef waysToGiveACheck(board):\n    king = getPlace(board , 'k')\n    pawn = getPlace(board , 'P')\n    letters = ['K','Q','R','B','N','k','P','q','r','b','n.']\n    pices = []\n    for i in letters:\n        pices.append(getPlace(board , i))\n    count = 0\n    #x axix rook queen\n    if king['x'] == pawn['x']:\n        count += 2\n       \n    #y axix rook queen\n    if king['y'] == pawn['y']:\n        count += 2\n       \n    #bishop queen\n    if abs(king['x'] - pawn['x']) == abs(king['y'] - pawn['y']):\n        count += 2\n    \n    #knight\n    if abs(king['x'] - pawn['x']) == 2 and abs(king['y'] - pawn['y']) == 1:\n        count += 1\n\n    if abs(king['x'] - pawn['x']) == 1 and abs(king['y'] - pawn['y']) == 2:\n        count += 1 \n        \n    if whiteKing['x'] < pawn['x'] and whiteKing['x'] < king['x'] or whiteKing['x'] > pawn['x'] and whiteKing['x'] > king['x']:\n        count -= 1\n    \n    return count\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n\n\n\n\n\n","offset":598,"fileType":"python3","requestStartTime":1517996043959}}
{"body": {"column":21,"line":17,"wordToComplete":"0.2f :0.}\"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    n= len(arr)\n    pos = 0\n    neg = 0\n    zeroes = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg +=1\n        else:\n            zeroes += 1\n    print(\"{:0.2f :0.}\" pos/n, neg/n,zeroes/n))       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":267,"fileType":"python3","requestStartTime":1517996121102}}
{"body": {"column":27,"line":17,"wordToComplete":"0.2f :0.2f :0.}\"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    n= len(arr)\n    pos = 0\n    neg = 0\n    zeroes = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg +=1\n        else:\n            zeroes += 1\n    print(\"{:0.2f :0.2f :0.}\" pos/n, neg/n,zeroes/n))       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":273,"fileType":"python3","requestStartTime":1517996126913}}
{"body": {"column":32,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    n= len(arr)\n    pos = 0\n    neg = 0\n    zeroes = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg +=1\n        else:\n            zeroes += 1\n    print(\"{:0.6f :0.6f :0.6f}\".pos/n, neg/n,zeroes/n))       \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":278,"fileType":"python3","requestStartTime":1517996142037}}
{"body": {"column":150,"line":4,"wordToComplete":"NOTES: check my other pieces on the board, if any hit checkmate then I believe that means all 4 promotions = checkmate option, so result would be 4.","code":"\n#!/usr/bin/env python3\nimport sys\n\n# NOTES: check my other pieces on the board, if any hit checkmate then I believe that means all 4 promotions = checkmate option, so result would be 4.\n\n\ndef queen(row, col, board):\n    pass\n\ndef knight(row, col, board):\n    pass\n\ndef rook(row, col, board):\n    pass\n\ndef bishop(row, col, board):\n    pass\n\ndef waysToGiveACheck(board):\n    \n    # Find pawn to promote\n    for col in range(8):\n        if board[1][col] == \"P\":\n            if board[0][col] == \"#\":\n                pawn_row = 0\n                pawn_col = col\n                board[1][col] = \"#\"\n                board[0][col] = \"_\"\n                break\n        \n    # Check each promotion type for checkmate (Queen, Knight, Rook, Bishop)\n    queen = False; knight = False; rook = False; bishop = False\n    # Queen & Rook: Scan Left, Right or Down\n    # Left\n    for col in range(pawn_col-1, -1, -1):\n        if board[0][col] != \"#\":\n            if board[0][col] == \"k\":\n                queen = True\n                rook = True\n                break\n    # Right\n    for col in range(pawn_col+1, 8):\n        if board[0][col] != \"#\":\n            if board[0][col] == \"k\":\n                queen = True\n                rook = True\n                break\n                \n    # Down\n    for row in range(1, 8):\n        if board[row][pawn_col] != \"#\":\n            if board[row][pawn_col] == \"k\":\n                queen = True\n                rook = True\n                break\n                \n    \n    # Queen & Bishop: Scan Left Diag, Right Diag\n    # Left Down Diag\n    col = pawn_col\n    row = pawn_row\n    while col > 0 and row < 7:\n        col -= 1\n        row += 1\n        if board[row][col] != \"#\":\n            if board[row][col] == \"k\":\n                queen = True\n                bishop = True\n                break\n                \n    # Right Down Diag\n    col = pawn_col\n    row = pawn_row\n    while col < 7 and row < 7:\n        col += 1\n        row += 1\n        if board[row][col] != \"#\":\n            if board[row][col] == \"k\":\n                queen = True\n                bishop = True\n                break\n               \n    \n    # Knight\n    locations = [(pawn_row+1, pawn_col-2), (pawn_row+1, pawn_col+2), (pawn_row+2, pawn_col-1), (pawn_row+2, pawn_col+1)]\n    for row, col in locations:\n        if 0 <= row <= 7 and 0 <= col <= 7:\n            if board[row][col] == \"k\":\n                knight = True\n                \n\n    results = (bool(queen), bool(knight), bool(rook), bool(bishop))\n    return results.count(True)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            #board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board_t = list(input().strip())\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":187,"fileType":"python3","requestStartTime":1517996209670}}
{"body": {"column":40,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn_pos = []\n    for pos in board[6]:\n        if board[6][i] == \"P\": pawn_pos.\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":171,"fileType":"python3","requestStartTime":1517996283139}}
{"body": {"column":12,"line":14,"wordToComplete":"","code":"\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\n\nA Node is defined as: \n \n    class Node(object):\n        def __init__(self, data = None, next_node = None):\n            self.data = data\n            self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if head.\n    \n\n\n","offset":313,"fileType":"python3","requestStartTime":1517996379949}}
{"body": {"column":30,"line":18,"wordToComplete":"starting index - text.","code":"#!/bin/python3\n\nimport sys\nimport os\nimport urllib.request\nimport json\n\n# Complete the function below.\nimport requests\n\ndef  getTopicCount(topic):\n    url = 'https://en.wikipedia.org/w/api.php?action=parse&section=0&prop=text&format=json&page=' + topic\n    response = urllib.request.urlopen(url).read()\n    data = json.loads(response)\n    print(data)\n    '''\n    while text.find(topic) != 0:\n        count += 1\n        starting index - text.\n    '''\n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _topic = str(input())\nexcept:\n    _topic = None\n\nres = getTopicCount(_topic)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":442,"fileType":"python3","requestStartTime":1517996572815}}
{"body": {"column":25,"line":46,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board, kr):\n    ind = -1\n    res = 0\n    pi = False\n    k_ind = board[kr].index(\"k\")\n    while 1:\n        ind = board[1].index(\"P\", ind+1)\n        if board[0][ind] == \"#\":\n            break\n    if kr == 0:\n        start = min(ind, k_ind) + 1\n        end = max(ind, k_ind)\n        for i in range(start, end):\n            if board[0][i] != \"#\":\n                pi = True\n                break\n        if not pi:\n            return(2)\n        else:\n            return(0)\n    if ind == k_ind:\n        for i in range(1, kr):\n            if board[i][ind] != \"#\":\n                pi = True\n                break\n        if not pi:\n            return(2)\n        else:\n            return(0)        \n    if kr == abs(k_ind - ind):\n        return(2)\n    elif board[1][ind-2] == \"k\" or board[1][ind+2] == \"k\" or board[2][ind-1] == \"k\" or board[2][ind+1] == \"k\":\n        return(1)\n    return(0)\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = \"\".input().strip().split()\n            print(board_t)\n            if 'k' in board_t:\n                k_row = board_i  \n            board.append(board_t)\n        result = waysToGiveACheck(board, k_row)\n        print(result)\n        \n\n","offset":1100,"fileType":"python3","requestStartTime":1517996770897}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef winner(andrea, maria, s):\n    andrea = int(input())\n    andrea_array = []\n    for an in range(andrea):\n        element = int(input())\n        andrea_array.append(element)\n        \n     maria = int(input())\n    maria_array = []\n    for an in range(maria):\n        element = int(input())\n        maria_array.\n    \n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    andrea_cnt = 0\n    andrea_cnt = int(input())\n    andrea_i = 0\n    andrea = []\n    while andrea_i < andrea_cnt:\n        andrea_item = int(input())\n        andrea.append(andrea_item)\n        andrea_i += 1\n\n\n    maria_cnt = 0\n    maria_cnt = int(input())\n    maria_i = 0\n    maria = []\n    while maria_i < maria_cnt:\n        maria_item = int(input())\n        maria.append(maria_item)\n        maria_i += 1\n\n\n    try:\n        s = str(input())\n    except:\n        s = None\n\n    res = winner(andrea, maria, s);\n    f.write(res + \"\\n\")\n\n\n    f.close()\n\n","offset":382,"fileType":"python3","requestStartTime":1517996814570}}
{"body": {"column":11,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Add Celsius class implementation below.\ndef Celsius:\n    def __set__(self, instance, owner):\n        \n    def __get__(self, instance,owner):\n        \n\n# Add temperature class implementation below.        \nclass Temparature:\n    \n    def __init__(self, temp):\n        t1.\n    \n        \n'''Check the Tail section for input/output'''\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":312,"fileType":"python3","requestStartTime":1517996850511}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Add Celsius class implementation below.\ndef Celsius:\n    def __set__(self, instance, owner):\n        \n    def __get__(self, instance,owner):\n        \n\n# Add temperature class implementation below.        \nclass Temparature:\n    \n    def __init__(self, temp):\n        self.fahrenhit =  temp\n        celsi\n    \n        \n'''Check the Tail section for input/output'''\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":314,"fileType":"python3","requestStartTime":1517996874952}}
{"body": {"column":13,"line":18,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Add Celsius class implementation below.\ndef Celsius:\n    def __set__(self, instance, owner):\n        \n    def __get__(self, instance,owner):\n        \n\n# Add temperature class implementation below.        \nclass Temparature:\n    \n    def __init__(self, temp):\n        self.fahrenhit =  temp\n        self.celsi\n    \n        \n'''Check the Tail section for input/output'''\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":345,"fileType":"python3","requestStartTime":1517996879778}}
{"body": {"column":25,"line":19,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn_pos = []\n    king_pos = [0,0]\n    king_found = 0\n    board_i =7\n    while board_i>=0:\n        for pos in range[8]:\n            if board[board_i][pos] ==\"k\":\n                king_found = 1\n                king_pos = [board_i, pos]\n        if board_i == 6:\n            for pos in range(8):\n                if board[board_i][pos] == \"P\": pawn_pos.append[pos]\n    for pown in pown_pos:\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":478,"fileType":"python3","requestStartTime":1517996907612}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Add Celsius class implementation below.\ndef Celsius:\n    def __set__(self, instance, owner):\n        return self.\n    def __get__(self, instance,owner):\n        \n\n# Add temperature class implementation below.        \nclass Temparature:\n    \n    def __init__(self, temp):\n        self.fahrenhit =  temp\n        self.celsius = None\n    \n        \n'''Check the Tail section for input/output'''\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":155,"fileType":"python3","requestStartTime":1517996937207}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Add Celsius class implementation below.\ndef Celsius:\n    def __set__(self, instance, owner):\n        return self.values.\n    def __get__(self, instance,owner):\n        \n\n# Add temperature class implementation below.        \nclass Temparature:\n    \n    def __init__(self, temp):\n        self.fahrenhit =  temp\n        self.celsius = None\n    \n        \n'''Check the Tail section for input/output'''\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":162,"fileType":"python3","requestStartTime":1517996939253}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for p in range():\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":432,"fileType":"python3","requestStartTime":1517996950123}}
{"body": {"column":21,"line":26,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for P[ptype]:\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":452,"fileType":"python3","requestStartTime":1517996974273}}
{"body": {"column":24,"line":21,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn_pos = []\n    king_pos = [0,0]\n    king_found = 0\n    board_i =7\n    while board_i>=0:\n        for pos in range[8]:\n            if board[board_i][pos] ==\"k\":\n                king_found = 1\n                king_pos = [board_i, pos]\n        if board_i == 6:\n            for pos in range(8):\n                if board[board_i][pos] == \"P\": pawn_pos.append[pos]\n    for pawn in pawn_pos:\n        diff = [king_pos[0]-7, king_pos[1]-pawn]\n        if diff[0] == 0:\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":552,"fileType":"python3","requestStartTime":1517997036729}}
{"body": {"column":28,"line":27,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for P[ptype]:\n            if ptype == 'P':\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":481,"fileType":"python3","requestStartTime":1517997044530}}
{"body": {"column":24,"line":28,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for P[ptype]:\n            if ptype == 'P':\n                if ok():\n                board[P]\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":506,"fileType":"python3","requestStartTime":1517997060351}}
{"body": {"column":50,"line":34,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R':\n                t = 0\n                while ok(x+t,y) and board[y][x+t].\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":738,"fileType":"python3","requestStartTime":1517997205232}}
{"body": {"column":32,"line":34,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R':\n                t = 0\n                while ok(x+t,y):\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":720,"fileType":"python3","requestStartTime":1517997219774}}
{"body": {"column":42,"line":36,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R':\n                t = 0\n                while ok(x+t,y):\n                    \n                    if board[y][x+t] in B:\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":784,"fileType":"python3","requestStartTime":1517997237218}}
{"body": {"column":6,"line":15,"wordToComplete":"","code":"index = int(input())\nmessageWords = input().lower().split()  ## reads input, converts to lower case and splits into list of words\n\n## start with hiddenWord as an empty string\n\n## for each word in the messageWords list\n\n    ## add the index letter of the word to the hiddenWord\n    \n## print the hiddenWord\nint(input( hiddenWord))\nint(input(\"index letter of hiddenWord\")\nmessageToEncode =\"helpme\"\nwhile len(messageToEncode)\nencodedMessage(\"hiddenWord\")\naList.\n\n","offset":459,"fileType":"python3","requestStartTime":1517997425963}}
{"body": {"column":28,"line":61,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R':\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t += 1\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t -= 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t += 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t -= 1\n            if ptype == 'B':\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":1618,"fileType":"python3","requestStartTime":1517997439110}}
{"body": {"column":13,"line":21,"wordToComplete":"","code":"import os\nimport sys\n\n#add Temperature class definition here\n\n#define celsius variable      \n\n'''Check Tail section for input/output'''\n              \n\nclass Temperature(object):\n    _celsius = 0.0\n    \n    @property\n    def celsius(self):\n        return type(self)._celsius\n    \n    @celsius.setter\n    def getCelsius(self, value):\n        type(self)._celsius = float(value)\n        \n    @celsius.\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":399,"fileType":"python3","requestStartTime":1517997447444}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    if n/2!=0:\n        print(\"Weird\")\n    else:\n        if n in range(2,6):\n            print(\"Not Weird\")\n        elif n in range(6,21):\n            print(\"Weird\")\n        elif n>\n\n","offset":230,"fileType":"python3","requestStartTime":1517997473072}}
{"body": {"column":30,"line":2,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\ninputString = (input().upper).\n# set up a string (vowels) consisting of the uppercase vowels\nvowels = \"aeiou\"\n# for each letter (currentLetter) in the inputString\nfor currentLetter in inputString:    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n    if currentLetter in vowel:\n        inputString[currentLetter] = currentLetter.lower\n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\nprint(inputString)\n\n","offset":89,"fileType":"python3","requestStartTime":1517997498824}}
{"body": {"column":28,"line":98,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R' or ptype == 'Q':\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t += 1\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t -= 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t += 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t -= 1\n            if ptype == 'B' or ptype == 'Q':\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t += 1\n                    s += 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t += 1\n                    s -= 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t -= 1\n                    s += 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t -= 1\n                    s -= 1\n            if ptype == 'N':\n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":2799,"fileType":"python3","requestStartTime":1517997554934}}
{"body": {"column":7,"line":16,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\norigAlpha = string.ascii_lowercase\nshift =(int(input(converting to uppercase))\nshiftAlpha = origAlpha[shift:]+ origAlpha[:shift]\nletter.\nstringVariable \"vowels and currentLetter\"\n   \n                                               \n\n\n","offset":583,"fileType":"python3","requestStartTime":1517997579631}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\norigAlpha = string.ascii_lowercase\nshift =(int(input(converting to uppercase))\nshiftAlpha = origAlpha[shift:]+ origAlpha[:shift]\ncurrentLetteer.\nstringVariable \"vowels and currentLetter\"\n   \n                                               \n\n\n","offset":591,"fileType":"python3","requestStartTime":1517997586231}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\norigAlpha = string.ascii_lowercase\nshift =(int(input(converting to uppercase))\nshiftAlpha = origAlpha[shift:]+ origAlpha[:shift]\ncurrentLetter.\nstringVariable \"vowels and currentLetter\"\n   \n                                               \n\n\n","offset":590,"fileType":"python3","requestStartTime":1517997587359}}
{"body": {"column":13,"line":18,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\norigAlpha = string.ascii_lowercase\nshift =(int(input(converting to uppercase))\nshiftAlpha = origAlpha[shift:]+ origAlpha[:shift]\ncurrentLetter.upper()\nstringVariable \"vowels and currentLetter\"\nprint(letter.)\n   \n                                               \n\n\n","offset":653,"fileType":"python3","requestStartTime":1517997644337}}
{"body": {"column":87,"line":99,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    P = parse(board)\n    \n    state = [[0]*8 for _ in range(8)]\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R' or ptype == 'Q':\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t += 1\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t -= 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t += 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t -= 1\n            if ptype == 'B' or ptype == 'Q':\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t += 1\n                    s += 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t += 1\n                    s -= 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t -= 1\n                    s += 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t -= 1\n                    s -= 1\n            if ptype == 'N':\n                for dx,dy in [(2,1),(-2,1),(2,-1),(-2,-1),(1,2),(1,-2),(-1,2),(-1,-2)]:\n                if ok(x-2,y-1):\n                    board[y-1][x-2] = 'X'\n                if ok(x-2,y-1):\n                    board[y-1][x-2] = 'X'\n                \n    \n    print('-----------')\n    for b in board:\n        print(*b)\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    evalBoard(tmp)\n\n\n","offset":2887,"fileType":"python3","requestStartTime":1517997657904}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\norigAlpha = string.ascii_lowercase\nshift =(int(input(converting to uppercase))\nshiftAlpha = origAlpha[shift:]+ origAlpha[:shift]\ncurrentLetter.upper()\nstringVariable \"vowels and currentLetter\"\nprint(letter.upper))\ntexttoProcess = input()\nalphabet = string.\n\n   \n                                               \n\n\n","offset":703,"fileType":"python3","requestStartTime":1517997701351}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    board = [b[:]]\n    P = parse(board)\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    board[y-1][x-1] = 'X'\n                if ok(x-1,y+1):\n                    board[y+1][x-1] = 'X'\n            if ptype == 'R' or ptype == 'Q':\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t += 1\n                t = x\n                while ok(t,y):\n                    if board[y][t] in B:\n                        board[y][t] = 'X'\n                        break\n                    board[y][t] = 'X'\n                    t -= 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t += 1\n                t = y\n                while ok(x,t):\n                    if board[t][x] in B:\n                        board[t][x] = 'X'\n                        break\n                    board[t][x] = 'X'\n                    t -= 1\n            if ptype == 'B' or ptype == 'Q':\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t += 1\n                    s += 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t += 1\n                    s -= 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t -= 1\n                    s += 1\n                s = x\n                t = y\n                while ok(s,t):\n                    if board[t][s] in B:\n                        board[t][s] = 'X'\n                        break\n                    board[t][s] = 'X'\n                    t -= 1\n                    s -= 1\n            if ptype == 'N':\n                for dx,dy in [(2,1),(-2,1),(2,-1),(-2,-1),(1,2),(1,-2),(-1,2),(-1,-2)]:\n                    if ok(x+dx,y+dy):\n                        board[y+dy][x+dx] = 'X'\n    print(P)\n    x,y = P['k'][0]\n    return board[y][x] == 'X'\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    checks = 0\n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    checks += evalBoard(tmp)\n            elif ok(0,x-1) and board[0][x-1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x-1] = p\n                    checks += evalBoard(tmp)\n            elif ok(0,x+1) and board[0][x+1].islower():\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x+1] = p\n                    checks += evalBoard(tmp)\n\n\n","offset":358,"fileType":"python3","requestStartTime":1517997854789}}
{"body": {"column":24,"line":4,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import \n\ndef sockMerchant(n, ar):\n    # Complete this function\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":53,"fileType":"python3","requestStartTime":1517997869769}}
{"body": {"column":11,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import Counter\n\ndef sockMerchant(n, ar):\n    counts = Counter()\n    counts.\n    # Complete this function\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":121,"fileType":"python3","requestStartTime":1517997894553}}
{"body": {"column":11,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import Counter\n\ndef sockMerchant(n, ar):\n    counts = Counter()\n    counts.\n    # Complete this function\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":121,"fileType":"python3","requestStartTime":1517997894888}}
{"body": {"column":50,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if not acid_name.startwith('hydro') and not acid_name.endswith('ic'):\n        print('not an acid')\n    if acid_name.startswith('hydro') and acid_name.endswith('ic'):\n        print('non-metal acid')\n    if acid_name.endswith('ic') and not acid_name.\n    if not acid_name.startswith('hydro') and not acid_name.endswith('ic'):\n       print('not an acid')\n    if acid_name.startswith('hydro') and acid_name.endswith('ic'):\n        print('non-metal acid')\n    if acid_name.endswith('ic') and not acid_name.startswith('hydro'):\n    print('polyatomic acid')\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":338,"fileType":"python3","requestStartTime":1517997923881}}
{"body": {"column":38,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import Counter\n\ndef sockMerchant(n, ar):\n    counts = Counter()\n    counts.update(ar)\n    return sum(x // 2 for x in counts.)\n    # Complete this function\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":170,"fileType":"python3","requestStartTime":1517998011427}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for b in board:\n        P=0\n        k=0\n        kp = []\n        for i in range(8):\n            if board[1][i]=='P':\n                P=i\n        for i in range(8):\n            for j in range(8):\n                if board[j][i]=='k'\n                    kp.\n        #rook\n        for i in range(8):\n            if\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":316,"fileType":"python3","requestStartTime":1517998027257}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for b in board:\n        P=0\n        k=0\n        kp = []\n        for i in range(8):\n            if board[1][i]=='P':\n                P=i\n        for i in range(8):\n            for j in range(8):\n                if board[j][i]=='k'\n                    kp.append(j)\n                    kp.\n        #rook\n        for i in range(8):\n            if\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":349,"fileType":"python3","requestStartTime":1517998031953}}
{"body": {"column":7,"line":23,"wordToComplete":"","code":"\nimport numpy as np\nfrom sklearn import linear_model\n\nfeatures, rows = list(map(int, input().strip().split(\" \")))\n\nX = []\nY = []\n\nfor r in range(rows):\n    r = list(map(float, input().strip().split(\" \")))\n    x = r[:features]\n    y = r[-1]\n    X.append(x)\n    Y.append(y)\n\nprint(X)\nprint(Y)\nlm = linear_model.LinearRegression()\nlm.fit(X, Y)\na = lm.intercept_\nb = lm.coef_\nprint(str(a) + \" \" + str(b[0]) + \" \" + str(b[1]))\nB = np.b[0] + b[1]\n\nprint(B)\n\"\"\"\nfeature_sets = int(input().strip())\n#print(feature_sets)\n\nfor feature_set in range(feature_sets):\n    r = list(map(float, input().strip().split(\" \")))\n    x = np.array(r)\n    print(format(np.matmul(x, B), \".2f\"))\n\"\"\"\n\n\n    \n    \n\n","offset":430,"fileType":"python3","requestStartTime":1517998106103}}
{"body": {"column":27,"line":23,"wordToComplete":"","code":"import os\nimport sys\n\n#add Temperature class definition here\n\n#define celsius variable      \n\n'''Check Tail section for input/output'''\n              \n\nclass Temperature(object):\n    \n    def __init__(self, initial_f):\n        self.fahrenheit = initial_f\n        \n    @property\n    def celsius(self):\n        return type(self).celsius\n    \n    def setCelsius(self, value):\n        self.celsius = float(value)\n\n    def getCelsius(self):\n         return 5 * (self).fahrenheit - 32) / 9\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":464,"fileType":"python3","requestStartTime":1517998178972}}
{"body": {"column":6,"line":2,"wordToComplete":"","code":"\ntotalpay=int(input())\ntax=(.)\n\n","offset":30,"fileType":"python3","requestStartTime":1517998484546}}
{"body": {"column":15,"line":20,"wordToComplete":"1.","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    mincount,maxcount=0,sum(doors)\n    i=0\n    while i<len(doors):\n        if doors[i]==1:\n            if i+1<len(doors) and doors[i+1]==1:\n                mincount+=1\n                i+=2\n            else:\n                mincount+=1\n                i+=1\n        else:\n            i+=1\n    l=[]\n    l.insert(0,mincount)\n    l.insert(1.)\n    return mincount,maxcount\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":401,"fileType":"python3","requestStartTime":1517998493863}}
{"body": {"column":18,"line":53,"wordToComplete":"","code":"import string\n\nalphabet = string.ascii_letters\n# Use the following technique which builds up the replacement string: \n\n# start by reading in the phrase to translate.\n\n# set a newPhrase variable to be an empty string\n\n# set up a vowels variable consisting of all lower and upper case vowels.\n\n# for each char in the input string \n\n#     if char is in the alphabet (see code above)\n\n#         if it is a vowel\n\n#             add the char to the newPhrase variable\n\n#         else\n\n#             add the string consisting of the char, followed by the letter o, followed by the char to the newPhrase variable\n\n#     else \n\n#         just add the character to the newPhrase variable\n\n# after the for loop\n\n# print the newPhrase variable\n\n# Here's the broken code. Put it back together.\n# The code is complete. You don't need to add anything or remove it... \n\nelse:\nif \nfor\nelse:\nnewString += currentChar+\"o\"+currentChar\ninString = input()\n\nprint(newString)\ncurrentChar in inString:\n\ncurrentChar in vowels:\nnewString += currentChar\nnewString += currentChar\nnewString = \"\"\nif currentChar in alphabet:\nvowels = \"aeiouAEIOU\"\n\nimport string\ntextToProcess\nalphabet = string.\n\n\n\n\n\n\n","offset":1164,"fileType":"python3","requestStartTime":1517998566116}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    res=[]\n    for b in board:\n        P=0\n        k=0\n        kp = []\n        for i in range(8):\n            if b[1][i]=='P':\n                P=i\n        for i in range(8):\n            for j in range(8):\n                if b[j][i]=='k'\n                    kp.append(j)\n                    kp.append(i)\n                    break\n            if len(kp)>0:\n                break\n        #rook\n        if kp[0]==8 or kp[1]==P:\n            k+=2\n        #knight\n        if P-2>0:\n            if b[1][P-2]=='k':\n                k+=1\n        if P+2<8:     \n            if b[1][P+2]=='k':\n                k+=1\n        if P-1>0:\n            if b[2][P-1]=='k':\n                k+=1\n        if P+1<8:\n            if b[2][P+1]=='k':\n                k+=1\n        for i in range(1,8):\n            x1=P-i\n            x2=p+1\n            if x1>0:\n                if b[i][x1]=='k':\n                    k+=1\n            if x2<8:\n                if b[i][x2]=='k':\n                    k+=1 \n        res.\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1041,"fileType":"python3","requestStartTime":1517998607339}}
{"body": {"column":9,"line":2,"wordToComplete":"3.","code":"\ndef cylinder(radius,height):\n    PI=3.\n\n\nouter=int(input())\ninner=int(input())\nheight=int(input())\n\nbig=cylinder(outer,height)\nsmall=cylinder(inner,height)\n\nring=big-small\n\nprice=7+15*ring\n\nprint(price)\n\n","offset":40,"fileType":"python3","requestStartTime":1517998618200}}
{"body": {"column":9,"line":51,"wordToComplete":"","code":"import string\n\nalphabet = string.ascii_letters\n# Use the following technique which builds up the replacement string: \n\n# start by reading in the phrase to translate.\n\n# set a newPhrase variable to be an empty string\n\n# set up a vowels variable consisting of all lower and upper case vowels.\n\n# for each char in the input string \n\n#     if char is in the alphabet (see code above)\n\n#         if it is a vowel\n\n#             add the char to the newPhrase variable\n\n#         else\n\n#             add the string consisting of the char, followed by the letter o, followed by the char to the newPhrase variable\n\n#     else \n\n#         just add the character to the newPhrase variable\n\n# after the for loop\n\n# print the newPhrase variable\n\n# Here's the broken code. Put it back together.\n# The code is complete. You don't need to add anything or remove it... \n\nelse:\nif \nfor\nelse:\nnewString += currentChar+\"o\"+currentChar\ninString = input()\n\nprint(newString)\ncurrentChar in inString:\n\ncurrentChar in vowels:\nnewString += currentChar\nnewString += currentChar\nnewString = \"\"\nif currentChar in alphabet:\nvowels = \"aeiouAEIOU\"\n\nnewPhase.\n\nimport string\ntextToProcess\nalphabet = string.ascii_lowercase\n\n\n\n\n\n\n\n","offset":1127,"fileType":"python3","requestStartTime":1517998632000}}
{"body": {"column":16,"line":54,"wordToComplete":"","code":"import string\n\nalphabet = string.ascii_letters\n# Use the following technique which builds up the replacement string: \n\n# start by reading in the phrase to translate.\n\n# set a newPhrase variable to be an empty string\n\n# set up a vowels variable consisting of all lower and upper case vowels.\n\n# for each char in the input string \n\n#     if char is in the alphabet (see code above)\n\n#         if it is a vowel\n\n#             add the char to the newPhrase variable\n\n#         else\n\n#             add the string consisting of the char, followed by the letter o, followed by the char to the newPhrase variable\n\n#     else \n\n#         just add the character to the newPhrase variable\n\n# after the for loop\n\n# print the newPhrase variable\n\n# Here's the broken code. Put it back together.\n# The code is complete. You don't need to add anything or remove it... \n\nelse:\nif \nfor\nelse:\nnewString += currentChar+\"o\"+currentChar\ninString = input()\n\nprint(newString)\ncurrentChar in inString:\n\ncurrentChar in vowels:\nnewString += currentChar\nnewString += currentChar\nnewString = \"\"\nif currentChar in alphabet:\nvowels = \"aeiouAEIOU\"\n\nnewPhase.variable\nvowels=\"aeiouAEIOU\"\ncurrentChar= newString\nif char= string.\nimport string\ntextToProcess\nalphabet = string.ascii_lowercase\n\n\n\n\n\n\n\n","offset":1195,"fileType":"python3","requestStartTime":1517998787599}}
{"body": {"column":28,"line":55,"wordToComplete":"","code":"import string\n\nalphabet = string.ascii_letters\n# Use the following technique which builds up the replacement string: \n\n# start by reading in the phrase to translate.\n\n# set a newPhrase variable to be an empty string\n\n# set up a vowels variable consisting of all lower and upper case vowels.\n\n# for each char in the input string \n\n#     if char is in the alphabet (see code above)\n\n#         if it is a vowel\n\n#             add the char to the newPhrase variable\n\n#         else\n\n#             add the string consisting of the char, followed by the letter o, followed by the char to the newPhrase variable\n\n#     else \n\n#         just add the character to the newPhrase variable\n\n# after the for loop\n\n# print the newPhrase variable\n\n# Here's the broken code. Put it back together.\n# The code is complete. You don't need to add anything or remove it... \n\nelse:\nif \nfor\nelse:\nnewString += currentChar+\"o\"+currentChar\ninString = input()\n\nprint(newString)\ncurrentChar in inString:\n\ncurrentChar in vowels:\nnewString += currentChar\nnewString += currentChar\nnewString = \"\"\nif currentChar in alphabet:\nvowels = \"aeiouAEIOU\"\n\nnewPhase.variable\nvowels=\"aeiouAEIOU\"\ncurrentChar= newString\nif char= alphabet \"excluding vowels\" \nadd currentChar to newPhase.\nimport string\ntextToProcess\nalphabet = string.ascii_lowercase\n\n\n\n\n\n\n\n","offset":1245,"fileType":"python3","requestStartTime":1517998868675}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"index = int(input())\nmessageWords = input().lower().split()  ## reads input, converts to lower case and splits into list of words\n\n## start with hiddenWord as an empty string\nhiddenWord = \"\"\n## for each word in the messageWords list\nfor word in messageWords:\n    ## add the index letter of the word to the hiddenWord\n    hiddenWord. messageWords[1: : index]\n## print the hiddenWord\nprint(hiddenWord)\n\n","offset":333,"fileType":"python3","requestStartTime":1517998966838}}
{"body": {"column":17,"line":46,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef isCheck(boardstate):\n    bs = []    \n    ki = 0\n    kj = 0\n    \n    for j in range(12):\n        bs.append(\"############\")  \n\n    for j in range(8):\n        bs[j+2] = str(\"##\" + boardstate[j][0] + \"##\")\n        if (bs[j+2].find(\"k\") != -1):\n            ki = bs[j+2].find(\"k\")\n            kj = j + 2\n            print(ki, kj)\n    \n    #N_check\n    checkstr = bs[kj-2][ki-1] + bs[kj-2][ki+1] + bs[kj-1][ki-2] + bs[kj-1][ki+2] + bs[kj+2][ki-1] + bs[kj+2][ki+1] + bs[kj+1][ki-2] + bs[kj+1][ki+2]\n    if (checkstr.count(\"N\") > 0):\n        #print(\"knight check done\")\n        return 1\n\n    #R_check\n    checkstr = bs[kj].replace(\"#\",\"\")\n    if (checkstr.count(\"Rk\") + checkstr.count(\"kR\")> 0):\n        #print(\"Rock check gorizontal done\")\n        return 1\n    \n    checkstr = \"\"\n    for j in range(12):\n      checkstr = (checkstr + bs[j][ki]).replace(\"#\",\"\")\n    \n    if (checkstr.count(\"Rk\") + checkstr.count(\"kR\")> 0):\n        #print(\"Rock check vertical done\")\n        return 1\n    \n    #B_check\n    \n    checkstr = \"\"\n    a = kj - ki\n    print (a)\n    for j in range(12):\n        if (a+j >)   \n        checkstr = checkstr + bs[0][0]\n    \n    \n    \n    \n    \n    return 0\n\n\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    \n    isCheck(board)\n    \n    \n    i = 0  \n    str1 = \"##\" +  board[1][0] + \"##\"\n    str2 = \"##\" +  board[2][0] + \"##\"\n    \n    for j in range(8):\n        if (board[1][0][j] == \"P\") and (board[0][0][j] == \"#\"):\n            i = j + 2\n \n    #i = str1.find(\"P\")\n    kpos = str1[i-2] + str1[i+2] + str2[i-1] + str2[i+1]\n    if kpos.count(\"k\") > 0:\n        return 1\n     \n    str1 = board[1][0]  \n    for j in range (8):\n        board[j][0] = board[j][0].replace(\"P\",\"!\")\n    board[1][0] = str1\n   \n    \n    str0 = board[0][0][0:i-2] + \"P\" + board[0][0][i-1:]\n    str0 = str0.replace(\"#\",\"\")\n    str0v = \"\"\n    for j in range(8):\n        str0v = str0v + board[j][0][i-2]\n        #print (str0v)\n    str0v = str0v.replace(\"#\",\"\")\n \n    i = i - 2\n    strF = \"\"\n    for j in range(8):\n        if (i == j):\n            strF = strF + \"P\"\n        else:\n            strF = strF + board[abs(i-j)][0][j]\n    strF = strF.replace(\"#\",\"\")\n    \n    if (str0.count(\"kP\") + str0.count(\"Pk\") + str0v.count(\"Pk\") + strF.count(\"Pk\") + strF.count(\"kP\") > 0):\n        return 2\n    \n    return 0\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1120,"fileType":"python3","requestStartTime":1517998994678}}
{"body": {"column":25,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import defaultdict\n\ndef get_promotable(board):\n    for i in range(8):\n        if board[0][i] == \"#\" and board[1][i] == \"P\":\n            return i\n\ndef is_valid(x,y):\n    return 0<=x<=7 and 0<=y<=7\n        \ndef check(board, x, y, x_inc = 0, y_inc = 0):\n    i = x + x_inc\n    j = y + y_inc\n    while is_valid(x,y):\n        if board[i][j] == \"#\":\n            i = i + x_inc\n            j = j + y_inc\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n    return False      \n\n        \ndef checkRook(board, x, y):\n    ans = check(board, x, y, 0, -1)  \n    ans = ans and check(board, x, y, 0, 1)  \n    ans = ans and check(board, x, y, 1, 0)\n    return ans\n\ndef checkBishop(board, x, y):\n    # left\n    ans = check(board, x.)\n    for i in range(1, peon_y+1):\n        if board[i][peon_y - i] == \"#\":\n            continue\n        elif board[i][peon_y - i] == \"k\":\n            return True\n        else:\n            break\n       \n    # right\n    for i in range(1, 8 - peon_y):\n        if board[i][peon_y + i] == \"#\":\n            continue\n        elif board[i][peon_y + i] == \"k\":\n            return True\n        else:\n            break\n\n    return False\n \ndef checkBishopOther(board, x, y):\n    #left up\n    i=x-1\n    j=y-1\n    while 0 <= i <= 7 and 0 <= j <= 7:\n        if board[i][j] == \"#\":\n            i = i-1\n            j = j-1\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n        i = i-1\n        j = j-1\n        \n    #left down\n    i=x+1\n    j=y-1\n    while 0 <= i <= 7 and 0 <= j <= 7:\n        if board[i][j] == \"#\":\n            i = i+1\n            j = j-1\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n        i = i+1\n        j = j-1\n        \n    #right up\n    i=x-1\n    j=y+1\n    while 0 <= i <= 7 and 0 <= j <= 7:\n        if board[i][j] == \"#\":\n            i-=1\n            j+=1\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n        i-=1\n        j+=1\n        \n    #right down\n    i=x+1\n    j=y+1\n    while 0 <= i <= 7 and 0 <= j <= 7:\n        if board[i][j] == \"#\":\n            i+=1\n            j+=1\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n        i+=1\n        j+=1\n\n    return False\n\ndef getNightMoves(board, y):\n    moves = []\n    if y >= 2:\n        moves.append((1, y-2))\n    if y <= 5:\n        moves.append((1, y+2))\n    if y >= 1:\n        moves.append((2, y-1))\n    if y <= 6:\n        moves.append((2, y+1))\n    return moves\n\ndef checkNight(board, peon_y):\n    moves = getNightMoves(board, peon_y)\n    for m_x, m_y in moves:\n        if board[m_x][m_y] == \"k\":\n            return True\n    return False\n    \n      \ndef waysToGiveACheck(board, white_dict):\n    peon_y = get_promotable(board)\n  \n    r = checkRook(board, peon_y)\n    b = checkBishop(board, peon_y)\n    n = checkNight(board, peon_y)\n    q = r or b\n    res = int(r) + int(b) + int(n) + int(q)\n    \n    # others\n    other = False\n    change = list(board[1])\n    change[peon_y] = \"#\"\n    board[1] = \"\".join(change)\n    for piece in white_dict:\n        for x,y in white_dict[piece]:\n            if piece == \"B\":\n                other = checkBishopOther(board,x,y)\n            if piece == \"R\":\n                other = checkRook(board,y,x)\n            if piece == \"Q\":\n                other = checkBishopOther(board,x,y) or checkRook(board,y,x)\n    return 4 if other else res\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for _ in range(t):\n        board = []\n        white_dict = defaultdict(list)\n        for i in range(8):\n            board_t = input().strip()\n            for j in range(8):\n                p = board_t[j]\n                if p in ['B', 'R', 'Q']:\n                    white_dict[p].append((i,j))\n            board.append(board_t)\n        result = waysToGiveACheck(board, white_dict)\n        print(result)\n\n\n","offset":820,"fileType":"python3","requestStartTime":1517999016370}}
{"body": {"column":15,"line":2,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, q = input().\n\n\n","offset":87,"fileType":"python3","requestStartTime":1517999063562}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, q = input().split(\" \")\n\nheight = []\n\nfor i in range(n):\n    height.\n\n\n","offset":142,"fileType":"python3","requestStartTime":1517999117421}}
{"body": {"column":46,"line":43,"wordToComplete":"checkBish","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import defaultdict\n\ndef get_promotable(board):\n    for i in range(8):\n        if board[0][i] == \"#\" and board[1][i] == \"P\":\n            return i\n\ndef is_valid(x,y):\n    return 0<=x<=7 and 0<=y<=7\n        \ndef check(board, x, y, x_inc = 0, y_inc = 0):\n    i = x + x_inc\n    j = y + y_inc\n    while is_valid(x,y):\n        if board[i][j] == \"#\":\n            i = i + x_inc\n            j = j + y_inc\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n    return False      \n\n        \ndef checkRook(board, x, y):\n    ans = check(board, x, y, 0, -1)  \n    ans = ans and check(board, x, y, 0, 1)  \n    ans = ans and check(board, x, y, 1, 0)\n    return ans\n\ndef checkBishop(board, x, y):\n    ans = check(board, x, y, -1, -1)\n    ans = check(board, x, y, 1, 1) and ans\n    ans = check(board, x, y, 1, -1) and ans\n    ans = check(board, x, y, -1, 1) and ans\n    return ans\n \ndef checkQueen(board, x, y):\n    return checkRook(board, x, y) or checkBish\n\ndef getNightMoves(board, y):\n    moves = []\n    if y >= 2:\n        moves.append((1, y-2))\n    if y <= 5:\n        moves.append((1, y+2))\n    if y >= 1:\n        moves.append((2, y-1))\n    if y <= 6:\n        moves.append((2, y+1))\n    return moves\n\ndef checkNight(board, peon_y):\n    moves = getNightMoves(board, peon_y)\n    for m_x, m_y in moves:\n        if board[m_x][m_y] == \"k\":\n            return True\n    return False\n    \n      \ndef waysToGiveACheck(board, white_dict):\n    peon_y = get_promotable(board)\n  \n    r = checkRook(board, peon_y)\n    b = checkBishop(board, peon_y)\n    n = checkNight(board, peon_y)\n    q = r or b\n    res = int(r) + int(b) + int(n) + int(q)\n    \n    # others\n    other = False\n    change = list(board[1])\n    change[peon_y] = \"#\"\n    board[1] = \"\".join(change)\n    for piece in white_dict:\n        for x,y in white_dict[piece]:\n            if piece == \"B\":\n                other = checkBishopOther(board,x,y)\n            if piece == \"R\":\n                other = checkRook(board,y,x)\n            if piece == \"Q\":\n                other = checkBishopOther(board,x,y) or checkRook(board,y,x)\n    return 4 if other else res\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for _ in range(t):\n        board = []\n        white_dict = defaultdict(list)\n        for i in range(8):\n            board_t = input().strip()\n            for j in range(8):\n                p = board_t[j]\n                if p in ['B', 'R', 'Q']:\n                    white_dict[p].append((i,j))\n            board.append(board_t)\n        result = waysToGiveACheck(board, white_dict)\n        print(result)\n\n\n","offset":1044,"fileType":"python3","requestStartTime":1517999118588}}
{"body": {"column":31,"line":82,"wordToComplete":"checkBi","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import defaultdict\n\ndef get_promotable(board):\n    for i in range(8):\n        if board[0][i] == \"#\" and board[1][i] == \"P\":\n            return i\n\ndef is_valid(x,y):\n    return 0<=x<=7 and 0<=y<=7\n        \ndef check(board, x, y, x_inc = 0, y_inc = 0):\n    i = x + x_inc\n    j = y + y_inc\n    while is_valid(x,y):\n        if board[i][j] == \"#\":\n            i = i + x_inc\n            j = j + y_inc\n            continue\n        elif board[i][j] == \"k\":\n            return True\n        else:\n            break\n    return False      \n\n        \ndef checkRook(board, x, y):\n    ans = check(board, x, y, 0, -1)  \n    ans = ans and check(board, x, y, 0, 1)  \n    ans = ans and check(board, x, y, 1, 0)\n    return ans\n\ndef checkBishop(board, x, y):\n    ans = check(board, x, y, -1, -1)\n    ans = check(board, x, y, 1, 1) and ans\n    ans = check(board, x, y, 1, -1) and ans\n    ans = check(board, x, y, -1, 1) and ans\n    return ans\n \ndef checkQueen(board, x, y):\n    return checkRook(board, x, y) or checkBishop(board, x, y)\n\ndef getNightMoves(board, y):\n    moves = []\n    if y >= 2:\n        moves.append((1, y-2))\n    if y <= 5:\n        moves.append((1, y+2))\n    if y >= 1:\n        moves.append((2, y-1))\n    if y <= 6:\n        moves.append((2, y+1))\n    return moves\n\ndef checkNight(board, peon_y):\n    moves = getNightMoves(board, peon_y)\n    for m_x, m_y in moves:\n        if board[m_x][m_y] == \"k\":\n            return True\n    return False\n    \n      \ndef waysToGiveACheck(board, white_dict):\n    peon_y = get_promotable(board)\n  \n    r = checkRook(board, peon_y)\n    b = checkBishop(board, peon_y)\n    n = checkNight(board, peon_y)\n    q = r or b\n    res = int(r) + int(b) + int(n) + int(q)\n  \n    # others\n    other = False\n    change = list(board[1])\n    change[peon_y] = \"#\"\n    board[1] = \"\".join(change)\n    for piece in white_dict:\n        for x,y in white_dict[piece]:\n            if piece == \"B\":\n                other = checkBi(board,x,y)\n            if piece == \"R\":\n                other = checkRook(board,y,x)\n            if piece == \"Q\":\n                other = checkBishopOther(board,x,y) or checkRook(board,y,x)\n    return 4 if other else res\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for _ in range(t):\n        board = []\n        white_dict = defaultdict(list)\n        for i in range(8):\n            board_t = input().strip()\n            for j in range(8):\n                p = board_t[j]\n                if p in ['B', 'R', 'Q']:\n                    white_dict[p].append((i,j))\n            board.append(board_t)\n        result = waysToGiveACheck(board, white_dict)\n        print(result)\n\n\n","offset":1979,"fileType":"python3","requestStartTime":1517999149944}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nT = int(input())\nfor t in range(T):\n    input_str = input()\n    A = input_str.\n    \n\n\n","offset":150,"fileType":"python3","requestStartTime":1517999185854}}
{"body": {"column":25,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, q = input().split(\" \")\n\nheight = []\n\nfor i in range(n):\n    height.append(input())\n    \nfor x in range(q):\n    start, end = input().\n\n\n","offset":207,"fileType":"python3","requestStartTime":1517999196854}}
{"body": {"column":19,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nT = int(input())\nfor t in range(T):\n    string = input()\n    input_array = input_str.split(' ')\n    a = int(string.[0])\n    b = int(input_array[1])\n    print(a)\n    print(b)\n    \n\n\n","offset":187,"fileType":"python3","requestStartTime":1517999299008}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\ninputString = input().upper()\n# set up a string (vowels) consisting of the uppercase vowels\nvowels = \"AEIOU\"\n# for each letter (currentLetter) in the inputString\nfor currentLetter in inputString:\n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n    if currentLetter in vowels:\n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n        currentLetter.replace()\n# print (the updated) inputString\nprint(inputString)\n\n","offset":528,"fileType":"python3","requestStartTime":1517999345594}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nT = int(input())\nfor t in range(T):\n    string = input()\n    a = int(string.split(' ')[0])\n    b = int(string.split(' ')[1])\n    \n    lucky = [i for i in range(a,b+1)]\n    for i in range(a,b+1):\n        \n        \n    print(lucky.)\n        \n        \n    \n\n\n","offset":301,"fileType":"python3","requestStartTime":1517999483699}}
{"body": {"column":6,"line":16,"wordToComplete":"","code":"inputList = input().split() ## reads in a list of words...\n# there is a sneaky way to do this using the max() function, but here is a step-by-step way that you MUST implement.\n\n# set a variable eg longestWord to the first word on inputList (see input statement above)\n\n# for each word (currentWord) in the inputList\n\n    # if the currentWord is (strictly) longer than the longestWord\n    \n        # set longestWord to the currentWord\n        \n# print the longestWord\n\ninputString(longest word)\nvariable = \"lonngestWord\"\nif currentWord is longerWord then\ninput.\nmax()= longest word\n\n\n","offset":561,"fileType":"python3","requestStartTime":1517999518320}}
{"body": {"column":8,"line":16,"wordToComplete":"","code":"inputList = input().split() ## reads in a list of words...\n# there is a sneaky way to do this using the max() function, but here is a step-by-step way that you MUST implement.\n\n# set a variable eg longestWord to the first word on inputList (see input statement above)\n\n# for each word (currentWord) in the inputList\n\n    # if the currentWord is (strictly) longer than the longestWord\n    \n        # set longestWord to the currentWord\n        \n# print the longestWord\n\ninputString(longest word)\nvariable = \"lonngestWord\"\nif currentWord is longerWord then\ninput().\nmax()= longest word\n\n\n","offset":563,"fileType":"python3","requestStartTime":1517999522065}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    n = len(arr)\n    min = sys.\n    for i in range(n):\n        \n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":82,"fileType":"python3","requestStartTime":1517999653323}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    n = len(arr)\n    min = sys.maxsize\n    max = sys.\n    for i in range(n):\n        \n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":104,"fileType":"python3","requestStartTime":1517999667829}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef miniMaxSum(arr):\n    n = len(arr)\n    min = sys.maxsize\n    max = sys.maxsize * (.)\n    for i in range(n):\n        \n\nif __name__ == \"__main__\":\n    arr = list(map(int, input().strip().split(' ')))\n    miniMaxSum(arr)\n\n\n","offset":116,"fileType":"python3","requestStartTime":1517999670962}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"inputList = input().split() ## reads in a list of words...\n# there is a sneaky way to do this using the max() function, but here is a step-by-step way that you MUST implement.\n\n# set a variable eg longestWord to the first word on inputList (see input statement above)\n\n# for each word (currentWord) in the inputList\n\n    # if the currentWord is (strictly) longer than the longestWord\n    \n        # set longestWord to the currentWord\n        \n# print the longestWord\n\ninputString(longest word)\nvariable = \"lonngestWord\"\nif currentWord is longerWord then\ninput(allWord).split(currentWord , longestWord)\nallWords = allWords.\nmax()= longest word\n\n\n","offset":623,"fileType":"python3","requestStartTime":1517999684184}}
{"body": {"column":7,"line":17,"wordToComplete":"","code":"\n# read in word and convert to uppercase (eg inputString)\n\n# set up a string (vowels) consisting of the uppercase vowels\n\n# for each letter (currentLetter) in the inputString\n    \n    # if the currentLetter is a vowel     ## remember the trick we played for specialSymbols in the password checker... \n      \n        # set inputString to inputString with the currentLetter replaced by its lowercase version\n    \n# print (the updated) inputString\n\nint = input()\nvowels = \"AEIOU\"\ncurrentLetter = eachletter\nif currentLetter = vowels:\nletter.\n      \n\n\n\n","offset":539,"fileType":"python3","requestStartTime":1517999910341}}
{"body": {"column":41,"line":46,"wordToComplete":"ki","code":"\n#!/bin/python3\n\nimport sys\n\ndef isCheck(boardstate):\n    bs = []    \n    ki = 0\n    kj = 0\n    \n    for j in range(12):\n        bs.append(\"############\")  \n\n    for j in range(8):\n        bs[j+2] = str(\"##\" + boardstate[j][0] + \"##\")\n        if (bs[j+2].find(\"k\") != -1):\n            ki = bs[j+2].find(\"k\")\n            kj = j + 2\n            print(ki, kj)\n    \n    #N_check\n    checkstr = bs[kj-2][ki-1] + bs[kj-2][ki+1] + bs[kj-1][ki-2] + bs[kj-1][ki+2] + bs[kj+2][ki-1] + bs[kj+2][ki+1] + bs[kj+1][ki-2] + bs[kj+1][ki+2]\n    if (checkstr.count(\"N\") > 0):\n        #print(\"knight check done\")\n        return 1\n\n    #R_check\n    checkstr = bs[kj].replace(\"#\",\"\")\n    if (checkstr.count(\"Rk\") + checkstr.count(\"kR\")> 0):\n        #print(\"Rock check gorizontal done\")\n        return 1\n    \n    checkstr = \"\"\n    for j in range(12):\n      checkstr = (checkstr + bs[j][ki]).replace(\"#\",\"\")\n    \n    if (checkstr.count(\"Rk\") + checkstr.count(\"kR\")> 0):\n        #print(\"Rock check vertical done\")\n        return 1\n    \n    #B_check\n    \n    checkstr = \"\"\n    a = kj - ki\n    print (a)\n    for j in range(12):\n        if (kj - ki +j >= 0) and (kj - ki+j <=11):   \n            checkstr = (checkstr + bs[a+j][j]).replace(\"#\",\"\")\n    if (checkstr.count(\"Bk\") + checkstr.count(\"kB\")> 0):  \n        print(\"Bishop check done \")\n        return 1    \n        \n    \n    \n    \n    \n    \n    return 0\n\n\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    \n    isCheck(board)\n    \n    \n    i = 0  \n    str1 = \"##\" +  board[1][0] + \"##\"\n    str2 = \"##\" +  board[2][0] + \"##\"\n    \n    for j in range(8):\n        if (board[1][0][j] == \"P\") and (board[0][0][j] == \"#\"):\n            i = j + 2\n \n    #i = str1.find(\"P\")\n    kpos = str1[i-2] + str1[i+2] + str2[i-1] + str2[i+1]\n    if kpos.count(\"k\") > 0:\n        return 1\n     \n\n    \n    return 0\n    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1144,"fileType":"python3","requestStartTime":1518000131481}}
{"body": {"column":89,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    places = {1 :'a' , 2 : 'b'  , 3 : 'c' , 4 : 'd' , 5 : 'e' , 6 : 'f' , 7 : 'g' , 8 : 'h'}\n    # Complete this function\n    all_pieces = {}\n    for i in range(1,9) :\n        for j in str(board[i-1])[2:-2]:\n            if j != '#':\n                all_pieces[j] = [places[int(str(board[i-1])[2:-2].index(j)) + 1], 9-i] \n    #find which pawn will be promoted\n    for key in all_pieces:\n        if key == 'P' and  [all_pieces[key][0],all_pieces[key][1] + 1] not in all_pieces.:\n            [all_pieces[key][0],all_pieces[key][1] + 1] \n    return all_pieces\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":534,"fileType":"python3","requestStartTime":1518000153575}}
{"body": {"column":42,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    ones = doors.count(1)\n    s = \"\".join(map(str,doors))\n    if ones%2==0:\n        return s.count(\"11\"),ones\n    else:\n        return s.count(\"11\")+ ones//2 - s.,ones\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":256,"fileType":"python3","requestStartTime":1518000374592}}
{"body": {"column":30,"line":148,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef check_knight(king,player,coords):\n    \n    if (king[0] == player[0]+1 and king[1] == player[1]-2) or (king[0] == player[0]+1 and king[1] == player[1] + 2):\n        return 1\n    \n    if (king[0] == player[0]+2 and king[1] == player[1]-1) or (king[0] == player[0]+2 and king[1] == player[1] + 1):\n        return 1\n    \n    return 0\n\ndef check_bishop(king,player,coords):\n    \n    count = 0\n    while count < 9:\n        \n        if ([player[0] + count,player[1]+count] not in coords):\n            break\n            \n        \n        if (king[0] == player[0] + count and king[1] == player[1] + count):\n            return 1\n        \n        count += 1\n      \n    count = 0\n    while count < 9:\n        \n        if ([player[0] + count,player[1]-count] not in coords):\n            break\n            \n        if (king[0] == player[0] + count and king[1] == player[1] - count):\n            return 1\n       \n        \n        count += 1\n        \n    return 0\n        \n\ndef check_queen(king,player,coords):\n    \n    if check_bishop(king,player,coords) == 1:\n        return 1\n    \n    if check_wall(king,player,coords) == 1:\n        return 1\n\n    count = 0\n    while count < 9:\n        if(king[0] == player[0] + count and king[1] == player[1] + count):\n            return 1\n        count += 1\n        \n    return 0\n        \ndef check_wall(king,player,coords):\n  \n    count = 0\n    \n    if king[0] == player[0]:\n        while count < 9:\n            \n            if([player[0],player[1] + count] not in coords):\n                break\n            if(king[1] == player[1] + count):\n                return 1\n           \n            count += 1\n            \n    count = 0\n    \n    if king[1] == player[1]:\n        while count < 9:\n            \n            if([player[0] + count,player[1]] not in coords):\n     \n                break\n            if(king[0] == player[0] + count):\n                return 1\n            count += 1\n            \n    return 0\n        \n    \ndef check_king(king,horses,queens,bishops,walls):\n    \n    total_horses = 0\n    print(king)\n    if ([king[0]+1,king[1]-2] in horses) or ([king[0]+1,king[1]+2] in horses):\n        total_horses += 1\n        \n    if ([king[0]+2,king[1]-1] in horses) or ([king[0]+2,king[1]+1] in horses):\n        total_horses += 1\n    \n    print(horses)\n    \n    return 0\ndef waysToGiveACheck(board):\n    # Complete this function\n    xKing = 0\n    yKing = 0\n    \n    xPlayer = 0 \n    yPlayer = 0\n    \n    xcount = 0\n    ycount = 1\n    \n    horses = []\n    queens = []\n    bishops = []\n    walls = []\n    ally_king = []\n    \n    #KQNBRP\n    \n    free_coords = []\n    for line in board:\n        xcount += 1\n        for position in line:\n            \n            for i in position:\n                if i == \"k\":\n                    xKing = xcount\n                    yKing = ycount\n                    free_coords.append([xcount,ycount])\n                    \n                if i == \"P\":\n                    if([xcount-1,ycount] in free_coords):\n                        xPlayer = xcount\n                        yPlayer = ycount\n                        free_coords.append([xcount,ycount])\n                \n                if i == \"N\":\n                    horses.append(i)\n                    \n                if i == \"Q\":\n                    queens.append(i)\n                    \n                if i == \"B\":\n                    bishops.append(i)\n                    \n                if i == \"K\":\n                    ally_king.\n                if i == \"#\":\n                    free_coords.append([xcount,ycount])\n                    \n                ycount += 1\n                \n            \n            ycount = 1\n\n    \n        \n    king = [xKing,yKing]\n    player = [xPlayer-1,yPlayer]\n \n    knight = check_knight(king,player,free_coords)\n    bishop = check_bishop(king,player,free_coords)\n    queen = check_queen(king,player,free_coords)\n    wall = check_wall(king,player,free_coords)\n    kings = check_king(king,horses,queens,bishops,walls)\n    \n    print(knight + bishop + queen + wall + kings)\n    \n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        waysToGiveACheck(board)\n\n\n","offset":3483,"fileType":"python3","requestStartTime":1518000643538}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pawnPos = 0\n    kingPos = 0\n    for row in board:\n        if 'p' in row:\n            pawnPos = row.\n    return pawnPos\n    # If it can be reached by horse, 1\n    # If king is horizontal or vertical and nothing in between: 2\n    # If king is diagonal and nothing between: 2\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n\n","offset":162,"fileType":"python3","requestStartTime":1518000710304}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\nn, q = (int(_) for _ in input().split(\" \"))\n        \nheight = []\n\nfor i in range(n):\n    height.append(int(input()))\n    height.\n    \nfor x in range(q):\n    result = 0\n    start, end = (int(_) for _ in input().split(\" \"))\n    \n       \n    for h in height:\n        if start<=h and h<=end:\n            result += 1\n    print(result)\n\n","offset":130,"fileType":"python3","requestStartTime":1518000872895}}
{"body": {"column":11,"line":13,"wordToComplete":"","code":"\nn, q = (int(_) for _ in input().split(\" \"))\n        \nheight = []\n\nfor i in range(n):\n    height.append(int(input()))\n    height.sort()\n    \nfor x in range(q):\n    result = 0\n    start, end = (int(_) for _ in input().split(\" \"))\n    \n    height.   \n        \n    for h in height:\n        if start<=h and h<=end:\n            result += 1\n    print(result)\n\n","offset":246,"fileType":"python3","requestStartTime":1518000985429}}
{"body": {"column":29,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n        pawn_pos = []\n        king_pos = [0,0]\n        king_found = 0\n\n        check = 0\n        for posx in range(8):\n            \n            for posy in range(8):\n                #print (posx, posy, board[posx]) #, board[posx][posy])\n                #line = board[posx][0]\n                #print(str(line))\n                if board[posx][0][posy] ==\"k\":\n                    king_found = 1\n                    king_pos = [posx, posy]\n            if posx == 1:\n                for posy in range(8):\n\n                    if board[posx][0][posy] == \"P\": pawn_pos.append(posy)\n        for pawn in pawn_pos:\n            diff_x = king_pos[0]\n            diff_y = abs(king_pos[1]-pawn)\n            print (diff_x, diff_y)\n            path = set()\n            if (diff_x == 1 and diff_y == 2) or (diff_x==2 and diff_y ==1):\n                return 1\n            if diff_x == 0:\n                if diff_y == 0:\n                    next\n                if king_pos[1]<pawn:\n                    for i in range(1,king_pos[1]):\n                        path.add(board[0][0][pawn-i])\n                    if len(path) >1: return 2\n                if king_pos[1]>pawn:\n                    for i in range(1,king_pos[1]):\n                        path.board[0][0][pawn+i] == \"#\": return 2\n            if diff_y ==0:\n                for i in range(2,king_pos[0]):\n                    print(i,board[i][0][pawn])\n                    if not board[i][0][pawn] ==\"#\":return 2\n                        \n            if diff_x == diff_y:\n                if king_pos[1]<pawn:\n                    for i in range(1,king_pos[1]):\n\n                        if not board[i][0][pawn-i] == \"#\":\n                            return 2\n                if king_pos[1]>pawn:\n                    for i in range(1,king_pos[1]):\n                        if not board[i][0][pawn+i] == \"#\":\n                            return 2\n                        \n                                        \n                    \n\n                    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1320,"fileType":"python3","requestStartTime":1518001007598}}
{"body": {"column":31,"line":13,"wordToComplete":"","code":"\nn, q = (int(_) for _ in input().split(\" \"))\n        \nheight = []\n\nfor i in range(n):\n    height.append(int(input()))\n    height.sort()\n    \nfor x in range(q):\n    result = 0\n    start, end = (int(_) for _ in input().split(\" \"))\n    \n    height.index(end) - height.  \n        \n    for h in height:\n        if start<=h and h<=end:\n            result += 1\n    print(result)\n\n","offset":266,"fileType":"python3","requestStartTime":1518001141402}}
{"body": {"column":57,"line":12,"wordToComplete":"dollars.\"","code":"\n#!/bin/python3\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(input().strip())\n    tip_percent = int(input().strip())\n    tax_percent = int(input().strip())\n    tip = meal_cost * tip_percent / 100\n    tax = meal_cost * tax_percent / 100\n    totalCost = meal_cost + tip + tax\n    print(\"The total meal cost is \", totalCost, \"dollars.\")\n\n","offset":349,"fileType":"python3","requestStartTime":1518001377490}}
{"body": {"column":63,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom datetime import datetime\nimport dateutil.parser\nimport sys\n\narray = []\nd = {}\n\nfor line in sys.stdin:\n    array.append(line)\n\n#for line in array:\n\nrange_start = dateutil.parser.parse(array[0].split(',')[0]).date()\nrange_end = dateutil.parser.parse(array[0].split(',')[1]).date()\n\narray.pop(0)\narray.pop(0)\n\n#print(array)\n\nfor date in array:\n    if range_start <= dateutil.parser.parse(date.split(',')[0].).date() <= range_end:\n        if date.split(',')[0] not in d:\n            d[date.split(',')[0]] = date.split(',')[1] + ',' + date.split(',')[2]\n        else:\n            d[date.split(',')[0]] += ',' + date.split(',')[1] + ',' + date.split(',')[2]\n\nfor key in d:\n    print(key + d[key])\n    # use later\n    #words = line.split(',')\n    #d[words[0]] = words[1] + ',' + words[2]\n#print (d)\n\n","offset":481,"fileType":"python3","requestStartTime":1518001414796}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nn = int(input())\ncountry = []\nfor i in range(n):\n    country.\n\n","offset":63,"fileType":"python3","requestStartTime":1518001638436}}
{"body": {"column":9,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  findNumber(arr, k):\n    a=list()\n    for line in arr:\n        a.append(line)\n    a.pop(-1)\n    if k in a:\n        return 'YES'\n    else:\n    \n        \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_arr_cnt = 0\n_arr_cnt = int(input())\n_arr_i=0\n_arr = []\nwhile _arr_i < _arr_cnt:\n    _arr_item = int(input());\n    _arr.append(_arr_item)\n    _arr_i+=1\n    \n\n\n_k = int(input());\n\nres = findNumber(_arr, _k)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":213,"fileType":"python3","requestStartTime":1518001820904}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    a=list()\n    while l<=r:\n        if l%2!=0:\n            a.append(l)\n        l+=1\n    s=''\n    for i in a:\n        s+=str'i, '\n    s.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":231,"fileType":"python3","requestStartTime":1518002142092}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    a=list()\n    while l<=r:\n        if l%2!=0:\n            a.append(l)\n        l+=1\n    print(a)\n    s=''\n    while len(a)>0:\n    s+=str(a.pop(1-))\n    return s\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":221,"fileType":"python3","requestStartTime":1518002495540}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nknights = []\nrooks = []\nbishop = []\n\nfor i in range(8):\n    for row, col in [(1, i-2), (2, i-1), (1, i+2), (2, i+1)]:\n        if col < 0 or col >\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    print(board)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":163,"fileType":"python3","requestStartTime":1518002746669}}
{"body": {"column":8,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    a=tuple()\n    while l<=r:\n        if l%2!=0:\n            a.append(l)\n        l+=1\n    a=a.\n    s=''\n    while len(a)>0:\n        s+=str(a.pop(0))\n    return s\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":189,"fileType":"python3","requestStartTime":1518002756605}}
{"body": {"column":18,"line":91,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    res=[]\n    b=board\n\n    for a in range(1):\n\n        P=0\n        k=0\n        kp = []\n\n        for i in range(8):\n\n            if b[1][0][i]=='P':\n                P=i\n        for i in range(8):\n            for j in range(8):\n                if b[j][0][i]=='k':\n                    kp.append(j)\n                    kp.append(i)\n                    break\n            if len(kp)>0:\n                break\n\n        #rook\n\n        if kp[0]==0:\n\n            if kp[1]<P:\n                l=0\n                for a in range(kp[1]+1,P):\n\n                    if b[0][0][a]!='#':\n                        l=1\n                if l==0:\n\n                    k+=2\n            else:\n                l=0\n                for a in range(P+1,kp[1]+1,-1):\n                    print(a)\n                    if b[0][0][a]!='#':\n                        l=1\n                if l==0:\n                    k+=2               \n        elif kp[1]==P:\n            if 1==1:\n                l=0\n                for a in range(0,kp[0]):\n                    if b[a][0][P]!='#':\n                        print(b[a][0][P])                      \n                        l=1\n                if l==0:\n                    k+=2\n        #knight\n        if P-2>=0:\n            if b[1][0][P-2]=='k':\n                k+=1\n        if P+2<8:     \n            if b[1][0][P+2]=='k':\n                k+=1\n        if P-1>=0:\n            if b[2][0][P-1]=='k':\n                k+=1\n        if P+1<8:\n            if b[2][0][P+1]=='k':\n                k+=1\n        x1c=0\n        x2c=0\n        for i in range(1,8):\n            x1=P-i\n            x2=P+1\n\n            if x1>=0 and x1c==0:\n                \n                if b[i][0][x1]=='k':     \n                    k+=2\n                elif b[i][0][x1]!='#':\n                    x1c=1\n            if x2<8 and x2c==0:\n                if b[i][0][x2]=='k':\n                    k+=2\n                elif b[i][0][x2]!='#':\n                    x2c=1\n        #consider check by pawn k q n b r p\n        cc=0\n        for i in range(0,7):\n            if cc>\n            for j in range(0,7):\n                if cc>4:\n                    break\n                s = b[j][0][i]\n                if s!='#' and s.islower():\n                    if s=='R':\n                        cc+=1\n                        if kp[0]==j or kp[1]==i:\n                            \n                            k+=1\n                    elif s =='Q':\n                    elif s=='B':\n                    \n            \n    return k\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2098,"fileType":"python3","requestStartTime":1518002947686}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    print sorted(list.)    \n    \n\n\n","offset":108,"fileType":"python3","requestStartTime":1518002957856}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\n\ntotal_nums = input()\n\nnums = []\n\nfor x in total_nums:\n    nums.\n\nprint(total_nums)\n\n","offset":66,"fileType":"python3","requestStartTime":1518003695534}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    odds = []\n  for n in range(l,r+1):\n    if n%2 != 0:\n        odds.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":164,"fileType":"python3","requestStartTime":1518003708609}}
{"body": {"column":39,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    neededDenominations=list()\n    coins=0\n    for denomination in coinDenominations:\n        if coins+denomination<monetaryValue:\n            coins+=denomination\n        if coins==0:\n            return neededDenominations.\n        \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":346,"fileType":"python3","requestStartTime":1518003927205}}
{"body": {"column":5,"line":6,"wordToComplete":"","code":"\n\ntotal_nums = input()\n\nnums = input()\n\nnums.split(\" \")\n\nfor x in range(0, len(total_nums)-1):\n    nums.append( input() )\n\nprint(total_nums)\nprint(type(nums[2]))\n\n\n\n","offset":46,"fileType":"python3","requestStartTime":1518004052910}}
{"body": {"column":27,"line":8,"wordToComplete":"1.","code":"\n#!/bin/python3\n\nimport sys\n\ndef divisibleSumPairs(n, k, ar):\n    # Complete this function\n    for i in range(len(ar)):\n        for j in range(i+1.)\n\nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\nar = list(map(int, input().strip().split(' ')))\nresult = divisibleSumPairs(n, k, ar)\nprint(result)\n\n\n","offset":148,"fileType":"python3","requestStartTime":1518004172155}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    if a0 > \n\na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":77,"fileType":"python3","requestStartTime":1518004178748}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.\n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":86,"fileType":"python3","requestStartTime":1518004217167}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    alice = 0\n    bob = 0\n    if a0 > b0:\n        alice += 1\n    elif b0 > \n        \na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":140,"fileType":"python3","requestStartTime":1518004219988}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.Ps = []\n        self.ps = []\n        self.K = None\n        self.\n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":150,"fileType":"python3","requestStartTime":1518004233175}}
{"body": {"column":72,"line":35,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    attacks = 0 \n   \n    # Complete this function\n    all_pieces = {}\n    for i in range(1,9) :\n        for j in str(board[i-1])[2:-2]:\n            if j != '#':\n                x_cord = int(str(board[i-1])[2:-2].index(j)) + 1\n                all_pieces[j] = [ x_cord , 9-i] \n    #find which pawn will be promoted\n    for key in all_pieces:\n        if key == 'P' and  [all_pieces[key][0],all_pieces[key][1] + 1] not in all_pieces.values():\n            attacker = all_pieces[key]\n            attacker[1] = 8 \n            break\n    #king's square\n    king_place = all_pieces['k']\n    if attacker[0] == king_place[0] or attacker[1] == king_place[1]:\n        attacks += 2\n    elif abs(attacker[1] - king_place[1]) == abs(attacker[0] - king_place[0]):\n        attacks += 2\n    elif king_place in [[attacker[0]-2,attacker[1]-1],[attacker[0]+2,attacker[1]-1],[attacker[0]-1,attacker[1]-2],[attacker[0]+1,attacker[1]-2]]:\n        attacks += 1\n    else:\n        pass\n    for key in all_pieces:\n        if key in ['Q', 'R']  and (all_pieces[key][0] == king_place[0]):\n            if all_pieces[key][0] > king_place[0]:\n                while i < range(abs(all_pieces[key][0]-king_place[0])) and flag == True:\n                    if [king_place[0],king_place[1]+i+1]  in all_pieces.\n                \n                \n            attacks += 1\n        elif key = ['Q','R']  and all_pieces[key][1] == king_place[1]:\n            attacks += 1\n        elif key == ['Q','B'] and (abs(all_pieces[key][0] - king_place[1]) == abs(all_pieces[key][0] - king_place[0])):\n            attacks += 1\n    return  attacks\n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1328,"fileType":"python3","requestStartTime":1518004262022}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    alice = 0\n    bob = 0\n    if a0 > b0:\n        alice += 1\n    elif b0 > a0:\n        bob += 1\n    if a1 > \n        \na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":173,"fileType":"python3","requestStartTime":1518004270668}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    alice = 0\n    bob = 0\n    if a0 > b0:\n        alice += 1\n    elif b0 > a0:\n        bob += 1\n    if a1 > b1:\n        alice += 1\n    elif b1 >\n        \na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":209,"fileType":"python3","requestStartTime":1518004279891}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    alice = 0\n    bob = 0\n    if a0 > b0:\n        alice += 1\n    elif b0 > a0:\n        bob += 1\n    if a1 > b1:\n        alice += 1\n    elif b1 > a1:\n        bob += 1\n    if a2 > \n        \na0, a1, a2 = input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint (\" \".join(map(str, result)))\n\n\n\n\n","offset":243,"fileType":"python3","requestStartTime":1518004287014}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef gridChallenge(grid):\n    for row in grid:\n        row.\n        sort(row)\n        print(row)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    n = int(input().strip())\n    grid = []\n    grid_i = 0\n    for grid_i in range(n):\n       grid_t = str(input().strip())\n       grid.append(grid_t)\n    result = gridChallenge(grid)\n    print(result)\n\n\n","offset":88,"fileType":"python3","requestStartTime":1518004327465}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    # Complete this function\n    for grade in grades:\n        if grade >= 38:\n            print(5 - grade % 5)\n            if 5 - (grade % 5) < 3:\n                lst.\n    return grades\n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":216,"fileType":"python3","requestStartTime":1518004328790}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef journeyToMoon(n, astronaut):\n    pairs = {}\n    for pair in astronaut:\n        if pair[0] in pairs:\n            pairs[pair[0]].\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n, p = input().strip().split(' ')\n    n, p = [int(n), int(p)]\n    astronaut = []\n    for astronaut_i in range(p):\n       astronaut_t = [int(astronaut_temp) for astronaut_temp in input().strip().split(' ')]\n       astronaut.append(astronaut_t)\n    result = journeyToMoon(n, astronaut)\n    print(result)\n\n\n","offset":161,"fileType":"python3","requestStartTime":1518004361833}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef journeyToMoon(n, astronaut):\n    pairs = {}\n    for pair in astronaut:\n        if pair[0] in pairs:\n            pairs[pair[0]].append(pair[1])\n        else:\n            pairs.\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n, p = input().strip().split(' ')\n    n, p = [int(n), int(p)]\n    astronaut = []\n    for astronaut_i in range(p):\n       astronaut_t = [int(astronaut_temp) for astronaut_temp in input().strip().split(' ')]\n       astronaut.append(astronaut_t)\n    result = journeyToMoon(n, astronaut)\n    print(result)\n\n\n","offset":209,"fileType":"python3","requestStartTime":1518004372614}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef journeyToMoon(n, astronaut):\n    pairs = {}\n    for pair in astronaut:\n        if pair[0] in pairs:\n            pairs[pair[0]].append(pair[1])\n        else:\n            pairs[pair[0]].\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n, p = input().strip().split(' ')\n    n, p = [int(n), int(p)]\n    astronaut = []\n    for astronaut_i in range(p):\n       astronaut_t = [int(astronaut_temp) for astronaut_temp in input().strip().split(' ')]\n       astronaut.append(astronaut_t)\n    result = journeyToMoon(n, astronaut)\n    print(result)\n\n\n","offset":218,"fileType":"python3","requestStartTime":1518004377129}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    # Complete this function\n    lst = []\n    for grade in grades:\n        if grade >= 38:\n            if 5 - (grade % 5) < 3:\n                lst.append((int(grade/5)) * 5)\n            else:\n                lst.        \n    return lst\n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":261,"fileType":"python3","requestStartTime":1518004398565}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.\n        self.Ps = []\n        self.ps = []\n        self.K = None\n        self.k = None\n        self.Bs = []\n        self.bs = []\n        self.Qs = []\n        self.qs = []\n        self.Rs = []\n        self.rs = []\n        self.Ns = []\n        self.ns = []\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] ==\n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":86,"fileType":"python3","requestStartTime":1518004403637}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solve(grades):\n    # Complete this function\n    lst = []\n    for grade in grades:\n        if grade < 38:\n            lst.\n            if 5 - (grade % 5) < 3:\n                lst.append((int(grade/5)) * 5)\n            else:\n                lst.append(grade)        \n    return lst\n\nn = int(input().strip())\ngrades = []\ngrades_i = 0\nfor grades_i in range(n):\n   grades_t = int(input().strip())\n   grades.append(grades_t)\nresult = solve(grades)\nprint (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":155,"fileType":"python3","requestStartTime":1518004446112}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef migratoryBirds(n, ar):\n    # Complete this function\n    lookup = [0]*6\n    for i in range(1, 6):\n        lookup[i] = ar.\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = migratoryBirds(n, ar)\nprint(result)\n\n\n","offset":154,"fileType":"python3","requestStartTime":1518004453988}}
{"body": {"column":45,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]]. (i,j)\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":262,"fileType":"python3","requestStartTime":1518004476621}}
{"body": {"column":23,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    attacks = 0 \n   \n    # Complete this function\n    all_pieces = {}\n    for i in range(1,9) :\n        for j in str(board[i-1])[2:-2]:\n            if j != '#':\n                x_cord = int(str(board[i-1])[2:-2].index(j)) + 1\n                all_pieces[j] = [ x_cord , 9-i] \n    #find which pawn will be promoted\n    for key in all_pieces:\n        if key == 'P' and  [all_pieces[key][0],all_pieces[key][1] + 1] not in all_pieces.values():\n            attacker = all_pieces[key]\n            attacker[1] = 8 \n            all_pieces.\n            break\n    #king's square\n    king_place = all_pieces['k']\n    if attacker[0] == king_place[0] or attacker[1] == king_place[1]:\n        attacks += 2\n    elif abs(attacker[1] - king_place[1]) == abs(attacker[0] - king_place[0]):\n        attacks += 2\n    elif king_place in [[attacker[0]-2,attacker[1]-1],[attacker[0]+2,attacker[1]-1],[attacker[0]-1,attacker[1]-2],[attacker[0]+1,attacker[1]-2]]:\n        attacks += 1\n    else:\n        pass\n    for key in all_pieces:\n        if key in ['Q', 'R']  and (all_pieces[key][0] == king_place[0]):\n            i = 0 \n            if all_pieces[key][0] > king_place[0]:\n                while i < range(abs(all_pieces[key][0]-king_place[0])-1)  and flag == True:\n                    if [king_place[0],king_place[1]+i+1]  in all_pieces.values():\n                        flag = False\n                    else :\n                        i +=\n                if flag == True:\n                    attacks += 1\n             \n            else:\n                while i < range(abs(all_pieces[key][0]-king_place[0])-1)  and flag == True:\n                    if [king_place[0],all_pieces[key][0]+i+1]  in all_pieces.values():\n                        flag = False\n                    else :\n                        i +=\n                if flag == True:\n                    attacks += 1\n                    \n                \n                \n            attacks += 1\n        elif key = ['Q','R']  and all_pieces[key][1] == king_place[1]:\n            attacks += 1\n        elif key == ['Q','B'] and (abs(all_pieces[key][0] - king_place[1]) == abs(all_pieces[key][0] - king_place[0])):\n            attacks += 1\n    return  attacks\n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":589,"fileType":"python3","requestStartTime":1518004615098}}
{"body": {"column":29,"line":3,"wordToComplete":"","code":"\n\ntotal_nums = input()\nnums = list(map(int, input().split(\" \")))\n\n\n\n\n\n\nprint(total_nums)\nprint(type(nums[0]))\n\n\n\n","offset":53,"fileType":"python3","requestStartTime":1518004664139}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef migratoryBirds(n, ar):\n    # Complete this function\n    mostTimes = 0\n    mostCommon = -1\n    for i in range(1, 6):\n        if mostTimes < ar.\n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = migratoryBirds(n, ar)\nprint(result)\n\n\n","offset":176,"fileType":"python3","requestStartTime":1518004762726}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef super_reduced_string(s):\n    stack = []\n    if not s:\n        return 'Empty String'\n    else:\n        for c in s:\n            if stack and stack[-1] == c:\n                stack.\n        \n    \ns = input().strip()\nresult = super_reduced_string(s)\nprint(result)\n\n\n","offset":211,"fileType":"python3","requestStartTime":1518004770653}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef migratoryBirds(n, ar):\n    # Complete this function\n    mostTimes = 0\n    mostCommon = -1\n    for i in range(1, 6):\n        if mostTimes < ar.count(i):\n            mostTimes = ar.\n    \n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = migratoryBirds(n, ar)\nprint(result)\n\n\n","offset":213,"fileType":"python3","requestStartTime":1518004774787}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef super_reduced_string(s):\n    stack = []\n    if not s:\n        return 'Empty String'\n    else:\n        for c in s:\n            if stack and stack[-1] == c:\n                stack.pop()\n            else:\n                stack.\n        \n    \ns = input().strip()\nresult = super_reduced_string(s)\nprint(result)\n\n\n","offset":257,"fileType":"python3","requestStartTime":1518004798091}}
{"body": {"column":26,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n#def revisedRussianRoulette(doors):\n    # Complete this function\n\n\nif __name__ == \"__main__\":n = int(input().strip())\ndoors = list(map(int, input().strip().split(' ')))\nresult = revisedRussianRoulette(doors)\nprint(doors)\n    # print (\" \".join(map(str, result)))\n\n\n\n\n","offset":123,"fileType":"python3","requestStartTime":1518004878891}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nimport math\np = int(input().strip())\nfor a0 in range(p):\n    n = int(input().strip())\n    slef.prime(n)\n\ndef prime(n):\n    if n < 2:\n        print('Not prime')\n        return False\n    if n == 2:\n        print('Prime')\n        return True\n    else:\n        for i in range(2, math.sqrt(n)+1):\n            if n % i == 0:\n                print ('Not Prime')\n                return False\n        print ('Prime')\n        return True\n\n","offset":97,"fileType":"python3","requestStartTime":1518004915394}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nimport math\np = int(input().strip())\nfor a0 in range(p):\n    n = int(input().strip())\n    self.prime(n)\n\ndef prime(n):\n    if n < 2:\n        print('Not prime')\n        return False\n    if n == 2:\n        print('Prime')\n        return True\n    else:\n        for i in range(2, math.sqrt(n)+1):\n            if n % i == 0:\n                print ('Not Prime')\n                return False\n        print ('Prime')\n        return True\n\n","offset":97,"fileType":"python3","requestStartTime":1518004920673}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef super_reduced_string(s):\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return ''.\n        \n    \ns = input().strip()\nresult = super_reduced_string(s)\nprint(result)\n\n\n","offset":207,"fileType":"python3","requestStartTime":1518004990413}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef gridChallenge(grid):\n    sortedGrid = []\n    for row in grid:\n        sortedGrid.\n        \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    n = int(input().strip())\n    grid = []\n    grid_i = 0\n    for grid_i in range(n):\n       grid_t = str(input().strip())\n       grid.append(grid_t)\n    result = gridChallenge(grid)\n    print(result)\n\n\n","offset":115,"fileType":"python3","requestStartTime":1518005230933}}
{"body": {"column":53,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    neededDenominations=list()\n    sortedDenominations=list()\n    while len(coinDenominations)=!0:\n        sortedDenominations.append(coinDenominations.)\n    coins=0\n    for denomination in coinDenominations:\n        while coins+denomination<=monetaryValue:\n            coins+=denomination\n            neededDenominations.append(denomination)\n            if coins==monetaryValue:\n                return neededDenominations\n    return neededDenominations.append(0)\n\n            \n        \n        \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":275,"fileType":"python3","requestStartTime":1518005269307}}
{"body": {"column":3,"line":3,"wordToComplete":"","code":"\nimport re\ns = input()\nre.\n\n\n","offset":27,"fileType":"python3","requestStartTime":1518005329276}}
{"body": {"column":20,"line":3,"wordToComplete":"","code":"\nimport re\ns = input()\nre.compile(\"[]\", re.)\n\n\n","offset":44,"fileType":"python3","requestStartTime":1518005340476}}
{"body": {"column":78,"line":3,"wordToComplete":"","code":"\nimport re\ns = input()\nre.compile(\"[qwrtypsdfghjklzxcvbnm][aeiou]{2,}[qwrtypsdfghjklzxcvbnm]\", re.I).\n\n\n","offset":102,"fileType":"python3","requestStartTime":1518005474016}}
{"body": {"column":21,"line":28,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            try:\n                self.occ[i+1][j+2] = '*'\n            except:\n                pass\n            try:\n                self.occ[i+2][j+1] = '*'\n            except:\n                pass\n            try:\n                self.\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":732,"fileType":"python3","requestStartTime":1518005473928}}
{"body": {"column":44,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    neededDenominations=list()\n    coins=0 \n    coinDenominations.sort()\n    denomination=coinDenomination[-1]\n    while coins+denomination<=monetaryValue:\n    for denomination in coinDenominations:\n        while coins+denomination<=monetaryValue:\n            coins+=denomination\n            neededDenominations.append(denomination)\n            if coins==monetaryValue:\n                return neededDenominations\n    return neededDenominations.append(0)\n\n            \n        \n        \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":278,"fileType":"python3","requestStartTime":1518005542976}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    neededDenominations=list()\n    coins=0 \n    coinDenominations.sort()\n    i=-1\n    while coins+coinDenominations[i]<=monetaryValue:\n        coins+=coinDenominations[i]\n        neededDenominations.\n        if coins==monetaryValue:\n            return neededDenon\n    for denomination in coinDenominations:\n        while coins+denomination<=monetaryValue:\n            coins+=denomination\n            neededDenominations.append(denomination)\n            if coins==monetaryValue:\n                return neededDenominations\n    return neededDenominations.append(0)\n\n            \n        \n        \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":322,"fileType":"python3","requestStartTime":1518005633284}}
{"body": {"column":22,"line":5,"wordToComplete":"","code":"\nfirst_set = set()\nsecond_set = set()\nm = int(input())\nwhile True:\n    for i in range(m):\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":90,"fileType":"python3","requestStartTime":1518005649734}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfirst_set = set()\nsecond_set = set()\nm = int(input())\nwhile True:\n    for i in range(m):\n        set.\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":103,"fileType":"python3","requestStartTime":1518005654801}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nfirst_set = set()\nsecond_set = set()\nm = int(input())\nwhile True:\n    for i in range(m):\n        input().\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":107,"fileType":"python3","requestStartTime":1518005663085}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nfirst_set = []\nsecond_set = set()\nm = int(input())\nwhile True:\n    for i in range(m):\n        first.input().split()\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":102,"fileType":"python3","requestStartTime":1518005726896}}
{"body": {"column":19,"line":6,"wordToComplete":"ainput","code":"\nfirst_set = []\nsecond_set = set()\nm = int(input())\nwhile True:\n    for i in range(m):\n        first_set.ainput().split()\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":107,"fileType":"python3","requestStartTime":1518005730643}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    m=max(arr)\n    arr.remove(m)\n    print (max(arr))\n    \n    \n    \n\n\n","offset":109,"fileType":"python3","requestStartTime":1518005680232}}
{"body": {"column":21,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <=7 and j-2 >= 0:\n                self.\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":633,"fileType":"python3","requestStartTime":1518005808908}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"\nfirst_set = set()\nsecond_set = set()\nfirst_list = []\nsecond_list = set()\nm = int(input())\nwhile True:\n    try:\n    for i in range(m):\n        first_list.append(input().split())\n    except EOFError:\n        pass\nn = int(input())\nwhile True:\n    try:\n    for i in range(n):\n        second_list.append(input().split())\n    except EOFError:\n        pass\nfirst_set.\n\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":362,"fileType":"python3","requestStartTime":1518005920975}}
{"body": {"column":21,"line":28,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":871,"fileType":"python3","requestStartTime":1518005929333}}
{"body": {"column":12,"line":20,"wordToComplete":"a","code":"\nfirst_set = set()\nsecond_set = set()\nfirst_list = []\nsecond_list = set()\nm = int(input())\nwhile True:\n    try:\n    for i in range(m):\n        first_list.append(input().split())\n    except EOFError:\n        pass\nn = int(input())\nwhile True:\n    try:\n    for i in range(n):\n        second_list.append(input().split())\n    except EOFError:\n        pass\nfirst_set.add(first_list)\nsecond_set.a\n\nprint(set([input().split() for i in range(m)]))\nfirst_set.add([input().split() for i in range(m)])\nn = int(input())\nsecond_set.add([input().split() for i in range(n)])\nfinal_set = (first_set.difference(second_set)).union(second_set.difference(first_set))\nprint(sorted(final_set, sep=\"\\n\", key=int))\n\n","offset":390,"fileType":"python3","requestStartTime":1518005933850}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\nX=int(input())\nS=list(map(int, input().))\n\n","offset":41,"fileType":"python3","requestStartTime":1518005937158}}
{"body": {"column":33,"line":29,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":924,"fileType":"python3","requestStartTime":1518005954662}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":990,"fileType":"python3","requestStartTime":1518005972786}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >= 0 and j+1 <= 7:\n                self.occ[i-2][j+1] = '*'\n            if i-2 >\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1069,"fileType":"python3","requestStartTime":1518006006884}}
{"body": {"column":21,"line":34,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >= 0 and j+1 <= 7:\n                self.occ[i-2][j+1] = '*'\n            if i-2 >= 0 and j-1 >= 0:\n                self.\n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1108,"fileType":"python3","requestStartTime":1518006014117}}
{"body": {"column":21,"line":73,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    '''\n    min =scores[0]\n    i=0;\n    for s in scores:\n        if min > s:\n            min =s\n        else:\n            del scores[i]\n        i+=1\n    \n    \n    scores = list(reversed(scores))\n    '''\n    '''\n    s2 = sorted(set(scores))\n    \n    '''\n    '''\n    prev = 0\n    s3=[]\n    c=0\n    for i in reversed(scores):\n        if i>c:\n            c = i;\n            s3.append(c)\n            \n    result=[]\n    n = len(s3) + 1\n    for a in alice:      \n        for i in s3[prev:]:\n            if a >= i:\n                prev+=1\n            else:\n                result.append(n-prev)\n                break;\n                \n        if (prev + 1)== n:\n            result.append(1)\n                \n    return result\n    '''\n    result=[]\n    pos=0\n    sc=-1\n    n=1\n    \n    #l = reversed(scores)\n    length=len(scores)\n    prev=length -1\n    for a in alice:\n        \n        print(scores[prev::-1])\n        for s in scores[prev::-1]:\n            if sc==s:\n                prev-=1\n                continue\n                \n            n+=1\n            sc=s\n            if a<s:\n                result.append(-pos)\n                break;\n            else:\n                pos+=1\n                prev-=1\n                \n            if prev == -1:\n                rest.\n    print(prev)         \n    print(result)   \n    result = [r+n for r in result]     \n    return result\n                \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":1338,"fileType":"python3","requestStartTime":1518006096580}}
{"body": {"column":23,"line":73,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    '''\n    min =scores[0]\n    i=0;\n    for s in scores:\n        if min > s:\n            min =s\n        else:\n            del scores[i]\n        i+=1\n    \n    \n    scores = list(reversed(scores))\n    '''\n    '''\n    s2 = sorted(set(scores))\n    \n    '''\n    '''\n    prev = 0\n    s3=[]\n    c=0\n    for i in reversed(scores):\n        if i>c:\n            c = i;\n            s3.append(c)\n            \n    result=[]\n    n = len(s3) + 1\n    for a in alice:      \n        for i in s3[prev:]:\n            if a >= i:\n                prev+=1\n            else:\n                result.append(n-prev)\n                break;\n                \n        if (prev + 1)== n:\n            result.append(1)\n                \n    return result\n    '''\n    result=[]\n    pos=0\n    sc=-1\n    n=1\n    \n    #l = reversed(scores)\n    length=len(scores)\n    prev=length -1\n    for a in alice:\n        \n        print(scores[prev::-1])\n        for s in scores[prev::-1]:\n            if sc==s:\n                prev-=1\n                continue\n                \n            n+=1\n            sc=s\n            if a<s:\n                result.append(-pos)\n                break;\n            else:\n                pos+=1\n                prev-=1\n                \n            if prev == -1:\n                result.\n    print(prev)         \n    print(result)   \n    result = [r+n for r in result]     \n    return result\n                \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":1340,"fileType":"python3","requestStartTime":1518006097849}}
{"body": {"column":53,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    neededDenominations=list()\n    coins=0 \n    coinDenominations.sort()\n    i=len(coinDenominations)-1\n    while True:\n        if coins+coinDenominations[i]<=monetaryValue:\n        coins+=coinDenominations[i]\n        neededDenominations.append(coinDenominations[i])\n        print (neededDenominations)\n        if coins==monetaryValue:\n            return neededDenominations\n        \n    neededDenominations=list()\n    return neededDenominations.append(0)\n\n#    for denomination in coinDenominations:\n #       while coins+denomination<=monetaryValue:\n  #          coins+=denomination\n   #         neededDenominations.append(denomination)\n    #        if coins==monetaryValue:\n     #           return neededDenominations\n    #return neededDenominations.append(0)\n\n            \n        \n        \n        \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":296,"fileType":"python3","requestStartTime":1518006205718}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nfrom collections import Counter\n\nX=int(input())\nS=Counter(list(map(int, input().split(' '))))\nN=int(input())\nmoney=0\n\nfor i in range(N):\n    line=input().\n\n\n\n","offset":156,"fileType":"python3","requestStartTime":1518006300582}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nfrom collections import Counter\n\nX=int(input())\nS=Counter(list(map(int, input().split(' '))))\nN=int(input())\nmoney=0\n\nfor i in range(N):\n    line=map(int, input().split(' '))\n    if line[0] in S.\n\n\n\n","offset":197,"fileType":"python3","requestStartTime":1518006414152}}
{"body": {"column":23,"line":61,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    '''\n    min =scores[0]\n    i=0;\n    for s in scores:\n        if min > s:\n            min =s\n        else:\n            del scores[i]\n        i+=1\n    \n    \n    scores = list(reversed(scores))\n    '''\n    '''\n    s2 = sorted(set(scores))\n    \n    '''\n    '''\n    prev = 0\n    s3=[]\n    c=0\n    for i in reversed(scores):\n        if i>c:\n            c = i;\n            s3.append(c)\n            \n    result=[]\n    n = len(s3) + 1\n    for a in alice:      \n        for i in s3[prev:]:\n            if a >= i:\n                prev+=1\n            else:\n                result.append(n-prev)\n                break;\n                \n        if (prev + 1)== n:\n            result.append(1)\n                \n    return result\n    '''\n    result=[]\n    pos=0\n    sc=-1\n    n=1\n    \n    #l = reversed(scores)\n    length=len(scores)\n    prev=length -1\n    for a in alice:\n        for s in scores[prev::-1]:\n            if a>=s:\n                pos+=1\n                prev-=1\n            else:\n                restul.\n                \n      \n    result = [r+length-1 for r in result]     \n    return result\n                \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":1075,"fileType":"python3","requestStartTime":1518006492178}}
{"body": {"column":24,"line":61,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    '''\n    min =scores[0]\n    i=0;\n    for s in scores:\n        if min > s:\n            min =s\n        else:\n            del scores[i]\n        i+=1\n    \n    \n    scores = list(reversed(scores))\n    '''\n    '''\n    s2 = sorted(set(scores))\n    \n    '''\n    '''\n    prev = 0\n    s3=[]\n    c=0\n    for i in reversed(scores):\n        if i>c:\n            c = i;\n            s3.append(c)\n            \n    result=[]\n    n = len(s3) + 1\n    for a in alice:      \n        for i in s3[prev:]:\n            if a >= i:\n                prev+=1\n            else:\n                result.append(n-prev)\n                break;\n                \n        if (prev + 1)== n:\n            result.append(1)\n                \n    return result\n    '''\n    result=[]\n    pos=0\n    sc=-1\n    n=1\n    \n    #l = reversed(scores)\n    length=len(scores)\n    prev=length -1\n    for a in alice:\n        for s in scores[prev::-1]:\n            if a>=s:\n                pos+=1\n                prev-=1\n            else:\n                restult.\n                \n      \n    result = [r+length-1 for r in result]     \n    return result\n                \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":1076,"fileType":"python3","requestStartTime":1518006493108}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    for _ in range(N):\n        s = input()\n        if s.\n\n","offset":106,"fileType":"python3","requestStartTime":1518006559248}}
{"body": {"column":21,"line":57,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >= 0 and j+1 <= 7:\n                self.occ[i-2][j+1] = '*'\n            if i-2 >= 0 and j-1 >= 0:\n                self.occ[i-2][j-1] = '*'\n            return\n        if c == 'R':\n            k = 1\n            while i+k <= 7:\n                self.occ[i+k][j] = '*'\n                if self.board[i+k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0:\n                self.occ[i-k][j] = '*'\n                if self.board[i-k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while j+k <= 7:\n                self.occ[i][j+k] = '*'\n                if self.board[i][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while j-k >= 0:\n                self.\n                \n            \n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1775,"fileType":"python3","requestStartTime":1518006586921}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    for _ in range(N):\n        s = input()\n        s1 = s.\n\n","offset":108,"fileType":"python3","requestStartTime":1518006639502}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\nfrom collections import Counter\n\nX=int(input())\nS=Counter(list(map(int, input().split(' '))))\nN=int(input())\nmoney=0\nkeys=list(S.)\n\nfor i in range(N):\n    line=list(map(int, input().split(' ')))\n    if line[0] in S.keys:\n        if S[line[0]]>0:\n            money+=line[1]\n            S[line[0]]-=1\nprint(money)\n\n\n","offset":131,"fileType":"python3","requestStartTime":1518006656034}}
{"body": {"column":27,"line":55,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef isDiagonalCheck(board, coordP, coordK) :\n    if abs(coordP[0] - coordK[0]) != abs(coordP[1] - coordK[1]) :\n        return False\n    dir = 1 if coordP[1] < coordK[1] else -1\n    for i in range(1, coordK[0]) :\n        if board[i][coordP[1]+dir*i] != '#' :\n            return False\n    return True\n    \ndef isStraightCheck(board, coordP, coordK) :\n    if coordK[0] != coordP[0] and coordK[1] != coordP[1] :\n        return False\n    if coordK[1] == coordP[1] :\n        for i in range(1, coordK[0]) :\n            if board[i][coordK[1]] != '#' :\n                return False\n    else :\n        if coordK[1] < coordP[1] :\n            r = range(coordK[1]+1, coordP[1])\n        else :\n            r = range(coordP[1]+1, coordK[1])\n        for i in r :\n            if board[0][i] != '#' :\n                return False\n    return True\n\ndef isKnightCheck(board, coordP, coordK) :\n    dist = (abs(coordP[0]-coordK[0]), abs(coordP[1]-coordK[1]))\n    if sum(dist) != 3:\n        return False\n    return dist[0] == 1 or dist[1] == 1\n\ndef waysToGiveACheck(board):\n    coordP = (-1, -1)\n    coordK = (-1, -1)\n    pieces = list()\n    for i in range(0, 8) :\n        if board[1][i] == 'P' and board[0][i] == '#' :\n            coordP = (0, i)\n        if 'k' in board[i] :\n            coordK = (i, board[i].index('k'))\n        for j in range(0, 8) :\n            if (j != 1 or i != coordP[1]) and board[j][i].islower() and board[j][i] != '#' :\n                pieces.append((board[j][i], (j, i)))\n    \n    board[1][coordP[1]] = '#'\n    board[coordK[10]][coordK[1]] = '#'\n    boardStat = [[False]*8]*8\n    \n    for piece in pieces :\n        if piece[0] == '' :\n    \n    sol = 0\n    if isDiagonalCheck(board, coordP, coordK) :\n        sol = 2\n    if isStraightCheck(board, coordP, coordK) :\n        if sol == 2 :\n            sol = 3\n        else :\n            sol = 2\n    if isKnightCheck(board, coordP, coordK) :\n        sol = sol + 1\n    \n    return sol\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip()]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1668,"fileType":"python3","requestStartTime":1518006662573}}
{"body": {"column":19,"line":69,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef climbingLeaderboard(scores, alice):\n    '''\n    min =scores[0]\n    i=0;\n    for s in scores:\n        if min > s:\n            min =s\n        else:\n            del scores[i]\n        i+=1\n    \n    \n    scores = list(reversed(scores))\n    '''\n    '''\n    s2 = sorted(set(scores))\n    \n    '''\n    '''\n    prev = 0\n    s3=[]\n    c=0\n    for i in reversed(scores):\n        if i>c:\n            c = i;\n            s3.append(c)\n            \n    result=[]\n    n = len(s3) + 1\n    for a in alice:      \n        for i in s3[prev:]:\n            if a >= i:\n                prev+=1\n            else:\n                result.append(n-prev)\n                break;\n                \n        if (prev + 1)== n:\n            result.append(1)\n                \n    return result\n    '''\n    result=[]\n    counter= len(scores) -1\n    distinct_socres = 0\n    previous_score =-1\n    \n   \n    for a in alice:\n        for s in scores[counter::-1]:\n            if s == previous_socre:\n                counter-=1\n                continue;\n            \n            previous_score = s\n            disticnt_socres +=1\n            \n            if a>=s:\n                pos+=1\n                prev-=1\n            else:\n                restult.append(-pos)\n                \n        if counter == -1:\n            resutl.\n    result = [r+length-1 for r in result]     \n    return result\n                \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    scores = list(map(int, input().strip().split(' ')))\n    m = int(input().strip())\n    alice = list(map(int, input().strip().split(' ')))\n    result = climbingLeaderboard(scores, alice)\n    print (\"\\n\".join(map(str, result)))\n\n\n\n\n","offset":1315,"fileType":"python3","requestStartTime":1518006714645}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nfrom collections import defaultdict\ndef sockMerchant(n, ar):\n    # Complete this function\n    count = 0\n    pairCount = defaultdict(int)\n    for i in ar:\n        pairCount[i] += 1\n    for key in pairCount:\n        if pairCount[key] > 2 == 0:\n            count += int(pairCount[key] / 2)\n    return count\n\nn = int(input().strip())\nar = list(map(int, input().strip().split(' ')))\nresult = sockMerchant(n, ar)\nprint(result)\n\n\n","offset":262,"fileType":"python3","requestStartTime":1518006729801}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.\n\n","offset":174,"fileType":"python3","requestStartTime":1518006739056}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\t# Add your code here\n    def __init__(self,a):\n        self.\n# End of Difference class\n\n_ = input()\na = [int(e) for e in input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint(d.maximumDifference)\n","offset":135,"fileType":"python3","requestStartTime":1518006778449}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.insert(i,e)\n        elif s1[0] == 'print':\n            print(L)\n        elif s1[0] == 'remove':\n            L.\n\n","offset":284,"fileType":"python3","requestStartTime":1518006800366}}
{"body": {"column":16,"line":12,"wordToComplete":"re","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.insert(i,e)\n        elif s1[0] == 'print':\n            print(L)\n        elif s1[0] == 'remove':\n            L.re\n\n","offset":286,"fileType":"python3","requestStartTime":1518006803143}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\t# Add your code here\n    def __init__(self,a):\n        self.elements=a\n        sefl.\n    def computeDifference(self)\n# End of Difference class\n\n_ = input()\na = [int(e) for e in input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint(d.maximumDifference)\n","offset":159,"fileType":"python3","requestStartTime":1518006808972}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\t# Add your code here\n    def __init__(self,a):\n        self.elements=a\n        self.maximumDifference=0\n    def computeDifference(self):\n        max=-10**14\n        min=10**14\n        for i in self.\n# End of Difference class\n\n_ = input()\na = [int(e) for e in input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint(d.maximumDifference)\n","offset":273,"fileType":"python3","requestStartTime":1518006848097}}
{"body": {"column":25,"line":40,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef isDiagonalCheck(board, coordP, coordK) :\n    if abs(coordP[0] - coordK[0]) != abs(coordP[1] - coordK[1]) :\n        return False\n    dir = 1 if coordP[1] < coordK[1] else -1\n    for i in range(1, coordK[0]) :\n        if board[i][coordP[1]+dir*i] != '#' :\n            return False\n    return True\n    \ndef isStraightCheck(board, coordP, coordK) :\n    if coordK[0] != coordP[0] and coordK[1] != coordP[1] :\n        return False\n    if coordK[1] == coordP[1] :\n        for i in range(1, coordK[0]) :\n            if board[i][coordK[1]] != '#' :\n                return False\n    else :\n        if coordK[1] < coordP[1] :\n            r = range(coordK[1]+1, coordP[1])\n        else :\n            r = range(coordP[1]+1, coordK[1])\n        for i in r :\n            if board[0][i] != '#' :\n                return False\n    return True\n\ndef isKnightCheck(board, coordP, coordK) :\n    dist = (abs(coordP[0]-coordK[0]), abs(coordP[1]-coordK[1]))\n    if sum(dist) != 3:\n        return False\n    return dist[0] == 1 or dist[1] == 1\n\ndef solveK(board, boardStat, coord) :\n    coords = [(coord[0]+1, coord[1]), (coord[0]-1, coord[1]), (coord[0], coord[1]+1), (coord[0], coord[1]-1)]\n    \ndef isCoordValid(coord) :\ndef waysToGiveACheck(board):\n    coordP = (-1, -1)\n    coordK = (-1, -1)\n    pieces = list()\n    for i in range(0, 8) :\n        if board[1][i] == 'P' and board[0][i] == '#' :\n            coordP = (0, i)\n        if 'k' in board[i] :\n            coordK = (i, board[i].index('k'))\n        for j in range(0, 8) :\n            if (j != 1 or i != coordP[1]) and board[j][i].islower() and board[j][i] != '#' :\n                pieces.append((board[j][i], (j, i)))\n    \n    board[1][coordP[1]] = '#'\n    board[coordK[10]][coordK[1]] = '#'\n    boardStat = [[False]*8]*8\n    \n    for piece in pieces :\n        if piece[0] == 'k' :\n        if piece[0] == 'q' :\n        if piece[0] == 'n' :\n        if piece[0] == 'b' :\n        if piece[0] == 'r' :\n        if piece[0] == 'p' :\n    \n    sol = 0\n    if isDiagonalCheck(board, coordP, coordK) :\n        sol = 2\n    if isStraightCheck(board, coordP, coordK) :\n        if sol == 2 :\n            sol = 3\n        else :\n            sol = 2\n    if isKnightCheck(board, coordP, coordK) :\n        sol = sol + 1\n    \n    return sol\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip()]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1229,"fileType":"python3","requestStartTime":1518006859808}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.insert(s1[1], s1[2])\n        elif s1[0] == 'print':\n            print(L)\n        elif s1[0] == 'remove':\n            L.remove(s1[1])\n        elif s1[0] == 'append':\n            L.\n\n","offset":353,"fileType":"python3","requestStartTime":1518006865223}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\t# Add your code here\n    def __init__(self,a):\n        self.elements=a\n        self.maximumDifference=0\n    def computeDifference(self):\n        maxe=-10**14\n        mine=10**14\n        for i in self.elements:\n            if i < mine:\n                mine=i\n            if i >maxe:\n                maxe=0\n        self. \n# End of Difference class\n\n_ = input()\na = [int(e) for e in input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint(d.maximumDifference)\n","offset":393,"fileType":"python3","requestStartTime":1518006879163}}
{"body": {"column":24,"line":81,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >= 0 and j+1 <= 7:\n                self.occ[i-2][j+1] = '*'\n            if i-2 >= 0 and j-1 >= 0:\n                self.occ[i-2][j-1] = '*'\n            return\n        if c == 'R':\n            k = 1\n            while i+k <= 7:\n                self.occ[i+k][j] = '*'\n                if self.board[i+k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0:\n                self.occ[i-k][j] = '*'\n                if self.board[i-k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while j+k <= 7:\n                self.occ[i][j+k] = '*'\n                if self.board[i][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while j-k >= 0:\n                self.occ[i][j-k] = '*'\n                if self.board[i][j-k] != '#':\n                    break\n                k += 1\n            return\n        if c == 'B':\n            k = 1\n            while i+k <= 7 and j+k <= 7:\n                self.occ[i+k][j+k] = '*'\n                if self.board[i+k][j+k] != '#':\n                    break\n            k = 1\n            while i-k >= 0 and j-k >= 0:\n                self.occ[i-k][j-k] = '*'\n                if self.board[i-k][j-k] != '#':\n                    break\n            k = 1\n            while i-k >= 0 and j+k <= 7:\n                self.occ[i-k][j+k] = '*'\n                if self.board[i-k][j+k] != '#':\n                    break\n            k = 1\n            while i+k <= 7 and j-k >= 0:\n                self.occ[i+k][j-k] = '*'\n                if self.\n                \n            \n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2574,"fileType":"python3","requestStartTime":1518007021772}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if (year%4)==0:\n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":90,"fileType":"python3","requestStartTime":1518010737853}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.insert(s1[1], s1[2])\n        elif s1[0] == 'print':\n            print(L)\n        elif s1[0] == 'remove':\n            L.remove(s1[1])\n        elif s1[0] == 'append':\n            L.append[s1[1]]\n        elif s1[0] == 'sort':\n            L.\n\n","offset":411,"fileType":"python3","requestStartTime":1518007056770}}
{"body": {"column":14,"line":18,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.insert(s1[1], s1[2])\n        elif s1[0] == 'print':\n            print(L)\n        elif s1[0] == 'remove':\n            L.remove(s1[1])\n        elif s1[0] == 'append':\n            L.append(s1[1])\n        elif s1[0] == 'sort':\n            L.sort()\n        elif s1[0] == 'pop':\n            L.\n\n","offset":461,"fileType":"python3","requestStartTime":1518007090566}}
{"body": {"column":29,"line":6,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if (year%4)==0:\n        if not (year%100)==0:\n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":120,"fileType":"python3","requestStartTime":1518010787210}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for _ in range(N):\n        s = input()\n        s1 = s.split[' ']\n        if s1[0] == 'insert':\n            L.insert(s1[1], s1[2])\n        elif s1[0] == 'print':\n            print(L)\n        elif s1[0] == 'remove':\n            L.remove(s1[1])\n        elif s1[0] == 'append':\n            L.append(s1[1])\n        elif s1[0] == 'sort':\n            L.sort()\n        elif s1[0] == 'pop':\n            L.pop()\n        elif s1[0] == 'reverse':\n            L.\n\n","offset":514,"fileType":"python3","requestStartTime":1518007111914}}
{"body": {"column":22,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nx,y = int(map(input().))\n\n\n","offset":50,"fileType":"python3","requestStartTime":1518007188931}}
{"body": {"column":28,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nx,y = int(map(input().strip.))\n\n\n","offset":56,"fileType":"python3","requestStartTime":1518007193155}}
{"body": {"column":21,"line":18,"wordToComplete":"","code":"\nimport heapq\n\ndef merge(a, b):\n    #a, b = sorted([a, b])\n    return a + 2*b\n\nn, m = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\nc = 0\nwhile True:\n    a = sorted(a)\n    if min(a) >= m:\n        print(c)\n        break\n    if len(a) == 1:\n        print(-1)\n        break\n    a = [merge(heapq.] + a[2:]\n    c += 1\n\n","offset":319,"fileType":"python3","requestStartTime":1518007364991}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"\n\ntotal_num = input()\ntotal = int( total_num )\nnums = list(map(float, input().split(\" \")))\n\n#Mean\nmean = sum(nums)/total\nprint(mean)\n\n#Median\nnums = sorted(nums)\n\nif total%2 != 0:\n    median = nums[ (total-1)/2 ]\nelse:\n    median = ( ( nums[(total//2)]+nums[(total//2)-1] )/2 )\n    \nprint(median)\n\n#Mode\nmode = max(nums, key=nums.)\nprint(mode)\n\n\n\n#print(total)\n#print(nums[5])\n\n\n\n","offset":331,"fileType":"python3","requestStartTime":1518007404777}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\nimport heapq\n\ndef merge(a, b):\n    #a, b = sorted([a, b])\n    return a + 2*b\n\nn, m = (int(i) for i in input().split())\na = heapq.int(i) for i in input().split()]\nc = 0\nwhile True:\n    a = sorted(a)\n    if min(a) >= m:\n        print(c)\n        break\n    if len(a) == 1:\n        print(-1)\n        break\n    a = [merge(heapq.nsmallest(2, a)] + a[2:]\n    c += 1\n\n","offset":131,"fileType":"python3","requestStartTime":1518007487550}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nimport heapq\n\ndef merge(a, b):\n    #a, b = sorted([a, b])\n    return a + 2*b\n\nn, m = (int(i) for i in input().split())\na = heapq.heapify([int(i) for i in input().split()])\nc = 0\nwhile True:\n    mi = heapq.\n    if min(a) >= m:\n        print(c)\n        break\n    if len(a) == 1:\n        print(-1)\n        break\n    c += 1\n\n","offset":207,"fileType":"python3","requestStartTime":1518007548634}}
{"body": {"column":17,"line":91,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.ps = {}\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] != '#':\n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >= 0 and j+1 <= 7:\n                self.occ[i-2][j+1] = '*'\n            if i-2 >= 0 and j-1 >= 0:\n                self.occ[i-2][j-1] = '*'\n            return\n        if c == 'R':\n            k = 1\n            while i+k <= 7:\n                self.occ[i+k][j] = '*'\n                if self.board[i+k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0:\n                self.occ[i-k][j] = '*'\n                if self.board[i-k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while j+k <= 7:\n                self.occ[i][j+k] = '*'\n                if self.board[i][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while j-k >= 0:\n                self.occ[i][j-k] = '*'\n                if self.board[i][j-k] != '#':\n                    break\n                k += 1\n            return\n        if c == 'B':\n            k = 1\n            while i+k <= 7 and j+k <= 7:\n                self.occ[i+k][j+k] = '*'\n                if self.board[i+k][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0 and j-k >= 0:\n                self.occ[i-k][j-k] = '*'\n                if self.board[i-k][j-k] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0 and j+k <= 7:\n                self.occ[i-k][j+k] = '*'\n                if self.board[i-k][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while i+k <= 7 and j-k >= 0:\n                self.occ[i+k][j-k] = '*'\n                if self.board[i-k][j+k] != '#':\n                    break\n                k += 1\n        if c == 'Q':\n            self.query('R',i,j)\n            self.query('B',i,j)\n        if c == 'K':\n            self.\n            \n            \n                \n            \n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2839,"fileType":"python3","requestStartTime":1518007601213}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\nimport heapq\n\ndef merge(l, mi):\n    mi2 = heapq.\n    return a + 2*b\n\nn, m = (int(i) for i in input().split())\na = heapq.heapify([int(i) for i in input().split()])\nc = 0\nwhile True:\n    mi = heapq.heappop(a)\n    if mi >= m:\n        print(c)\n        break\n    if len(a) == 1:\n        print(-1)\n        break\n    merge(a, mi)\n    c += 1\n\n","offset":50,"fileType":"python3","requestStartTime":1518007608407}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nimport heapq\n\ndef merge(l, mi):\n    mi2 = heapq.heappop(l)\n    return heapq.\n\nn, m = (int(i) for i in input().split())\na = heapq.heapify([int(i) for i in input().split()])\nc = 0\nwhile True:\n    mi = heapq.heappop(a)\n    if mi >= m:\n        print(c)\n        break\n    if len(a) == 1:\n        print(-1)\n        break\n    merge(a, mi)\n    c += 1\n\n","offset":78,"fileType":"python3","requestStartTime":1518007620026}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\nimport heapq\n\ndef merge(l, mi):\n    mi2 = heapq.heappop(l)\n    heapq.\n    return heapq.heappush\n\nn, m = (int(i) for i in input().split())\na = heapq.heapify([int(i) for i in input().split()])\nc = 0\nwhile True:\n    mi = heapq.heappop(a)\n    if mi >= m:\n        print(c)\n        break\n    if len(a) == 1:\n        print(-1)\n        break\n    merge(a, mi)\n    c += 1\n\n","offset":71,"fileType":"python3","requestStartTime":1518007661611}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy\n\nx, y = map(int, input().split())\n\nA = numyp.input().strip().split(' ')\n\nB = input().strip().split(' ')\n\n\n\n\n","offset":72,"fileType":"python3","requestStartTime":1518007682229}}
{"body": {"column":47,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    print(board)\n    pawns = [i for i, ch in enumerate(board[7].) if ch == 'P']\n    print(pawns)\n    return 0\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":123,"fileType":"python3","requestStartTime":1518007817971}}
{"body": {"column":19,"line":5,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if (year%4)==0: \n        if not (year%100)==0: \n            leap = True\n    if (year%400)==0:\n        leap = True\n            \n    return leap\nyear = int(input())\nprint(is_leap(year))\n","offset":90,"fileType":"python3","requestStartTime":1518011632651}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"import numpy\nimport numpy\n\nx, y = map(int, input().split())\n\nA = input().strip().split(' ')\nB = input().strip().split(' ')\n\na = numpy.array(A, int)\nb = numpy.array(B, int)\n\nprint(numpy.(a))\n\n\n\n\n\n\n","offset":186,"fileType":"python3","requestStartTime":1518008039710}}
{"body": {"column":54,"line":114,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solveDiag(board, boardStat, coord) :\n    c = (coord[0]+1, coord[1]+1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]+1, c[1]+1)\n    c = (coord[0]+1, coord[1]-1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]+1, c[1]-1)\n    c = (coord[0]-1, coord[1]+1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]-1, c[1]+1)\n    c = (coord[0]-1, coord[1]-1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]-1, c[1]-1)\n    \ndef solveStraight(board, boardStat, coord) :\n    for i in range(coord[0]+1, 8) :\n        c = (i, coord[1])\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n    for i in range(coord[0]-1, 0, -1) :\n        c = (i, coord[1])\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n    for i in range(coord[1]+1, 8) :\n        c = (coord[0], i)\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n    for i in range(coord[1]-1, 0, -1) :\n        c = (coord[0], i)\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n\ndef solveB(board, boardStat, coord) :\n    solveDiag(board, boardStat, coord)\n    \ndef solveR(board, boardStat, coord) :\n    solveStraight(board, boardStat, coord)\n    \ndef solveQ(board, boardStat, coord) :\n    solveStraight(board, boardStat, coord)\n    solveDiag(board, boardStat, coord)\n\ndef solveN(board, boardStat, coord) :\n    coords = [(coord[0]+1, coord[1]+2), (coord[0]+1, coord[1]-2), \n              (coord[0]-1, coord[1]+2), (coord[0]-1, coord[1]-2), \n              (coord[0]+2, coord[1]+1), (coord[0]+2, coord[1]-1), \n              (coord[0]-2, coord[1]+1), (coord[0]-2, coord[1]-1)]\n    for c in coords:\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n    \ndef solveK(board, boardStat, coord) :\n    coords = [(coord[0]-1, coord[1]-1), (coord[0]-1, coord[1]+1)]\n    for c in coords:\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            \ndef solveP(board, boardStat, coord) :\n    coords = [(coord[0]+1, coord[1]), (coord[0]-1, coord[1]), (coord[0], coord[1]+1), (coord[0], coord[1]-1)]\n    for c in coords:\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            \ndef isCoordValid(board, coord) :\n    return coord[0] >= 0 and coord[0] < 8 and coord[1] >= 0 and coord[1] < 8 and board[coord[0]][coord[1]] == '#'\n    \ndef waysToGiveACheck(board):\n    coordP = (-1, -1)\n    coordK = (-1, -1)\n    pieces = list()\n    for i in range(0, 8) :\n        if board[1][i] == 'P' and board[0][i] == '#' :\n            coordP = (0, i)\n        if 'k' in board[i] :\n            coordK = (i, board[i].index('k'))\n        for j in range(0, 8) :\n            if (j != 1 or i != coordP[1]) and board[j][i].islower() and board[j][i] != '#' :\n                pieces.append((board[j][i], (j, i)))\n    \n    board[1][coordP[1]] = '#'\n    board[coordK[0]][coordK[1]] = '#'\n    boardStat = [[False]*8]*8\n    \n    for piece in pieces :\n        if piece[0] == 'k' :\n            solveK(board, boardStat, piece[1])\n        if piece[0] == 'q' :\n            solveQ(board, boardStat, piece[1])\n        if piece[0] == 'n' :\n            solveN(board, boardStat, piece[1])\n        if piece[0] == 'b' :\n            solveB(board, boardStat, piece[1])\n        if piece[0] == 'r' :\n            solveR(board, boardStat, piece[1])\n        if piece[0] == 'p' :\n            solveP(board, boardStat, piece[1])\n            \n    print(map(lambda x: 'x' if x else '-', boardStat).)\n    sol = 0\n    return sol\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip()]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":3821,"fileType":"python3","requestStartTime":1518008053263}}
{"body": {"column":25,"line":1,"wordToComplete":"","code":"\nn, m =  map(int, input().)\n\n","offset":27,"fileType":"python3","requestStartTime":1518008079235}}
{"body": {"column":6,"line":5,"wordToComplete":"","code":"\nfrom collections import defaultdict\nn, m =  map(int, input().split())\nd = defaultdict(list)\nfor _ in range(1, 1+n):\n    d.\n\n","offset":124,"fileType":"python3","requestStartTime":1518008138867}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn_pos = -1\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\":\n            pawn_pos = i\n            board[1][i] = \"#\"\n            board[0][i] = \"P\"\n    \n    #other rook/queen\n    rooks_pos = []\n    k_pos = -1\n    obtacles_pos = []\n    for i in range(8):\n        if board[1][i] in {\"R\", \"Q\"}:\n            rooks_pos.\n        elif board[1][i] == \"k\":\n            k_pos = i\n        elif board[1][i] != \"#\":\n            obstacle_pos.append(i)\n    #knight\n    if (pawn_pos >= 2 and board[1][pawn_pos-2] == \"k\") or (pawn_pos <= 5 and board[1][pawn_pos+2] == \"k\") or (pawn_pos >= 1 and             board[2][pawn_pos-1] == \"k\") or (pawn_pos <= 6 and board[2][pawn_pos+1] == \"k\"):\n        return 1\n    \n    #rook/queen\n    #horizontal\n    k_pos = -1\n    for i in range(8):\n        if board[0][i] == \"k\":\n            k_pos = i\n    if k_pos > -1:\n        for i in range(min(k_pos, pawn_pos) + 1, max(k_pos, pawn_pos)):\n            if board[0][i] != \"#\":\n                return 0\n        return 2\n    #vertical\n    for i in range(1, 8):\n        if board[pawn_pos][i] not in {\"k\", \"#\"}:\n            break\n        if board[pawn_pos][i] == \"k\":\n            return 2\n    \n    #bishop/queen\n    #leftdown\n    for i in range(pawn_pos-1, -1, -1):\n        if board[pawn_pos - i][i] not in {\"k\", \"#\"}:\n            break\n        if board[pawn_pos - i][i] == \"k\":\n            return 2\n    #rightdown\n    for i in range(pawn_pos+1, 8):\n        if board[i - pawn_pos][i] not in {\"k\", \"#\"}:\n            break\n        if board[i - pawn_pos][i] == \"k\":\n            return 2\n    return 0\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = list(input().strip())\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":434,"fileType":"python3","requestStartTime":1518008144535}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\nfrom collections import defaultdict\nn, m =  map(int, input().split())\nd = defaultdict(list)\nfor i in range(1, 1+n):\n    d.append[i]\nfor _ in range(m):\n    print(' '.)\n\n","offset":167,"fileType":"python3","requestStartTime":1518008168250}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pawns = [i for i, ch in enumerate(board[6]) if ch == 'P'] #return pawn indexes in row 7\n    for pawn in pawns:\n        board[6][i] = '.'\n        \n    return 0\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board = [list(input().strip())] + board\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":198,"fileType":"python3","requestStartTime":1518008174733}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pawns = [i for i, ch in enumerate(board[6]) if ch == 'P'] #return pawn indexes in row 7\n    for pawn in pawns:\n        board[6][i] = '#'\n        board[7][i] = '.'\n        \n    return 0\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board = [list(input().strip())] + board\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":224,"fileType":"python3","requestStartTime":1518008189126}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"import numpy\nimport numpy\n\nx, y = map(int, input().split())\n\nA = input().strip().split(' ')\nB = input().strip().split(' ')\n\na = numpy.array(A, int)\nb = numpy.array(B, int)\n\nc = a + b\nc = numpy.\n\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a // b)\nprint(a % b)\nprint(a ** b)\n\n\n\n\n\n\n","offset":194,"fileType":"python3","requestStartTime":1518008244459}}
{"body": {"column":53,"line":2,"wordToComplete":"You just delved into python.\"","code":"\ndef print_full_name(a, b):\n    print(\"Hello\",a,b+\"! You just delved into python.\")\nif __name__ == '__main__':\n    first_name = input()\n    last_name = input()\n    print_full_name(first_name, last_name)\n","offset":82,"fileType":"python3","requestStartTime":1518008344675}}
{"body": {"column":63,"line":2,"wordToComplete":"","code":"\nfrom collections import namedtuple\nn, col_name = int(input()), namedtuple('cls', map(str, input().))\n\n","offset":100,"fileType":"python3","requestStartTime":1518008359201}}
{"body": {"column":96,"line":114,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef solveDiag(board, boardStat, coord) :\n    c = (coord[0]+1, coord[1]+1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]+1, c[1]+1)\n    c = (coord[0]+1, coord[1]-1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]+1, c[1]-1)\n    c = (coord[0]-1, coord[1]+1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]-1, c[1]+1)\n    c = (coord[0]-1, coord[1]-1)\n    while isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            c = (c[0]-1, c[1]-1)\n    \ndef solveStraight(board, boardStat, coord) :\n    for i in range(coord[0]+1, 8) :\n        c = (i, coord[1])\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n    for i in range(coord[0]-1, 0, -1) :\n        c = (i, coord[1])\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n    for i in range(coord[1]+1, 8) :\n        c = (coord[0], i)\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n    for i in range(coord[1]-1, 0, -1) :\n        c = (coord[0], i)\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n        else :\n            break\n\ndef solveB(board, boardStat, coord) :\n    solveDiag(board, boardStat, coord)\n    \ndef solveR(board, boardStat, coord) :\n    solveStraight(board, boardStat, coord)\n    \ndef solveQ(board, boardStat, coord) :\n    solveStraight(board, boardStat, coord)\n    solveDiag(board, boardStat, coord)\n\ndef solveN(board, boardStat, coord) :\n    coords = [(coord[0]+1, coord[1]+2), (coord[0]+1, coord[1]-2), \n              (coord[0]-1, coord[1]+2), (coord[0]-1, coord[1]-2), \n              (coord[0]+2, coord[1]+1), (coord[0]+2, coord[1]-1), \n              (coord[0]-2, coord[1]+1), (coord[0]-2, coord[1]-1)]\n    for c in coords:\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n    \ndef solveK(board, boardStat, coord) :\n    coords = [(coord[0]-1, coord[1]-1), (coord[0]-1, coord[1]+1)]\n    for c in coords:\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            \ndef solveP(board, boardStat, coord) :\n    coords = [(coord[0]+1, coord[1]), (coord[0]-1, coord[1]), (coord[0], coord[1]+1), (coord[0], coord[1]-1)]\n    for c in coords:\n        if isCoordValid(board, c) :\n            boardStat[c[0]][c[1]] = True\n            \ndef isCoordValid(board, coord) :\n    return coord[0] >= 0 and coord[0] < 8 and coord[1] >= 0 and coord[1] < 8 and board[coord[0]][coord[1]] == '#'\n    \ndef waysToGiveACheck(board):\n    coordP = (-1, -1)\n    coordK = (-1, -1)\n    pieces = list()\n    for i in range(0, 8) :\n        if board[1][i] == 'P' and board[0][i] == '#' :\n            coordP = (0, i)\n        if 'k' in board[i] :\n            coordK = (i, board[i].index('k'))\n        for j in range(0, 8) :\n            if (j != 1 or i != coordP[1]) and board[j][i].islower() and board[j][i] != '#' :\n                pieces.append((board[j][i], (j, i)))\n    \n    board[1][coordP[1]] = '#'\n    board[coordK[0]][coordK[1]] = '#'\n    boardStat = [[False]*8]*8\n    \n    for piece in pieces :\n        if piece[0] == 'k' :\n            solveK(board, boardStat, piece[1])\n        if piece[0] == 'q' :\n            solveQ(board, boardStat, piece[1])\n        if piece[0] == 'n' :\n            solveN(board, boardStat, piece[1])\n        if piece[0] == 'b' :\n            solveB(board, boardStat, piece[1])\n        if piece[0] == 'r' :\n            solveR(board, boardStat, piece[1])\n        if piece[0] == 'p' :\n            solveP(board, boardStat, piece[1])\n            \n    print('\\n'.join(list(map(lambda x: ''.join(map(lambda y: 'x' if y else '-', x)), boardStat[:]))))\n    sol = 0\n    return sol\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip()]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":3863,"fileType":"python3","requestStartTime":1518008366769}}
{"body": {"column":30,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy\n\nN, M = list(map(int, input().split()))\n\na = numpy.array(input().strip.split() for _ in range(N), int)\nb = numpy.array(input().split() for _ in range(M), int)\n\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a // b)\nprint(a % b)\nprint(a ** b)\n\n\n\n\n\n\n","offset":98,"fileType":"python3","requestStartTime":1518008578745}}
{"body": {"column":30,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\n\nN, M = list(map(int, input().split()))\n\na = numpy.array(input().strip.split(' ') for _ in range(N), int)\nb = numpy.array(input().strip.split() for _ in range(M), int)\n\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a // b)\nprint(a % b)\nprint(a ** b)\n\n\n\n\n\n\n","offset":163,"fileType":"python3","requestStartTime":1518008586200}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for row in range(8):\n        board[row].\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().split()]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":103,"fileType":"python3","requestStartTime":1518008672177}}
{"body": {"column":20,"line":8,"wordToComplete":"Hello, World.\"","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninput_string = input()\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint('Hello, World.'\n\nf = input()\nprint(\"Hello, World.\")\n\n","offset":240,"fileType":"python3","requestStartTime":1518008758139}}
{"body": {"column":3,"line":32,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Add Celsius class implementation below.\n\nclass Celsius:\n\n\n\n    def __get__(self, obj, owner):\n\n        return self.celsius\n\n\n\n    def __set__(self, obj, value):\n\n\n        self.celsius = value\nclass Temperature:\n\n\n\n    celsius = Celsius()       \n    def __init__(self, fahrenheit):\n\n        self.celsius = fahrenheit\n        \nt1=Temperature(32)\nt1.\n# Add temperature class implementation below.        \n\n        \n'''Check the Tail section for input/output'''\nif __name__ == \"__main__\":\n    with open(os.environ['OUTPUT_PATH'], 'w') as fout:\n        res_lst = list()\n        t1 = Temperature(int(input()))\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        t1.celsius = int(input())\n        res_lst.append((t1.fahrenheit, t1.celsius))\n        fout.write(\"{}\\n{}\".format(*res_lst))\n","offset":389,"fileType":"python3","requestStartTime":1518008332390}}
{"body": {"column":37,"line":28,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    king = \n    pawns = [i for i, ch in enumerate(board[6]) if ch == 'P'] #return pawn indexes in row 7\n    for i in pawns:\n        board[6][i] = '#'\n        board[7][i] = 'X' #promoted pawn\n        \n        #knighs\n        for i,j in [(1,2),(-1,2),(2,1),(2,-1),(1,-2),(-1,-2),(-2,1),(-2,-1)]:\n            if \n        \n        board[6][i] = 'P'\n        board[7][i] = '#'\n        \n    return 0\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            row = list(input().strip())\n            if 'k' in row:\n                king_position = (row.,board_i)\n            board = [row] + board\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":689,"fileType":"python3","requestStartTime":1518008799389}}
{"body": {"column":73,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for row in range(8):\n        if \"k\" in board[row]:\n            print(\"hello\")\n            x = board[row].index(\"k\")\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split()]\n            print(board_t)\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":390,"fileType":"python3","requestStartTime":1518008893196}}
{"body": {"column":39,"line":15,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board,king):\n    pawns = [i for i, ch in enumerate(board[6]) if ch == 'P'] #return pawn indexes in row 7\n    for i in pawns:\n        board[6][i] = '#'\n        board[7][i] = 'X' #promoted pawn\n        \n        #knighs\n        for i,j in [(1,2),(-1,2),(2,1),(2,-1),(1,-2),(-1,-2),(-2,1),(-2,-1)]:\n            x = king[0] + i\n            y = king[1] + j\n            if x >= 0 and x < 8 and y >\n        \n        board[6][i] = 'P'\n        board[7][i] = '#'\n        \n    return 0\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            row = list(input().strip())\n            if 'k' in row:\n                king_position = [row.index('k'),board_i]\n            board = [row] + board\n        result = waysToGiveACheck(board,king_position)\n        print(result)\n\n\n","offset":441,"fileType":"python3","requestStartTime":1518008925742}}
{"body": {"column":35,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    for row in range(8):\n        if \"k\" in board[row]:\n            print(\"hello\")\n            x = board[row].index(\"k\")\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = list(input().)\n            print(board_t)\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":352,"fileType":"python3","requestStartTime":1518008976232}}
{"body": {"column":28,"line":204,"wordToComplete":"","code":"\nfrom collections import defaultdict as dd\n\nt = int(input())\n\nW = 'KQNBRP'\nB = 'kqnbrp'\n\ndef ok(x,y):\n    return 0<=x<8 and 0<=y<8\n\ndef parse(board):\n    P = dd(list)\n    for y in range(8):\n        for x in range(8):\n            c = board[y][x]\n            if c != '#':\n                P[c].append((x,y))\n    return P\n\ndef evalBoard(board):\n    board = [b[:] for b in board]\n    state = [b[:] for b in board]\n    P = parse(board)\n    \n    #for b in board:\n    #    print(*b)\n    #print('--------')\n    \n    for ptype in P:\n        for x,y in P[ptype]:\n            if ptype == 'P':\n                if ok(x-1,y-1):\n                    state[y-1][x-1] = 'X'\n                if ok(x+1,y-1):\n                    state[y-1][x+1] = 'X'\n            if ptype == 'R' or ptype == 'Q':\n                t = x+1\n                while ok(t,y):\n                    if board[y][t] != '#':\n                        state[y][t] = 'X'\n                        break\n                    state[y][t] = 'X'\n                    t += 1\n                t = x-1\n                while ok(t,y):\n                    if board[y][t] != '#':\n                        state[y][t] = 'X'\n                        break\n                    state[y][t] = 'X'\n                    t -= 1\n                t = y+1\n                while ok(x,t):\n                    if board[t][x] != '#':\n                        state[t][x] = 'X'\n                        break\n                    state[t][x] = 'X'\n                    t += 1\n                t = y-1\n                while ok(x,t):\n                    if board[t][x] != '#':\n                        state[t][x] = 'X'\n                        break\n                    state[t][x] = 'X'\n                    t -= 1\n            if ptype == 'B' or ptype == 'Q':\n                s = x+1\n                t = y+1\n                while ok(s,t):\n                    if board[t][s] != '#':\n                        state[t][s] = 'X'\n                        break\n                    state[t][s] = 'X'\n                    t += 1\n                    s += 1\n                s = x-1\n                t = y+1\n                while ok(s,t):\n                    if board[t][s] != '#':\n                        state[t][s] = 'X'\n                        break\n                    state[t][s] = 'X'\n                    t += 1\n                    s -= 1\n                s = x+1\n                t = y-1\n                while ok(s,t):\n                    if board[t][s] != '#':\n                        state[t][s] = 'X'\n                        break\n                    state[t][s] = 'X'\n                    t -= 1\n                    s += 1\n                s = x-1\n                t = y-1\n                while ok(s,t):\n                    if board[t][s] != '#':\n                        state[t][s] = 'X'\n                        break\n                    state[t][s] = 'X'\n                    t -= 1\n                    s -= 1\n            if ptype == 'N':\n                for dx,dy in [(2,1),(-2,1),(2,-1),(-2,-1),(1,2),(1,-2),(-1,2),(-1,-2)]:\n                    if ok(x+dx,y+dy):\n                        state[y+dy][x+dx] = 'X'\n    #print(P)\n    #for b in state:\n    #    print(*b)\n    #print('========')\n    \n    x,y = P['k'][0]\n    return state[y][x] == 'X'\n\ndef safe(x,y,board):\n    #print(x,y)\n    #for b in board:\n    #    print(*b)\n    #print('--------')\n    \n    for dx,dy in [(2,1),(-2,1),(2,-1),(-2,-1),(1,2),(1,-2),(-1,2),(-1,-2)]:\n        if ok(x+dx,y+dy) and board[y+dy][x+dx] == 'n':\n            return False\n        \n    s = x+1\n    t = y+1\n    while ok(s,t) and board[t][s]=='#':\n        s += 1\n        t += 1\n    if ok(s,t) and board[t][s] in 'qb':\n        return False\n    s = x-1\n    t = y+1\n    while ok(s,t) and board[t][s]=='#':\n        s -= 1\n        t += 1\n    if ok(s,t) and board[t][s] in 'qb':\n        return False\n    s = x+1\n    t = y-1\n    while ok(s,t) and board[t][s]=='#':\n        s += 1\n        t -= 1\n    if ok(s,t) and board[t][s] in 'qb':\n        return False\n    s = x-1\n    t = y-1\n    while ok(s,t) and board[t][s]=='#':\n        s -= 1\n        t -= 1\n    if ok(s,t) and board[t][s] in 'qb':\n        return False\n\n    s = x+0\n    t = y+1\n    while ok(s,t) and board[t][s]=='#':\n        s += 0\n        t += 1\n    if ok(s,t) and board[t][s] in 'qr':\n        return False\n    s = x+0\n    t = y-1\n    while ok(s,t) and board[t][s]=='#':\n        s += 0\n        t -= 1\n    if ok(s,t) and board[t][s] in 'qr':\n        return False\n    s = x+1\n    t = y+0\n    while ok(s,t) and board[t][s]=='#':\n        s += 1\n        t += 0\n    if ok(s,t) and board[t][s] in 'qr':\n        return False\n    s = x-1\n    t = y+0\n    while ok(s,t) and board[t][s]=='#':\n        s -= 1\n        t += 0\n    if ok(s,t) and board[t][s] in 'qr':\n        return False\n\n    if ok(x-1,y+1) and board[y+1][x-1] == 'p':\n        return False\n    if ok(x+1,y+1) and board[y+1][x+1] == 'p':\n        return False\n    return True\n\nfor _ in range(t):\n    board = []\n    for y in range(8):\n        s = input()\n        board.append(s)\n    P = parse(board)\n    \n    checks = 0\n    for x,y in P['P']:\n        if y == 1:\n            c = board[y][x]\n            tmp = [list(b) for b in board]\n            if board[0][x] == '#':\n                tmp[y][x] = '#'\n                for p in 'QRBN':\n                    tmp[0][x] = p\n                    if True:safe(*P['K'][0],tmp):\n                        checks += evalBoard(tmp)\n    print(checks)\n\n","offset":5322,"fileType":"python3","requestStartTime":1518009048424}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"\nnumber = int(input(\"\"))\nif n % 2 == 0:\n    if number < 5 and number >\n\n\n","offset":71,"fileType":"python3","requestStartTime":1518009090788}}
{"body": {"column":46,"line":4,"wordToComplete":"","code":"\nfrom collections import namedtuple\nn, columns = int(input()), namedtuple('columns', map(str, input().split()))\nfor _ in range(5):\n    MARKS, CLASS, NAME, ID = map(str, input().)\n\n","offset":178,"fileType":"python3","requestStartTime":1518009099542}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\n#!/bin/python3\n\nn = int(input().strip().)\nar = list(map(int, input().strip().split(' ')))\nresult = simpleArraySum(n, ar)\nprint(result)\n\n\n","offset":42,"fileType":"python3","requestStartTime":1518009116713}}
{"body": {"column":12,"line":45,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n    self.x = xpos\n    self.y = ypos\n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]='#':\n                p=position(1,y)\n                return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if pawn. or y_step == 0 or \n    \n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step):\n            \n             \n    else:\n        return False\n        \n    \n    \n\ndef waysToGiveACheck(board):\n    pawn=identify_pawn_to_be_promoted(board)\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        return \n        \n    \n    \n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":937,"fileType":"python3","requestStartTime":1518009126917}}
{"body": {"column":22,"line":45,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n    self.x = xpos\n    self.y = ypos\n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]='#':\n                p=position(1,y)\n                return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if pawn.x == king. or y_step == 0 or \n    \n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step):\n            \n             \n    else:\n        return False\n        \n    \n    \n\ndef waysToGiveACheck(board):\n    pawn=identify_pawn_to_be_promoted(board)\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        return \n        \n    \n    \n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":947,"fileType":"python3","requestStartTime":1518009131150}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"\n#!/bin/python3\n\narr = int(input().strip().split(' '))\npub = \"\".\nprint(result)\n\n\n","offset":65,"fileType":"python3","requestStartTime":1518009138686}}
{"body": {"column":23,"line":1,"wordToComplete":"","code":"\na=list(map(str,input().))\n\n","offset":25,"fileType":"python3","requestStartTime":1518009193614}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nfrom collections import namedtuple\nn, columns = int(input()), namedtuple('columns', map(str, input().split()))\nfor _ in range(n):\n    columns(*list(map(str, input().split())))\nprint(sum(columns.))\n    \n\n","offset":196,"fileType":"python3","requestStartTime":1518009303436}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    i=0\n    while i < len(arr):\n        if arr[i] >\n        print(arr[i])\n        i+=1\n        \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n    \n    \n\n\n","offset":130,"fileType":"python3","requestStartTime":1518009302301}}
{"body": {"column":46,"line":5,"wordToComplete":"","code":"\nfrom collections import namedtuple\nn, columns = int(input()), namedtuple('columns', map(str, input().split()))\nresult = []\nfor _ in range(n):\n    columns(*list(map(str, input().split()))).\nprint(sum(columns.MARKS))\n    \n\n","offset":190,"fileType":"python3","requestStartTime":1518009430580}}
{"body": {"column":19,"line":52,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n    self.x = xpos\n    self.y = ypos\n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]='#':\n                p=position(1,y)\n                return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if (pawn.x == king.x or pawn.y == king.y or abs(pawn.x - king.x) == abs(pawn.y - king.y)):\n        return True\n    else:\n        return False\n    \ndef path_between_is_clear(pawn,king,x_step,y_step,board):\n    current_x=king.x\n    current_y=king.\n    \n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            \n             \n    else:\n        return False\n        \n    \n    \n\ndef waysToGiveACheck(board):\n    pawn=identify_pawn_to_be_promoted(board)\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        return \n        \n    \n    \n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1174,"fileType":"python3","requestStartTime":1518009431275}}
{"body": {"column":22,"line":25,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        while current.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":731,"fileType":"python3","requestStartTime":1518009441009}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\nfrom collections import namedtuple\nn, columns = int(input()), namedtuple('columns', map(str, input().split()))\nresult = []\nfor _ in range(n):\n    reuslt.columns(*list(map(str, input().split()))).MARKS\nprint(sum(columns.MARKS))\n    \n\n","offset":155,"fileType":"python3","requestStartTime":1518009442653}}
{"body": {"column":15,"line":27,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = list()\n        while current.next != None:\n            ls.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":780,"fileType":"python3","requestStartTime":1518009469307}}
{"body": {"column":30,"line":27,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = list()\n        while current.next != None:\n            ls.append(current.)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":795,"fileType":"python3","requestStartTime":1518009473316}}
{"body": {"column":18,"line":28,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = list()\n        while current.next != None:\n            ls.append(current.data)\n            if ls.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":819,"fileType":"python3","requestStartTime":1518009480858}}
{"body": {"column":32,"line":28,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = list()\n        while current.next != None:\n            ls.append(current.data)\n            if ls.count(current.)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":833,"fileType":"python3","requestStartTime":1518009485047}}
{"body": {"column":22,"line":25,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.]\n        while current.next != None:\n            ls.append(current.data)\n            if ls.count(current.data) > 1:\n                current\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":731,"fileType":"python3","requestStartTime":1518009531673}}
{"body": {"column":35,"line":27,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            ls.append(current.next.data)\n            if ls.count(current.data) > 1:\n                current\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":808,"fileType":"python3","requestStartTime":1518009538623}}
{"body": {"column":37,"line":28,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            ls.append(current.next.data)\n            if ls.count(current.next.data) > 1:\n                current\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":851,"fileType":"python3","requestStartTime":1518009548324}}
{"body": {"column":24,"line":29,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            ls.append(current.next.data)\n            if ls.count(current.next.data) > 1:\n                current.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":886,"fileType":"python3","requestStartTime":1518009566605}}
{"body": {"column":39,"line":29,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            ls.append(current.next.data)\n            if ls.count(current.next.data) > 1:\n                current.next = current.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":901,"fileType":"python3","requestStartTime":1518009570694}}
{"body": {"column":44,"line":29,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            ls.append(current.next.data)\n            if ls.count(current.next.data) > 1:\n                current.next = current.next.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":906,"fileType":"python3","requestStartTime":1518009572773}}
{"body": {"column":25,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass BOARD:\n    def __init__(self,board):\n        self.k = None\n        self.board = board\n        self.occ = [['#' for i in range(8)] for j in range(8)]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] in 'NRBQKP':\n                    self.\n                    \n                    try:\n                        self.ps[board[i][j]].append((i,j))\n                    except:\n                        self.ps[board[i][j]] = [(i,j)]\n    def query(self,c,i,j):\n        if c == 'N':\n            if i+1 <= 7 and j+2 <= 7:\n                self.occ[i+1][j+2] = '*'\n            if i+1 <= 7 and j-2 >= 0:\n                self.occ[i+1][j-2] = '*'\n            if i+2 <= 7 and j+1 <= 7:\n                self.occ[i+2][j+1] = '*'\n            if i+2 <= 7 and j-1 >= 0:\n                self.occ[i+2][j-1] = '*'\n            if i-1 >= 0 and j+2 <= 7:\n                self.occ[i-1][j+2] = '*'\n            if i-1 >= 0 and j-2 >= 0:\n                self.occ[i-1][j-2] = '*'\n            if i-2 >= 0 and j+1 <= 7:\n                self.occ[i-2][j+1] = '*'\n            if i-2 >= 0 and j-1 >= 0:\n                self.occ[i-2][j-1] = '*'\n            return\n        if c == 'R':\n            k = 1\n            while i+k <= 7:\n                self.occ[i+k][j] = '*'\n                if self.board[i+k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0:\n                self.occ[i-k][j] = '*'\n                if self.board[i-k][j] != '#':\n                    break\n                k += 1\n            k = 1\n            while j+k <= 7:\n                self.occ[i][j+k] = '*'\n                if self.board[i][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while j-k >= 0:\n                self.occ[i][j-k] = '*'\n                if self.board[i][j-k] != '#':\n                    break\n                k += 1\n            return\n        if c == 'B':\n            k = 1\n            while i+k <= 7 and j+k <= 7:\n                self.occ[i+k][j+k] = '*'\n                if self.board[i+k][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0 and j-k >= 0:\n                self.occ[i-k][j-k] = '*'\n                if self.board[i-k][j-k] != '#':\n                    break\n                k += 1\n            k = 1\n            while i-k >= 0 and j+k <= 7:\n                self.occ[i-k][j+k] = '*'\n                if self.board[i-k][j+k] != '#':\n                    break\n                k += 1\n            k = 1\n            while i+k <= 7 and j-k >= 0:\n                self.occ[i+k][j-k] = '*'\n                if self.board[i-k][j+k] != '#':\n                    break\n                k += 1\n        if c == 'Q':\n            self.query('R',i,j)\n            self.query('B',i,j)\n        if c == 'K':\n            if i+1 <= 7 and j+1 <= 7:\n                self.occ[i+1][j+1] = '*'\n            if i+1 <= 7 and j-1 >= 0:\n                self.occ[i+1][j-1] = '*'\n            if i-1 >= 0 and j+1 <= 7:\n                self.occ[i-1][j+1] = '*'\n            if i-1 >= 0 and j-1 >= 0:\n                self.occ[i-1][j-1] = '*'\n            if i-1 >= 0:\n                self.occ[i-1][j] = '*'\n            if i+1 <= 7:\n                self.occ[i+1][j] = '*'\n            if j-1 >= 0:\n                self.occ[i][j-1] = '*'\n            if j+1 <= 7:\n                self.occ[i][j+1] = '*'\n        if c == 'P':\n            if j+1 <= 7:\n                self.occ[i-1][j+1] = '*'\n            if j-1 >= 0:\n                self.occ[i-1][j-1] = '*'\n    def update(self):\n        \n            \n                \n            \n                    \n\n\ndef waysToGiveACheck(board):\n    ps = []\n    for i in range(8):\n        if board[1][i] == 'P'\n        ps.append(i)\n    print(board)\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":312,"fileType":"python3","requestStartTime":1518009572851}}
{"body": {"column":34,"line":31,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            ls.append(current.next.data)\n            if ls.count(current.next.data) > 1:\n                current.next = current.next.next\n            else:\n                current = current.\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":963,"fileType":"python3","requestStartTime":1518009613639}}
{"body": {"column":17,"line":27,"wordToComplete":"","code":"class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None \nclass Solution: \n    def insert(self,head,data):\n            p = Node(data)           \n            if head==None:\n                head=p\n            elif head.next==None:\n                head.next=p\n            else:\n                start=head\n                while(start.next!=None):\n                    start=start.next\n                start.next=p\n            return head  \n    def display(self,head):\n        current = head\n        while current:\n            print(current.data,end=' ')\n            current = current.next\n    def removeDuplicates(self,head):\n        #Write your code here\n        current = head\n        ls = [current.data]\n        while current.next != None:\n            self.\n            ls.append(current.next.data)\n            if ls.count(current.next.data) > 1:\n                current.next = current.next.next\n            else:\n                current = current.next\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nmylist= Solution()\nT=int(input())\nhead=None\nfor i in range(T):\n    data=int(input())\n    head=mylist.insert(head,data)    \nhead=mylist.removeDuplicates(head)\nmylist.display(head); \n","offset":790,"fileType":"python3","requestStartTime":1518009646545}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\nfrom collections import namedtuple\nn, columns = int(input()), namedtuple('columns', map(str, input().split()))\nresult = []\nfor _ in range(n):\n    result.columns(*list(map(str, input().split()))).MARKS\n    \n    \n\nprint(sum[columns(*list(map(str, input().split()))).MARKS for _ in range(n)] / n)\n\n    \n\n","offset":155,"fileType":"python3","requestStartTime":1518009853499}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    i=0\n    count=0\n    while arr[i] >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n    \n    \n\n\n","offset":117,"fileType":"python3","requestStartTime":1518009893481}}
{"body": {"column":80,"line":64,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    r,q,b=0,0,0\n    r1,q1,b1=0,0,0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j]=='k':\n                ki,kj=i,j\n            elif board[i][j]=='R':\n                ri,rj=i,j\n                r=1\n            elif board[i][j]=='Q':\n                qi,qj=i,j\n                q=1\n            elif board[i][j]=='B':\n                bi,bj=i,j\n                b=1\n            elif board[i][j]=='N':\n                ni,nj=i,j\n                n=1\n            elif board[i][j]=='K':\n                k1i,k1j=i,j\n            elif board[i][j]=='r':\n                r1i,r1j=i,j\n                r1=1\n            elif board[i][j]=='q':\n                q1i,q1j=i,j\n                q1=1\n            elif board[i][j]=='b':\n                b1i,b1j=i,j\n                b1=1\n    for j in range(8):\n        if board[1][j]=='P':\n            pj=j\n    pi=0\n    count=0\n    #print(pi,pj,ki,kj)\n    if pi==ki or pj ==kj:\n        count=2 #count+1\n    if abs(pi-ki)==abs(pj-kj):\n        count=2 #count+1\n    if (abs(pi-ki)==2 and abs(pj-kj)==1) or (abs(pi-ki)==1 and abs(pj-kj)==2):\n        count=1 #count+1\n    #if pi==ki or pj ==kj or abs(pi-ki)==abs(pj-kj):\n    #    count=count+1\n    if r==1:\n        if (ri==ki):\n            #if q==1 and not((qj<pj and qj>kj) or (qj<pj and qj>kj)):\n            #    count=4\n            #if r==1 and !((rj<pj and rj>kj) or (rj<pj and rj>kj)):\n            #    count=4\n            if b==1 and not((bj<rj and bj>kj) or (bj>rj and bj<kj)):\n                count=4\n            if n==1 and not((nj<rj and nj>kj) or (nj>rj and nj<kj)):\n                count=4\n    if b==1:\n        if abs(bi-ki)==abs(bj-kj):\n            #if q==1 and abs(qi-ki)==abs(qj-kj) and not((qj<pj and qj>kj) or (qj<pj and qj>kj)):\n            #    count=4\n            if r==1 and abs(ri-ki)==abs(rj-kj) and not((rj<bj and rj>kj) or (rj>bj and rj>kj)):\n                count=4\n            if n==1 and abs(ni-ki)==abs(nj-kj) and not((nj<pj and nj>kj) or (nj<pj and nj>kj)):\n                count=4\n            \n    if q==1:\n        if  qi==ki  :\n            if n==1 and (not((nj<pj and nj>kj) or (nj<pj and nj>kj))) : \n                count=4\n            #if r==1 and (not((rj<pj and rj>kj) or (rj<pj and rj>kj))) : \n                count=4\n            #if b==1 and (not((bj<pj and bj>kj) or (bj<pj and bj>kj))) : \n        elif abs(qi-ki)==abs(qj-kj)\n            if r==1 and abs(ri-ki)==abs(rj-kj) and not((rj<pj and rj>kj) or (rj<pj and rj>kj)):\n                count=4\n            if n==1 and abs(ni-ki)==abs(nj-kj) and not((nj<pj and nj>kj) or (nj<pj and nj>kj)):\n                count=4\n    \n    return count\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            #board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board_t=list(input())\n            #print(board_t)\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1930,"fileType":"python3","requestStartTime":1518009899371}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    i=0\n    count=0\n    print(arr.)\n    while arr[i] > 0:\n        count=count+1\n        i+=1\n        print(count)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n    \n    \n\n\n","offset":113,"fileType":"python3","requestStartTime":1518009999304}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    for i in range(arr):\n        if arr[i] >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n    \n    \n\n\n","offset":123,"fileType":"python3","requestStartTime":1518010127798}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"users=[]  ## start with an empty list\nuser =input()  ## read first value in\nwhile user != '':  ## keep going til you read an empty space (ie no more input)\n    users += [user] ## add the value read in to the users list\n    user =input()    ## read the next value...\nfor user in users:\n    print(user.)\n\n","offset":301,"fileType":"python3","requestStartTime":1518010602309}}
{"body": {"column":30,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    sum=0\n    for i in arr:\n        if i > 0:\n            sum=sum+1\n            f=sum/n\n            print (format(f,'.'))\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n    \n    \n\n\n","offset":197,"fileType":"python3","requestStartTime":1518010502266}}
{"body": {"column":7,"line":6,"wordToComplete":"0.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ni2 = 0\nd2 = 0.\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":104,"fileType":"python3","requestStartTime":1518010643607}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nrocks_dict = {}\ndef gemstones(arr):\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rocks_dict[rock]:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].\n            else:\n                rocks_dict[rock][gem] += 1\n    return rocks_dict\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":270,"fileType":"python3","requestStartTime":1518010666246}}
{"body": {"column":17,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n        s = input()\n        for i in range(len(s)):\n            if i.\n      \n\n","offset":98,"fileType":"python3","requestStartTime":1518012498719}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n        s = input()\n        for i in range(len(s)):\n            if s[i].\n      \n\n","offset":101,"fileType":"python3","requestStartTime":1518012558670}}
{"body": {"column":8,"line":15,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ni2 = 0\nd2 = 0.0\ns2 = ''\n# Read and save an integer, double, and String to your variables.\ni2 = input()\nd2 = input()\nstring = input()\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.\nprint(%.)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":357,"fileType":"python3","requestStartTime":1518010764101}}
{"body": {"column":28,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n        s = input()\n        for i in range(len(s)):\n            if s[i].isalpha:\n                print (\"\\n\".\"True\")\n        print (any())\n      \n\n","offset":138,"fileType":"python3","requestStartTime":1518012695238}}
{"body": {"column":19,"line":106,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n    self.x = xpos\n    self.y = ypos\n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]='#':\n                p=position(1,y)\n                return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if (pawn.x == king.x or pawn.y == king.y or abs(pawn.x - king.x) == abs(pawn.y - king.y)):\n        return True\n    else:\n        return False\n    \ndef path_between_is_clear(pawn,king,x_step,y_step,board):\n    current_x=king.x\n    current_y=king.y\n    current_x += x_step\n    current_y += y_step    \n    while (current_x != pawn.x and current_y != pawn.y):\n        if board[current_x][current_y] != '#':\n            return False     \n        current_x += x_step\n        current_y += y_step  \n    return True\n\ndef still_on_board(x,y):\n    if (x < 8 and y < 8 and x >= 0 and y >= 0):\n        return True\n    else:\n        return False\n\ndef checked_by_move(pawn,king,x_step,y_step,board):    \n    current_x=pawn.x\n    current_y=pawn.y\n    current_x += x_step\n    current_y += y_step\n    while still_on_board(current_x,current_y):\n        if board[current_x][current_y] == 'Q':\n            return True:\n        elif board[current_x][current_y] != 'R':\n            if (x_step == 0 or y_step == 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != 'B':\n            if (x_step != 0 and y_step != 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != '#':\n            return False           \n            \n        current_x += x_step\n        current_y += y_step  \n    return False\n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            if checked_by_move(pawn,king,x_step,y_step,board):\n                return True\n            else:\n                return False\n    else:\n        return False\n        \ndef horse_check_possible(pawn, king):\n    xdist=abs(pawn.)\n    \n\ndef waysToGiveACheck(board):\n    pawn=identify_pawn_to_be_promoted(board)\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        if horse_check_possible(promoted_pawn, king):\n            return 1\n        elif root_check_possibel(promoted_pawn, king):\n            return 2\n        elif bishop_check_possible(promoted_pawn, king):\n            return 2\n        \n        return 0\n        \n    \n    \n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2822,"fileType":"python3","requestStartTime":1518010945137}}
{"body": {"column":35,"line":40,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    res=[]\n    b=board\n\n    for a in range(1):\n\n        P=0\n        k=0\n        kp = []\n        for i in range(8):\n            for j in range(8):\n                if b[j][0][i]=='k':\n                    kp.append(j)\n                    kp.append(i)\n                    break\n            if len(kp)>0:\n                break\n        print(kp)\n        for i in range(8):\n\n            if b[1][0][i]=='P' and b[0][0][i]=='#':\n                if kp[0]!=1:\n                    P=i\n                else:\n                    ckp=-1\n                    cpp=-1\n                    cop=-1\n                    for ww in range(8):\n                        if b[1][0][ww]=='k':\n                            ckp=1\n                        elif b[1][0][ww]=='P':\n                            if ckp>0:\n                                ckp=2\n                         \n                        elif b[1][0][ww]=='Q' or b[1][0][ww]=='R':\n                            if ckp>\n                        elif b[1][0][ww]!='#':\n                            if ckp>=0 and cpp<0:\n                                ckp=-1\n                            elif ckp>=0 and cpp>=0:\n                                ckp=-1\n                                cpp=-1\n                                \n                                \n                            \n                                \n                    \n                        \n                        \n                        \n\n\n\n        #rook\n        print(P)\n        if b[0][0][P]=='#':          \n            if kp[0]==0:\n                if kp[1]<P:\n                    l=0\n                    for a in range(kp[1]+1,P):\n\n                        if b[0][0][a]!='#':\n                            l=1\n                    if l==0:\n\n                        k+=2\n                else:\n                    l=0\n                    for a in range(P+1,kp[1]+1,-1):\n\n                        if b[0][0][a]!='#':\n                            l=1\n                    if l==0:\n                        k+=2               \n            elif kp[1]==P:\n                if 1==1:\n                    l=0\n                    for a in range(0,kp[0]):\n                        if b[a][0][P]!='#':                   \n                            l=1\n                    if l==0:\n                        k+=2\n            #knight\n            if P-2>=0:\n                if b[1][0][P-2]=='k':\n                    k+=1\n            if P+2<8:     \n                if b[1][0][P+2]=='k':\n                    k+=1\n            if P-1>=0:\n                if b[2][0][P-1]=='k':\n                    k+=1\n            if P+1<8:\n                if b[2][0][P+1]=='k':\n                    k+=1\n            x1c=0\n            x2c=0\n\n            for i in range(1,8):\n                x1=P-i\n                x2=P+i\n\n                if x1>=0 and x1c==0:\n\n                    if b[i][0][x1]=='k':     \n                        k+=2\n                    elif b[i][0][x1]!='#':\n                        x1c=1\n                if x2<8 and x2c==0:\n                    if b[i][0][x2]=='k':\n                        k+=2\n                    elif b[i][0][x2]!='#':\n                        x2c=1\n        #consider check by pawn k q n b r p\n        cc=0\n\n        for i in range(0,8):\n            if cc>4:\n                break\n            for j in range(0,8):\n                if cc>4:\n                    break\n                s = b[j][0][i]\n\n                if s!='#' and s.isupper():\n                    if s=='R' or s=='Q':\n                        cc+=1\n                        if kp[0]==j or kp[1]==i:\n                            if kp[0]==j:\n\n                                if kp[1]<i:\n                                    l=0\n                                    for a in range(kp[1]+1,i):\n\n                                        if b[j][0][a]!='#' and b[j][0][a]!='P':\n                                            l=1\n                                    if l==0:\n                                        k+=1\n                                else:\n                                    l=0\n                                    for a in range(i+1,kp[1]+1,-1):\n                                        if b[j][0][a]!='#' and b[j][0][a]!='P':\n                                            l=1\n                                    if l==0:\n                                        k+=1              \n                            elif kp[1]==i:\n\n                                if kp[0]<j:\n                                    l=0\n\n                                    for a in range(kp[0]+1,j):\n                                        \n                                        if b[a][0][i]!='#' and b[a][0][i]!='P':                 \n                                            l=1\n                                            \n                                    if l==0:\n                                        \n                                        k+=1\n                                else:\n                                    \n                                    l=0\n                                    for a in range(j+1,kp[0]+1):\n                                        if b[a][0][i]!='#' and b[a][0][i]!='P':                 \n                                            l=1\n                                    if l==0:\n                                        k+=1\n                    elif s=='B' or s=='Q':\n                        cc+=1\n                        x1c=0\n                        x2c=0\n                        y1c=0\n                        y2c=0\n                        for w in range(1,8):\n                            x1=j-w\n                            x2=j+w\n                            y1=i-w\n                            y2=i+w\n\n                            if x1>=0 and y1>=0 and x1c==0:\n\n                                if b[x1][0][y1]=='k':     \n                                    k+=1\n                                elif b[x1][0][y1]!='#' and b[x1][0][y1]!='P':\n                                    x1c=1\n                            if x2<8 and y2<8 and x2c==0:\n                                if b[x2][0][y2]=='k':\n                                    k+=1\n                                elif b[x2][0][y2]!='#' and b[x2][0][y2]!='P':\n                                    x2c=1\n                            if x1>=0 and y2<8 and y1c==0:\n                                if b[x1][0][y2]=='k':\n                                    k+=1\n                                elif b[x1][0][y2]!='#' and  b[x1][0][y2]!='P':\n                                    y1c=1\n                                    \n                            if x2<8 and y1>=0 and y2c==0:\n                                \n                                if b[x2][0][y1]=='k':\n                                    \n                                    k+=1\n                                elif b[x2][0][y1]!='#' and b[x2][0][y1]!='P':\n                                    y2c=1\n                    \n            \n    return k\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1005,"fileType":"python3","requestStartTime":1518011014496}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\ni2 = 0\nd2 = 0.0\ns2 = ''\n# Read and save an integer, double, and String to your variables.\ni2 = int(input())\nd2 = float(input())\ns2 = input()\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.\nprint(\"{%.1f}\").d + d2)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint(s + s2)\n\n","offset":373,"fileType":"python3","requestStartTime":1518011129258}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    number_of_odds = (r-1).\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":122,"fileType":"python3","requestStartTime":1518011249868}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\nfrom collections import OrderedDict\nd = OrderedDict()\nfor _ in range(int(input())):\n    *n, m = input().))\n\n","offset":106,"fileType":"python3","requestStartTime":1518011372461}}
{"body": {"column":18,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    row = 0\n    column = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    for line in board:\n        \n        column = 0\n        for row in line:\n            \n            \n            for col in row:\n                \n                print(col)\n                column += 1\n                \n        print(rpw.)\n            \n        print('kappa')\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":430,"fileType":"python3","requestStartTime":1518011417830}}
{"body": {"column":14,"line":163,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n        self.x = xpos\n        self.y = ypos\n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]=='#':\n                p=position(1,y)\n                return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if (pawn.x == king.x or pawn.y == king.y or abs(pawn.x - king.x) == abs(pawn.y - king.y)):\n        return True\n    else:\n        return False\n    \ndef path_between_is_clear(pawn,king,x_step,y_step,board):\n    current_x=king.x\n    current_y=king.y\n    current_x += x_step\n    current_y += y_step    \n    while (current_x != pawn.x and current_y != pawn.y):\n        if board[current_x][current_y] != '#':\n            return False     \n        current_x += x_step\n        current_y += y_step  \n    return True\n\ndef still_on_board(x,y):\n    if (x < 8 and y < 8 and x >= 0 and y >= 0):\n        return True\n    else:\n        return False\n\ndef checked_by_move(pawn,king,x_step,y_step,board):    \n    current_x=pawn.x\n    current_y=pawn.y\n    current_x += x_step\n    current_y += y_step\n    while still_on_board(current_x,current_y):\n        if board[current_x][current_y] == 'Q':\n            return True\n        elif board[current_x][current_y] != 'R':\n            if (x_step == 0 or y_step == 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != 'B':\n            if (x_step != 0 and y_step != 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != '#':\n            return False           \n            \n        current_x += x_step\n        current_y += y_step  \n    return False\n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            if checked_by_move(pawn,king,x_step,y_step,board):\n                return True\n            else:\n                return False\n    else:\n        return False\n        \ndef horse_check_possible(pawn, king):\n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)\n    if (ydist == 1 and xdist == 2) or (ydist == 2 and xdist == 1):\n        return True\n    else:\n        return False\n    \ndef root_check_possibel(pawn, king):    \n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)\n    if xdist == 0 or ydist == 0:\n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef bishop_check_possible(pawn, king):\n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)    \n    if xdist == ydist:\n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef waysToGiveACheck(board):\n    pawn=identify_pawn_to_be_promoted(board)\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        if horse_check_possible(promoted_pawn, king):\n            return 1\n        elif root_check_possibel(promoted_pawn, king):\n            return 2\n        elif bishop_check_possible(promoted_pawn, king):\n            return 2        \n        return 0\n            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        print.\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":4492,"fileType":"python3","requestStartTime":1518011440285}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].\n            else:\n                rocks_dict[rock][gem] += 1\n\n                \n            \n            \n    \n    return rocks_dict\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":263,"fileType":"python3","requestStartTime":1518011454838}}
{"body": {"column":28,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n        s = input()\n        for i in range(len(s)):\n            if s[i].isalpha:\n                result=\"True\"\n                print (join.)\n       # print (any())\n      \n\n","offset":168,"fileType":"python3","requestStartTime":1518013287913}}
{"body": {"column":27,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    for rock in rocks_dict.:\n        \n    return rocks_dict\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":302,"fileType":"python3","requestStartTime":1518011500511}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    odd_Numbers = []\n    for x in range(l, r+1):\n        if x % 2 == 1:\n            odd_Numbers.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(input());\n\n\n_r = int(input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":191,"fileType":"python3","requestStartTime":1518011578276}}
{"body": {"column":29,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n        s = input()\n        for i in range(len(s)):\n            if s[i].isalpha:\n                result=\"True\"\n                print (split.\"True\")\n       # print (any())\n      \n\n","offset":169,"fileType":"python3","requestStartTime":1518013392560}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nfrom collections import OrderedDict\nd = OrderedDict()\nfor _ in range(int(input())):\n    *item, v = input().split()\n    d[item] += v\nfor k, v in d.  \n\n","offset":148,"fileType":"python3","requestStartTime":1518011598236}}
{"body": {"column":22,"line":141,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n        self.x = xpos\n        self.y = ypos\n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]=='#':\n                p=position(1,y)\n                return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if (pawn.x == king.x or pawn.y == king.y or abs(pawn.x - king.x) == abs(pawn.y - king.y)):\n        return True\n    else:\n        return False\n    \ndef path_between_is_clear(pawn,king,x_step,y_step,board):\n    current_x=king.x\n    current_y=king.y\n    current_x += x_step\n    current_y += y_step    \n    while (current_x != pawn.x and current_y != pawn.y):\n        if board[current_x][current_y] != '#':\n            return False     \n        current_x += x_step\n        current_y += y_step  \n    return True\n\ndef still_on_board(x,y):\n    if (x < 8 and y < 8 and x >= 0 and y >= 0):\n        return True\n    else:\n        return False\n\ndef checked_by_move(pawn,king,x_step,y_step,board):    \n    current_x=pawn.x\n    current_y=pawn.y\n    current_x += x_step\n    current_y += y_step\n    while still_on_board(current_x,current_y):\n        if board[current_x][current_y] == 'Q':\n            return True\n        elif board[current_x][current_y] != 'R':\n            if (x_step == 0 or y_step == 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != 'B':\n            if (x_step != 0 and y_step != 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != '#':\n            return False           \n            \n        current_x += x_step\n        current_y += y_step  \n    return False\n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            if checked_by_move(pawn,king,x_step,y_step,board):\n                return True\n            else:\n                return False\n    else:\n        return False\n        \ndef horse_check_possible(pawn, king):\n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)\n    if (ydist == 1 and xdist == 2) or (ydist == 2 and xdist == 1):\n        return True\n    else:\n        return False\n    \ndef root_check_possibel(pawn, king):    \n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)\n    if xdist == 0 or ydist == 0:\n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef bishop_check_possible(pawn, king):\n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)    \n    if xdist == ydist:\n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef waysToGiveACheck(board):\n    pawn=identify_pawn_to_be_promoted(board)\n    print(pawn.x,pawn.)\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        if horse_check_possible(promoted_pawn, king):\n            return 1\n        elif root_check_possibel(promoted_pawn, king):\n            return 2\n        elif bishop_check_possible(promoted_pawn, king):\n            return 2        \n        return 0\n            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(*board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":3820,"fileType":"python3","requestStartTime":1518011624628}}
{"body": {"column":29,"line":28,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMove.\n                    \n                colNo += 1\n            \n        rowNo += 1\n        \n    print(kingRow, kingCol)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":518,"fileType":"python3","requestStartTime":1518011632858}}
{"body": {"column":34,"line":36,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'p':\n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.\n                colNo += 1\n            \n        rowNo += 1\n        \n    print(kingRow, kingCol)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":793,"fileType":"python3","requestStartTime":1518011699570}}
{"body": {"column":30,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n        s = input()\n        for i in range(len(s)):\n            if s[i].isalpha:\n                result=\"True\"\n                print (result.)\n       # print (any())\n      \n\n","offset":170,"fileType":"python3","requestStartTime":1518013527215}}
{"body": {"column":34,"line":37,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'p':\n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.\n                colNo += 1\n            \n        rowNo += 1\n        \n    print(kingRow, kingCol)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":849,"fileType":"python3","requestStartTime":1518011718562}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef roman_numeral_to_int(string):\n    value = 0\n    roman = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    if len(string) == 0:\n        return(json.roman[string])\n\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        string = str(input())\n    except:\n        string = None\n\n    res = roman_numeral_to_int(string);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":230,"fileType":"python3","requestStartTime":1518011757330}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j]):\n                print(j)\n                break\n    print('k' in board[2].)\n         \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":234,"fileType":"python3","requestStartTime":1518060430158}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j]):\n                print(j)\n                break\n    print('k' in board[2].)\n         \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":234,"fileType":"python3","requestStartTime":1518060443011}}
{"body": {"column":22,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    return rocks_dict.\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":401,"fileType":"python3","requestStartTime":1518011891710}}
{"body": {"column":29,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    return rocks_dict.keys().\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":409,"fileType":"python3","requestStartTime":1518011904142}}
{"body": {"column":26,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    pwans.\n                        \n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":960,"fileType":"python3","requestStartTime":1518011917690}}
{"body": {"column":26,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    pawns.\n                        \n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":960,"fileType":"python3","requestStartTime":1518011919993}}
{"body": {"column":31,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    return rocks_dict.values().\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":411,"fileType":"python3","requestStartTime":1518011923238}}
{"body": {"column":31,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    return rocks_dict.values().\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":411,"fileType":"python3","requestStartTime":1518011932302}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    set(l)\n    s = set()\n    for s in l:\n        if s not in s:\n            s.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":141,"fileType":"python3","requestStartTime":1518011957204}}
{"body": {"column":27,"line":47,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    pawns.append([rowNo,colNo])\n                    \n                #King Queen Night Bishop Rook Pawn\n                \n                elif col == 'N':\n                    \n                    knight.\n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1152,"fileType":"python3","requestStartTime":1518011996877}}
{"body": {"column":26,"line":51,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    pawns.append([rowNo,colNo])\n                    \n                #King Queen Night Bishop Rook Pawn\n                \n                elif col == 'N':\n                    \n                    knight.append([rowNo,ColNo])\n                    \n                elif col == 'Q':\n                    \n                    queen.\n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1275,"fileType":"python3","requestStartTime":1518012009204}}
{"body": {"column":28,"line":62,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    kings = []\n    queens = []\n    knights = []\n    bishops = []\n    rooks = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    pawns.append([rowNo,colNo])\n                    \n                #King Queen Night Bishop Rook Pawn\n                \n                elif col == 'N':\n                    \n                    knights.append([rowNo,ColNo])\n                    \n                elif col == 'Q':\n                    \n                    queens.append([rowNo,ColNo])\n                    \n                elif col == 'B':\n                    \n                    bishops.\n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1502,"fileType":"python3","requestStartTime":1518012064757}}
{"body": {"column":26,"line":66,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    kings = []\n    queens = []\n    knights = []\n    bishops = []\n    rooks = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    pawns.append([rowNo,colNo])\n                    \n                #King Queen Night Bishop Rook Pawn\n                \n                elif col == 'N':\n                    \n                    knights.append([rowNo,ColNo])\n                    \n                elif col == 'Q':\n                    \n                    queens.append([rowNo,ColNo])\n                    \n                elif col == 'B':\n                    \n                    bishops.append([rowNo,ColNo])\n                    \n                elif col == 'R':\n                    \n                    rooks.\n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1625,"fileType":"python3","requestStartTime":1518012077025}}
{"body": {"column":30,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(\"{} \\n {} \\n {} \\n\".)\n\n\n","offset":101,"fileType":"python3","requestStartTime":1518012124779}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j][0]):\n                board[j][0].\n                break\n         \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":192,"fileType":"python3","requestStartTime":1518060754907}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j][0]):\n                board[j][0].\n                break\n         \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":192,"fileType":"python3","requestStartTime":1518060756385}}
{"body": {"column":30,"line":10,"wordToComplete":"in","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j][0]):\n                board[j][0].in\n                break\n         \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":194,"fileType":"python3","requestStartTime":1518060759037}}
{"body": {"column":26,"line":71,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    rowNo = 1\n    colNo = 0\n    \n    kingRow = 0\n    kingCol = 0\n    \n    playerRow = 0\n    playerCol = 0\n    \n    freeMoves = []\n    pawns = []\n    \n    kings = []\n    queens = []\n    knights = []\n    bishops = []\n    rooks = []\n    pawns = []\n    \n    for line in board:\n        \n        for row in line:\n            \n            colNo = 1\n            for col in row:\n                \n                if col == 'k':\n                    kingRow = rowNo\n                    kingCol = colNo\n                \n                elif col == '#':\n                    freeMoves.append([rowNo,colNo])\n                    \n                elif col == 'P':\n                    \n                    if([rowNo-1,colNo] in freeMoves):\n                        playerRow = rowNo-1\n                        playerCol = colNo\n                        freeMoves.append([rowNo,colNo])\n                        freeMoves.remove([rowNo-1,colNo])\n                        \n                    else:    \n                        pawns.append([rowNo,colNo])\n                    \n                #King Queen Night Bishop Rook Pawn\n                \n                elif col == 'N':\n                    \n                    knights.append([rowNo,ColNo])\n                    \n                elif col == 'Q':\n                    \n                    queens.append([rowNo,ColNo])\n                    \n                elif col == 'B':\n                    \n                    bishops.append([rowNo,ColNo])\n                    \n                elif col == 'R':\n                    \n                    rooks.append([rowNo,ColNo])\n                    \n                elif col == 'K':\n                    \n                    kings.\n                colNo += 1\n            \n        rowNo += 1\n        \n    kingPos = [kingRow,kingCol]\n    print(kingPos)\n    \n    playerPos = [playerRow,playerCol]\n    print('player')\n    print(playerPos)\n            \n        \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1782,"fileType":"python3","requestStartTime":1518012166541}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef roman_numeral_to_int(string):\n    value = []\n    roman = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    for i in range(len(string)):\n        value.\n            \n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        string = str(input())\n    except:\n        string = None\n\n    res = roman_numeral_to_int(string);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":233,"fileType":"python3","requestStartTime":1518012186403}}
{"body": {"column":12,"line":4,"wordToComplete":"n{}.\"","code":"\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    \"{}\\n{}.\"\n\n\n","offset":83,"fileType":"python3","requestStartTime":1518012193390}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    \"{}\\n{}\".\n\n\n","offset":84,"fileType":"python3","requestStartTime":1518012195053}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    for rock in rock_dict.\n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":406,"fileType":"python3","requestStartTime":1518012256046}}
{"body": {"column":14,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    blackkingrow=99\n    blackkingcol= 99\n    possiblepawnrow = 99\n    possiblepawncol = 99\n    count = 0\n    for i in range(0,8):\n        for j in range(0,8):\n            if blackkingrow != 99 and possiblepawnrow != 99:\n                break\n            else:\n                if board[i][j] == \"k\":\n                    blackkingrow = i\n                    blackkingcol = j\n                elif board[i][j] == \"P\":\n                    if board[i-1][j] == \"#\":\n                        possiblepawnrow = i-1\n                        possiblepawncol =j\n                        blockingpos = i\n                        \n    if possiblepawnrow == blackkingrow or possiblepawncol == blackkingcol:\n        count += 2\n    elif blackkingcol>possiblepawncol:\n        if abs(blackkingcol-blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n    elif blackkingcol<possiblepawncol:\n        if abs(blackkingcol+blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n        \n    if (possiblepawnrow+1 == blackkingrow and possiblepawncol+2 == blackkingcol) or (possiblepawnrow+1 == blackkingrow and possiblepawncol-2 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol+1 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol-1 == blackkingcol):\n        count += 1\n    if \"R\" in board[i] and \"k\" in board[i]:\n        board.\n    return count\n    \n \n\n            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           x = str(input().strip())\n           x = list(x)\n           board.append(x)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1503,"fileType":"python3","requestStartTime":1518012319367}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s].\n    unique = set()\n    for s in l:\n        if s not in unique:\n            unique.add(s)\n            uni = s\n        else:\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":103,"fileType":"python3","requestStartTime":1518012320915}}
{"body": {"column":14,"line":41,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    blackkingrow=99\n    blackkingcol= 99\n    possiblepawnrow = 99\n    possiblepawncol = 99\n    count = 0\n    for i in range(0,8):\n        for j in range(0,8):\n            if blackkingrow != 99 and possiblepawnrow != 99:\n                break\n            else:\n                if board[i][j] == \"k\":\n                    blackkingrow = i\n                    blackkingcol = j\n                elif board[i][j] == \"P\":\n                    if board[i-1][j] == \"#\":\n                        possiblepawnrow = i-1\n                        possiblepawncol =j\n                        blockingpos = i\n                        \n    if possiblepawnrow == blackkingrow or possiblepawncol == blackkingcol:\n        count += 2\n    elif blackkingcol>possiblepawncol:\n        if abs(blackkingcol-blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n    elif blackkingcol<possiblepawncol:\n        if abs(blackkingcol+blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n        \n    if (possiblepawnrow+1 == blackkingrow and possiblepawncol+2 == blackkingcol) or (possiblepawnrow+1 == blackkingrow and possiblepawncol-2 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol+1 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol-1 == blackkingcol):\n        count += 1\n    if \"R\" in board[i] and \"k\" in board[i]:\n        board.\n    return count\n    \n \n\n            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           x = str(input().strip())\n           x = list(x)\n           board.append(x)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1503,"fileType":"python3","requestStartTime":1518012321555}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.\n    unique = set()\n    for s in l:\n        if s not in unique:\n            unique.add(s)\n            uni = s\n        else:\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":108,"fileType":"python3","requestStartTime":1518012335635}}
{"body": {"column":19,"line":42,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    blackkingrow=99\n    blackkingcol= 99\n    possiblepawnrow = 99\n    possiblepawncol = 99\n    count = 0\n    for i in range(0,8):\n        for j in range(0,8):\n            if blackkingrow != 99 and possiblepawnrow != 99:\n                break\n            else:\n                if board[i][j] == \"k\":\n                    blackkingrow = i\n                    blackkingcol = j\n                elif board[i][j] == \"P\":\n                    if board[i-1][j] == \"#\":\n                        possiblepawnrow = i-1\n                        possiblepawncol =j\n                        blockingpos = i\n                        \n    if possiblepawnrow == blackkingrow or possiblepawncol == blackkingcol:\n        count += 2\n    elif blackkingcol>possiblepawncol:\n        if abs(blackkingcol-blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n    elif blackkingcol<possiblepawncol:\n        if abs(blackkingcol+blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n        \n    if (possiblepawnrow+1 == blackkingrow and possiblepawncol+2 == blackkingcol) or (possiblepawnrow+1 == blackkingrow and possiblepawncol-2 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol+1 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol-1 == blackkingcol):\n        count += 1\n    if \"R\" in board[i] and \"k\" in board[i]:\n        x = board.index(\"R\")\n        k = board/.\n    return count\n    \n \n\n            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           x = str(input().strip())\n           x = list(x)\n           board.append(x)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1537,"fileType":"python3","requestStartTime":1518012335937}}
{"body": {"column":18,"line":42,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    blackkingrow=99\n    blackkingcol= 99\n    possiblepawnrow = 99\n    possiblepawncol = 99\n    count = 0\n    for i in range(0,8):\n        for j in range(0,8):\n            if blackkingrow != 99 and possiblepawnrow != 99:\n                break\n            else:\n                if board[i][j] == \"k\":\n                    blackkingrow = i\n                    blackkingcol = j\n                elif board[i][j] == \"P\":\n                    if board[i-1][j] == \"#\":\n                        possiblepawnrow = i-1\n                        possiblepawncol =j\n                        blockingpos = i\n                        \n    if possiblepawnrow == blackkingrow or possiblepawncol == blackkingcol:\n        count += 2\n    elif blackkingcol>possiblepawncol:\n        if abs(blackkingcol-blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n    elif blackkingcol<possiblepawncol:\n        if abs(blackkingcol+blackkingrow) == possiblepawncol+possiblepawnrow:\n            count += 2\n        else:\n            pass\n        \n    if (possiblepawnrow+1 == blackkingrow and possiblepawncol+2 == blackkingcol) or (possiblepawnrow+1 == blackkingrow and possiblepawncol-2 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol+1 == blackkingcol) or (possiblepawnrow+2==blackkingrow and possiblepawncol-1 == blackkingcol):\n        count += 1\n    if \"R\" in board[i] and \"k\" in board[i]:\n        x = board.index(\"R\")\n        k = board.\n    return count\n    \n \n\n            \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           x = str(input().strip())\n           x = list(x)\n           board.append(x)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":1536,"fileType":"python3","requestStartTime":1518012337246}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.get(s, 0)\n        if s not in unique:\n            unique.add(s)\n            uni = s\n        else:\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":126,"fileType":"python3","requestStartTime":1518012348708}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.get(s, 0)\n            unique.add(s)\n            uni = s\n        else:\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":130,"fileType":"python3","requestStartTime":1518012348891}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.get(s, 0)\n            uni = s\n        else:\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":130,"fileType":"python3","requestStartTime":1518012349155}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.get(s, 0)\n        else:\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":126,"fileType":"python3","requestStartTime":1518012349383}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.get(s, 0)\n            dup = s\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":130,"fileType":"python3","requestStartTime":1518012349652}}
{"body": {"column":3,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] += d.get(s, 0)\n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":121,"fileType":"python3","requestStartTime":1518012349972}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d.\n        d[s] += d.get(s, 0)\n    \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":100,"fileType":"python3","requestStartTime":1518012378261}}
{"body": {"column":35,"line":11,"wordToComplete":"index","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    y=0\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j][0]):\n                y=board[j][0].index('k')+1\n                if('P' in board[j][0]):\n                    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":207,"fileType":"python3","requestStartTime":1518061087799}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] = d.get(s, 0) + 1\n    for k,v in d.:\n        \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":138,"fileType":"python3","requestStartTime":1518012548268}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef maximumPerimeterTriangle(l):\n    d = {}\n    for s in l:\n        d[s] = d.get(s, 0) + 1\n    dup = 0\n    unique = 0\n    for k,v in d.items():\n        if (v > 1 and k > dup):\n            dup = v\n        elif (v == 1 and k > unique):\n            unique = v\n    return \"{} {} {}\".\n            \n        \n        \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    l = list(map(int, input().strip().split(' ')))\n    result = maximumPerimeterTriangle(l)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":309,"fileType":"python3","requestStartTime":1518012637119}}
{"body": {"column":35,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    r=c=0\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j][0]):\n                r=board[j][0].index('k')+1\n                c=j+1\n                if('P' in board[j][0]):\n                    pr=board[j][0].\n                    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":314,"fileType":"python3","requestStartTime":1518061311414}}
{"body": {"column":21,"line":5,"wordToComplete":"","code":"\ndef swap_case(s):\n    a = list(s)\n    for i in range(len(a)):\n        if a.islower() is True:\n            a[i] = фю\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":117,"fileType":"python3","requestStartTime":1518013009332}}
{"body": {"column":21,"line":5,"wordToComplete":"","code":"\ndef swap_case(s):\n    a = list(s)\n    for i in range(len(a)):\n        if a.islower() is True:\n            a[i] = a.\n    return\nif __name__ == '__main__':\n    s = input()\n    result = swap_case(s)\n    print(result)\n","offset":117,"fileType":"python3","requestStartTime":1518013012428}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    print(board)\n    for i in range(0,len(board)):\n        for j in board[i]:\n            sep = j.\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":186,"fileType":"python3","requestStartTime":1518013061415}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nt, n = int(input().strip()), []\nfor i in range(t):\n    n.append(int(input().strip()))\nx, num = 1, 1\nlargest = 0\nfor i in n:\n    if i >\nfib = [1, 1]\nwhile True:\n    x = fib[num] + fib[num-1]\n    if x >= 4*10^16:\n        break\n    fib.append(x)\nfor i in n:\n    y, count = 0, 0\n    while fib[y] <= i:\n        if fib[y] % 2 == 0:\n            count += fib[y]\n        y += 1\n    print(count)\n\n","offset":164,"fileType":"python3","requestStartTime":1518013103639}}
{"body": {"column":31,"line":20,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    results = [rock for rock in rocks_dict.values()]\n    l = len(results)\n    for i in range(0,l-1):\n        s = \"set(results[{}])\".\n    return r\n    #return set(results[0]) & set(results[1]) & set(results[2])\n        \n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":512,"fileType":"python3","requestStartTime":1518013136341}}
{"body": {"column":88,"line":120,"wordToComplete":"K","code":"\n#!/bin/python3\nimport copy\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\nclass Knight: #pass\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 2 and king.y == self.y - 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y - 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y - 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y - 1:\n            return True\n        return False\n    \nclass Rook(self, y, x): #pass\n     def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.x == self.x:\n            if self.y > king.y:\n                if sum(1 for i in range(self.y-1,king.y,-1) if board[i][king.x] != \"#\" and ) == 0:\n                    return True\n            else:\n                if sum(1 for i in range(self.y+1,king.y) if board[i][king.x] != \"#\" and ) == 0:\n                    return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x-1,king.x, -1) if board[self.y][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x+1,king.x) if board[self.y][i] != \"#\") == 0:\n                    return True\n        return False\n\nclass Bishop(self, y, x):\n     def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.x == self.x:\n            if self.y > king.y:\n                if sum(1 for i in range(self.y-1,king.y,-1) if board[i][king.x] != \"#\" and ) == 0:\n                    return True\n            else:\n                if sum(1 for i in range(self.y+1,king.y) if board[i][king.x] != \"#\" and ) == 0:\n                    return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x-1,king.x, -1) if board[self.y][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x+1,king.x) if board[self.y][i] != \"#\") == 0:\n                    return True\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.y+king.x == self.x+self.y and king.x>self.x:\n            if sum(1 for i in range(king.x-self.x) if board[self.y-i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            #print(self.y, self.x, king.y, king.x , [(self.y+i,self.x+i )for i in range(1,king.y)] ,  [board[self.y+i][self.x+i]for i in range(1,king.y)])\n            if sum(1 for i in range(king.x-self.x) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y-i][self.x-i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Queen(self, y, x):\n     def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.y+king.x == self.x+self.y and king.x>self.x:\n            if sum(1 for i in range(king.x-self.x) if board[self.y-i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            #print(self.y, self.x, king.y, king.x , [(self.y+i,self.x+i )for i in range(1,king.y)] ,  [board[self.y+i][self.x+i]for i in range(1,king.y)])\n            if sum(1 for i in range(king.x-self.x) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y-i][self.x-i] != \"#\") == 0:\n                    return True\n        return False  \n\ndef waysToGiveACheck(board, k, our_characters):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            new_board = copy.deepcopy(board)\n            new_board[1][i] = \"#\"\n            ways_2 = 0\n            if any(character.check(king, new_board) for character in our_characters+[Rook(0,i)]):\n                ways_2+=1\n            elif any(character.check(king, new_board) for character in our_characters+[Bishop(0,i)]):\n                ways_2+=1\n            elif ways_2>0:\n                ways_2+=1\n            elif any(character.check(king, new_board) for character in our_characters+[K(0,i)]):\n                ways_2+=1\n            ways += ways_2\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        our_characters = []\n        for board_i in range(8):\n            board_t = input().strip()\n            for s in range(8):\n                if board_t[s] == \"k\":\n                    k=King(board_i, d)\n                elif board_t[s] == \"Q\":\n                    our_characters.append(Queen(board_i, s))\n                elif board_t[s] == \"B\":\n                    our_characters.append(Bishop(board_i, s))\n                elif board_t[s] == \"R\":\n                    our_characters.append(Rook(board_i, s))\n                elif board_t[s] == \"N\":\n                    our_characters.append(Knight(board_i, s))\n                \n            board.append(board_t)\n        #print(\"\\n\".join(board))\n        result = waysToGiveACheck(board, k, our_characters)\n        print(result)\n\n\n","offset":5192,"fileType":"python3","requestStartTime":1518013174175}}
{"body": {"column":31,"line":14,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    x=len(board)\n    r=c=k=q=r=b=0\n    for i in range(t):\n        for j in range(0,x):\n            if('k' in board[j][0]):\n                r=board[j][0].index('k')+1\n                c=j+1\n                pr=7\n                pc=board[7][0].\n                if(r-pr==2):\n                    k=k+1\n                else:    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":299,"fileType":"python3","requestStartTime":1518061842807}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    results = [rock for rock in rocks_dict.values()]\n    l = len(results)\n    result = ''\n    for i in range(0,l-1):\n        s = \"set(results[{}])\".format(i)\n        result += '&'.\n    return r\n    #return set(results[0]) & set(results[1]) & set(results[2])\n        \n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":560,"fileType":"python3","requestStartTime":1518013255997}}
{"body": {"column":15,"line":22,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n\ndef gemstones(arr):\n    rocks_dict = {}\n    for rock in arr:\n        if rock not in rocks_dict:\n            rocks_dict[rock] = []\n        for gem in rock:\n            if gem not in rocks_dict[rock]:\n                rocks_dict[rock].append(gem)\n    \n    #l = len(rocks_dict)\n    #result = set(rocks_dict[0]) & set(rocks_dict[1]) & set(rocks_dict[2])\n    results = [rock for rock in rocks_dict.values()]\n    l = len(results)\n    result = []\n    for i in range(0,l-1):\n        s = \"set(results[{}])\".format(i)\n        result. += '&'.join(s)\n    return r\n    #return set(results[0]) & set(results[1]) & set(results[2])\n        \n            \nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n    arr_t = str(input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n\n\n","offset":553,"fileType":"python3","requestStartTime":1518013275333}}
{"body": {"column":28,"line":3,"wordToComplete":"","code":"\nT = int(input())\nfor _ in range(T):\n    A, M = map(int, input().)\n\n","offset":66,"fileType":"python3","requestStartTime":1518013485631}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for i in range (0, N):\n        command = str(input())\n        if command == \"print\":\n            print(L)\n        elif command == \"sort\":\n            L.\n\n\n","offset":217,"fileType":"python3","requestStartTime":1518013782258}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for i in range (0, N):\n        command = str(input())\n        if command == \"print\":\n            print(L)\n        elif command == \"sort\":\n            L.sort()\n        elif \"insert\" in command:\n            L.\n\n\n","offset":272,"fileType":"python3","requestStartTime":1518013814864}}
{"body": {"column":37,"line":7,"wordToComplete":"0.","code":"\nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    ar = []\n    print([[i,j,k] for i in range( 0.x + 1) for j in range( y + 1) for k in range( z + 1) if ( i + j + k)! = n])\n    \n    x, y, z, n = int(input()), int(input()), int(input()), int(input())\nprint ([[a,b,c] for a in range(0,x+1) for b in range(0,y+1) for c in range(0,z+1) if a + b + c != n ])\n\n","offset":162,"fileType":"python3","requestStartTime":1518013836316}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.==None and headB==None:\n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":333,"fileType":"python3","requestStartTime":1518013832952}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.headB==None:\n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":333,"fileType":"python3","requestStartTime":1518013838921}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA. headB==None:\n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":333,"fileType":"python3","requestStartTime":1518013841366}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.data==headB.:\n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":345,"fileType":"python3","requestStartTime":1518013855371}}
{"body": {"column":40,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.data==headB.data and headA.:\n        \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":360,"fileType":"python3","requestStartTime":1518013880329}}
{"body": {"column":61,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.data==headB.data and headA.data!=None and headB.:\n        \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":381,"fileType":"python3","requestStartTime":1518013890024}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for i in range (0, N):\n        command = str(input())\n        if command == \"print\":\n            print(L)\n        elif command == \"sort\":\n            L.sort()\n        elif \"insert\" in command:\n            L.insert(int(command[7]), int(command[9]))\n        elif \"remove\" in command:\n            L.\n\n\n","offset":361,"fileType":"python3","requestStartTime":1518013909040}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.data==headB.data and headA.data!=None and headB.data!=None:\n        CompareLists(headA.)\n        \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":420,"fileType":"python3","requestStartTime":1518013911060}}
{"body": {"column":38,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef CompareLists(headA, headB):\n    if headA.data==headB.data and headA.data!=None and headB.data!=None:\n        CompareLists(headA.next,headB.)\n        \n        \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":431,"fileType":"python3","requestStartTime":1518013916656}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for i in range (0, N):\n        command = str(input())\n        if command == \"print\":\n            print(L)\n        elif command == \"sort\":\n            L.sort()\n        elif \"insert\" in command:\n            L.insert(int(command[7]), int(command[9]))\n        elif \"remove\" in command:\n            L.remove(int(command[7]))\n        elif command == reverse:\n            L.\n\n\n","offset":432,"fileType":"python3","requestStartTime":1518013931170}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for i in range (0, N):\n        command = str(input())\n        if command == \"print\":\n            print(L)\n        elif command == \"sort\":\n            L.sort()\n        elif \"insert\" in command:\n            L.insert(int(command[7]), int(command[9]))\n        elif \"remove\" in command:\n            L.remove(int(command[7]))\n        elif command == reverse:\n            L.reverse()\n        elif \"append\" in command:\n            L.\n\n\n","offset":490,"fileType":"python3","requestStartTime":1518013951470}}
{"body": {"column":14,"line":19,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(input())\n    L = []\n    for i in range (0, N):\n        command = str(input())\n        if command == \"print\":\n            print(L)\n        elif command == \"sort\":\n            L.sort()\n        elif \"insert\" in command:\n            L.insert(int(command[7]), int(command[9]))\n        elif \"remove\" in command:\n            L.remove(int(command[7]))\n        elif command == reverse:\n            L.reverse()\n        elif \"append\" in command:\n            L.append(int(command[7]))\n        elif command = pop:\n            L.\n\n\n","offset":556,"fileType":"python3","requestStartTime":1518013979220}}
{"body": {"column":41,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    #find the king and pawn\n    for i in range(8):\n        for j in range(8):\n            if board[i][j]=='k':\n                ki=i\n                kj=j\n            elif (board[i][j]=='P') & (i>) :\n                if \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":253,"fileType":"python3","requestStartTime":1518014012101}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef count_coins(coinDenominations, monetaryValue):\n    sorted(coinDenominations) \n    coinDenominations[::-1]\n    coins_needed = []\n    for coin in coinDenominations: \n        while monetaryValue - coin > 0:\n            monetaryValue -= coin\n            coins_needed.\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    coinDenominations_cnt = 0\n    coinDenominations_cnt = int(input())\n    coinDenominations_i = 0\n    coinDenominations = []\n    while coinDenominations_i < coinDenominations_cnt:\n        coinDenominations_item = int(input())\n        coinDenominations.append(coinDenominations_item)\n        coinDenominations_i += 1\n\n\n    monetaryValue = int(input())\n\n    res = count_coins(coinDenominations, monetaryValue);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":339,"fileType":"python3","requestStartTime":1518014028124}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"\nimport re\n\ns = input()\nk = input()\nexit = False\nmatches = [(-1,-1)]\noffset = 0\nwhile not exit:\n    m = re.search(k,s)\n    if m == None:\n        \n        exit = True\n    else:\n        if matches[0] == (-1,-1):\n            matches[0] = (m.start(),m.end())\n        else:\n            matches.append((m.start()+offset,m.end()))\n            s = s[m.start()+1:]\n            offset += m.\n            print(s)\n        \nprint(matches)\n#for i in m:\n #   print(i.start())\n\n","offset":381,"fileType":"python3","requestStartTime":1518014081993}}
{"body": {"column":65,"line":16,"wordToComplete":"if the king is a knight move away, there is exactly one way.","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    #find the king and pawn\n    for i in range(8):\n        for j in range(8):\n            if board[i][j]=='k':\n                ki=i\n                kj=j\n            elif (board[i][j]=='P') & (i>0) :\n                if board[i-1][j]=='#':\n                    pi=i\n                    pj=j\n    #if the king is a knight move away, there is exactly one way.\n\n                    \n                    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":412,"fileType":"python3","requestStartTime":1518014174290}}
{"body": {"column":94,"line":18,"wordToComplete":"if the king is a rook/bishop move away, check to see if there are any pieces obstructing.","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    #find the king and pawn\n    for i in range(8):\n        for j in range(8):\n            if board[i][j]=='k':\n                ki=i\n                kj=j\n            elif (board[i][j]=='P') & (i>0) :\n                if board[i-1][j]=='#':\n                    pi=i\n                    pj=j\n    #if the king is a knight move away, there is exactly one way.\n    \n    #if the king is a rook/bishop move away, check to see if there are any pieces obstructing.\n\n                    \n                    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":512,"fileType":"python3","requestStartTime":1518014202920}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\nfrom collections import OrderedDict\nN = int(input())\norders = OrderedDict()\nfor x in range(N):\n    order = intput()\n    OrderedDict[\" \".]\n    \n\n\n","offset":138,"fileType":"python3","requestStartTime":1518014208112}}
{"body": {"column":30,"line":20,"wordToComplete":"otherwise answer is zero.","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    #find the king and pawn\n    for i in range(8):\n        for j in range(8):\n            if board[i][j]=='k':\n                ki=i\n                kj=j\n            elif (board[i][j]=='P') & (i>0) :\n                if board[i-1][j]=='#':\n                    pi=i\n                    pj=j\n    #if the king is a knight move away, there is exactly one way.\n    \n    #if the king is a rook/bishop move away, check to see if there are any pieces obstructing.\n    \n    #otherwise answer is zero.\n\n                    \n                    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":548,"fileType":"python3","requestStartTime":1518014209640}}
{"body": {"column":31,"line":6,"wordToComplete":"","code":"\nfrom collections import OrderedDict\nN = int(input())\norders = OrderedDict()\nfor x in range(N):\n    order = intput()\n    OrderedDict[\" \".join(order.)]\n    \n\n\n","offset":149,"fileType":"python3","requestStartTime":1518014214935}}
{"body": {"column":53,"line":6,"wordToComplete":"","code":"\nfrom collections import OrderedDict\nN = int(input())\norders = OrderedDict()\nfor x in range(N):\n    order = intput()\n    OrderedDict[\" \".join(order.split())] = int(order.)\n    \n\n\n","offset":171,"fileType":"python3","requestStartTime":1518014227586}}
{"body": {"column":11,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport itertools\n\ndef anotherMinimaxProblem(a):\n    # Complete this function\n    pl = l.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    result = anotherMinimaxProblem(a)\n    print(result)\n\n\n","offset":117,"fileType":"python3","requestStartTime":1518014451338}}
{"body": {"column":11,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport itertools\n\ndef anotherMinimaxProblem(a):\n    # Complete this function\n    pl = l.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    result = anotherMinimaxProblem(a)\n    print(result)\n\n\n","offset":117,"fileType":"python3","requestStartTime":1518014453639}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\nimport itertools\n\ndef anotherMinimaxProblem(a):\n    # Complete this function\n    pl = itertools.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = list(map(int, input().strip().split(' ')))\n    result = anotherMinimaxProblem(a)\n    print(result)\n\n\n","offset":125,"fileType":"python3","requestStartTime":1518014460745}}
{"body": {"column":8,"line":12,"wordToComplete":"","code":"\nfrom collections import OrderedDict\nN = int(input())\norders = OrderedDict()\nfor x in range(N):\n    order = input()\n    key = \" \".join(order.split()[0:-1])\n    value = int(order.split()[-1])\n    if key in orders:\n        orders[\" \".join(order.split()[0:-1])] += int(order.split()[-1])\n    else:\n        orders[\" \".join(order.split()[0:-1])] = int(order.split()[-1])\nfor key. in orders:\n    print(\"%s %s\" %())\n    \n\n\n","offset":375,"fileType":"python3","requestStartTime":1518014525029}}
{"body": {"column":40,"line":1,"wordToComplete":"","code":"\nnum, denom = [float(x) for x in input().]\n\n","offset":42,"fileType":"python3","requestStartTime":1518014598689}}
{"body": {"column":14,"line":3,"wordToComplete":"","code":"\nimport scipy.stats.iqr;\n\nQ1,Q2,Q3 = np.\n\n","offset":41,"fileType":"python3","requestStartTime":1518014706921}}
{"body": {"column":22,"line":125,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef validPosition(x,y):\n    return x >= 0 and x < 8 and y >= 0 and y < 8\n\ndef waysToGiveACheck(board,king):\n    ways = 0\n    \n    pawns = [i for i, ch in enumerate(board[6]) if ch == 'P'] #return pawn indexes in row 7\n    for i in pawns:\n        pawnDoesCheck = False\n        pawn_ways = 0\n        board[6][i] = '#'\n        board[7][i] = 'X' #promoted pawn\n        \n        #knighs\n        for i,j in [(1,2),(-1,2),(2,1),(2,-1),(1,-2),(-1,-2),(-2,1),(-2,-1)]:\n            x = king[0] + i\n            y = king[1] + j\n            if validPosition(x,y):\n                if board[y][x] == 'N':\n                    ways += 1\n                elif board[y][x] == 'X':\n                    ways += 1\n                    pawnDoesCheck = True\n                    \n        \n        #other pieces\n        upper_left_diagonal = True\n        upper_right_diagonal = True\n        lower_left_diagonal = True\n        lower_right_diagonal = True\n        up = True\n        down = True\n        left = True\n        right = True\n        \n        #for i in range(8):\n            #print(board[i])\n        \n        for i in range(1,8):\n            if upper_left_diagonal:\n                x = king[0] - i\n                y = king[1] - i\n                if validPosition(x,y) and board[y][x] in ['Q','B']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'B'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    upper_left_diagonal = False\n            if upper_right_diagonal:\n                x = king[0] + i\n                y = king[1] - i\n                if validPosition(x,y) and board[y][x] in ['Q','B']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'B'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    upper_right_diagonal = False\n            if lower_right_diagonal:\n                x = king[0] + i\n                y = king[1] + i\n                if validPosition(x,y) and board[y][x] in ['Q','B']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'B'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    lower_right_diagonal = False\n            if lower_left_diagonal:\n                x = king[0] - i\n                y = king[1] + i\n                if validPosition(x,y) and board[y][x] in ['Q','B']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'B'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    lower_left_diagonal = False\n            if up:\n                x = king[0]\n                y = king[1] - i\n                if validPosition(x,y) and board[y][x] in ['Q','R']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'R'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    up = False\n            if down:\n                x = king[0]\n                y = king[1] + i\n                if validPosition(x,y) and board[y][x] in ['Q','R']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'R'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    down = False\n            if left:\n                x = king[0] - i\n                y = king[1]\n                if validPosition(x,y) and board[y][x] in ['Q','R']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'R'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    left = False\n            if right:\n                x = king[0] + i\n                y = king[1]\n                if validPosition(x,y) and board[y][x] in ['Q','R']:\n                    pawn_ways += 1\n                elif validPosition(x,y) and board[y][x] == 'X':\n                    pawn_ways += 2 #'Q' and 'R'\n                    pawnDoesCheck = True\n                elif not(validPosition(x,y)) or board[y][x] != '#':\n                    right = False \n            \n        if pawn_ways >\n        \n        board[6][i] = 'P'\n        board[7][i] = '#'\n        \n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            row = list(input().strip())\n            if 'k' in row:\n                king_position = [row.index('k'),7-board_i]\n            board = [row] + board\n        result = waysToGiveACheck(board,king_position)\n        print(result)\n\n\n","offset":4817,"fileType":"python3","requestStartTime":1518014708257}}
{"body": {"column":17,"line":3,"wordToComplete":"","code":"\nimport numpy as np;\n\nQ1,Q2,Q3 = np.np.\n\n","offset":40,"fileType":"python3","requestStartTime":1518014724835}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef roman_numeral_to_int(string):\n    value = []\n    roman = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    for i in range(len(string)):\n        value.\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        string = str(input())\n    except:\n        string = None\n\n    res = roman_numeral_to_int(string);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":233,"fileType":"python3","requestStartTime":1518014738904}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef roman_numeral_to_int(string):\n    value = []\n    roman = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    for i in range(len(string)):\n        value.append(roman.)\n            \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        string = str(input())\n    except:\n        string = None\n\n    res = roman_numeral_to_int(string);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":246,"fileType":"python3","requestStartTime":1518014750236}}
{"body": {"column":41,"line":115,"wordToComplete":"","code":"\n#!/bin/python3\nimport copy\n\nclass King:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\nclass Knight: #pass\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.x == self.x - 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y + 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y + 1:\n            return True\n        if king.x == self.x - 2 and king.y == self.y - 1:\n            return True\n        if king.x == self.x - 1 and king.y == self.y - 2:\n            return True\n        if king.x == self.x + 1 and king.y == self.y - 2:\n            return True\n        if king.x == self.x + 2 and king.y == self.y - 1:\n            return True\n        return False\n    \nclass Rook: #pass\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.x == self.x:\n            if self.y > king.y:\n                if sum(1 for i in range(self.y-1,king.y,-1) if board[i][king.x] != \"#\" ) == 0:\n                    return True\n            else:\n                if sum(1 for i in range(self.y+1,king.y) if board[i][king.x] != \"#\") == 0:\n                    return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x-1,king.x, -1) if board[self.y][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x+1,king.x) if board[self.y][i] != \"#\") == 0:\n                    return True\n        return False\n\nclass Bishop:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.y+king.x == self.x+self.y and king.x>self.x:\n            if sum(1 for i in range(king.x-self.x) if board[self.y-i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            #print(self.y, self.x, king.y, king.x , [(self.y+i,self.x+i )for i in range(1,king.y)] ,  [board[self.y+i][self.x+i]for i in range(1,king.y)])\n            if sum(1 for i in range(king.x-self.x) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y-i][self.x-i] != \"#\") == 0:\n                    return True\n        return False\n    \nclass Queen:\n    def __init__(self, y, x):\n        self.x = x\n        self.y = y\n    def check(self, king, board):\n        if king.x == self.x:\n            if self.y > king.y:\n                if sum(1 for i in range(self.y-1,king.y,-1) if board[i][king.x] != \"#\" ) == 0:\n                    return True\n            else:\n                if sum(1 for i in range(self.y+1,king.y) if board[i][king.x] != \"#\") == 0:\n                    return True\n        elif king.y == self.y:\n            if self.x > king.x:\n                if sum(1 for i in range(self.x-1,king.x, -1) if board[self.y][i] != \"#\") == 0:\n                    return True \n            else:\n                if sum(1 for i in range(self.x+1,king.x) if board[self.y][i] != \"#\") == 0:\n                    return True\n        if king.y+king.x == self.x+self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y+i][self.x-i] != \"#\") == 0:\n                    return True\n        if king.y+king.x == self.x+self.y and king.x>self.x:\n            if sum(1 for i in range(king.x-self.x) if board[self.y-i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x>self.x:\n            #print(self.y, self.x, king.y, king.x , [(self.y+i,self.x+i )for i in range(1,king.y)] ,  [board[self.y+i][self.x+i]for i in range(1,king.y)])\n            if sum(1 for i in range(king.x-self.x) if board[self.y+i][self.x+i] != \"#\") == 0:\n                    return True\n        if king.x-king.y == self.x-self.y and king.x<self.x:\n            if sum(1 for i in range(self.x-king.x) if board[self.y-i][self.x-i] != \"#\") == 0:\n                    return True\n        return False\n\ndef waysToGiveACheck(board, king, our_characters):\n    # Complete this function\n    ways = 0\n    for i in range(8):\n        if board[1][i] == \"P\" and board[0][i] == \"#\": # use k\n            new_board = copy.deepcopy(board)\n            new_board[1][i] = \"#\"\n            print(\"\\n\".join(map(str,new_board)))\n            ways_2 = 0\n            print([(character,(character.,character.y),character.check(king, new_board)) for character in our_characters+[Rook(0,i)]])\n            if any(character.check(king, new_board) for character in our_characters+[Rook(0,i)]):\n                ways_2+=1\n            print([(character,(character.x,character.y),character.check(king, new_board)) for character in our_characters+[Bishop(0,i)]])\n            if any(character.check(king, new_board) for character in our_characters+[Bishop(0,i)]):\n                ways_2+=1\n            if ways_2>0:\n                ways_2+=1\n            print([(character,(character.x,character.y),character.check(king, new_board)) for character in our_characters+[Knight(0,i)]])\n            if any(character.check(king, new_board) for character in our_characters+[Knight(0,i)]):\n                ways_2+=1\n            print(ways_2)\n            ways += ways_2\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        k=None\n        our_characters = []\n        for board_i in range(8):\n            board_t = list(input().strip())\n            for s in range(8):\n                if board_t[s] == \"k\":\n                    k=King(board_i, s)\n                elif board_t[s] == \"Q\":\n                    our_characters.append(Queen(board_i, s))\n                elif board_t[s] == \"B\":\n                    our_characters.append(Bishop(board_i, s))\n                elif board_t[s] == \"R\":\n                    our_characters.append(Rook(board_i, s))\n                elif board_t[s] == \"N\":\n                    our_characters.append(Knight(board_i, s))\n                \n            board.append(board_t)\n        print(our_characters)\n        #print(\"\\n\".join(board))\n        result = waysToGiveACheck(board, k, our_characters)\n        print(result)\n\n\n","offset":4833,"fileType":"python3","requestStartTime":1518014840539}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nchange_shape=numpy.array([x for x in range(1,10)])\nprint(change_shape.)\n\n\n\n","offset":97,"fileType":"python3","requestStartTime":1518014866478}}
{"body": {"column":40,"line":1,"wordToComplete":"","code":"\nnum, denom = [float(x) for x in input().]\n\n","offset":42,"fileType":"python3","requestStartTime":1518014896466}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef designerPdfViewer(h, word):\n    letters = list(word.\n\nif __name__ == \"__main__\":\n    h = list(map(int, input().strip().split(' ')))\n    word = input().strip()\n    result = designerPdfViewer(h, word)\n    print(result)\n\n\n","offset":86,"fileType":"python3","requestStartTime":1518015073789}}
{"body": {"column":25,"line":83,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef getPhoneX(board):\n    return board[1][0].index('P')\n\ndef getKingXY(board):\n    for y, row in enumerate(board):\n        if 'k' in row[0]:\n            return row[0].index('k'), y\n\ndef isKnightPath(px, py, kx, ky):\n    return (abs(px - kx) == 1 and abs(py - ky) == 2) or (abs(px - kx) == 2 and abs(py - ky) == 1)\n    \n        \ndef isDiagonalPath(px, py, kx, ky, board): \n    if ky == abs(px - kx):\n        inc = 1 if px < kx else -1\n        x = px\n        for y in range(1, ky):\n            x += inc\n            if board[y][0][x] != '#': return False\n        return True\n            \n    else:\n        return False\n\n\ndef isStraightPath(px, py, kx, ky, board):\n    if px == kx:\n        for y in range(1, ky):\n            if board[y][0][px] != '#': return False\n        return True\n        \n    elif py == ky: # ky == 0\n        for x in range(min(px, kx) + 1, max(px, kx)):\n            if board[0][0][x] != '#': return False\n        return True\n    \n    else:\n        return False\n\n\ndef isHorizontalDiscovered(kx, row, mark):\n    if mark in row:\n        rx = row.index(mark)\n        sub = row[min(kx, rx) + 1:max(kx, rx)]\n        if ('P' in sub) and (sub.count('#') == len(sub) - 1):\n            return True\n    return False\n    \n    \ndef isDiagonalDiscovered(kx, ky, board, mark):\n    if mark in board[0][0]:\n        rx = board[0][0].index(mark)\n\n        isP = False\n        isOther = False\n        x = rx\n        inc = 1 if rx < kx else -1\n        for y in range(1, ky):\n            x += inc\n            if board[y][0][x] == 'P': isP = True\n            elif board[y][0][x] != '#': isOther = True  \n\n        return isP and (not isOther)\n    return False\n\n\ndef isDiscovered(px, kx, ky, board):\n    if isHorizontalDiscovered(kx, board[1][0], 'R') or isHorizontalDiscovered(kx, board[1][0], 'Q'): return True\n \n    if isDiagonalDiscovered(kx, ky, board, 'B') or isDiagonalDiscovered(kx, ky, board, 'Q'): return True\n            \n    return False\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    count = 0\n\n    px, py = board[1][0]. 0\n    \n    for px in range(0, 8):\n        if board[1][0][px] != 'P': continue\n\n        kx, ky = getKingXY(board)\n\n        if isDiscovered(px, kx, ky, board): \n            count += 4\n            continue\n        \n        if isKnightPath(px, py, kx, ky): count += 1\n        isDiagonal = isDiagonalPath(px, py, kx, ky, board)\n        isStraight = isStraightPath(px, py, kx, ky, board)\n        \n        if isDiagonal: count += 2\n        if isStraight: count += 2\n        if isDiagonal and isStraight: count -= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2073,"fileType":"python3","requestStartTime":1518015110003}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    list_iter = head\n    while list_iter is not None:\n        print(list_iter.)\n\n\n","offset":355,"fileType":"python3","requestStartTime":1518015113093}}
{"body": {"column":35,"line":190,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\nclass position:\n    def __init__(self,xpos,ypos):\n        self.x = xpos\n        self.y = ypos\n        \ndef identify_my_king(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='K':\n                k=position(x,y)\n                return k\n\ndef checked_by_oppent_if_pawn_moves(pawn,king,x_step,y_step,board):    \n    current_x=pawn.x\n    current_y=pawn.y\n    current_x += x_step\n    current_y += y_step\n    while still_on_board(current_x,current_y):\n        if board[current_x][current_y] == 'q':\n            return True\n        elif board[current_x][current_y] == 'r':\n            if (x_step == 0 or y_step == 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] == 'b':\n            if (x_step != 0 and y_step != 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != '#':\n            return False           \n            \n        current_x += x_step\n        current_y += y_step  \n    return False           \n        \ndef ilegit_to_move_pawn(p,board):\n    pawn=position(p.x,p.y)\n    king=identify_my_king(board)    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            if checked_by_oppent_if_pawn_moves(pawn,king,x_step,y_step,board):\n                return True\n            else:\n                return False\n    else:\n        return False  \n\ndef identify_pawn_to_be_promoted(board):\n    for y in range(8):\n        if board[1][y]=='P':\n            if board[0][y]=='#':\n                p=position(1,y)\n                if ilegit_to_move_pawn(p,board):\n                    dummy=1\n                else:\n                    return p\n            \ndef identify_king_to_be_checked(board):\n    for x in range(8):\n        for y in range(8):\n            if board[x][y]=='k':\n                k=position(x,y)\n                return k\n            \ndef find_x_step(pawn,king):\n    x_distance=pawn.x-king.x\n    if x_distance > 0:\n        x_step = 1\n    elif x_distance < 0:\n        x_step = -1\n    else:\n        x_step = 0\n    return x_step\n\ndef find_y_step(pawn,king):\n    y_distance=pawn.y-king.y\n    if y_distance > 0:\n        y_step = 1\n    elif y_distance < 0:\n        y_step = -1\n    else:\n        y_step = 0\n    return y_step\n\ndef discovered_possible(pawn,king):\n    if (pawn.x == king.x or pawn.y == king.y or abs(pawn.x - king.x) == abs(pawn.y - king.y)):\n        return True\n    else:\n        return False\n    \ndef path_between_is_clear(pawn,king,x_step,y_step,board):\n    current_x=king.x\n    current_y=king.y\n    current_x += x_step\n    current_y += y_step    \n    while (current_x != pawn.x and current_y != pawn.y):\n        if board[current_x][current_y] != '#':\n            return False     \n        current_x += x_step\n        current_y += y_step\n    return True\n\ndef still_on_board(x,y):\n    if (x < 8 and y < 8 and x >= 0 and y >= 0):\n        return True\n    else:\n        return False\n\ndef checked_by_move(pawn,king,x_step,y_step,board):    \n    current_x=pawn.x\n    current_y=pawn.y\n    current_x += x_step\n    current_y += y_step\n    while still_on_board(current_x,current_y):\n        if board[current_x][current_y] == 'Q':\n            return True\n        elif board[current_x][current_y] == 'R':\n            if (x_step == 0 or y_step == 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] == 'B':\n            if (x_step != 0 and y_step != 0):\n                return True\n            else:\n                return False\n        elif board[current_x][current_y] != '#':\n            return False           \n            \n        current_x += x_step\n        current_y += y_step  \n    return False\n            \ndef check_for_discovered(pawn,king,board):    \n    if discovered_possible(pawn,king):        \n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            if checked_by_move(pawn,king,x_step,y_step,board):\n                return True\n            else:\n                return False\n    else:\n        return False\n        \ndef horse_check_possible(pawn, king):\n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)\n    if (ydist == 1 and xdist == 2) or (ydist == 2 and xdist == 1):\n        return True\n    else:\n        return False\n    \ndef root_check_possibel(pawn, king):    \n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)\n    if xdist == 0 or ydist == 0:\n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef bishop_check_possible(pawn, king):\n    xdist=abs(pawn.x-king.x)\n    ydist=abs(pawn.y-king.y)    \n    if xdist == ydist:\n        x_step=find_x_step(pawn,king)\n        y_step=find_y_step(pawn,king)\n        if path_between_is_clear(pawn,king,x_step,y_step,board):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef waysToGiveACheck(board):\n    pawn_list=identify_pawn_to_be_promoted(board)\n    for x in range(len(pawn_list)):\n    king=identify_king_to_be_checked(board)\n    \n    if check_for_discovered(pawn,king,board):\n        return 4\n    else:\n        promoted_pawn=position(0,pawn.y)\n        if horse_check_possible(promoted_pawn, king):\n            return 1\n        elif root_check_possibel(promoted_pawn, king):\n            return 2\n        elif bishop_check_possible(promoted_pawn, king):\n            return 2        \n        return 0\n            \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(*board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":5403,"fileType":"python3","requestStartTime":1518015135192}}
{"body": {"column":30,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    list_iter = head\n    while list_iter is not None:\n        print(list_iter.data)\n        list_iter = list_iter.\n\n\n","offset":391,"fileType":"python3","requestStartTime":1518015152118}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef designerPdfViewer(h, word):\n    letters = list(word).\n    print (letters)\n\nif __name__ == \"__main__\":\n    h = list(map(int, input().strip().split(' ')))\n    word = input().strip()\n    result = designerPdfViewer(h, word)\n    print(result)\n\n\n","offset":87,"fileType":"python3","requestStartTime":1518015199746}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"import sys\n\nclass Solution:\n    # Write your code here\n    Queue   \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":68,"fileType":"python3","requestStartTime":1518015227032}}
{"body": {"column":9,"line":4,"wordToComplete":"Queue","code":"import sys\n\nclass Solution:\n    # Write your code here\n    Queue\n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":65,"fileType":"python3","requestStartTime":1518015228693}}
{"body": {"column":9,"line":4,"wordToComplete":"Queue","code":"import sys\n\nclass Solution:\n    # Write your code here\n    Queue\n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":65,"fileType":"python3","requestStartTime":1518015229696}}
{"body": {"column":8,"line":4,"wordToComplete":"Queu","code":"import sys\n\nclass Solution:\n    # Write your code here\n    Queu\n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":64,"fileType":"python3","requestStartTime":1518015230377}}
{"body": {"column":8,"line":4,"wordToComplete":"Queu","code":"import sys\n\nclass Solution:\n    # Write your code here\n    Queu\n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":64,"fileType":"python3","requestStartTime":1518015230863}}
{"body": {"column":8,"line":4,"wordToComplete":"Queu","code":"import sys\n\nclass Solution:\n    # Write your code here\n    Queu\n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":64,"fileType":"python3","requestStartTime":1518015231242}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    list_iter = head\n    while list_iter.\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":386,"fileType":"python3","requestStartTime":1518015231429}}
{"body": {"column":30,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    list_iter = head\n    while list_iter.next is not None:\n        list_iter = list_iter.\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":434,"fileType":"python3","requestStartTime":1518015247263}}
{"body": {"column":14,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    list_iter = head\n    while list_iter.next is not None:\n        list_iter = list_iter.next\n    list_iter.\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":453,"fileType":"python3","requestStartTime":1518015255523}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef designerPdfViewer(h, word):\n    numbers = []\n    letters = list(word)\n    for i in range(len(letters)):\n        number = ord(character) - 96\n        numbers.\n\nif __name__ == \"__main__\":\n    h = list(map(int, input().strip().split(' ')))\n    word = input().strip()\n    result = designerPdfViewer(h, word)\n    print(result)\n\n\n","offset":191,"fileType":"python3","requestStartTime":1518015400479}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":102,"fileType":"python3","requestStartTime":1518015459160}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hasKing(board, rank, file):\n    return board[rank][file] == 'k'\n\ndef givesCheck(board, file, piecetype):\n    if piecetype == 'N':\n        if file > 1 and hasKing(board, 1, file - 2): return True\n        if file >\n            \n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":246,"fileType":"python3","requestStartTime":1518015468940}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n    \n    def pushCharecter(s):\n        self.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":164,"fileType":"python3","requestStartTime":1518015488778}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n    \n    def pushCharecter(s):\n        self.q.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":166,"fileType":"python3","requestStartTime":1518015492495}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n    \n    def pushCharecter(s):\n        self.q.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":166,"fileType":"python3","requestStartTime":1518015495504}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n    \n    def pushCharecter(s):\n        self.q.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":166,"fileType":"python3","requestStartTime":1518015496195}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n    \n    def pushCharecter(s):\n        self.q.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":166,"fileType":"python3","requestStartTime":1518015496591}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.\n    \n    def pushCharecter(s):\n        self.q.put(s)\n    \n    def popCharecter()\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":133,"fileType":"python3","requestStartTime":1518015535518}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.stack = []\n    \n    def pushCharecter(s):\n        self.q.put(s)\n        self.\n    \n    def popCharecter()\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":210,"fileType":"python3","requestStartTime":1518015547576}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.stack = []\n    \n    def pushCharecter(s):\n        self.q.put(s)\n        self.stack.\n    \n    def popCharecter()\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":216,"fileType":"python3","requestStartTime":1518015549455}}
{"body": {"column":21,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    list_iter = head\n    while True:\n        if list_iter.\n        list_iter = list_iter.next\n    list_iter.next = Node(data)\n    return head\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":403,"fileType":"python3","requestStartTime":1518015557547}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.stack = []\n    \n    def pushCharecter(s):\n        self.q.put(s)\n        self.stack.append(s)\n    \n    def popCharecter(s):\n        self.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":269,"fileType":"python3","requestStartTime":1518015561624}}
{"body": {"column":15,"line":34,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport sqlite3\n\n# Complete the function below.\n\ndef main():\n    conn = sqlite3.connect('SAMPLE.db')\n    cursor = conn.cursor()\n\n    cursor.execute(\"drop table if exists ITEMS\")\n    \n    sql_statement = '''CREATE TABLE ITEMS\n    (item_id integer not null, item_name varchar(300), \n    item_description text, item_category text, \n    quantity_in_stock integer)'''\n    \n    cursor.execute(sql_statement)\n\n    items = [(101, 'Nik D300', 'Nik D300', 'DSLR Camera', 3),\n             (102, 'Can 1300', 'Can 1300', 'DSLR Camera', 5),\n             (103, 'gPhone 13S', 'gPhone 13S', 'Mobile', 10),\n             (104, 'Mic canvas', 'Mic canvas', 'Tab', 5),\n             (105, 'SnDisk 10T', 'SnDisk 10T', 'Hard Drive', 1)\n             ]\n  \n    try:\n        cursor.executemany(\"Insert into ITEMS values (?,?,?,?,?)\", items)\n        cursor.executemany(\"update ITEMS set quantity_in_stock = ? where item_id = ?\",\n                       [(4, 103),\n                        (2, 101),\n                        (0, 105)])\n        cursor.\n        #Add code below to delete items\n        \n        cursor.execute(\"select item_id from ITEMS\")\n    except:\n        return 'Unable to perform the transaction.'\n    rowout=[]     \n    for row in cursor.fetchall():\n        rowout.append(row)\n    return rowout    \n    conn.close()\n\n\n'''For testing the code, no input is required'''\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    res = main();\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":1054,"fileType":"python3","requestStartTime":1518015572551}}
{"body": {"column":15,"line":14,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.stack = []\n    \n    def pushCharecter(s):\n        self.q.put(s)\n        self.stack.append(s)\n    \n    def popCharecter():\n        self.q.get()\n    def \n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":270,"fileType":"python3","requestStartTime":1518015598252}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hasKing(board, rank, file):\n    if rank < 0 or rank >\n    return board[rank][file] == 'k'\n\ndef givesCheck(board, file, piecetype):\n    if piecetype == 'N':\n        if file > 1 and hasKing(board, 1, file - 2): return True\n        if file > 0 and hasKing(board, 2, file - 1): return True\n        if file < 7 and hasKing(board, 2, file + 1): return True\n        if file < 6 and hasKing(board, 1, file + 2): return True\n        return False\n    if piecetype == 'B' or piecetype == 'Q':\n        for i in range(1, 8):\n            f = file - i\n            \n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":87,"fileType":"python3","requestStartTime":1518015628604}}
{"body": {"column":25,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef hasKing(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file >\n    return board[rank][file] == 'k'\n\ndef givesCheck(board, file, piecetype):\n    if piecetype == 'N':\n        if file > 1 and hasKing(board, 1, file - 2): return True\n        if file > 0 and hasKing(board, 2, file - 1): return True\n        if file < 7 and hasKing(board, 2, file + 1): return True\n        if file < 6 and hasKing(board, 1, file + 2): return True\n        return False\n    if piecetype == 'B' or piecetype == 'Q':\n        for i in range(1, 8):\n            f = file - i\n            \n\ndef waysToGiveACheck(board):\n    # Complete this function\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":129,"fileType":"python3","requestStartTime":1518015635996}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.stack = []\n    \n    def enqueueCharecter(s):\n        self.q.put(s)\n        \n    def pushCharecter(s):\n        self.stack.append(s)\n    \n    def dequeueCharecter():\n        return self.q.get()\n    \n    def popCharecter():\n        return self.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":374,"fileType":"python3","requestStartTime":1518015675983}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"import sys\n\nimport Queue\nclass Solution:\n    # Write your code here\n    def __init__():\n        self.q = Queue.Queue()\n        self.stack = []\n    \n    def enqueueCharecter(s):\n        self.q.put(s)\n        \n    def pushCharecter(s):\n        self.stack.append(s)\n    \n    def dequeueCharecter():\n        return self.q.get()\n    \n    def popCharecter():\n        return self.stack.\n        \n# read the string s\ns=input()\n#Create the Solution class object\nobj=Solution()   \n\nl=len(s)\n# push/enqueue all the characters of string s to stack\nfor i in range(l):\n    obj.pushCharacter(s[i])\n    obj.enqueueCharacter(s[i])\n    \nisPalindrome=True\n'''\npop the top character from stack\ndequeue the first character from queue\ncompare both the characters\n''' \nfor i in range(l // 2):\n    if obj.popCharacter()!=obj.dequeueCharacter():\n        isPalindrome=False\n        break\n#finally print whether string s is palindrome or not.\nif isPalindrome:\n    print(\"The word, \"+s+\", is a palindrome.\")\nelse:\n    print(\"The word, \"+s+\", is not a palindrome.\")    \n","offset":380,"fileType":"python3","requestStartTime":1518015677630}}
{"body": {"column":11,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef count_inversion(A):\n    \n\ndef larrysArray(A):\n    inversion = 0\n    for i in range(len(A)):\n        if A[i] == i + 1:\n            continue\n         A.\n    return A\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for _ in range(t):\n        n = int(input().strip())\n        A = list(map(int, input().strip().split(' ')))\n        result = larrysArray(A)\n        print(result)\n\n\n\n","offset":183,"fileType":"python3","requestStartTime":1518015693095}}
{"body": {"column":33,"line":6,"wordToComplete":"","code":"\nimport math\nlambda = float(input())\nk = float(input())\n\ndef get_pdf(lambda, k):\n    return (lambda ** k) * (math.)\n\n","offset":115,"fileType":"python3","requestStartTime":1518015705809}}
{"body": {"column":62,"line":6,"wordToComplete":"","code":"\nimport math\nlambda = float(input())\nk = float(input())\n\ndef get_pdf(lambda, k):\n    return (lambda ** k) * (math.exp ** (-1 * lambda)) / math.\n\n","offset":144,"fileType":"python3","requestStartTime":1518015723233}}
{"body": {"column":8,"line":2,"wordToComplete":"","code":"\nM = input()\ninput().\n\n","offset":22,"fileType":"python3","requestStartTime":1518015738904}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nM = input()\nL1 = input().split()\nN = input()\nL2 = input().\n\n","offset":60,"fileType":"python3","requestStartTime":1518015758945}}
{"body": {"column":9,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    if head is None:\n        return Node(data)\n    node = Node(data)\n    node.\n \n\n\n\n\n","offset":420,"fileType":"python3","requestStartTime":1518015759240}}
{"body": {"column":13,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    node = Node(data)\n    if head is not None:\n        node.\n    node = Node(data)\n    node.next = head\n    return node\n \n\n\n\n\n","offset":402,"fileType":"python3","requestStartTime":1518015796873}}
{"body": {"column":11,"line":6,"wordToComplete":"","code":"\nM = input()\nL1 = input().split()\nN = input()\nL2 = input().split()\n#print(M,L1,N,L2)\nprint (!L1.)\n\n","offset":97,"fileType":"python3","requestStartTime":1518015799522}}
{"body": {"column":26,"line":6,"wordToComplete":"","code":"\nM = input()\nL1 = set(input().split())\nN = input()\nL2 = set(input().split())\n#print(M,L1,N,L2)\nprint (L1.difference(L2)).\n\n","offset":122,"fileType":"python3","requestStartTime":1518015877793}}
{"body": {"column":35,"line":6,"wordToComplete":"","code":"\nM = input()\nL1 = set(input().split())\nN = input()\nL2 = set(input().split())\n#print(M,L1,N,L2)\nprint (L1.difference(L2)).union(L2.)\n\n","offset":131,"fileType":"python3","requestStartTime":1518015884305}}
{"body": {"column":42,"line":1,"wordToComplete":"","code":"\nlam_a, lam_b = [float(x) for x in input().]\n\n","offset":44,"fileType":"python3","requestStartTime":1518015917580}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with Popen(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            f.\n        f.communicate()\n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":255,"fileType":"python3","requestStartTime":1518015927262}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with subprocess.Popen(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            f.communicate()\n       \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":161,"fileType":"python3","requestStartTime":1518015964466}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\nM = input()\nL1 = set(input().split())\nN = input()\nL2 = set(input().split())\n#print(M,L1,N,L2)\nprint ( L1.difference(L2).union(L2.difference(L1)))\nprint (!L1.)\n\n","offset":159,"fileType":"python3","requestStartTime":1518015974481}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with subprocess.(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            f.communicate()\n       \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":161,"fileType":"python3","requestStartTime":1518015980201}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSafePaths(journeys):\n    print(journeys)\n    for j in journeys:\n        print(j)\n        x,y,k = j.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    journeys_cnt = 0\n    journeys_cnt = int(input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = str(input())\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":178,"fileType":"python3","requestStartTime":1518016006170}}
{"body": {"column":23,"line":12,"wordToComplete":"a","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef braces(values):\n    brace_lst = []\n    for i in values:\n        if i == \"{\" or i == \"[\" or i == \"(\":\n            brace_lst.a\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    values_cnt = 0\n    values_cnt = int(input())\n    values_i = 0\n    values = []\n    while values_i < values_cnt:\n        try:\n            values_item = str(input())\n        except:\n            values_item = None\n        values.append(values_item)\n        values_i += 1\n\n\n    res = braces(values);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":200,"fileType":"python3","requestStartTime":1518016011497}}
{"body": {"column":25,"line":7,"wordToComplete":"","code":"\nM = input()\nL1 = set(input().split())\nN = input()\nL2 = set(input().split())\n#print(M,L1,N,L2)\nprint ( L1.difference(L2).union(L2.difference(L1)))\nprint (L1.union(L2) - L1.)\n\n","offset":173,"fileType":"python3","requestStartTime":1518016055234}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with subprocess.Popen(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            f.\n            \n            f.communicate()\n            \n       \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":266,"fileType":"python3","requestStartTime":1518016107954}}
{"body": {"column":31,"line":59,"wordToComplete":"s","code":"\n#!/bin/python3\n\nimport sys\n\ndef hasKing(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file > 7: return False\n    return board[rank][file] == 'k'\n\ndef isfree(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file > 7: return False\n    return board[rank][file] == '#'\n\ndef givesCheck(board, file, piecetype):\n    if piecetype == 'N':\n        if hasKing(board, 1, file - 2): return True\n        if hasKing(board, 2, file - 1): return True\n        if hasKing(board, 2, file + 1): return True\n        if hasKing(board, 1, file + 2): return True\n        return False\n    if piecetype == 'B' or piecetype == 'Q':\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, i, file - i)) or (freeright and hasKing(board, i, file + i)): return True\n            freeleft &= isfree(board, i, file - i)\n            freeright &= isfree(board, i, file + i)\n    if piecetype == 'R' or piecetype == 'Q':\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, 0, file - i)) or (freeright and hasKing(board, 0, file + i)): return True\n            freeleft &= isfree(board, 0, file - i)\n            freeright &= isfree(board, 0, file + i)\n        for i in range(2, 8):\n            if hasKing(board, file, i): return True\n            if not isfree(board, file, i): break\n    return False\n            \n\ndef waysToGiveACheck(board):\n    print(board)\n    ways = 0\n    for i in range(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            ways += givesCheck(board, i, 'N')\n            ways += givesCheck(board, i, 'B')\n            ways += givesCheck(board, i, 'R')\n            ways += givesCheck(board, i, 'Q')\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            #board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board_t = input().s\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":2067,"fileType":"python3","requestStartTime":1518016157842}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with subprocess.Popen(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            f.\n            \n            \n            f.communicate()\n            \n       \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":266,"fileType":"python3","requestStartTime":1518016256530}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with subprocess.Popen(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            f.\n            \n            \n            f.communicate()\n            \n       \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":266,"fileType":"python3","requestStartTime":1518016273453}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    for num in arr :\n        if num >\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":116,"fileType":"python3","requestStartTime":1518016368762}}
{"body": {"column":24,"line":110,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef numVert(index, board, iKing):\n    for i in range(2, iKing):\n        if board[i][0][index] !='#':\n            return 0\n    return 2         \n    \ndef numHoriz(index, board, jKing):\n    if jKing < index:\n        for i in range(jKing + 1, index):\n            if board[0][0][i] != '#':\n                return 0\n    if jKing < index:\n        for i in range(index+1, jKing):\n            if board[0][0][i] != '#':\n                return 0\n    return 1\n\ndef numDiag(index, board, ijKing):\n    iKing, jKing = ijKing\n    if iKing + jKing == index:\n        for i in range(1, iKing):\n            if board[i][0][index - i] != '#':\n                return 0\n    if iKing - jKing == index:\n        for i in range(1, iKing):\n            if board[i][0][index + i] != '#':\n                return 0\n    return 2\n\ndef isCheck(index, board, ijKing):\n    iKing = ijKing[0]\n    jKing = ijKing[1]\n    #print(iKing, jKing, index)\n    if jKing == index:\n        #print(\"rook/queen\")\n        return numVert(index, board, iKing)\n    if iKing == 0:\n        #print(\"rook/queen\")\n        return numHoriz(index, board, jKing)\n    if iKing + jKing == index or jKing - iKing == index:\n        #print(\"bishop/queen\")\n        return numDiag(index, board, ijKing)\n    if abs(iKing) == 2 and abs(jKing - index) == 1 or abs(iKing) == 1 and abs(jKing - index) == 2:\n        #print(\"knight\")\n        return 1\n    #print(\"neither\")\n    return 0\n\n\n\ndef isPromotable(index, board):\n    return board[0][0][index] == '#'\n\ndef findpos(k, board):\n    #print(\"len\", len(board[0][0]))\n    for i in range(len(board)):\n        for j in range(len(board[0][0])):\n            if board[i][0][j] == k:\n                return i, j\n    return (-1, -1)\n\ndef findLeft(ijKing, board):\n    iKing, jKing = ijKing\n    ans = 0\n    existsPawn = false\n    posPawn = jKing\n    if iKing != 0:\n        for j in reversed(range(jKing)):\n            if board[iKing][0][j] == 'P' and board[i-1][0][j] == '#':\n                existsPawn = true\n                posPawn = j\n                break\n            if board[i][0][jKing] != '#':\n                return 0\n        if posPawn == jking:\n            return 0\n        for j in reversed(range(posPawn)):\n            if board[iKing][0][j] == 'R' or board[iKing][0][j] == 'Q':\n                return 1\n            if board[iKing][0][j] != '#':\n                return 0\n    return 0\n\ndef findRight(ijking, board):\n    iKing, jKing = ijKing\n    ans = 0\n    existsPawn = false\n    posPawn = jKing\n    if iKing != 0:\n        for j in range(jKing + 1, 8):\n            if board[iKing][0][j] == 'P' and board[i-1][0][j] == '#':\n                existsPawn = true\n                posPawn = j\n                break\n            if board[i][0][jKing] != '#':\n                return 0\n            if posPawn == jking:\n                return 0\n            for j in reversed(range(posPawn)):\n                if board[iKing][0][j] == 'R' or board[iKing][0][j] == 'Q':\n                    return 1\n                if board[iKing][0][j] != '#':\n                    return 0\n    return 0\n\ndef findUpRight(ijking. )\n            \n\ndef findMore(ijKing, board):\n    return findLeft(ijKing, board) + findRight(ijKing, board) + findUpLeft(ijKing, board) + findUpRight(ijKing, board) + findDownLeft(ijKing, board) + findDownRight(ijKing, board)\n\ndef waysToGiveACheck(board):\n    ijKing = findpos('k', board)\n    ans = 0\n    row7 = board[1]\n    s = set();\n    for i in range(len(row7[0])):\n        if row7[0][i] == 'P' and isPromotable(i, board):\n            ans += isCheck(i, board, ijKing)\n    return ans + findMore(ijKing, board)\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":3099,"fileType":"python3","requestStartTime":1518016401938}}
{"body": {"column":37,"line":1,"wordToComplete":"","code":"\nmu, std = [float(x) for x in input().]\n\n","offset":39,"fileType":"python3","requestStartTime":1518016413785}}
{"body": {"column":37,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef find_piece(board, piece):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i, j] == 'piece':\n                return i, j\n    print('ERROR: Could not find {}'.)\n    return -1, -1\n\ndef pos_white_pawn(board):\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i, j] == 'P':\n                return i, j\n    print('ERROR: Could not find P')\n    return -1, -1\n\ndef on_a_line(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\ndef on_a_diag(x1, y1, x2, y2):\n    return abs(x1-x2) == abs(y1-y2)\n\ndef on_a_corn(x1, y1, x2, y2):\n    return abs(abs(x1-x2)-abs(y1-y2)) == 1\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":235,"fileType":"python3","requestStartTime":1518016420842}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\nmu, std = [float(x) for x in input().split()]\nx_1 = float(input())\nx_2_l, x_2_u = [float(x) for x in input().split()]\n\ndef normal_dist(mu, std, x):\n    return 1 / math.\n\ndef generate_pdf(mu, std):\n    \n\n\n\n","offset":170,"fileType":"python3","requestStartTime":1518016516631}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef roman_numeral_to_int(string):\n    cache = []\n    value = 0\n    roman = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    for i in range(len(string)):\n        if string[i] not in roman:\n            return(None)\n        cache.\n                \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        string = str(input())\n    except:\n        string = None\n\n    res = roman_numeral_to_int(string);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":307,"fileType":"python3","requestStartTime":1518016521309}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"\nimport math\n\nmu, std = [float(x) for x in input().split()]\nx_1 = float(input())\nx_2_l, x_2_u = [float(x) for x in input().split()]\n\ndef normal_dist(mu, std, x):\n    return 1 / math.\n\ndef generate_pdf(mu, std):\n    \n\n\n\n","offset":183,"fileType":"python3","requestStartTime":1518016525350}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nimport math\n\nmu, std = [float(x) for x in input().split()]\nx_1 = float(input())\nx_2_l, x_2_u = [float(x) for x in input().split()]\n\ndef normal_dist(mu, std, x):\n    return 1 / math.sqrt(math.)\n\ndef generate_pdf(mu, std):\n    \n\n\n\n","offset":193,"fileType":"python3","requestStartTime":1518016531286}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nimport random\n\n#generate num of lectures between 1 and 5\nt = random.\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n\n#for each student generate an arrival time in minutes between -1000 and 1000\n\n\n\n","offset":70,"fileType":"python3","requestStartTime":1518016669118}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nimport random\n\n#generate num of lectures between 1 and 5\nt = random.\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n\n#for each student generate an arrival time in minutes between -1000 and 1000\n\n\n\n","offset":70,"fileType":"python3","requestStartTime":1518016670062}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nimport random\n\n#generate num of lectures between 1 and 5\nt = random.\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n\n#for each student generate an arrival time in minutes between -1000 and 1000\n\n\n\n","offset":70,"fileType":"python3","requestStartTime":1518016720817}}
{"body": {"column":14,"line":1,"wordToComplete":"","code":"\nn,m = input().\n\n","offset":16,"fileType":"python3","requestStartTime":1518016777059}}
{"body": {"column":22,"line":1,"wordToComplete":"","code":"\nn,m = map(int,input().)\n\n","offset":24,"fileType":"python3","requestStartTime":1518016792499}}
{"body": {"column":51,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if acid_name.startswith('hydro') and acid_name.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":108,"fileType":"python3","requestStartTime":1518016813660}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\nimport subprocess\nimport inspect\n\n\n# Complete the function below.\n\ndef run_process(cmd_args):\n    \n        with subprocess.Popen(cmd_args, stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE) as f:\n            if response == 0:\n                f.\n                     \n            \n            f.communicate()\n            \n       \n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    cmd_args_cnt = 0\n    cmd_args_cnt = int(input())\n    cmd_args_i = 0\n    cmd_args = []\n    while cmd_args_i < cmd_args_cnt:\n        try:\n            cmd_args_item = str(input())\n        except:\n            cmd_args_item = None\n        cmd_args.append(cmd_args_item)\n        cmd_args_i += 1\n\n\n    res = run_process(cmd_args);\n    #f.write(res.decode(\"utf-8\") + \"\\n\")\n    \n   \n    \n    if 'with' in inspect.getsource(run_process):\n        f.write(\"'with' used in 'run_process' function definition.\\n\")\n    \n    if 'Popen' in inspect.getsource(run_process):\n        f.write(\"'Popen' used in 'run_process' function definition.\\n\")\n        f.write('Process Output : %s\\n' % (res.decode(\"utf-8\")))\n\n    f.close()\n\n    \n\n","offset":300,"fileType":"python3","requestStartTime":1518016823187}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\nn,m = map(int,input().split())\nN = input().\n\n","offset":45,"fileType":"python3","requestStartTime":1518016828483}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    if acid_name.startswith('hydro') and acid_name.endswith('ic')\n        print('non-metal acid')\n    elif acid_name.\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":174,"fileType":"python3","requestStartTime":1518016870946}}
{"body": {"column":25,"line":2,"wordToComplete":"","code":"\nn,m = map(int,input().split())\nN = list(map(int,input().))\n\n","offset":58,"fileType":"python3","requestStartTime":1518016908804}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef acidNaming(acid_name):\n    acid_name.\n    if acid_name.startswith('hydro') and acid_name.endswith('ic'):\n        print('non-metal acid')\n    elif acid_name.endswith('ic'):\n        print('polyatomic acid'):\n    else:\n        print('not an acid')\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    for a0 in range(n):\n        acid_name = input().strip()\n        result = acidNaming(acid_name)\n        print(result)\n\n\n","offset":71,"fileType":"python3","requestStartTime":1518016967761}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    plus, minus, zero = 0, 0, 0\n    total = len(arr)\n    for num in arr :\n        if num > 0 : plus += 1\n        elif num < 0 : minus += 1\n        else : zero += 1\n    print('%.'plus/total)\n    print(minus/total)\n    print(zero/total)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":256,"fileType":"python3","requestStartTime":1518016977950}}
{"body": {"column":13,"line":14,"wordToComplete":"minus/total)","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    plus, minus, zero = 0, 0, 0\n    total = len(arr)\n    for num in arr :\n        if num > 0 : plus += 1\n        elif num < 0 : minus += 1\n        else : zero += 1\n    print('%.60f' %plus/total)\n    print('%.minus/total)\n    print(zero/total)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":287,"fileType":"python3","requestStartTime":1518016990726}}
{"body": {"column":13,"line":15,"wordToComplete":"zero/total)","code":"\n#!/bin/python3\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    plus, minus, zero = 0, 0, 0\n    total = len(arr)\n    for num in arr :\n        if num > 0 : plus += 1\n        elif num < 0 : minus += 1\n        else : zero += 1\n    print('%.60f', %plus/total)\n    print('%.60f', %minus/total)\n    print('%.zero/total)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split(' ')))\n    plusMinus(arr)\n\n\n","offset":321,"fileType":"python3","requestStartTime":1518017006391}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\nimport random\n\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n#for each student generate an arrival time in minutes between -1000 and 1000\ndef generateCases(t):\n    for case in range(t):\n        n = random.\n\n#generate num of lectures between 1 and 5\nt = random.randint(1,5)\nprint(t)\n\ngenerateCases(t)\n\n\n\n\n\n","offset":324,"fileType":"python3","requestStartTime":1518017024322}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\nimport random\n\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n#for each student generate an arrival time in minutes between -1000 and 1000\ndef generateCases(t):\n    for case in range(t):\n        n = random.randint(3,200)\n        k = random.\n\n#generate num of lectures between 1 and 5\nt = random.randint(1,5)\nprint(t)\n\ngenerateCases(t)\n\n\n\n\n\n","offset":358,"fileType":"python3","requestStartTime":1518017035099}}
{"body": {"column":18,"line":23,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef isBlackKingInCheck(board):\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'k':\n                krank = i\n                kfile = j\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] in ('N', 'Q', 'R', 'B'):\n                if givesCheck(board, i, j, board[i][j]): return True\n    return False\n\ndef flipboard(board):\n    ans = []\n    for b in board:\n        a = ''\n        for c in b:\n            if c == '#':\n                a.\n            \n\ndef hasKing(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file > 7: return False\n    return board[rank][file] == 'k'\n\ndef isfree(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file > 7: return False\n    return board[rank][file] == '#'\n\ndef givesCheck(board, rank, file, piecetype):\n    if piecetype == 'N':\n        if hasKing(board, rank + 1, file - 2): return True\n        if hasKing(board, rank + 2, file - 1): return True\n        if hasKing(board, rank + 2, file + 1): return True\n        if hasKing(board, rank + 1, file + 2): return True\n        if hasKing(board, rank - 1, file - 2): return True\n        if hasKing(board, rank - 2, file - 1): return True\n        if hasKing(board, rank - 2, file + 1): return True\n        if hasKing(board, rank - 1, file + 2): return True\n        return False\n    if piecetype == 'B' or piecetype == 'Q':\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, rank + i, file - i)) or (freeright and hasKing(board, rank + i, file + i)): return True\n            freeleft &= isfree(board, rank + i, file - i)\n            freeright &= isfree(board, rank + i, file + i)\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, rank - i, file - i)) or (freeright and hasKing(board, rank - i, file + i)): return True\n            freeleft &= isfree(board, rank - i, file - i)\n            freeright &= isfree(board, rank - i, file + i)            \n    if piecetype == 'R' or piecetype == 'Q':\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, rank, file - i)) or (freeright and hasKing(board, rank, file + i)): return True\n            freeleft &= isfree(board, rank, file - i)\n            freeright &= isfree(board, rank, file + i)\n        for i in range(1, 8):\n            if hasKing(board, file, rank + i): return True\n            if not isfree(board, file, rank  + i): break\n        for i in range(1, 8):\n            if hasKing(board, file, rank - i): return True\n            if not isfree(board, file, rank  - i): break                \n    return False\n            \n\ndef waysToGiveACheck(board):\n    ways = 0\n    for i in range(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            save1 = board[1]\n            save0 = board[0]\n            for p in ('N', 'B', 'R', 'Q'):\n                board[1] = save1[:i] + '#' + save1[(i+1):]\n                board[0] = save0[:i] + p + save0[(i+1):]\n                ways += isBlackKingInCheck(board)\n            board[1] = save1\n            board[0] = save0\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            #board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board_t = input().strip()\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":520,"fileType":"python3","requestStartTime":1518017101389}}
{"body": {"column":56,"line":8,"wordToComplete":"","code":"\nimport math\n\nmu, std = [float(x) for x in input().split()]\nx_1 = float(input())\nx_2_l, x_2_u = [float(x) for x in input().split()]\n\ndef normal_dist(mu, std, x):\n    return 1 / math.sqrt(2 * math.pi * std ** 2) * math. ** ((-1 * (x - mu) ** 2) / (2 * std ** 2))\n\ndef generate_pdf(mu, std):\n    return [normal_dist(mu, std, x / 1000) for x in range(int(round(mu * 1000)) - 5000, int(round(mu * 1000)) + 5000, 1)]\n\npdf = generate_pdf(mu, std)\n\np_1 = round(sum([x for x in pdf if x <= x_1]), 3)\np_2 = round(sum([x for x in pdf if x >= x_2_l and x <= x_2_u]))\n\nprint(p_1)\nprint(p_2)\n\n\n\n\n","offset":219,"fileType":"python3","requestStartTime":1518017186536}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef isBlackKingInCheck(board):\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'k':\n                krank = i\n                kfile = j\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] in ('N', 'Q', 'R', 'B'):\n                if givesCheck(board, i, j, board[i][j]): return True\n    return False\n\ndef flipcase(c):\n    if ord('a') <= ord(c) <= ord('z') or ord('A') <= ord(c) <= ord('Z'): return chr(ord(c) ^ 32)\n    return c\n\ndef flipboard(board):\n    ans = []\n    for b in board:\n        a = ''\n        for c in b:\n            a += flipcase(c)\n        ans.\n            \n\ndef hasKing(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file > 7: return False\n    return board[rank][file] == 'k'\n\ndef isfree(board, rank, file):\n    if rank < 0 or rank > 7: return False\n    if file < 0 or file > 7: return False\n    return board[rank][file] == '#'\n\ndef givesCheck(board, rank, file, piecetype):\n    if piecetype == 'N':\n        if hasKing(board, rank + 1, file - 2): return True\n        if hasKing(board, rank + 2, file - 1): return True\n        if hasKing(board, rank + 2, file + 1): return True\n        if hasKing(board, rank + 1, file + 2): return True\n        if hasKing(board, rank - 1, file - 2): return True\n        if hasKing(board, rank - 2, file - 1): return True\n        if hasKing(board, rank - 2, file + 1): return True\n        if hasKing(board, rank - 1, file + 2): return True\n        return False\n    if piecetype == 'B' or piecetype == 'Q':\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, rank + i, file - i)) or (freeright and hasKing(board, rank + i, file + i)): return True\n            freeleft &= isfree(board, rank + i, file - i)\n            freeright &= isfree(board, rank + i, file + i)\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, rank - i, file - i)) or (freeright and hasKing(board, rank - i, file + i)): return True\n            freeleft &= isfree(board, rank - i, file - i)\n            freeright &= isfree(board, rank - i, file + i)            \n    if piecetype == 'R' or piecetype == 'Q':\n        freeleft = True\n        freeright = True\n        for i in range(1, 8):\n            if (freeleft and hasKing(board, rank, file - i)) or (freeright and hasKing(board, rank, file + i)): return True\n            freeleft &= isfree(board, rank, file - i)\n            freeright &= isfree(board, rank, file + i)\n        for i in range(1, 8):\n            if hasKing(board, file, rank + i): return True\n            if not isfree(board, file, rank  + i): break\n        for i in range(1, 8):\n            if hasKing(board, file, rank - i): return True\n            if not isfree(board, file, rank  - i): break                \n    return False\n            \n\ndef waysToGiveACheck(board):\n    ways = 0\n    for i in range(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            save1 = board[1]\n            save0 = board[0]\n            for p in ('N', 'B', 'R', 'Q'):\n                board[1] = save1[:i] + '#' + save1[(i+1):]\n                board[0] = save0[:i] + p + save0[(i+1):]\n                ways += isBlackKingInCheck(board)\n            board[1] = save1\n            board[0] = save0\n    return ways\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n            #board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n            board_t = input().strip()\n            board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":646,"fileType":"python3","requestStartTime":1518017193310}}
{"body": {"column":46,"line":26,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    pawn = []\n    liberated = 0\n    for pos in range(8):\n        if board[1][0][pos] == 'P':\n            if board[0][0][pos] == '#':\n                pawn.append(pos)\n    \n    knight = [[1,-2],[2,-1],[2,1],[1,2]]\n    bishop = [[1,1],[1,-1]]\n    for pawn_pos in pawn:\n        if k in board[0][0]: return 2\n        \n        line7 = board[1][0]\n        line7[pawn_pos] = 'C'\n        if re.search('((Q|R)*#C*#k)|(k*#C*#(Q|P))',board[1][0]): return 4\n        \n        for i in range(2,7):\n            if board[i][0][pawn_pos] == '#':\n                next\n            elif board[i][0][pawn_pos] == 'k':\n        diags =[]\n        if not pawn == 0 or not pawn==7:\n            for diagonal in bishop:\n                valid =1\n                temp =board[0][0][pawn-diagonal[1]]\n                position = [1,pawn_pos]\n                while valid:\n                    temp+= board[position[0]][0][position[1]]\n                    position +=diagonal\n                    if position[1]<0 or position[1]>7:\n                        valid=0\n                if re.search('(k*#(Q|B))|((Q|B)*#k)', temp):\n                    return 4        \n        \n        for step in knight:\n            to_check = [step[0],pawn_pos+step[1]]\n            if to_check[1]<0 or to_check[1]>7:\n                next\n            else:\n                if board[to_check[0]][0][to_check[1]] == \"k\":\n                    return 1\n        \n                    \n\n                    \nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":683,"fileType":"python3","requestStartTime":1518017260586}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n# x is rows, y is cols\n\ndef find_piece(board, piece):\n    print(piece)\n    for i in range(len(board)):\n        print('row is {}'.board[i])\n        for j in range(len(board[0])):\n            print(board[i][0])\n            print(board[i][0][j])\n            if board[i][0][j] == 'piece':  # list of 1-string lists\n                if piece == 'P':\n                    return i+1, j\n                else:\n                    return i, j\n                break\n    print('ERROR: Could not find {}'.format(piece))\n    return -1, -1\n\n\ndef on_a_line(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\n\ndef on_a_diag(x1, y1, x2, y2):\n    return abs(x1-x2) == abs(y1-y2)\n\n\ndef on_a_corn(x1, y1, x2, y2):\n    return abs(abs(x1-x2)-abs(y1-y2)) == 1\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    px, py = find_piece(board, 'P')\n    kx, ky = find_piece(board, 'k')\n    ct = 0\n    if on_a_line(px, py, kx, ky):\n        ct += 2  # queen, rook\n    if on_a_diag(px, py, kx, ky):\n        ct += 2  # queen, bishop\n    if on_a_corn(px, py, kx, ky):\n        ct += 1\n    return ct\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":159,"fileType":"python3","requestStartTime":1518017447412}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n# x is rows, y is cols\n\ndef find_piece(board, piece):\n    print(piece)\n    for i in range(len(board)):\n        print('row is {}'.format(board[i]))\n        for j in range(len(board[0])):\n            print('row chars are {}'.board[i][0])\n            print(board[i][0][j])\n            if board[i][0][j] == 'piece':  # list of 1-string lists\n                if piece == 'P':\n                    return i+1, j\n                else:\n                    return i, j\n                break\n    print('ERROR: Could not find {}'.format(piece))\n    return -1, -1\n\n\ndef on_a_line(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\n\ndef on_a_diag(x1, y1, x2, y2):\n    return abs(x1-x2) == abs(y1-y2)\n\n\ndef on_a_corn(x1, y1, x2, y2):\n    return abs(abs(x1-x2)-abs(y1-y2)) == 1\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    px, py = find_piece(board, 'P')\n    kx, ky = find_piece(board, 'k')\n    ct = 0\n    if on_a_line(px, py, kx, ky):\n        ct += 2  # queen, rook\n    if on_a_diag(px, py, kx, ky):\n        ct += 2  # queen, bishop\n    if on_a_corn(px, py, kx, ky):\n        ct += 1\n    return ct\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":253,"fileType":"python3","requestStartTime":1518017474850}}
{"body": {"column":38,"line":13,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n# x is rows, y is cols\n\ndef find_piece(board, piece):\n    print(piece)\n    for i in range(len(board)):\n        print('row is {}'.format(board[i]))\n        for j in range(len(board[0])):\n            print('row chars are {}'.format(board[i][0]))\n            print('char at i,j is {}'.board[i][0][j])\n            if board[i][0][j] == 'piece':  # list of 1-string lists\n                if piece == 'P':\n                    return i+1, j\n                else:\n                    return i, j\n                break\n    print('ERROR: Could not find {}'.format(piece))\n    return -1, -1\n\n\ndef on_a_line(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\n\ndef on_a_diag(x1, y1, x2, y2):\n    return abs(x1-x2) == abs(y1-y2)\n\n\ndef on_a_corn(x1, y1, x2, y2):\n    return abs(abs(x1-x2)-abs(y1-y2)) == 1\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    px, py = find_piece(board, 'P')\n    kx, ky = find_piece(board, 'k')\n    ct = 0\n    if on_a_line(px, py, kx, ky):\n        ct += 2  # queen, rook\n    if on_a_diag(px, py, kx, ky):\n        ct += 2  # queen, bishop\n    if on_a_corn(px, py, kx, ky):\n        ct += 1\n    return ct\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":312,"fileType":"python3","requestStartTime":1518017493433}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\nimport random\n\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n#for each student generate an arrival time in minutes between -1000 and 1000\ndef generateCases(t):\n    N = random.\n    for case in N:\n        \n        k = random.randint(1,k)\n\n#generate num of lectures between 1 and 5\nt = random.randint(1,5)\nprint(t)\n\ngenerateCases(t)\n\n\n\n\n\n","offset":294,"fileType":"python3","requestStartTime":1518017508276}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    min_op = 0\n    max_op = doors.\n    return min_op,max_op\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":99,"fileType":"python3","requestStartTime":1518017524713}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\nimport math\n\ndef is_prime(n):\n    root = math.\n\np = int(input().strip())\nfor a0 in range(p):\n    n = int(input().strip())\n    if is_prime(n):\n        print(\"Prime\")\n    else:\n        print(\"Not prime\")\n    \n\n\n\n","offset":48,"fileType":"python3","requestStartTime":1518017535796}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nimport random\n\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n#for each student generate an arrival time in minutes between -1000 and 1000\ndef generateCases(t):\n    N = random.sample(range(2,300),t)\n    for n in N:\n        k = random.randint(1,n)\n        for a in range(n):\n            random.\n\n#generate num of lectures between 1 and 5\nt = random.randint(1,5)\nprint(t)\n\ngenerateCases(t)\n\n\n\n\n\n","offset":411,"fileType":"python3","requestStartTime":1518017578937}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nimport random\n\n#for each num of lectures, generate n (num of students in class btwn 3 and 200) and k (cancellation threshhold btwn 1 and n) with n distinct across all test cases\n#for each student generate an arrival time in minutes between -1000 and 1000\ndef generateCases(t):\n    N = random.sample(range(2,300),t)\n    for n in N:\n        k = random.randint(1,n)\n        for a in range(n):\n            random.\n\n#generate num of lectures between 1 and 5\nt = random.randint(1,5)\nprint(t)\n\ngenerateCases(t)\n\n\n\n\n\n","offset":411,"fileType":"python3","requestStartTime":1518017585922}}
{"body": {"column":19,"line":6,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    min_op = doors.\n    max_op = doors.count(1)\n    return min_op,max_op\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":84,"fileType":"python3","requestStartTime":1518017599523}}
{"body": {"column":23,"line":12,"wordToComplete":"a","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef braces(values):\n    brace_lst = []\n    for i in values:\n        if i == \"{\" or i == \"(\" or i == \"[\":\n            brace_lst.a\n        \n    if count != 0:\n        return [\"NO\"]\n    return [\"YES\"]\n            \n                \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    values_cnt = 0\n    values_cnt = int(input())\n    values_i = 0\n    values = []\n    while values_i < values_cnt:\n        try:\n            values_item = str(input())\n        except:\n            values_item = None\n        values.append(values_item)\n        values_i += 1\n\n\n    res = braces(values);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":200,"fileType":"python3","requestStartTime":1518017729137}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n# x is rows, y is cols\n\ndef find_piece(board, piece):\n    for i in range(len(board)):\n        for j in range(len(board[i][0])):\n            if board[i][0][j] == 'piece':  # list of 1-string lists\n                if piece == 'P':\n                    print('Found {}'.)\n                    return i+1, j\n                else:\n                    return i, j\n    print('ERROR: Could not find {}'.format(piece))\n    return -1, -1\n\n\ndef on_a_line(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\n\ndef on_a_diag(x1, y1, x2, y2):\n    return abs(x1-x2) == abs(y1-y2)\n\n\ndef on_a_corn(x1, y1, x2, y2):\n    return abs(abs(x1-x2)-abs(y1-y2)) == 1\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    px, py = find_piece(board, 'P')\n    kx, ky = find_piece(board, 'k')\n    ct = 0\n    if on_a_line(px, py, kx, ky):\n        ct += 2  # queen, rook\n    if on_a_diag(px, py, kx, ky):\n        ct += 2  # queen, bishop\n    if on_a_corn(px, py, kx, ky):\n        ct += 1\n    return ct\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":296,"fileType":"python3","requestStartTime":1518017742473}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef braces(values):\n    brace_lst = []\n    for i in values:\n        if i == \"{\" or i == \"(\" or i == \"[\":\n            brace_lst.append(i)\n        else:\n            if i == \"}\":\n                brace.\n                \n        \n    if count != 0:\n        return [\"NO\"]\n    return [\"YES\"]\n            \n                \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    values_cnt = 0\n    values_cnt = int(input())\n    values_i = 0\n    values = []\n    while values_i < values_cnt:\n        try:\n            values_item = str(input())\n        except:\n            values_item = None\n        values.append(values_item)\n        values_i += 1\n\n\n    res = braces(values);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":270,"fileType":"python3","requestStartTime":1518017779875}}
{"body": {"column":30,"line":16,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef braces(values):\n    brace_lst = []\n    for i in values:\n        if i == \"{\" or i == \"(\" or i == \"[\":\n            brace_lst.append(i)\n        else:\n            if i == \"}\":\n                if brace_lst:\n                    brace_lst.\n                \n        \n    if count != 0:\n        return [\"NO\"]\n    return [\"YES\"]\n            \n                \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    values_cnt = 0\n    values_cnt = int(input())\n    values_i = 0\n    values = []\n    while values_i < values_cnt:\n        try:\n            values_item = str(input())\n        except:\n            values_item = None\n        values.append(values_item)\n        values_i += 1\n\n\n    res = braces(values);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n\n    f.close()\n\n","offset":308,"fileType":"python3","requestStartTime":1518017802214}}
{"body": {"column":39,"line":15,"wordToComplete":"","code":"#!/bin/python3\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef roman_numeral_to_int(string):\n    cache = 0\n    value = 0\n    roman = {\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    for i in range(len(string)):\n        if string[i] not in roman:\n                return(None)\n        if i > 0 and roman[string[i]] >\n   \n            \n                \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    try:\n        string = str(input())\n    except:\n        string = None\n\n    res = roman_numeral_to_int(string);\n    f.write(str(res) + \"\\n\")\n\n\n    f.close()\n\n","offset":335,"fileType":"python3","requestStartTime":1518017875395}}
{"body": {"column":14,"line":21,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    i=0\n    count=0\n    for i in range(len(doors)):\n        if i != len(doors)-1:\n            if doors[i] ==1 and doors[i+1]==1:\n                count+1\n                i+1\n            elif doors[i] ==1: \n                count+=1\n        else:\n            if doors[i] ==1 and doors[i+1]==1:\n                count+1\n                i+1\n            elif doors[i] ==1: \n                count+=1\n    x = doors.\n    return count\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    doors = list(map(int, input().strip().split(' ')))\n    result = revisedRussianRoulette(doors)\n    print (\" \".join(map(str, result)))\n\n\n\n\n","offset":471,"fileType":"python3","requestStartTime":1518017937385}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\n#!/bin/python3\n\nimport sys\n\n# x is rows, y is cols\n\ndef find_piece(board, piece):\n    for i in range(len(board)):\n        for j in range(len(board[i][0])):\n            print('{},{}'.)\n            if board[i][0][j] == 'piece':  # list of 1-string lists\n                print('Found {}'.format(piece))\n                if piece == 'P':\n                    return i+1, j\n                else:\n                    return i, j\n    print('ERROR: Could not find {}'.format(piece))\n    return -1, -1\n\n\ndef on_a_line(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\n\ndef on_a_diag(x1, y1, x2, y2):\n    return abs(x1-x2) == abs(y1-y2)\n\n\ndef on_a_corn(x1, y1, x2, y2):\n    return abs(abs(x1-x2)-abs(y1-y2)) == 1\n\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    px, py = find_piece(board, 'P')\n    kx, ky = find_piece(board, 'k')\n    ct = 0\n    if on_a_line(px, py, kx, ky):\n        ct += 2  # queen, rook\n    if on_a_diag(px, py, kx, ky):\n        ct += 2  # queen, bishop\n    if on_a_corn(px, py, kx, ky):\n        ct += 1\n    return ct\n    \n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    for a0 in range(t):\n        board = []\n        for board_i in range(8):\n           board_t = [str(board_temp) for board_temp in input().strip().split(' ')]\n           board.append(board_t)\n        result = waysToGiveACheck(board)\n        print(result)\n\n\n","offset":184,"fileType":"python3","requestStartTime":1518017968257}}
