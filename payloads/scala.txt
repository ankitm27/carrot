{"body": {"column":24,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.\n    }\n}\n\n","offset":81,"fileType":"scala","requestStartTime":1517910187584}}
{"body": {"column":24,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.\n    }\n}\n\n","offset":81,"fileType":"scala","requestStartTime":1517910189409}}
{"body": {"column":27,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.\n    }\n}\n\n","offset":84,"fileType":"scala","requestStartTime":1517910192433}}
{"body": {"column":31,"line":4,"wordToComplete":"read","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.read\n    }\n}\n\n","offset":88,"fileType":"scala","requestStartTime":1517910193948}}
{"body": {"column":31,"line":4,"wordToComplete":"read","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.read\n    }\n}\n\n","offset":88,"fileType":"scala","requestStartTime":1517910194775}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readInt\n        (1 to n).\n    }\n}\n\n","offset":109,"fileType":"scala","requestStartTime":1517910217568}}
{"body": {"column":21,"line":5,"wordToComplete":"left","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readInt\n        (1 to n).left\n    }\n}\n\n","offset":113,"fileType":"scala","requestStartTime":1517910219162}}
{"body": {"column":29,"line":5,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readInt\n        (1 to n).foreach(i =>\n        )\n    }\n}\n\n","offset":121,"fileType":"scala","requestStartTime":1517910265671}}
{"body": {"column":36,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readLine.\n        (1 to n).foreach(i =>\n                         if(i % 3 == 0){\n                             println(\"Fizz\")\n                         } else if(i % 5 == 0){\n                             println(\"Buzz\")\n                         } else if((i % 3 == 0) && (i % 5 == 0)){\n                             println(\"FizzBuzz\")\n                         } else {\n                             println(i)\n                         }\n        )\n    }\n}\n\n","offset":93,"fileType":"scala","requestStartTime":1517910470175}}
{"body": {"column":25,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.\n    }\n}\n\n","offset":82,"fileType":"scala","requestStartTime":1517911289712}}
{"body": {"column":28,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.\n    }\n}\n\n","offset":85,"fileType":"scala","requestStartTime":1517911290960}}
{"body": {"column":37,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.\n    }\n}\n\n","offset":94,"fileType":"scala","requestStartTime":1517911296087}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.\n    }\n}\n\n","offset":117,"fileType":"scala","requestStartTime":1517911321199}}
{"body": {"column":24,"line":5,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.leftJoin(Map.)\n    }\n}\n\n","offset":130,"fileType":"scala","requestStartTime":1517911332784}}
{"body": {"column":49,"line":5,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.leftJoin(Map.empty[Int,Int]){ (z,f) =>\n            \n        }\n    }\n}\n\n","offset":155,"fileType":"scala","requestStartTime":1517911573455}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.\n            \n        }\n    }\n}\n\n","offset":170,"fileType":"scala","requestStartTime":1517911617407}}
{"body": {"column":15,"line":6,"wordToComplete":"c","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.c\n            \n        }\n    }\n}\n\n","offset":171,"fileType":"scala","requestStartTime":1517911618733}}
{"body": {"column":37,"line":7,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n            }\n            \n        }\n    }\n}\n\n","offset":227,"fileType":"scala","requestStartTime":1517911655167}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n            }\n            \n        }\n    }\n}\n\n","offset":301,"fileType":"scala","requestStartTime":1517911698800}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f ->)\n            }\n            \n        }\n    }\n}\n\n","offset":331,"fileType":"scala","requestStartTime":1517911708615}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        val res = in.\n    }\n}\n\n","offset":380,"fileType":"scala","requestStartTime":1517911754551}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        val res = in.toArray.\n    }\n}\n\n","offset":388,"fileType":"scala","requestStartTime":1517911760905}}
{"body": {"column":36,"line":13,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        val res = in.toArray.find(_.)\n    }\n}\n\n","offset":395,"fileType":"scala","requestStartTime":1517911770191}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \")\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        val res = in.toArray.find(_._2 == 1)\n        println res.\n    }\n}\n\n","offset":424,"fileType":"scala","requestStartTime":1517911781369}}
{"body": {"column":49,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \").\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        val res = in.toArray.find(_._2 == 1)\n        println(res._1)\n    }\n}\n\n","offset":106,"fileType":"scala","requestStartTime":1517911854913}}
{"body": {"column":55,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \").map(_.)\n        in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.contains(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        val res = in.toArray.find(_._2 == 1)\n        println(res._1)\n    }\n}\n\n","offset":112,"fileType":"scala","requestStartTime":1517911862183}}
{"body": {"column":29,"line":14,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \").map(_.toInt)\n        val map = in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.get(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        map.toArray.find(_._2 == 1) match {\n            case Some(res) =>\n        }\n        \n    }\n}\n\n","offset":450,"fileType":"scala","requestStartTime":1517911974791}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val in = Console.in.readLine.split(\", \").map(_.toInt)\n        val map = in.foldLeft(Map.empty[Int,Int]){ (z,f) =>\n            z.get(f) match {\n                case Some(counter) =>\n                    z + (f -> (counter + 1))\n                case None =>\n                    z + (f -> 1)\n            }\n        }\n        map.toArray.find(_._2 == 1) match {\n            case Some(res) => \n                println(res._1)\n            case None =>\n        }\n        \n    }\n}\n\n","offset":508,"fileType":"scala","requestStartTime":1517911982783}}
{"body": {"column":24,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.\n    }\n}\n\n","offset":81,"fileType":"scala","requestStartTime":1517912856248}}
{"body": {"column":27,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.\n    }\n}\n\n","offset":84,"fileType":"scala","requestStartTime":1517912856975}}
{"body": {"column":36,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readLine.\n    }\n}\n\n","offset":93,"fileType":"scala","requestStartTime":1517912859266}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readLine.toInt\n        \n    }\n    \n    def f(n: Int): Int = {\n        n match {\n            case 0 =>\n        }\n    }\n}\n\n","offset":185,"fileType":"scala","requestStartTime":1517912962983}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readLine.toInt\n        \n    }\n    \n    def f(n: Int): Int = {\n        n match {\n            case 0 => 0\n            case 1 =>\n        }\n    }\n}\n\n","offset":209,"fileType":"scala","requestStartTime":1517912968793}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val n = Console.in.readLine.toInt\n        \n    }\n    \n    def f(n: Int): Int = {\n        n match {\n            case 0 => 0\n            case 1 => 1\n            case _ =>\n        }\n    }\n}\n\n","offset":233,"fileType":"scala","requestStartTime":1517912973863}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution\n*/\n    }\n    \n    def f(n: Long, index: Int): Long = {\n        n match {\n            case 0 =>\n        }\n    }\n}\n\n","offset":267,"fileType":"scala","requestStartTime":1517913287817}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution\n*/\n    }\n    \n    def f(n: Long, index: Int): Long = {\n        n match {\n            case 0 => 0\n            case 1 =>\n        }\n    }\n}\n\n","offset":291,"fileType":"scala","requestStartTime":1517913291696}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution\n*/\n    }\n    \n    def f(n: Long, index: Int): Long = {\n        n match {\n            case 0 => 0\n            case 1 => 1\n            case _ =>\n        }\n    }\n}\n\n","offset":315,"fileType":"scala","requestStartTime":1517913296583}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\n def f(delim: Int, arr: List[Int]): List[Int] = {\n\n  def inner(acc: List[Int]): List[Int] =\n    arr match {\n      case h :: t if h < delim =>\n        h :: f(delim, t)\n      case h :: t =>\n        f(delim, t)\n      case _ =>\n        Nil\n    }\n   \n   println(inner(List.))\n}\n\n","offset":332,"fileType":"scala","requestStartTime":1517923170523}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\n def f(delim: Int, arr: List[Int]): List[Int] = {\n\n  def inner(acc: List[Int]): List[Int] =\n    arr match {\n      case h :: t if h < delim =>\n        h :: f(delim, t)\n      case h :: t =>\n        f(delim, t)\n      case _ =>\n        Nil\n    }\n   \n   println(inner(List.empty).)\n}\n\n","offset":339,"fileType":"scala","requestStartTime":1517923181519}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def simpleArraySum(n: Int, ar: Array[Int]): Int =  {\n        ar.\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        val result = simpleArraySum(n, ar);\n        println(result)\n    }\n}\n\n\n","offset":89,"fileType":"scala","requestStartTime":1517923385845}}
{"body": {"column":7,"line":3,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\n def f(delim: Int, arr: List[Int]): List[Int] = {\n\n   arr.\n   \n  def inner(acc: List[Int]): List[Int] =\n    arr match {\n      case h :: t if h < delim =>\n        h :: inner(t)\n      case h :: t =>\n        inner(t)\n      case _ =>\n        Nil\n    }\n   \n   inner(arr)\n}\n\n","offset":122,"fileType":"scala","requestStartTime":1517923470137}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def birthdayCakeCandles(n: Int, ar: Array[Int]): Int =  {\n        ar.\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        val result = birthdayCakeCandles(n, ar);\n        println(result)\n    }\n}\n\n\n","offset":94,"fileType":"scala","requestStartTime":1517923900070}}
{"body": {"column":13,"line":1,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\nimport scala.\n\ndef f(delim: Int, arr: List[Int]): List[Int] = {\n\n  @tailrec\n  def inner(xs: List[Int], acc: List[Int]): List[Int] =\n    xs match {\n      case h :: t if h < delim =>\n        inner(t, h :: acc)\n      case h :: t =>\n        inner(t, acc)\n      case _ =>\n        Nil\n    }\n\n   inner(arr, Nil)\n   \n}\n\n","offset":77,"fileType":"scala","requestStartTime":1517924014270}}
{"body": {"column":25,"line":1,"wordToComplete":"t","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\nimport scala.annotation.t\n\ndef f(delim: Int, arr: List[Int]): List[Int] = {\n\n  @tailrec\n  def inner(xs: List[Int], acc: List[Int]): List[Int] =\n    xs match {\n      case h :: t if h < delim =>\n        inner(t, h :: acc)\n      case h :: t =>\n        inner(t, acc)\n      case _ =>\n        Nil\n    }\n\n   inner(arr, Nil)\n   \n}\n\n","offset":89,"fileType":"scala","requestStartTime":1517924018129}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\nimport scala.annotation.tailrec\n\ndef f(delim: Int, arr: List[Int]): List[Int] = {\n\n  @tailrec\n  def inner(xs: List[Int], acc: List[Int]): List[Int] =\n    xs match {\n      case h :: t if h < delim =>\n        inner(t, h :: acc)\n      case h :: t =>\n        inner(t, acc)\n      case _ =>\n        Nil\n    }\n  \n  val x = inner(arr, Nil)\n  println(x.)\n\n  x\n   \n}\n\n","offset":408,"fileType":"scala","requestStartTime":1517924103570}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\nimport scala.annotation.tailrec\n\ndef f(delim: Int, arr: List[Int]): List[Int] = {\n\n  @tailrec\n  def inner(xs: List[Int], acc: List[Int]): List[Int] =\n    xs match {\n      case h :: t if h < delim =>\n        inner(t, h :: acc)\n      case h :: t =>\n        inner(t, acc)\n      case _ =>\n        Nil\n    }\n  \n  val x = inner(arr, Nil)\n  x.mkString(\"\\n\").\n\n  x\n   \n}\n\n","offset":415,"fileType":"scala","requestStartTime":1517924145898}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\nimport scala.annotation.tailrec\n\ndef f(delim: Int, arr: List[Int]): List[Int] = {\n\n    @tailrec\n    def inner(xs: List[Int], acc: List[Int]): List[Int] =\n      xs match {\n        case h :: t if h < delim =>\n          inner(t, h :: acc)\n        case _ :: t =>\n          inner(t, acc)\n        case _ =>\n          acc\n      }\n\n  println(arr.)\n    val x = inner(arr, Nil)\n    x.mkString(\"\\n\").foreach(println)\n    x\n   \n}\n\n","offset":402,"fileType":"scala","requestStartTime":1517926125366}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\nimport scala.annotation.tailrec\n\ndef f(delim: Int, arr: List[Int]): List[Int] = {\n\n    @tailrec\n    def inner(xs: List[Int], acc: List[Int]): List[Int] =\n      xs match {\n        case h :: t if h < delim =>\n          inner(t, h :: acc)\n        case _ :: t =>\n          inner(t, acc)\n        case _ =>\n          acc\n      }\n\n    val x = inner(arr, Nil)\n    x.\n   \n}\n\n","offset":422,"fileType":"scala","requestStartTime":1517926306774}}
{"body": {"column":6,"line":3,"wordToComplete":"","code":"\n\ndef f(arr: List[Int]): List[Int] =\n  arr.\n\n","offset":44,"fileType":"scala","requestStartTime":1517926399002}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"\n\ndef f(arr: List[Int]): List[Int] =\n  arr.zipWithIndex.\n\n","offset":57,"fileType":"scala","requestStartTime":1517926411387}}
{"body": {"column":38,"line":1,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = (0 to n).\n    println(f(readInt))\n}\n","offset":69,"fileType":"scala","requestStartTime":1517926659976}}
{"body": {"column":5,"line":3,"wordToComplete":"0.","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\")\n  (0.)\n}\n    println(f(readInt))\n}\n","offset":105,"fileType":"scala","requestStartTime":1517926731910}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\")\n  (0 to num).\n}\n    println(f(readInt))\n}\n","offset":113,"fileType":"scala","requestStartTime":1517926735035}}
{"body": {"column":38,"line":2,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\").\n  (0 to num).toList\n}\n    println(f(readInt))\n}\n","offset":100,"fileType":"scala","requestStartTime":1517926806343}}
{"body": {"column":45,"line":2,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\").toList.\n}\n    println(f(readInt))\n}\n","offset":107,"fileType":"scala","requestStartTime":1517926862778}}
{"body": {"column":51,"line":2,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\").toList.map(_.)\n}\n    println(f(readInt))\n}\n","offset":113,"fileType":"scala","requestStartTime":1517926864103}}
{"body": {"column":59,"line":2,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\").toList.map(_.toByte).\n}\n    println(f(readInt))\n}\n","offset":121,"fileType":"scala","requestStartTime":1517926887857}}
{"body": {"column":65,"line":2,"wordToComplete":"","code":"object Solution extends App {\ndef f(num: Int): List[Int] = {\n  (0 to num).mkString(\"[\", \", \", \"]\").toList.map(_.toByte).map(_.)\n}\n    println(f(readInt))\n}\n","offset":127,"fileType":"scala","requestStartTime":1517926889657}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def revisedRussianRoulette(doors: Array[Int]): Array[Int] =  {\n        doors.\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var doors = new Array[Int](n);\n        for(doors_i <- 0 to n-1) {\n           doors(doors_i) = sc.nextInt();\n        }\n        val result = revisedRussianRoulette(doors);\n        println (result.mkString(\" \"))\n\n\n    }\n}\n\n\n","offset":102,"fileType":"scala","requestStartTime":1517927562147}}
{"body": {"column":21,"line":4,"wordToComplete":"","code":"\nobject Solution {\n\n    def acidNaming(acid_name: String): String =  {\n        if(acid_name.)\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var a0 = 0;\n        while(a0 < n){\n            var acid_name = sc.next();\n            val result = acidNaming(acid_name);\n            println(result)\n            a0+=1;\n        }\n    }\n}\n\n\n","offset":93,"fileType":"scala","requestStartTime":1517938146208}}
{"body": {"column":25,"line":5,"wordToComplete":"","code":"\nobject Solution {\n\n    def acidNaming(acid_name: String): String =  {\n        if(acid_name.endsWith(ic)){\n            if(acid_name.)\n        }else{\n            \"not an acid\"\n        }\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var a0 = 0;\n        while(a0 < n){\n            var acid_name = sc.next();\n            val result = acidNaming(acid_name);\n            println(result)\n            a0+=1;\n        }\n    }\n}\n\n\n","offset":133,"fileType":"scala","requestStartTime":1517938238496}}
{"body": {"column":28,"line":7,"wordToComplete":"","code":"\nobject Solution {\n\n    def revisedRussianRoulette(doors: Array[Int]): Array[Int] =  {\n        var min = 0\n        var max = 0\n        var index = 0\n        while(index < doors.)\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var doors = new Array[Int](n);\n        for(doors_i <- 0 to n-1) {\n           doors(doors_i) = sc.nextInt();\n        }\n        val result = revisedRussianRoulette(doors);\n        println (result.mkString(\" \"))\n\n\n    }\n}\n\n\n","offset":178,"fileType":"scala","requestStartTime":1517938922419}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nobject Solution {\n\n    def revisedRussianRoulette(doors: Array[Int]): Array[Int] =  {\n        var min = 0\n        var max = 0\n        var index = 0\n        while(index < doors.length){\n            doors(index) match{\n                case 0:\n                case 1:\n            }\n        }\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var doors = new Array[Int](n);\n        for(doors_i <- 0 to n-1) {\n           doors(doors_i) = sc.nextInt();\n        }\n        val result = revisedRussianRoulette(doors);\n        println (result.mkString(\" \"))\n\n\n    }\n}\n\n\n","offset":266,"fileType":"scala","requestStartTime":1517938972740}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\nobject Solution {\n\n    def revisedRussianRoulette(doors: Array[Int]): Array[Int] =  {\n        var min = 0\n        var max = 0\n        var index = 0\n        while(index < doors.length){\n            doors(index) match{\n                case 0 => {}\n                case 1 => {\n                    min += 1\n                    if(index < doors.)\n                }\n            }\n        }\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var doors = new Array[Int](n);\n        for(doors_i <- 0 to n-1) {\n           doors(doors_i) = sc.nextInt();\n        }\n        val result = revisedRussianRoulette(doors);\n        println (result.mkString(\" \"))\n\n\n    }\n}\n\n\n","offset":342,"fileType":"scala","requestStartTime":1517939134977}}
{"body": {"column":48,"line":1,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\n def f(delim:Int,arr:List[Int]):List[Int] = arr.\n\n\n","offset":112,"fileType":"scala","requestStartTime":1517940637357}}
{"body": {"column":59,"line":1,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\n def f(delim:Int,arr:List[Int]):List[Int] = arr.flatMap(x=>)\n\n\n","offset":123,"fileType":"scala","requestStartTime":1517940712659}}
{"body": {"column":64,"line":1,"wordToComplete":"","code":" def f(delim:Int,arr:List[Int]):List[Int] = __________________\n def f(delim:Int,arr:List[Int]):List[Int] = arr.flatMap(x=>if x>)\n\n\n","offset":128,"fileType":"scala","requestStartTime":1517940824408}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"object Solution extends App {\n    def f(num:Int) : List[Int] = {\n        val list = List.\n        // Write your code here\n\n        print(list + \"\\n\")\n        return list\n    } \n    println(f(readInt))\n}\n","offset":90,"fileType":"scala","requestStartTime":1517956657082}}
{"body": {"column":38,"line":1,"wordToComplete":"","code":"\ndef f(arr:List[Int]):List[Int] = arrr.\n\n\n","offset":40,"fileType":"scala","requestStartTime":1517957316435}}
{"body": {"column":37,"line":1,"wordToComplete":"","code":"\ndef f(arr:List[Int]):List[Int] = arr.\n\n\n","offset":39,"fileType":"scala","requestStartTime":1517957317978}}
{"body": {"column":32,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.\n\n\n","offset":80,"fileType":"scala","requestStartTime":1517957679896}}
{"body": {"column":47,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.filter(_%2==1).\n\n\n","offset":95,"fileType":"scala","requestStartTime":1517957784407}}
{"body": {"column":39,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.map(_=>)filter(_%2==1).sum\n\n\n","offset":87,"fileType":"scala","requestStartTime":1517959063810}}
{"body": {"column":44,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.filter(math.abs(_%2)==1).sum\n\n\n","offset":92,"fileType":"scala","requestStartTime":1517959241354}}
{"body": {"column":40,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = {sum=0; arr.}\n\n\n","offset":88,"fileType":"scala","requestStartTime":1517966686119}}
{"body": {"column":5,"line":3,"wordToComplete":"","code":"\nobject Solution {\n\n    .\n    \n    \n    def timeConversion(s: String): String =  {\n        // Complete this function\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var s = sc.next();\n        val result = timeConversion(s);\n        println(result)\n    }\n}\n\n\n","offset":26,"fileType":"scala","requestStartTime":1517968566360}}
{"body": {"column":41,"line":23,"wordToComplete":"Approach 2: Use pattern matching.","code":"\nobject Solution {\n\n    /** Constraints\n      * Given a 12-hour AM/PM format time, convert it to military (24-hour) time\n      * \n      * A 12 hour am/pm format time does not contain 0:00, such as a 24-hour time clock\n      *  1:00 am is 01:00:00\n      * 12:00 am is 00:00:00\n      * 12:00 pm is 12:00:00\n      * 01:00 pm is 13:00:00pm\n      */\n    \n    /**\n      * Approach 1: Use Regular Expressions to match on AM/PM\n      * \n      * case x: AM => x == 1 => remove AM\n      * case x: AM if x == 12 => revert to 00:00:00 => remove AM\n      * case x: PM if x == 12 => do no change  => remove PM\n      * case x: PM if x > 12 => add x to 12 => remove PM\n      */\n    \n    /**\n      * Approach 2: Use pattern matching.\n      *\n      */\n    \n    \n    def timeConversion(s: String): String =  {\n        // Complete this function\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var s = sc.next();\n        val result = timeConversion(s);\n        println(result)\n    }\n}\n\n\n","offset":717,"fileType":"scala","requestStartTime":1517969111723}}
{"body": {"column":10,"line":29,"wordToComplete":"","code":"\nobject Solution {\n\n    /** Constraints\n      * Given a 12-hour AM/PM format time, convert it to military (24-hour) time\n      * \n      * A 12 hour am/pm format time does not contain 0:00, such as a 24-hour time clock\n      *  1:00 am is 01:00:00\n      * 12:00 am is 00:00:00\n      * 12:00 pm is 12:00:00\n      * 01:00 pm is 13:00:00pm\n      */\n    \n    /**\n      * Approach 1: Use Regular Expressions to match on AM/PM\n      * \n      * case x: AM => x == 1 => remove AM\n      * case x: AM if x == 12 => revert to 00:00:00 => remove AM\n      * case x: PM if x == 12 => do no change  => remove PM\n      * case x: PM if x > 12 => add x to 12 => remove PM\n      */\n    \n    /**\n      * Approach 2: Use pattern matching. or obtain element in the last substring and front substring\n      * \n      */\n    \n    \n    def timeConversion(s: String): String =  {\n        s.\n        // Complete this function\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var s = sc.next();\n        val result = timeConversion(s);\n        println(result)\n    }\n}\n\n\n","offset":863,"fileType":"scala","requestStartTime":1517969134658}}
{"body": {"column":9,"line":30,"wordToComplete":"","code":"\nobject Solution {\n\n    /** Constraints\n      * Given a 12-hour AM/PM format time, convert it to military (24-hour) time\n      * \n      * A 12 hour am/pm format time does not contain 0:00, such as a 24-hour time clock\n      *  1:00 am is 01:00:00\n      * 12:00 am is 00:00:00\n      * 12:00 pm is 12:00:00\n      * 01:00 pm is 13:00:00pm\n      */\n    \n    /**\n      * Approach 1: Use Regular Expressions to match on AM/PM\n      * \n      * case x: AM => x == 1 => remove AM\n      * case x: AM if x == 12 => revert to 00:00:00 => remove AM\n      * case x: PM if x == 12 => do no change  => remove PM\n      * case x: PM if x > 12 => add x to 12 => remove PM\n      */\n    \n    /**\n      * Approach 2: If conditionals on front two characters and last two characters (constant time since we use absolutes, \n      * meaning that we know the character array's indices before the lookup)\n      * \n      */\n    \n    /**\n      *\n      */.\n    \n    \n    \n    def timeConversion(s: String): String =  {\n        s.toCharArray() match {\n            case Array('1','2',_*)             \n        }\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var s = sc.next();\n        val result = timeConversion(s);\n        println(result)\n    }\n}\n\n\n","offset":926,"fileType":"scala","requestStartTime":1517969484162}}
{"body": {"column":32,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.\n\n\n","offset":80,"fileType":"scala","requestStartTime":1517969818223}}
{"body": {"column":48,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.map(_=> if math.)\n\n\n","offset":96,"fileType":"scala","requestStartTime":1517969865777}}
{"body": {"column":70,"line":1,"wordToComplete":"","code":" def f(arr:List[Int]):Int = __________________\n def f(arr:List[Int]):Int = arr.map(_=> if math.abs(_)%2==1 x else 0).\n\n\n","offset":118,"fileType":"scala","requestStartTime":1517969900463}}
{"body": {"column":40,"line":1,"wordToComplete":"","code":"\ndef f(arr:List[Int]):Int = arr map (_ =>)\n\n\n","offset":42,"fileType":"scala","requestStartTime":1517970432426}}
{"body": {"column":46,"line":1,"wordToComplete":"","code":"\ndef f(arr:List[Int]):List[Int] = arr map (_ =>)\n\n\n","offset":48,"fileType":"scala","requestStartTime":1517971255218}}
{"body": {"column":52,"line":1,"wordToComplete":"","code":"\ndef f(arr:List[Int]):List[Int] = arr map (_ => math.)\n\n\n","offset":54,"fileType":"scala","requestStartTime":1517971257727}}
{"body": {"column":36,"line":9,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        while(0 < n){\n            var x = sc.nextDouble();\n            print(1 + 1 to 9 map(x=>))\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":256,"fileType":"scala","requestStartTime":1517987545508}}
{"body": {"column":43,"line":9,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        while(0 < n){\n            var x = sc.nextDouble();\n            print(1 + 1 to 9 map(y => math.))\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":263,"fileType":"scala","requestStartTime":1517987660462}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        \n        def factorial(n:Int): Int = n match {\n            case 0 =>\n        }\n        \n        while(0 < n){\n            var x = sc.nextDouble();\n            print(0 to 9 map(y => math.pow(x, y)))\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":237,"fileType":"scala","requestStartTime":1517987918522}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        \n        def factorial(n:Int): Int = n match {\n            case 0 => 1\n            case _ =>\n        }\n        \n        while(0 < n){\n            var x = sc.nextDouble();\n            print(0 to 9 map(y => math.pow(x, y)))\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":261,"fileType":"scala","requestStartTime":1517987924355}}
{"body": {"column":63,"line":15,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        \n        def factorial(n:Int): Int = n match {\n            case 0 => 1\n            case _ => n * factorial(n-1)\n        }\n        \n        while(0 < n){\n            var x = sc.nextDouble();\n            print(0 to 9 map(y => math.pow(x, y)/factorial(y)).)\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":422,"fileType":"scala","requestStartTime":1517987972808}}
{"body": {"column":33,"line":15,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        \n        def factorial(n:Int): Int = n match {\n            case 0 => 1\n            case _ => n * factorial(n-1)\n        }\n        \n        while(0 < n){\n            var x = sc.nextDouble();\n            print(0 to 9 map(y =>math.pow(x,y)/factorial(y)))\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":392,"fileType":"scala","requestStartTime":1517988176992}}
{"body": {"column":63,"line":15,"wordToComplete":"","code":"\nobject Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        //val a0 = 0;\n        \n        def factorial(n:Int): Int = n match {\n            case 0 => 1\n            case _ => n * factorial(n-1)\n        }\n        \n        while(0 < n){\n            var x = sc.nextDouble();\n            print(0 to 9 map(y => math.pow(x,y)/factorial(y))).\n            \n            n-=1;\n        }\n    }\n}\n\n\n","offset":422,"fileType":"scala","requestStartTime":1517988214040}}
{"body": {"column":19,"line":77,"wordToComplete":"","code":"\nimport scala.util.Try\n\n\nobject Solution {\n\n    type Beats = (Int, Int, Array[Array[Char]]) => Boolean\n\n    val kingB = 'k'\n\n    val sides = List(\n        (-1,  0),\n        (0 , -1),\n        (1,  0),\n        (0 , 1)\n    )\n    val diagonals = List(\n        (-1, -1),\n        (-1,  1),\n        (1 , -1),\n        (1 ,  1)\n    )\n    def outsideBoard(i: Int, j: Int) = i == 8 || j == 8 || i == -1 || j == -1\n\n    def check(i: Int, j: Int, di: Int, dj: Int,board: Array[Array[Char]]): Boolean = {\n        val c = get(board, i, j)\n        if(c == kingB) true\n        else if(c != '#' || outsideBoard(i,j)) false\n        else check(i + di, j + dj, di, dj, board)\n    }\n\n    def get(board: Array[Array[Char]], i: Int, j: Int) = {\n        Try(board(i)(j)).getOrElse('#')\n    }\n\n\n    val knight: Beats = (i, j, board) => {\n        get(board, i + 2, j + 1) == kingB ||\n        get(board, i + 1, j + 2) == kingB ||\n        get(board, i + 1, j - 2) == kingB ||\n        get(board, i + 2, j - 1) == kingB\n    }\n\n    val rock: Beats = (i, j, board) => {\n        sides.exists { case (di, dj) =>\n            check(i, j, di, dj, board)\n        }\n    }\n\n    val bishop: Beats = (i, j, board) => {\n        diagonals.exists { case (di, dj) =>\n            check(i, j, di, dj, board)\n        }\n    }\n\n    val queen: Beats = (i, j, board) => {\n        bishop(i, j, board) || rock(i, j, board)\n    }\n\n\n    val toCheck: List[Beats] = List(queen, bishop, rock, knight)\n\n    \n    def waysToGiveACheck(board: Array[Array[Char]]): Int =  {\n        var lines = board(1).zipWithIndex\n        val Some((_, index)) = lines.find{ case (el, i) => el == 'P' && board(0)(i) == '#'}\n        toCheck.count(f => f(0, index, board))\n        2\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var t = sc.nextInt();\n        var a0 = 0;\n        while(a0 < t){\n            var board = Array.ofDim[Char](8,8);\n            for(board_i <- 0 to 8-1) {\n                sc.\n               for(board_j <- 0 to 8-1){\n                  board(board_i)(board_j) = sc.next().charAt(0);\n               }\n            }\n            val result = waysToGiveACheck(board);\n            println(result)\n            a0+=1;\n        }\n    }\n}\n\n\n","offset":1974,"fileType":"scala","requestStartTime":1517991878400}}
{"body": {"column":11,"line":73,"wordToComplete":"","code":"\nimport scala.util.Try\n\n\nobject Solution {\n\n    type Beats = (Int, Int, Array[Array[Char]]) => Boolean\n\n    val kingB = 'k'\n\n    val sides = List(\n        (-1,  0),\n        (0 , -1),\n        (1,  0),\n        (0 , 1)\n    )\n    val diagonals = List(\n        (-1, -1),\n        (-1,  1),\n        (1 , -1),\n        (1 ,  1)\n    )\n    def outsideBoard(i: Int, j: Int) = i == 8 || j == 8 || i == -1 || j == -1\n\n    def check(i: Int, j: Int, di: Int, dj: Int,board: Array[Array[Char]]): Boolean = {\n        val c = get(board, i, j)\n        if(c == kingB) true\n        else if(c != '#' || outsideBoard(i,j)) false\n        else check(i + di, j + dj, di, dj, board)\n    }\n\n    def get(board: Array[Array[Char]], i: Int, j: Int) = {\n        Try(board(i)(j)).getOrElse('#')\n    }\n\n\n    val knight: Beats = (i, j, board) => {\n        get(board, i + 2, j + 1) == kingB ||\n        get(board, i + 1, j + 2) == kingB ||\n        get(board, i + 1, j - 2) == kingB ||\n        get(board, i + 2, j - 1) == kingB\n    }\n\n    val rock: Beats = (i, j, board) => {\n        sides.exists { case (di, dj) =>\n            check(i, j, di, dj, board)\n        }\n    }\n\n    val bishop: Beats = (i, j, board) => {\n        diagonals.exists { case (di, dj) =>\n            check(i, j, di, dj, board)\n        }\n    }\n\n    val queen: Beats = (i, j, board) => {\n        bishop(i, j, board) || rock(i, j, board)\n    }\n\n\n    val toCheck: List[Beats] = List(queen, bishop, rock, knight)\n\n    \n    def waysToGiveACheck(board: Array[Array[Char]]): Int =  {\n        var lines = board(1).zipWithIndex\n        val Some((_, index)) = lines.find{ case (el, i) => el == 'P' && board(0)(i) == '#'}\n        toCheck.count(f => f(0, index, board))\n        2\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var t = sc.nextInt();\n        sc.\n        var a0 = 0;\n        while(a0 < t){\n            var board = Array.ofDim[Char](8,8);\n            for(board_i <- 0 to 8-1) {\n               val s = sc.nextLine()\n               for(board_j <- 0 to 8-1){\n                  board(board_i)(board_j) = s.charAt(board_j);\n               }\n            }\n            val result = waysToGiveACheck(board);\n            println(result)\n            a0+=1;\n        }\n    }\n}\n\n\n","offset":1836,"fileType":"scala","requestStartTime":1517991958192}}
{"body": {"column":60,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def quartiles(ar: Array[Int]): Unit = {\n        val l = ar.length\n        val arSorted = ar.sorted\n        println((arSorted((l-1)/2) + arSorted(((l-1)/2)+1))./2)\n        \n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        quartiles(ar);\n    }\n}\n\n","offset":188,"fileType":"scala","requestStartTime":1517994257675}}
{"body": {"column":33,"line":8,"wordToComplete":"","code":"\nobject Solution {\n    \n    def quartiles(ar: Array[Int]): Unit = {\n        val l = ar.length\n        val arSorted = ar.sorted\n        val median = (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2\n        \n        val lowerHalf = arSorted.\n        println(arSorted(0) + (median - arSorted(0))/2)\n        println(median)\n        println(median + (arSorted(l-1) - median)/2)\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        quartiles(ar);\n    }\n}\n\n","offset":237,"fileType":"scala","requestStartTime":1517994955739}}
{"body": {"column":31,"line":9,"wordToComplete":"","code":"\nobject Solution {\n    \n    def quartiles(ar: Array[Int]): Unit = {\n        val l = ar.length\n        val arSorted = ar.sorted\n        val median = (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val lowerL = lowerHalf.\n        println(arSorted(0) + (median - arSorted(0))/2)\n        println(median)\n        println(median + (arSorted(l-1) - median)/2)\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        quartiles(ar);\n    }\n}\n\n","offset":287,"fileType":"scala","requestStartTime":1517994977658}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nobject Solution {\n    \n    def median(ar:)\n    \n    def quartiles(ar: Array[Int]): Unit = {\n        val l = ar.length\n        val arSorted = ar.sorted\n        val median = (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val lowerL = lowerHalf.length\n        val q1 = (lowerHalf((lowerL-1)/2) + lowerHalf(((lowerL-1)/2)+1))/2\n        println(arSorted(0) + (median - arSorted(0))/2)\n        println(median)\n        println(median + (arSorted(l-1) - median)/2)\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        quartiles(ar);\n    }\n}\n\n","offset":43,"fileType":"scala","requestStartTime":1517995015436}}
{"body": {"column":32,"line":3,"wordToComplete":"","code":"\nobject Solution {\n    \n    def median(ar: Array[Int]): \n    \n    def quartiles(ar: Array[Int]): Unit = {\n        val l = ar.length\n        val arSorted = ar.sorted\n        val median = (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val lowerL = lowerHalf.length\n        val q1 = (lowerHalf((lowerL-1)/2) + lowerHalf(((lowerL-1)/2)+1))/2\n        println(arSorted(0) + (median - arSorted(0))/2)\n        println(median)\n        println(median + (arSorted(l-1) - median)/2)\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        quartiles(ar);\n    }\n}\n\n","offset":57,"fileType":"scala","requestStartTime":1517995019491}}
{"body": {"column":17,"line":3,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar:)\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":42,"fileType":"scala","requestStartTime":1517996375938}}
{"body": {"column":31,"line":3,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): \n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":56,"fileType":"scala","requestStartTime":1517996380149}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":88,"fileType":"scala","requestStartTime":1517996408989}}
{"body": {"column":26,"line":4,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":92,"fileType":"scala","requestStartTime":1517996413043}}
{"body": {"column":37,"line":4,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":103,"fileType":"scala","requestStartTime":1517996415881}}
{"body": {"column":28,"line":5,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":138,"fileType":"scala","requestStartTime":1517996438361}}
{"body": {"column":37,"line":5,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map(Math.mean)\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":147,"fileType":"scala","requestStartTime":1517996446793}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map(Math.pow(mean - _, 2))\n        return Math.\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":185,"fileType":"scala","requestStartTime":1517996551992}}
{"body": {"column":36,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map(Math.pow(mean - _, 2))\n        return Math.sqrt(deviations.)\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":201,"fileType":"scala","requestStartTime":1517996568368}}
{"body": {"column":40,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map(Math.pow(mean - _, 2))\n        return Math.sqrt(deviations.sum.)\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":205,"fileType":"scala","requestStartTime":1517996569385}}
{"body": {"column":59,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map(Math.pow(mean - _, 2))\n        return Math.sqrt(deviations.sum.toFloat/deviations.)\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":224,"fileType":"scala","requestStartTime":1517996577743}}
{"body": {"column":36,"line":5,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map( (x:) Math.pow(mean - _, 2))\n        return Math.sqrt(deviations.sum.toFloat/deviations.length)\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":146,"fileType":"scala","requestStartTime":1517996623160}}
{"body": {"column":68,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map( (x:Int) => Math.pow(mean - x, 2))\n        return Math.sqrt((deviations.sum.toFloat/deviations.length).)\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":245,"fileType":"scala","requestStartTime":1517996702750}}
{"body": {"column":68,"line":6,"wordToComplete":"","code":"\nobject Solution {\n    \n    def stdev(ar: Array[Int]): Float = {\n        val mean = ar.sum.toFloat/ar.length\n        val deviations = ar.map( (x:Int) => Math.pow(mean - x, 2))\n        return Math.sqrt((deviations.sum.toFloat/deviations.length).\n    }\n    \n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var ar = new Array[Int](n);\n        for(ar_i <- 0 to n-1) {\n           ar(ar_i) = sc.nextInt();\n        }\n        stdev(ar);\n    }\n}\n\n","offset":245,"fileType":"scala","requestStartTime":1517996725942}}
{"body": {"column":11,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        el.\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":960,"fileType":"scala","requestStartTime":1517998625258}}
{"body": {"column":21,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        el.zip(freq).\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":970,"fileType":"scala","requestStartTime":1517998631641}}
{"body": {"column":21,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        el.zip(freq).\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":970,"fileType":"scala","requestStartTime":1517998650771}}
{"body": {"column":39,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        el.zip(freq).foreach({ case (x:) })\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":988,"fileType":"scala","requestStartTime":1517998660978}}
{"body": {"column":46,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        el.zip(freq).foreach({ case (x:Int, y:) })\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":995,"fileType":"scala","requestStartTime":1517998663362}}
{"body": {"column":51,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        el.zip(freq).foreach({ case (x:Int, y:Int): })\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":1000,"fileType":"scala","requestStartTime":1517998666649}}
{"body": {"column":33,"line":34,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Unit = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        var ar = Array[Int](freq.)\n        el.zip(freq).foreach({ case (x:Int, y:Int): })\n        \n        println(interQuartile(ar))\n    }\n}\n\n","offset":982,"fileType":"scala","requestStartTime":1517998695948}}
{"body": {"column":34,"line":43,"wordToComplete":"","code":"\nobject Solution {\n    \n    def calcMedian(arSorted: Array[Int]): Int = {\n        val l = arSorted.length\n        val median = if (l%2 == 0) (arSorted((l-1)/2) + arSorted(((l-1)/2)+1))/2 else arSorted(l/2)\n        return median\n    }\n    \n    def interQuartile(ar: Array[Int]): Int = {\n        val arSorted = ar.sorted\n        val median = calcMedian(arSorted)\n        \n        val lowerHalf = arSorted.filter(_ < median)\n        val q1 = calcMedian(lowerHalf)\n        \n        val upperHalf = arSorted.filter(_ > median)\n        val q3 = calcMedian(upperHalf)\n        \n        return q3 - q1\n    }\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var el = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           el(i) = sc.nextInt();\n        }\n        var freq = new Array[Int](n);\n        for(i <- 0 to n-1) {\n           freq(i) = sc.nextInt();\n        }\n        \n        var ar = Array[Int](freq.sum)\n        var i = 0\n        for (x <- 0 until n) {\n            for(y <- 0 until freq(x)) {\n                ar(i) = el(x)\n                i += 1\n            }\n        }\n        \n        println(interQuartile(ar).)\n    }\n}\n\n","offset":1195,"fileType":"scala","requestStartTime":1518000488122}}
{"body": {"column":22,"line":31,"wordToComplete":"","code":"\nobject Solution {\n\n    def getTotalX(a:Array[Int]):Int={\n        \n     while(a!=0 && b!=0){\n         val c=b\n         b=a%b;\n         c=a;\n        }\n       result=a+b\n        result\n    }\n    def getTotalLcm(b:Array[Int]):Int={\n        \n        \n    }\n\n    def main(args: Array[String]) {\n        var count:Int=0\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var m = sc.nextInt();\n        var a = new Array[Int](n);\n        for(a_i <- 0 to n-1) {\n           a(a_i) = sc.nextInt();\n        }\n        var b = new Array[Int](m);\n        for(b_i <- 0 to m-1) {\n           b(b_i) = sc.nextInt();\n        }\n        for(i<-1 to a. )\n        val total = getTotalX(a);\n        val total2=getTotalLcm(b);\n        \n        println(total)\n    }\n}\n\n\n","offset":669,"fileType":"scala","requestStartTime":1518015776505}}
{"body": {"column":22,"line":33,"wordToComplete":"","code":"\nobject Solution {\n\n    def getTotalX(a:Array[Int]):Int={\n        \n     while(a!=0 && b!=0){\n         val c=b\n         b=a%b;\n         c=a;\n        }\n       result=a+b\n        result\n    }\n    def getTotalLcm(b:Array[Int]):Int={\n        \n        \n    }\n\n    def main(args: Array[String]) {\n        var count:Int=0\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var m = sc.nextInt();\n        var a = new Array[Int](n);\n        for(a_i <- 0 to n-1) {\n           a(a_i) = sc.nextInt();\n        }\n        var b = new Array[Int](m);\n        for(b_i <- 0 to m-1) {\n           b(b_i) = sc.nextInt();\n        }\n        for(i<-1 to a.size-1 )\n            val total = getTotalX(a);\n        for(i<-1 to a.)\n        val total2=getTotalLcm(b);\n        \n        println(total)\n    }\n}\n\n\n","offset":738,"fileType":"scala","requestStartTime":1518015797531}}
