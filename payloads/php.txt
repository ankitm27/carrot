{"body": {"column":16,"line":32,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $n = count($arr);\n    \n    $i=0;\n    $po=0;\n    $ne=0;\n    $n0=0;\n    \n    while($i<$n){\n        if($arr[$i]>0){\n            $po += 1;\n        }\n        \n        if($arr[$i]<0){\n            $ne += 1;\n        }\n        \n        if($arr[$i]==0){\n            $n0 += 1;\n        }\n    }\n    \n    $rezPo = $po/$n;\n    $rezNe = $ne/$n;\n    $rezN0 = $n0/$n;\n    \n    echo $rezPo.\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":484,"fileType":"php","requestStartTime":1517909071442}}
{"body": {"column":23,"line":32,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $n = count($arr);\n    \n    $i=0;\n    $po=0;\n    $ne=0;\n    $n0=0;\n    \n    while($i<$n){\n        if($arr[$i]>0){\n            $po += 1;\n        }\n        \n        if($arr[$i]<0){\n            $ne += 1;\n        }\n        \n        if($arr[$i]==0){\n            $n0 += 1;\n        }\n    }\n    \n    $rezPo = $po/$n;\n    $rezNe = $ne/$n;\n    $rezN0 = $n0/$n;\n    \n    echo $rezPo.\"<br>\".\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":491,"fileType":"php","requestStartTime":1517909077887}}
{"body": {"column":30,"line":32,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $n = count($arr);\n    \n    $i=0;\n    $po=0;\n    $ne=0;\n    $n0=0;\n    \n    while($i<$n){\n        if($arr[$i]>0){\n            $po += 1;\n        }\n        \n        if($arr[$i]<0){\n            $ne += 1;\n        }\n        \n        if($arr[$i]==0){\n            $n0 += 1;\n        }\n    }\n    \n    $rezPo = $po/$n;\n    $rezNe = $ne/$n;\n    $rezN0 = $n0/$n;\n    \n    echo $rezPo.\"<br>\".$rezNe.\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":498,"fileType":"php","requestStartTime":1517909084697}}
{"body": {"column":37,"line":32,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $n = count($arr);\n    \n    $i=0;\n    $po=0;\n    $ne=0;\n    $n0=0;\n    \n    while($i<$n){\n        if($arr[$i]>0){\n            $po += 1;\n        }\n        \n        if($arr[$i]<0){\n            $ne += 1;\n        }\n        \n        if($arr[$i]==0){\n            $n0 += 1;\n        }\n    }\n    \n    $rezPo = $po/$n;\n    $rezNe = $ne/$n;\n    $rezN0 = $n0/$n;\n    \n    echo $rezPo.\"<br>\".$rezNe.\"<br>\".\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":505,"fileType":"php","requestStartTime":1517909090370}}
{"body": {"column":37,"line":15,"wordToComplete":"","code":"\n<?php\n$_fp = fopen(\"php://stdin\", \"r\");\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */\nfscanf($_fp,\"%d\",$t);\nfor($i=0;$i<$t;$i++) {\n    fscanf($_fp,\"%s\",$s);\n    $sa=str_split($s);\n    $result=array(\n        'odd' => array(),\n        'even' => array(),\n    );\n    foreach($sa as $k=>$c) {\n        $result[ $k%2? 'odd' : 'even' ][] = $c;\n    }\n    echo implode( $result['even'] ) .\n}\n\n?>\n\n","offset":409,"fileType":"php","requestStartTime":1517912777689}}
{"body": {"column":43,"line":15,"wordToComplete":"","code":"\n<?php\n$_fp = fopen(\"php://stdin\", \"r\");\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */\nfscanf($_fp,\"%d\",$t);\nfor($i=0;$i<$t;$i++) {\n    fscanf($_fp,\"%s\",$s);\n    $sa=str_split($s);\n    $result=array(\n        'odd' => array(),\n        'even' => array(),\n    );\n    foreach($sa as $k=>$c) {\n        $result[ $k%2? 'odd' : 'even' ][] = $c;\n    }\n    echo implode( $result['even'] ) . \" \" .\n}\n\n?>\n\n","offset":415,"fileType":"php","requestStartTime":1517912781553}}
{"body": {"column":72,"line":15,"wordToComplete":"","code":"\n<?php\n$_fp = fopen(\"php://stdin\", \"r\");\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */\nfscanf($_fp,\"%d\",$t);\nfor($i=0;$i<$t;$i++) {\n    fscanf($_fp,\"%s\",$s);\n    $sa=str_split($s);\n    $result=array(\n        'odd' => array(),\n        'even' => array(),\n    );\n    foreach($sa as $k=>$c) {\n        $result[ $k%2? 'odd' : 'even' ][] = $c;\n    }\n    echo implode( $result['even'] ) . \" \" .  implode( $result['odd'] ) .;\n}\n\n?>\n\n","offset":444,"fileType":"php","requestStartTime":1517912801993}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n<?php\nclass Person{\n    public $age;\n    public function __construct($initialAge){\n        // Add some more code to run some checks on initialAge\n        $this->age\n    \n    }\n    public  function amIOld(){\n        // Do some computations in here and print out the correct statement to the console \n\n    }\n    public  function yearPasses(){\n          // Increment the age of the person in here\n\n    }\n   \n      \n}\n$T = intval(fgets(STDIN));\n for($i=0;$i<$T;$i++){\n     $age=intval(fgets(STDIN));\n     $p=new Person($age);\n     $p->amIOld();\n     for($j=0;$j<3;$j++){\n         $p->yearPasses();\n     }\n     $p->amIOld();\n     echo \"\\n\";\n         \n }\n?>\n","offset":163,"fileType":"php","requestStartTime":1517912964905}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n<?php\nclass Person{\n    public $age;\n    public function __construct($initialAge){\n        // Add some more code to run some checks on initialAge\n        if ($initialAge >)\n        $this->age = \n    \n    }\n    public  function amIOld(){\n        // Do some computations in here and print out the correct statement to the console \n\n    }\n    public  function yearPasses(){\n          // Increment the age of the person in here\n\n    }\n   \n      \n}\n$T = intval(fgets(STDIN));\n for($i=0;$i<$T;$i++){\n     $age=intval(fgets(STDIN));\n     $p=new Person($age);\n     $p->amIOld();\n     for($j=0;$j<3;$j++){\n         $p->yearPasses();\n     }\n     $p->amIOld();\n     echo \"\\n\";\n         \n }\n?>\n","offset":173,"fileType":"php","requestStartTime":1517912974911}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"\n<?php\nclass Person{\n    public $age;\n    public function __construct($initialAge){\n        // Add some more code to run some checks on initialAge\n        if ($initialAge < 0) {\n            $this->age = 0;\n            echo 'Age is not valid, setting age to 0.';\n        } else {\n            $this->age = $initialAge;\n        }\n    }\n    public  function amIOld(){\n        // Do some computations in here and print out the correct statement to the console \n        if ($this->)\n\n    }\n    public  function yearPasses(){\n        // Increment the age of the person in here\n        $this->age++;\n    }\n   \n      \n}\n$T = intval(fgets(STDIN));\n for($i=0;$i<$T;$i++){\n     $age=intval(fgets(STDIN));\n     $p=new Person($age);\n     $p->amIOld();\n     for($j=0;$j<3;$j++){\n         $p->yearPasses();\n     }\n     $p->amIOld();\n     echo \"\\n\";\n         \n }\n?>\n","offset":476,"fileType":"php","requestStartTime":1517913112143}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n<?php\nclass Person{\n    public $age;\n    public function __construct($initialAge){\n        // Add some more code to run some checks on initialAge\n        if ($initialAge < 0) {\n            $this->age = 0;\n            echo 'Age is not valid, setting age to 0.';\n        } else {\n            $this->age = $initialAge;\n        }\n    }\n    public  function amIOld(){\n        // Do some computations in here and print out the correct statement to the console \n        if ($this->age < 13) echo 'You are young.';\n        if ($this->age >< 13) echo 'You are young.';\n\n    }\n    public  function yearPasses(){\n        // Increment the age of the person in here\n        $this->age++;\n    }\n   \n      \n}\n$T = intval(fgets(STDIN));\n for($i=0;$i<$T;$i++){\n     $age=intval(fgets(STDIN));\n     $p=new Person($age);\n     $p->amIOld();\n     for($j=0;$j<3;$j++){\n         $p->yearPasses();\n     }\n     $p->amIOld();\n     echo \"\\n\";\n         \n }\n?>\n","offset":533,"fileType":"php","requestStartTime":1517913128813}}
{"body": {"column":39,"line":16,"wordToComplete":"","code":"\n<?php\nclass Person{\n    public $age;\n    public function __construct($initialAge){\n        // Add some more code to run some checks on initialAge\n        if ($initialAge < 0) {\n            $this->age = 0;\n            echo 'Age is not valid, setting age to 0.';\n        } else {\n            $this->age = $initialAge;\n        }\n    }\n    public  function amIOld(){\n        // Do some computations in here and print out the correct statement to the console \n        if ($this->age < 13) echo 'You are young.';\n        if ($this->age >= 13 && $this->) echo 'You are young.';\n\n    }\n    public  function yearPasses(){\n        // Increment the age of the person in here\n        $this->age++;\n    }\n   \n      \n}\n$T = intval(fgets(STDIN));\n for($i=0;$i<$T;$i++){\n     $age=intval(fgets(STDIN));\n     $p=new Person($age);\n     $p->amIOld();\n     for($j=0;$j<3;$j++){\n         $p->yearPasses();\n     }\n     $p->amIOld();\n     echo \"\\n\";\n         \n }\n?>\n","offset":548,"fileType":"php","requestStartTime":1517913135645}}
{"body": {"column":32,"line":1,"wordToComplete":"d\\d(---|-|.)$/'","code":"<?php\n$Regex_Pattern = '/^\\d\\d(---|-|.)$/'; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":39,"fileType":"php","requestStartTime":1517917208278}}
{"body": {"column":33,"line":1,"wordToComplete":"d\\d(---|-|\\.)$/'","code":"<?php\n$Regex_Pattern = '/^\\d\\d(---|-|\\.)$/'; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":40,"fileType":"php","requestStartTime":1517917213355}}
{"body": {"column":22,"line":23,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction formingMagicSquare($s) {\n    // Complete this function\n    $r1 = $s[0][0]+$s[0][1]+$s[0][2];\n    $r2 = $s[1][0]+$s[1][1]+$s[1][2];\n    $r3 = $s[2][0]+$s[2][1]+$s[2][2];\n    \n    $c1 = $s[0][0]+$s[1][0]+$s[2][0];\n    $c2 = $s[0][1]+$s[1][1]+$s[2][1];\n    $c3 = $s[0][2]+$s[1][2]+$s[2][2];\n    \n    $d1 = $s[0][0]+$s[1][1]+$s[2][2];\n    $d2 = $s[0][2]+$s[1][1]+$s[2][0];\n    \n    $sums = [$r1, $r2, $r3, $c1, $c2, $c3, $d1, $d2];\n    foreach ($sums as $o){\n        if (!in_array($o, $sumMatrix)){\n          $sumMatrix[]=$o;\n          $options[''.$o]=1;\n        } else {\n          $options[''.]\n        }\n        \n    }\n    \n}\n\n$s = array();\nfor($s_i = 0; $s_i < $3; $s_i++) {\n   $s_temp = fgets($handle);\n   $s[] = explode(\" \",$s_temp);\n   $s[$s_i] = array_map('intval', $s[$s_i]);\n}\n$result = formingMagicSquare($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":646,"fileType":"php","requestStartTime":1517919346593}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $parts = explode(':'.$s)\n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":132,"fileType":"php","requestStartTime":1517920061698}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    \n    if ($con=='AM'){\n        return substr($s,sizeof($2)-2);\n    }else{\n        $h = intval(substr($s,2))+12;\n        $str = $h.\n        return substr($s,sizeof($2)-2);\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":266,"fileType":"php","requestStartTime":1517920261840}}
{"body": {"column":30,"line":12,"wordToComplete":"3.","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    \n    if ($con=='AM'){\n        return substr($s,sizeof($2)-2);\n    }else{\n        $h = intval(substr($s,2))+12;\n        $str = $h.substr($s,3.)\n        return substr($s,sizeof($2)-2);\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":278,"fileType":"php","requestStartTime":1517920323600}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    $rest = substr($s,sizeof($s)-2);\n    $e = explode(':'.$rest)\n    \n    if ($con=='AM'){\n        return substr($s,sizeof($s)-1);\n    }else{\n        $h = intval(substr($s,1))+12;\n        $str = $h.substr($s,2,sizeof($s)-3);\n        return $str;\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":191,"fileType":"php","requestStartTime":1517920643225}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    $rest = substr($s,sizeof($s)-2);\n    $e = explode(':',$rest);\n    \n    if ($con=='AM'){\n        return $e[0].''\n    }else{\n        $h = intval(substr($s,1))+12;\n        $str = $h.substr($s,2,sizeof($s)-3);\n        return $str;\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":246,"fileType":"php","requestStartTime":1517920665057}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    $rest = substr($s,sizeof($s)-2);\n    $e = explode(':',$rest);\n    \n    if ($con=='AM'){\n        return $e[0].':'.\n    }else{\n        $h = intval(substr($s,1))+12;\n        $str = $h.substr($s,2,sizeof($s)-3);\n        return $str;\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":250,"fileType":"php","requestStartTime":1517920666922}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    $rest = substr($s,sizeof($s)-2);\n    $e = explode(':',$rest);\n    \n    if ($con=='AM'){\n        return $e[0].':'..':'\n    }else{\n        $h = intval(substr($s,1))+12;\n        $str = $h.substr($s,2,sizeof($s)-3);\n        return $str;\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":251,"fileType":"php","requestStartTime":1517920671954}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction timeConversion($s) {\n    // Complete this function\n    $con = substr($s,-2);\n    $rest = substr($s,sizeof($s)-2);\n    $e = explode(':',$rest);\n    \n    if ($con=='AM'){\n        return $e[0].':'.$e[1].':'.\n    }else{\n        $h = intval(substr($s,1))+12;\n        $str = $h.substr($s,2,sizeof($s)-3);\n        return $str;\n    }\n    \n}\n\nfscanf($handle, \"%s\",$s);\n$result = timeConversion($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":260,"fileType":"php","requestStartTime":1517920681970}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\nfunction plusMinus($arr) {\n    // Complete this function\n    $totalElements = count($arr);\n    \n    $fractionPos = 0;\n    $fractionNeg = 0;\n    $fractionZer = 0;\n    \n    foreach($key=>)\n}\n\n?>\n\n\n","offset":369,"fileType":"php","requestStartTime":1517923476714}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\nfunction plusMinus($arr) {\n    // Complete this function\n    $totalElements = count($arr);\n    \n    $totalPos = 0;\n    $totalNeg = 0;\n    $totalZer = 0;\n    \n    foreach($arr as $val) {\n        if($val >)\n    }\n}\n\n?>\n\n\n","offset":387,"fileType":"php","requestStartTime":1517923520361}}
{"body": {"column":29,"line":26,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\nfunction plusMinus($arr) {\n    // Complete this function\n    $totalEle = count($arr);\n    \n    $totalPos = 0;\n    $totalNeg = 0;\n    $totalZer = 0;\n    \n    foreach($arr as $val) {\n        if($val > 0)\n            $totalPos++;\n        else if($val < 0)\n            $totalNeg++;\n        else\n            $totalZer++;\n    }\n    echo $totalPos/$totalEle.\n}\n\n?>\n\n\n","offset":535,"fileType":"php","requestStartTime":1517923637993}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction generalisedHammingNumbers($n, $k) {\n    // Complete this function\n    $a = array();\n    foreach($a =>)\n}\n\nfscanf($handle, \"%li %i\", $n, $k);\n$result = generalisedHammingNumbers($n, $k);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":157,"fileType":"php","requestStartTime":1517923885844}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\nstaircase($n);\n\nfunction staircase($n) {\n    // Complete this function\n    for($i=0;$i<$n;$i++) {\n        \n        for($j=$n-1;$j>)\n            \n        echo \"\\n\";\n    }\n}\n?>\n\n\n","offset":203,"fileType":"php","requestStartTime":1517924630398}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction generalisedHammingNumbers($n, $k) {\n    // Complete this function\n    $ar = array(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97);\n    $ab = null;\n    $am = null;\n    foreach($ar as $p) {\n        if($p > $k)\n            break;\n        $ab[] = 0;\n        $am[] = log($n, $p);\n    }\n    $itog = 0;\n    while(1){\n        $sum = 1;\n        foreach($ab as $key => $p) {\n           if($p >)\n           $sum = $sum*(pow($ar[$key], $p))\n        }\n        \n    }\n}\n\nfscanf($handle, \"%li %i\", $n, $k);\n$result = generalisedHammingNumbers($n, $k);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":463,"fileType":"php","requestStartTime":1517924804889}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$genes_temp = fgets($handle);\n$genes = explode(\" \",$genes_temp);\n$health_temp = fgets($handle);\n$health = explode(\" \",$health_temp);\n$health = array_map('intval', $health);\nfscanf($handle, \"%i\",$s);\nfor($a0 = 0; $a0 < $s; $a0++){\n    fscanf($handle, \"%i %i %s\", $first, $last, $d);\n    echo $first .\n}\n\n?>\n\n\n","offset":372,"fileType":"php","requestStartTime":1517925172501}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$genes_temp = fgets($handle);\n$genes = explode(\" \",$genes_temp);\n$health_temp = fgets($handle);\n$health = explode(\" \",$health_temp);\n$health = array_map('intval', $health);\nfscanf($handle, \"%i\",$s);\nfor($a0 = 0; $a0 < $s; $a0++){\n    fscanf($handle, \"%i %i %s\", $first, $last, $d);\n    echo $first . .\n}\n\n?>\n\n\n","offset":374,"fileType":"php","requestStartTime":1517925173849}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$genes_temp = fgets($handle);\n$genes = explode(\" \",$genes_temp);\n$health_temp = fgets($handle);\n$health = explode(\" \",$health_temp);\n$health = array_map('intval', $health);\nfscanf($handle, \"%i\",$s);\nfor($a0 = 0; $a0 < $s; $a0++){\n    fscanf($handle, \"%i %i %s\", $first, $last, $d);\n    echo $first . . $last .\n}\n\n?>\n\n\n","offset":382,"fileType":"php","requestStartTime":1517925177292}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfscanf($handle, \"%i\",$n);\n$genes_temp = fgets($handle);\n$genes = explode(\" \",$genes_temp);\n$health_temp = fgets($handle);\n$health = explode(\" \",$health_temp);\n$health = array_map('intval', $health);\nfscanf($handle, \"%i\",$s);\nfor($a0 = 0; $a0 < $s; $a0++){\n    fscanf($handle, \"%i %i %s\", $first, $last, $d);\n    echo $first . . $last . .\n}\n\n?>\n\n\n","offset":384,"fileType":"php","requestStartTime":1517925177899}}
{"body": {"column":32,"line":22,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\nfunction getScore($s) {\n    $sub=getSubsequences($s, 0, 2);\n}\n\n/*\n * var $array the array\n * var $start the subsequence start\n * var $len length of subsequence\n */\nfunction getSubsequences($array, $start, $len)\n{\n    for($i = $start+1; $i<strlen($array); $i += $len){\n        \n        if($len > 1){\n            return array_map(function($array) use ($format) {\n                return $start . \n             }. \n        }\n        $subs[] = $array[$start] + substr($array, $i, $len);\n        //$i += 2;\n        printf($array[$start] . substr($array, $i, $len) . ' ');\n    }\n}\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$s = fgets($__fp);\n$s = trim($s);\n\n\n$res = getScore($s);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":442,"fileType":"php","requestStartTime":1517931634682}}
{"body": {"column":28,"line":30,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\nfunction getScore($s) {\n    $sub=getSubsequences($s, 0, 2);\n}\n\n/*\n * var $array the array\n * var $start the subsequence start\n * var $len length of subsequence\n */\nfunction getSubsequences($array, $start, $len)\n{\n    for($i = $start+1; $i<strlen($array); $i += $len){ \n        $first = $array[$start];\n        if($len > 1){\n            \n            $subs = array_map(function($item) use ($first) {\n                return $first . $item;\n             }, getSubsequences($array, $i, $len -1));\n            //printf(implode(array_map(function($item) use ($first) {\n                //return $array[$start] . $item;\n             //}, getSubsequences($array, $start+1, $len -1))),',');\n            \n        } else {\n            printf('start:'.$start);\n            printf('lengh:'$len);\n            $subs[] = $array[$start] + substr($array, $i, $len);\n        }\n        return $subs;\n    }\n}\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$s = fgets($__fp);\n$s = trim($s);\n\n\n$res = getScore($s);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":787,"fileType":"php","requestStartTime":1517933608387}}
{"body": {"column":16,"line":34,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\n$dicc = [];\nfunction getScore($s) {\n    $sub=getSubsequences($s, 0, 3);\n}\n\n/*\n * var $array the array\n * var $start the subsequence start\n * var $len length of subsequence\n */\nfunction getSubsequences($array, $start, $len)\n{\n    $subs = [];\n    for($i = $start+1; $i<strlen($array); $i++){ \n        $first = $array[$start];\n        if($len > 1){  \n            $subs = array_map(function($item) use ($first) {\n                return $first . $item;\n             }, getSubsequences($array, $i, $len -1));\n            if($len === 3)\n                printf(implode($subs, \" \"));\n            \n        } else {\n            \n            $subs[] = $array[$start] . substr($array, $i, $len);\n        } \n    }\n    dicc[$start.]\n    return $subs;\n}\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$s = fgets($__fp);\n$s = trim($s);\n\n\n$res = getScore($s);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":765,"fileType":"php","requestStartTime":1517934838827}}
{"body": {"column":31,"line":23,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\n$dicc = [];\nfunction getScore($s) {\n    $sub=getSubsequences($s, 0, 3);\n}\n\n/*\n * var $array the array\n * var $start the subsequence start\n * var $len length of subsequence\n */\nfunction getSubsequences($array, $start, $len)\n{\n    $subs = [];\n    for($i = $start+1; $i<strlen($array); $i++){ \n        $first = $array[$start];\n        if($len > 1){  \n            if($dicc[$start. \".\"])\n            $subs = array_map(function($item) use ($first) {\n                return $first . $item;\n             }, getSubsequences($array, $i, $len -1));\n            if($len === 3)\n                printf(implode($subs, \" \"));\n            \n        } else {\n            \n            $subs[] = $array[$start] . substr($array, $i, $len);\n        } \n    }\n    dicc[$start.\",\".$len] = $subs;\n    return $subs;\n}\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$s = fgets($__fp);\n$s = trim($s);\n\n\n$res = getScore($s);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":428,"fileType":"php","requestStartTime":1517934941674}}
{"body": {"column":25,"line":42,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\n$dicc = [];\nfunction getScore($s) {\n    global $dicc;\n    $sub=getSubsequences($s, 0, 1);\n   /*array_walk_recursive($dicc, function($value,$key) {\n  echo $key.' :'.$value.' ';\n});*/\n}\n\n/*\n * var $array the array\n * var $start the subsequence start\n * var $len length of subsequence\n */\nfunction getSubsequences($array, $start, $len)\n{\n    global $dicc;\n    $subs = [];\n    for ($i = $start+1; $i<strlen($array); $i++) { \n        $first = $array[$start];\n        if ($len > 2) {  \n            if (isset($dicc[$start. \",\" . $len])) {\n                $subseq = $dicc[$start. \",\" . $len];\n            } else {\n                $subseq = getSubsequences($array, $i, $len -1);\n            }\n               \n            $subs = array_map(function($item) use ($first) {\n                return $first . $item;\n            }, $subseq);\n            \n        } else {  \n            $subs[] = $array[$start] . substr($array, $i, $len);\n        }\n    }\n    printf(implode($subs.);\n    $dicc[\"$start,$len\"] = $subs;\n    return $subs;\n}\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$s = fgets($__fp);\n$s = trim($s);\n\n\n$res = getScore($s);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":1012,"fileType":"php","requestStartTime":1517936669047}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    \n    for($i=0; $i<count($arr); $i++) {\n        \n        if($arr[$i] < 0) {\n            $X++;\n        } else if($arr[$i]>)\n    }\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":269,"fileType":"php","requestStartTime":1517937293324}}
{"body": {"column":28,"line":25,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\nfunction getScore($s) {\n    $sub = getSubsequences($s, 0, 3);\n    printf(implode($sub));\n}\n\n/*\n * var $array the array\n * var $start the subsequence start\n * var $len length of subsequence\n */\nfunction getSubsequences($array, $start, $len)\n{\n    $subs = [];\n    for ($i = $start+1; $i<strlen($array); $i++) { \n        $first = $array[$start];\n        if ($len > 1) {  \n\n            $subseq = getSubsequences($array, $i, $len -1);\n            implode($subseq.)\n            $subs = array_map(function($item) use ($first) {\n                return $first . $item;\n            }, $subseq);\n            \n        } else {  \n            $subs[] = $array[$start] . substr($array, $i, $len);\n        }\n    }\n    return $subs;\n}\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$s = fgets($__fp);\n$s = trim($s);\n\n\n$res = getScore($s);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":507,"fileType":"php","requestStartTime":1517937358027}}
{"body": {"column":25,"line":22,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    \n    for($i=0; $i<count($arr); $i++) {\n        \n        if($arr[$i] < 0) {\n            $X++;\n        } else if($arr[$i]>0) {\n            $Y++;\n        } else if($arr[$i] == 0) {\n            $Z++;\n        }\n    }\n    \n    echo $X/count($arr) .\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":391,"fileType":"php","requestStartTime":1517937425048}}
{"body": {"column":31,"line":22,"wordToComplete":"br>\"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    \n    for($i=0; $i<count($arr); $i++) {\n        \n        if($arr[$i] < 0) {\n            $X++;\n        } else if($arr[$i]>0) {\n            $Y++;\n        } else if($arr[$i] == 0) {\n            $Z++;\n        }\n    }\n    \n    echo $X/count($arr) . \"<br>\"\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":397,"fileType":"php","requestStartTime":1517937429232}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    \n    for($i=0; $i<count($arr); $i++) {\n        \n        if($arr[$i] < 0) {\n            $X++;\n        } else if($arr[$i]>0) {\n            $Y++;\n        } else if($arr[$i] == 0) {\n            $Z++;\n        }\n    }\n    \n    console.echo $X/count($arr);\n    echo $Y/count($arr);\n    echo $Z/count($arr);\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":378,"fileType":"php","requestStartTime":1517937566060}}
{"body": {"column":31,"line":22,"wordToComplete":"br>\"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    \n    for($i=0; $i<count($arr); $i++) {\n        \n        if($arr[$i] < 0) {\n            $X++;\n        } else if($arr[$i]>0) {\n            $Y++;\n        } else if($arr[$i] == 0) {\n            $Z++;\n        }\n    }\n    \n    echo $X/count($arr) + \"<br>\";\n    echo $Y/count($arr);\n    echo $Z/count($arr);\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":397,"fileType":"php","requestStartTime":1517937613796}}
{"body": {"column":25,"line":22,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    \n    $X = 0;\n    $Y = 0;\n    $Z = 0;\n    \n    for($i=0; $i<count($arr); $i++) {\n        \n        if($arr[$i] < 0) {\n            $X++;\n        } else if($arr[$i]>0) {\n            $Y++;\n        } else if($arr[$i] == 0) {\n            $Z++;\n        }\n    }\n    \n    echo $X/count($arr) . \"</br>\";\n    echo $Y/count($arr);\n    echo $Z/count($arr);\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":391,"fileType":"php","requestStartTime":1517937641420}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\",\"r\");\nfscanf($handle,\"%d\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\necho $arr;\n$i = count($arr)+1;\nwhile($i>0){\n    echo $arr[$i].;\n    $i--;\n}\n\n?>\n\n\n","offset":192,"fileType":"php","requestStartTime":1517940953384}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\",\"r\");\nfscanf($handle,\"%d\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\narray_reverse($arr);\nfor($i=0;$i<count($arr);$i++){\n    print($arr[$i].);\n}\n\n?>\n\n\n","offset":201,"fileType":"php","requestStartTime":1517941454034}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\",\"r\");\nfscanf($handle,\"%d\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_reverse($arr);\nfor($i=0;$i<count($arr);$i++){\n    echo $arr[$i].'joey ';\n}\n\n?>\n\n\n","offset":207,"fileType":"php","requestStartTime":1517941578049}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction fairRations($b) {\n    $size = count($b);\n    $count = 0;\n    for ($i = 0; $i < $size; $i++) {\n        if ($b[$i] % 2) {\n            $b[$i]++;\n            if ($i > 0 && $b[$i-1] % 2) {\n                $b[$i-1]++;\n            } elseif ($i + 1 < $size) {\n                $b[$i+1]++;\n            }\n            $count += 2;\n        }\n    }\n    print_R($b);\n    echo $count . \"\\n\"\n}\n\nfscanf($handle, \"%i\",$N);\n$B_temp = fgets($handle);\n$B = explode(\" \",$B_temp);\n$B = array_map('intval', $B);\n$result = fairRations($B);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":425,"fileType":"php","requestStartTime":1517952072573}}
{"body": {"column":24,"line":1,"wordToComplete":"Mr.)/\"","code":"<?php\n$Regex_Pattern = \"/^(Mr.)/\"; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":31,"fileType":"php","requestStartTime":1517955143240}}
{"body": {"column":29,"line":1,"wordToComplete":"Mr.|Mrs.)/\"","code":"<?php\n$Regex_Pattern = \"/^(Mr.|Mrs.)/\"; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":36,"fileType":"php","requestStartTime":1517955149862}}
{"body": {"column":33,"line":1,"wordToComplete":"Mr.|Mrs.|Ms.)/\"","code":"<?php\n$Regex_Pattern = \"/^(Mr.|Mrs.|Ms.)/\"; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":40,"fileType":"php","requestStartTime":1517955153660}}
{"body": {"column":37,"line":1,"wordToComplete":"Mr.|Mrs.|Ms.|Dr.)/\"","code":"<?php\n$Regex_Pattern = \"/^(Mr.|Mrs.|Ms.|Dr.)/\"; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":44,"fileType":"php","requestStartTime":1517955158798}}
{"body": {"column":41,"line":1,"wordToComplete":"Mr.|Mrs.|Ms.|Dr.|Er.)/\"","code":"<?php\n$Regex_Pattern = \"/^(Mr.|Mrs.|Ms.|Dr.|Er.)/\"; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":48,"fileType":"php","requestStartTime":1517955162294}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\",\"r\");\nfscanf($handle,\"%d\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\narray_walk($arr,'intval');\n$index = count($arr);\nwhile($index >0)\n{\n    echo $arr[--$index] .;\n}\n?>\n\n\n","offset":223,"fileType":"php","requestStartTime":1517955495345}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction encryption($s) {\n    $size = strlen($s);\n    $columnSize = ceil(sqrt($size));\n    $rowSize = intval(sqrt($size));\n    $s = str_split($s, $columnSize);\n    $result = [];\n    foreach($s as $item){\n        for($i = 0; $i<$rowSize; $i++){\n            $result[$i] .\n        }\n    }\n    var_dump($s);\n    /*\n    $result = [];\n    foreach($)*/\n    // Complete this function\n}\n\nfscanf($handle, \"%s\",$s);\n$result = encryption($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":316,"fileType":"php","requestStartTime":1517956947697}}
{"body": {"column":46,"line":24,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    $size = count($arr);\n    $positives = 0;\n    $negatives = 0;\n    $zeros = 0;\n    \n    for ($i = 0; $i < $size; $i++) {\n        if ($arr[$i] < 0) {\n            $negatives++;\n        }\n        \n        if ($arr[$i] === 0) {\n            $zeros++;\n        }\n        \n        if ($arr[$i] > 0) {\n            $positives++;\n        }\n    }\n    \n    echo number_format($positives/$size, 6) . ;\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":462,"fileType":"php","requestStartTime":1517959174120}}
{"body": {"column":45,"line":25,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    $size = count($arr);\n    $positives = 0;\n    $negatives = 0;\n    $zeros = 0;\n    \n    for ($i = 0; $i < $size; $i++) {\n        if ($arr[$i] < 0) {\n            $negatives++;\n        }\n        \n        if ($arr[$i] === 0) {\n            $zeros++;\n        }\n        \n        if ($arr[$i] > 0) {\n            $positives++;\n        }\n    }\n    \n    echo number_format($positives/$size, 6) . \"\\n\";\n    echo number_format($negatives/$size, 6) .\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\n\n?>\n\n\n","offset":513,"fileType":"php","requestStartTime":1517959201684}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction diagonalDifference($a) {\n    $n = count($a);\n    $one = 0;\n    $two = 0;\n    for($i=0; $i < $n; $i++) {\n        $one += $a[$i][$i];\n        $two += $a[$n-1 - $i][$n-1 - $i];\n    }\n    echo($one .);\n    echo($two);\n    $sum = $one + $two;\n    return abs($sum);\n}\n\nfscanf($handle, \"%i\",$n);\n$a = array();\nfor($a_i = 0; $a_i < $n; $a_i++) {\n   $a_temp = fgets($handle);\n   $a[] = explode(\" \",$a_temp);\n   $a[$a_i] = array_map('intval', $a[$a_i]);\n}\n$result = diagonalDifference($a);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":251,"fileType":"php","requestStartTime":1517959882363}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction diagonalDifference($a) {\n    $n = count($a);\n    $one = 0;\n    $two = 0;\n    for($i=0; $i < $n; $i++) {\n        $one += $a[$i][$i];\n        $two += $a[$n-1 - $i][$n-1 - $i];\n    }\n    echo($one . \"\\n\");\n    echo($two.);\n    $sum = $one + $two;\n    return abs($sum);\n}\n\nfscanf($handle, \"%i\",$n);\n$a = array();\nfor($a_i = 0; $a_i < $n; $a_i++) {\n   $a_temp = fgets($handle);\n   $a[] = explode(\" \",$a_temp);\n   $a[$a_i] = array_map('intval', $a[$a_i]);\n}\n$result = diagonalDifference($a);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":273,"fileType":"php","requestStartTime":1517959890665}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction diagonalDifference($a) {\n    $n = count($a);\n    $one = 0;\n    $two = 0;\n    for($i=0; $i < $n; $i++) {\n        $one += $a[$i][$i];\n        $two += $a[$i][$n-1 - $i];\n    }\n    echo $one .\n    $sum = $one + $two;\n    return abs($sum);\n}\n\nfscanf($handle, \"%i\",$n);\n$a = array();\nfor($a_i = 0; $a_i < $n; $a_i++) {\n   $a_temp = fgets($handle);\n   $a[] = explode(\" \",$a_temp);\n   $a[$a_i] = array_map('intval', $a[$a_i]);\n}\n$result = diagonalDifference($a);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":244,"fileType":"php","requestStartTime":1517960011276}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction diagonalDifference($a) {\n    $n = count($a);\n    $one = 0;\n    $two = 0;\n    for($i=0; $i < $n; $i++) {\n        $one += $a[$i][$i];\n        $two += $a[$i][$n-1 - $i];\n    }\n    echo $one . \"\\n\";\n    echo $two .\n    $sum = $one + $two;\n    return abs($sum);\n}\n\nfscanf($handle, \"%i\",$n);\n$a = array();\nfor($a_i = 0; $a_i < $n; $a_i++) {\n   $a_temp = fgets($handle);\n   $a[] = explode(\" \",$a_temp);\n   $a[$a_i] = array_map('intval', $a[$a_i]);\n}\n$result = diagonalDifference($a);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":266,"fileType":"php","requestStartTime":1517960020507}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction countingValleys($n, $s) {\n    $valleys = 0;\n    $counter = 0;\n    \n    foreach ($s as $letter) {\n        if ($letter == 'U') {\n            $counter++;\n        }\n        \n        if ($letter == 'D') {\n            $counter--;\n        }\n        \n        print_r($counter) .\n    }\n    \n    exit();\n    \n    return $valleys;\n}\n\nfscanf($handle, \"%i\",$n);\nfscanf($handle, \"%s\",$s);\n$result = countingValleys($n, $s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":326,"fileType":"php","requestStartTime":1517960201137}}
{"body": {"column":23,"line":18,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction countingValleys($n, $s) {\n    $valleys = 0;\n    $counter = 0;\n    \n    for ($i = 0; $i < count($s); $i++) {\n        \n        if ($letter == 'U') {\n            $counter++;\n        }\n        \n        if ($letter == 'D') {\n            $counter--;\n        }\n        \n        echo $counter .\n       \n    }\n    \n//    return $valleys;\n}\n\nfscanf($handle, \"%i\",$n);\nfscanf($handle, \"%s\",$s);\n$result = countingValleys($n, $s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":342,"fileType":"php","requestStartTime":1517960403947}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction solve($a0, $a1, $a2, $b0, $b1, $b2){\n    // Complete this function\n    if($a0 >)\n}\n\nfscanf($handle, \"%d %d %d\", $a0, $a1, $a2);\nfscanf($handle, \"%d %d %d\", $b0, $b1, $b2);\n$result = solve($a0, $a1, $a2, $b0, $b1, $b2);\necho implode(\" \", $result).\"\\n\";\n\n\n\n?>\n\n\n","offset":135,"fileType":"php","requestStartTime":1517969532852}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction simpleArraySum($n, $ar) {\n    // Complete this function\n    $res=0;\n    if($n>1){\n        for($i=0;$i<count($ar);$i++){\n            $res .\n        }\n    }\n}\n\nfscanf($handle, \"%i\",$n);\n$ar_temp = fgets($handle);\n$ar = explode(\" \",$ar_temp);\n$ar = array_map('intval', $ar);\n$result = simpleArraySum($n, $ar);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":194,"fileType":"php","requestStartTime":1517971624596}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction simpleArraySum($n, $ar) {\n    // Complete this function\n    $res=0;\n    if($n>1){\n        for($i=0;$i<count($ar);$i++){\n            $res .\n        }\n    }\n}\n\nfscanf($handle, \"%i\",$n);\n$ar_temp = fgets($handle);\n$ar = explode(\" \",$ar_temp);\n$ar = array_map('intval', $ar);\n$result = simpleArraySum($n, $ar);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":194,"fileType":"php","requestStartTime":1517971627692}}
{"body": {"column":36,"line":15,"wordToComplete":"","code":"\n<?php\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */\n\nfunction readInput()\n{\n    $handle = fopen (\"php://stdin\",\"r\");\n\n    $headers = explode(',',trim(fgets($handle)));\n\n    while($line = fgets($handle))\n    {\n        $doc_vals = explode(',', trim($line));\n        $summary = array_combine($headers, $doc_vals);\n        \n        print(json_encode($summary).);\n        $docs[] = $summary;\n    }\n    fclose($handle);\n\n    return $doc_vals ?? [];\n}\n\nfunction analyzeInput(array $docs)\n{\n    $docs_present = [];\n    $apps_present = [];\n    foreach ($docs as $doc)\n    {\n        $type = $doc['docType'];\n        $app_id = $doc['applicationId'];\n\n        // Track which applications contain current doctype\n        $docs_present[$type][] = $app_id;\n\n        // Track which docs exist for this application\n        $apps_present[$app_id][] = $type;\n    }\n    \n    \n}\n\n$docs = readInput();\n//$results = analyzeInput($docs);\n\n\n","offset":386,"fileType":"php","requestStartTime":1517975803181}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\nfunction canReach($x1, $y1, $x2, $y2) {\n    \n    //type1\n    while($x1 < $x2){\n        $x1 += $x1;\n    }\n    \n    //Type2\n    \n    print( $x1 . \"\\ny1: \" . $y1 . \"\\nx2: \" . $x2 + \"\\ny2: \" + $y2);\n    if(($x1 === $x1) && ($y1 === $y2)){\n        return \"yes\";\n    }else{\n        return \"No\";\n    }\n    \n\n}\n\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\nfscanf($__fp, \"%d\", $x1);\n\nfscanf($__fp, \"%d\", $y1);\n\nfscanf($__fp, \"%d\", $x2);\n\nfscanf($__fp, \"%d\", $y2);\n\n\n$res = canReach($x1, $y1, $x2, $y2);\nfwrite($file, $res . \"\\n\" );\n\n\nfclose($file);\n?>\n\n","offset":220,"fileType":"php","requestStartTime":1517975890174}}
{"body": {"column":30,"line":58,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    $w = ['K', 'Q', 'N', 'B', 'R', 'P'];\n    $b = ['k', 'q', 'n', 'b', 'r', 'p'];\n    $size = count($board);\n    $pawn_position = null;\n    $pawn_color = null;\n    $step_variants = [];\n    \n    for ($i = 0; $i < $size; $i++) {\n        if ($board[1][$i] == 'p') {\n            $pawn_position = $i;\n            $pawn_color = 'black';\n            break;\n        }\n        if ($board[1][$i] == 'P') {\n            $pawn_position = $i;\n            $pawn_color = 'white';\n            break;\n        }\n    }\n    if ($board[0][$pawn_position] == '#') {\n        $step_variants[] = [0, $pawn_position];    \n    }\n    if (!empty($board[0][$pawn_position + 1]) && $board[0][$pawn_position + 1] != '#') {\n        if (($pawn_color == 'black' && in_array($board[0][$pawn_position + 1], $w)) || \n            ($pawn_color == 'white' && in_array($board[0][$pawn_position + 1], $b))) {\n            $step_variants[] = [0, $pawn_position + 1];\n        }\n    }\n    if (!empty($board[0][$pawn_position - 1]) && $board[0][$pawn_position - 1] != '#') {\n        if (($pawn_color == 'black' && in_array($board[0][$pawn_position - 1], $w)) || \n            ($pawn_color == 'white' && in_array($board[0][$pawn_position - 1], $b))) {\n            $step_variants[] = [0, $pawn_position - 1];\n        }\n    }\n    \n    if (empty($step_variants)) return 0;\n    \n    $king_position = null;\n    for($i = 0; $i < $size; $i++) {\n        for($j = 0; $j < $size; $j++) {\n            if ($pawn_color == 'black' && $board[$i][$j] == 'K') {\n                $king_position = [$i, $j];\n                break;\n            }\n            if ($pawn_color == 'white' && $board[$i][$j] == 'k') {\n                $king_position = [$i, $j];\n                break;\n            }\n        }\n    }\n    \n    print_R($step_variants);\n    print_R($king_position);\n    echo str_repeat('-', 10) .\n    // Complete this function\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board_temp = fgets($handle);\n       $board[] = str_split($board_temp);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":1913,"fileType":"php","requestStartTime":1517989187054}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction solve($a0, $a1, $a2, $b0, $b1, $b2){\n    $rank1;\n    $rank2;\n    $arr1 = [$a0, $a1, $a2];\n    $arr2 = [$b0, $b1, $b2];\n    for($i = 0; $i<3; $i++) {\n        if ($arr1[$i] > $arr2[$i]) {\n            $rank1 = $rank1 + 1;\n        } else if ($arr2[$i] > $arr1[$i]) {\n            $rank2 = $rank2 + 1;\n        }\n    }\n    return $rank1.\n}\n\nfscanf($handle, \"%d %d %d\", $a0, $a1, $a2);\nfscanf($handle, \"%d %d %d\", $b0, $b1, $b2);\n$result = solve($a0, $a1, $a2, $b0, $b1, $b2);\necho implode(\" \", $result).\"\\n\";\n\n\n\n?>\n\n\n","offset":386,"fileType":"php","requestStartTime":1517991812496}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction solve($a0, $a1, $a2, $b0, $b1, $b2){\n    $rank1;\n    $rank2;\n    $arr1 = [$a0, $a1, $a2];\n    $arr2 = [$b0, $b1, $b2];\n    for($i = 0; $i<3; $i++) {\n        if ($arr1[$i] > $arr2[$i]) {\n            $rank1 = $rank1 + 1;\n        } else if ($arr2[$i] > $arr1[$i]) {\n            $rank2 = $rank2 + 1;\n        }\n    }\n    return $rank1.\" \".\n}\n\nfscanf($handle, \"%d %d %d\", $a0, $a1, $a2);\nfscanf($handle, \"%d %d %d\", $b0, $b1, $b2);\n$result = solve($a0, $a1, $a2, $b0, $b1, $b2);\necho implode(\" \", $result).\"\\n\";\n\n\n\n?>\n\n\n","offset":390,"fileType":"php","requestStartTime":1517991815608}}
{"body": {"column":58,"line":54,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Find pawn that can be promoted\n    $r=1;\n    for($c = 0; $c < 8; $c++) {\n        if($board[$r][$c] == 'P' && $board[$r-1][$c] == '#') {\n            $board[$r][$c] = '#';\n            $board[$r-1][$c] = 'P';\n            if(! checkCheck($board, 'black')) {\n                $pawn_pos = [$r, $c];\n                break;\n            }\n            $board[$r][$c] = 'P';\n            $board[$r-1][$c] = '#';\n        }\n    }\n    // Count ways\n    $ways = 0;\n    $promotions = ['Q', 'R', 'B', 'N'];\n    foreach($promotions as $promotion) {\n        $board[ $pawn_pos[0] ][ $pawn_pos[1] ] = '#';\n        $board[ $pawn_pos[0] - 1 ][ $pawn_pos[1] ] = $promotion;\n        if(checkCheck($board, 'white')) {\n            $ways++;\n        }\n    }\n    return $ways;\n}\n\nfunction checkCheck($board, $player){\n    $other_king = $player == 'white'? 'k' : 'K';\n    $rook = $player == 'white'? 'R' : 'r';\n    $queen = $player == 'white'? 'Q' : 'q';\n    $bishop = $player == 'white'? 'B' : 'b';\n    $knight = $player == 'white'? 'N' : 'n';\n    // Find other king on the board\n    for($r = 0; $r < 8; $r++) {\n        for($c = 0; $c < 8; $c++) {\n            if($board[$r][$c] == $other_king){\n                $other_king_pos=[$r,$c];\n            }\n        }    \n    }\n    // Check the check\n    $check = false;\n    for($r = 0; $r < 8; $r++) {\n        for($c = 0; $c < 8; $c++) {\n            if($board[$r][$c] == $queen || $board[$r][$c] == $bishop ) {\n                if($r + $c == $other_king_pos[0] + $other_king_pos[1] || $r - $c == $other_king_pos[0] - $other_king_pos[1]) {\n                    $check = checkFreePath($board, [$r,$c], $other_king_pos);\n                }\n                echo \"black king: \" . $other_king_pos[0] .\n                echo \"check bishop: \" . $check . \"\\n\";\n            }\n            if($board[$r][$c] == $queen || $board[$r][$c] == $rook ) {\n                if($r == $other_king_pos[0] || $c == $other_king_pos[1]) {\n                    $check = checkFreePath($board, [$r,$c], $other_king_pos);\n                }\n            }\n            if($board[$r][$c] == $knight) {\n                if(abs($r - $other_king_pos[0]) == 2 && abs($c - $other_king_pos[1]) == 1 || \n                        abs($r - $other_king_pos[0]) == 1 && abs($c - $other_king_pos[1]) == 2 ) {\n                    $check = true;\n                }\n            }\n            if($check) {\n                break 2;\n            }\n        }    \n    }\n    return $check;\n}\n\nfunction checkFreePath($board, $pos1, $pos2) {\n    $free = true;\n    for($i = min($pos1[0], $pos2[0]) + 1; $i <= max($pos1[0], $pos2[0]) - 1; $i++) {\n        for($j = min($pos1[1], $pos2[1]) + 1; $j <= max($pos1[1], $pos2[1]) - 1; $j++) {\n            if($board[$i][$j] == \"#\") {\n                $free=false;\n                break 2;\n            }\n        }\n    }\n    return $free;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board_temp = fgets($handle);\n       $board[] = str_split($board_temp);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":1793,"fileType":"php","requestStartTime":1517998194137}}
{"body": {"column":36,"line":17,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Complete this function\n    $x = -1;\n    $king = [];\n    for($i = 0; $i < 8; $i++) {\n        if ($board[1][$i] == 'P' && $board[0][$i] == '#')\n            $x = $i;\n        \n        for ($j = 0; $j < 8; $j++)\n            if ($board[$i][$j] == 'k')\n                $king = [$i, $j];\n    }\n    \n    echo $x . ' ' . $king[0] . ' ' .\n    \n    if ($x == $king[1] || $king[0] == 8)\n        return 2;\n    \n    if (abs(8-$king[0]) == abs($x - $king[1]))\n        return 2;\n    \n    if (abs(8 - $king[0]) + abs($x - $king[1]) == 3)\n        return 1;\n    \n    return 0;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board[] = fgets($handle);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":417,"fileType":"php","requestStartTime":1518003111242}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Complete this function\n    $x = -1;\n    $king = [];\n    for($i = 0; $i < 8; $i++) {\n        if ($board[1][$i] == 'P' && $board[0][$i] == '#')\n            $x = $i;\n        \n        for ($j = 0; $j < 8; $j++)\n            if ($board[$i][$j] == 'k')\n                $king = [$i, $j];\n    }\n    if ($king[0] == 1) {\n        $board[1][$x] = '#';\n        $x1 = $x2 = $king[0];\n        while ($x1-- >= 0 && $x2++ < 8) {\n            if ($x1 > )\n        }\n    }\n    \n    echo $x . ' ' . $king[0] . ' ' . $king[1];\n    \n    if ($x == $king[1] || $king[0] == 0)\n        return 2;\n    \n    if (abs($king[0]) == abs($x - $king[1]))\n        return 2;\n    \n    if (abs($king[0]) + abs($x - $king[1]) == 3)\n        return 1;\n    \n    return 0;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board[] = fgets($handle);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":524,"fileType":"php","requestStartTime":1518003439185}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Complete this function\n    $x = -1;\n    $king = [];\n    for($i = 0; $i < 8; $i++) {\n        if ($board[1][$i] == 'P' && $board[0][$i] == '#')\n            $x = $i;\n        \n        for ($j = 0; $j < 8; $j++)\n            if ($board[$i][$j] == 'k')\n                $king = [$i, $j];\n    }\n    if ($king[0] == 1) {\n        $board[1][$x] = '#';\n        $x1 = $x2 = $king[0];\n        while ($x1-- >= 0 && $x2++ < 8) {\n            echo $x1 . ' ' .\n            if ($x1 >= 0 && $board[1][$x1] != '#') \n                if ($board[1][$x1] == 'R' || $board[1][$x1] = 'Q')\n                    return 4;\n                else\n                    $x1 = 0;\n            if ($x2 < 8 && $board[1][$x2] != '#') \n                if ($board[1][$x2] == 'R' || $board[1][$x2] = 'Q')\n                    return 4;\n                else\n                    $x2 = 8;\n        }\n    }\n        \n    if ($x == $king[1] || $king[0] == 0)\n        return 2;\n    \n    if (abs($king[0]) == abs($x - $king[1]))\n        return 2;\n    \n    if (abs($king[0]) + abs($x - $king[1]) == 3)\n        return 1;\n    \n    return 0;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board[] = fgets($handle);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":530,"fileType":"php","requestStartTime":1518003570251}}
{"body": {"column":58,"line":20,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Complete this function\n    $x = -1;\n    $king = [];\n    for($i = 0; $i < 8; $i++) {\n        if ($board[1][$i] == 'P' && $board[0][$i] == '#')\n            $x = $i;\n        \n        for ($j = 0; $j < 8; $j++)\n            if ($board[$i][$j] == 'k')\n                $king = [$i, $j];\n    }\n    if ($king[0] == 1) {\n        $board[1][$x] = '#';\n        $x1 = $x2 = $king[0];\n        while ($x1-- >= 0 && $x2++ < 8) {\n            echo $x1 . ' ' . $board[1][$x1] . ' ' . $x2 . \n            if ($x1 >= 0 && $board[1][$x1] != '#') \n                if ($board[1][$x1] == 'R' || $board[1][$x1] = 'Q')\n                    return 4;\n                else\n                    $x1 = 0;\n            if ($x2 < 8 && $board[1][$x2] != '#') \n                if ($board[1][$x2] == 'R' || $board[1][$x2] = 'Q')\n                    return 4;\n                else\n                    $x2 = 8;\n        }\n    }\n        \n    if ($x == $king[1] || $king[0] == 0)\n        return 2;\n    \n    if (abs($king[0]) == abs($x - $king[1]))\n        return 2;\n    \n    if (abs($king[0]) + abs($x - $king[1]) == 3)\n        return 1;\n    \n    return 0;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board[] = fgets($handle);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":560,"fileType":"php","requestStartTime":1518003577841}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Complete this function\n    $x = -1;\n    $king = [];\n    for($i = 0; $i < 8; $i++) {\n        if ($board[1][$i] == 'P' && $board[0][$i] == '#') {\n            $x1 = $i - 1; $x2 = $i + 1;\n            while ($x1 > )\n            $x = $i;\n        }\n        \n        for ($j = 0; $j < 8; $j++)\n            if ($board[$i][$j] == 'k')\n                $king = [$i, $j];\n    }\n    if ($king[0] == 1) {\n        $board[1][$x] = '#';\n        $x1 = $x2 = $king[0];\n        while ($x1 > 0 || $x2 < 7) {\n            $x1--; $x2++;\n            if ($x1 >= 0 && $board[1][$x1] != '#') \n                if (in_array($board[1][$x1], ['R', 'Q'], true))\n                    return 4;\n                else\n                    $x1 = 0;\n            if ($x2 < 8 && $board[1][$x2] != '#') \n                if (in_array($board[1][$x2], ['R', 'Q'], true))\n                    return 4;\n                else\n                    $x2 = 8;\n        }\n    }\n    \n    if ($x > 0 && in_array($board[0][$x-1], ['B', 'Q'], true) && $king[0] == $king[1] - $x + 1) {\n        $fl = true;\n        for ($i = 2; $i < $king[0]; $i++)\n            if ($board[$i][$x - 1 + $i] != '#') {\n                $fl = false;\n                break;\n            }\n        if ($fl) return 4;\n    }\n        \n    if ($x > 0 && in_array($board[0][$x+1], ['B', 'Q'], true) && $king[0] == $x - $king[1] + 1) {\n        $fl = true;\n        for ($i = 2; $i < $king[0]; $i++)\n            if ($board[$i][$x + 1 - $i] != '#') {\n                $fl = false;\n                break;\n            }\n        if ($fl) return 4;\n    }\n        \n    if ($x == $king[1] || $king[0] == 0)\n        return 2;\n    \n    if (abs($king[0]) == abs($x - $king[1]))\n        return 2;\n    \n    if (abs($king[0]) + abs($x - $king[1]) == 3)\n        return 1;\n    \n    return 0;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board[] = fgets($handle);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":299,"fileType":"php","requestStartTime":1518005136342}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction waysToGiveACheck($board) {\n    // Complete this function\n    $x = -1;\n    $king = [];\n    for($i = 0; $i < 8; $i++) {\n        if ($board[1][$i] == 'P' && $board[0][$i] == '#') {\n            $x1 = $i - 1; $x2 = $i + 1;\n            while ($x1 > 0 && $board[1][$x1] == '#') $x1--;\n            while ($x2 < 7 && $board[1][$x2] == '#') $x2++;\n            if ($x1 >= 0 && $x2 <= 7 && ($board[1][$x1] == 'K' || $board[1][$x2] == 'K') && \n                (in_array($board[1][$x1], ['q', 'r'], true) || in_array($board[1][$x2], ['q', 'r'], true)))\n                continue;\n            if ($x > )\n            $x = $i;\n        }\n        \n        for ($j = 0; $j < 8; $j++)\n            if ($board[$i][$j] == 'k')\n                $king = [$i, $j];\n    }\n    if ($x < 0) return 0;\n    \n    if ($king[0] == 1) {\n        $board[1][$x] = '#';\n        $x1 = $x2 = $king[0];\n        while ($x1 > 0 || $x2 < 7) {\n            $x1--; $x2++;\n            if ($x1 >= 0 && $board[1][$x1] != '#') \n                if (in_array($board[1][$x1], ['R', 'Q'], true))\n                    return 4;\n                else\n                    $x1 = 0;\n            if ($x2 < 8 && $board[1][$x2] != '#') \n                if (in_array($board[1][$x2], ['R', 'Q'], true))\n                    return 4;\n                else\n                    $x2 = 8;\n        }\n    }\n    \n    if ($x > 0 && in_array($board[0][$x-1], ['B', 'Q'], true) && $king[0] == $king[1] - $x + 1) {\n        $fl = true;\n        for ($i = 2; $i < $king[0]; $i++)\n            if ($board[$i][$x - 1 + $i] != '#') {\n                $fl = false;\n                break;\n            }\n        if ($fl) return 4;\n    }\n        \n    if ($x > 0 && in_array($board[0][$x+1], ['B', 'Q'], true) && $king[0] == $x - $king[1] + 1) {\n        $fl = true;\n        for ($i = 2; $i < $king[0]; $i++)\n            if ($board[$i][$x + 1 - $i] != '#') {\n                $fl = false;\n                break;\n            }\n        if ($fl) return 4;\n    }\n        \n    if ($x == $king[1] || $king[0] == 0)\n        return 2;\n    \n    if (abs($king[0]) == abs($x - $king[1]))\n        return 2;\n    \n    if (abs($king[0]) + abs($x - $king[1]) == 3)\n        return 1;\n    \n    return 0;\n}\n\nfscanf($handle, \"%i\",$t);\nfor($a0 = 0; $a0 < $t; $a0++){\n    $board = array();\n    for($board_i = 0; $board_i < 8; $board_i++) {\n       $board[] = fgets($handle);\n    }\n    $result = waysToGiveACheck($board);\n    echo $result . \"\\n\";\n}\n\n?>\n\n\n","offset":642,"fileType":"php","requestStartTime":1518006888851}}
{"body": {"column":51,"line":1,"wordToComplete":"D[^aeiou][^bcDF]\\S[^AEIOU][^.,/\"","code":"<?php\n$Regex_Pattern = \"/^\\D[^aeiou][^bcDF]\\S[^AEIOU][^.,/\"; //Do not delete '/'. Replace __________ with your regex. \n\n$handle = fopen (\"php://stdin\",\"r\");\n$Test_String = fgets($handle);\nif(preg_match($Regex_Pattern, $Test_String, $output_array)){\n    print (\"true\");\n} else {\n    print (\"false\");\n}\n\nfclose($handle);\n?>\n\n","offset":58,"fileType":"php","requestStartTime":1518006919981}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction solve($a0, $a1, $a2, $b0, $b1, $b2){\n    // Complete this function\n    $p1 = 0;\n    $p2 = 0;\n    for ($i=0; $i<2; $i++) {\n        $c = '$a' . \n        if ($a0 > $b0) {\n            $p1++;\n        } elseif ($a0) {\n            $p2++;\n        }\n    }\n    return [ $p1, $p2 ];\n}\n\nfscanf($handle, \"%d %d %d\", $a0, $a1, $a2);\nfscanf($handle, \"%d %d %d\", $b0, $b1, $b2);\n$result = solve($a0, $a1, $a2, $b0, $b1, $b2);\necho implode(\" \", $result).\"\\n\";\n\n\n\n?>\n\n\n","offset":198,"fileType":"php","requestStartTime":1518012733845}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"\n<?php\n$_fp = fopen(\"php://stdin\", \"r\");\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */\n\n$firstLine = fgets($_fp);\n$input = explode(' ',$firstLine);\narray_walk($input,'intval');\n\nlist($N, $Q) = $input;\n$lastAnswer = 0;\n$sequence = [];\n\nfor ($i=0; $i < $Q; $i++) {\n    $nextLine = fgets($_fp);\n    $query = explode(' ', $nextLine);\n    array_walk($query,'intval');\n    \n    list($type, $x, $y) = $query;\n    \n    $index = ($x ^ $lastAnswer) % $N;\n    \n    switch ($type) {\n        case 1:\n            $sequence[$index][] = $y;\n            break;\n        case 2:\n            $size = count($sequence[$index]);\n            $lastAnswer = $sequence[$index][$y % $size];\n            echo $lastAnswer.;\n            break;\n        default :\n            echo 'Error: Invalid query!';\n            break;            \n    }\n    //echo print_r([$sequence], true);\n}\n\n?>\n\n","offset":721,"fileType":"php","requestStartTime":1518013184814}}
{"body": {"column":23,"line":29,"wordToComplete":"","code":"\n<?php\n$_fp = fopen(\"php://stdin\", \"r\");\n/* Enter your code here. Read input from STDIN. Print output to STDOUT */\n\n$firstLine = fgets($_fp);\n$input = explode(' ',$firstLine);\narray_walk($input,'intval');\n\nlist($N, $Q) = $input;\n$lastAnswer = 0;\n$sequence = [];\n\nfor ($i=0; $i < $Q; $i++) {\n    $nextLine = fgets($_fp);\n    $query = explode(' ', $nextLine);\n    array_walk($query,'intval');\n    \n    list($type, $x, $y) = $query;\n    \n    $index = ($x ^ $lastAnswer) % $N;\n    \n    switch ($type) {\n        case 1:\n            $sequence[$index][] = $y;\n            break;\n        case 2:\n            $size = count($sequence[$index]);\n            $lastAnswer = $sequence[$index][$y % $size];\n            echo .\"\\n\".$lastAnswer;\n            break;\n        default :\n            echo 'Error: Invalid query!';\n            break;            \n    }\n    //echo print_r([$sequence], true);\n}\n\n?>\n\n","offset":715,"fileType":"php","requestStartTime":1518013213284}}
{"body": {"column":14,"line":18,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction plusMinus($arr) {\n    // Complete this function\n    $fractions = [0=>0, 1=>0, 2=>0];\n    foreach ($arr as $a) {\n        if ($a > 0) {\n            $fractions[0]++;\n        } elseif ($a < 0) {\n            $fractions[1]++;\n        } else {\n            $fractions[2]++;\n        }\n    }\n    \n    foreach ($fractions as $f) {\n        echo .\n    }\n    echo 100 / $fractions[0];\n    echo 100 / $fractions[1];\n    echo 100 / $fractions[2];\n}\n\nfscanf($handle, \"%i\",$n);\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nplusMinus($arr);\nfclose($handle);\n?>\n\n\n","offset":390,"fileType":"php","requestStartTime":1518014498779}}
{"body": {"column":27,"line":7,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction staircase($n) {\n    // Complete this function\n    for ($i=1;$i<=$n;$i++) {\n        echo str_repeat() .\n    }\n}\n\nfscanf($handle, \"%i\",$n);\nstaircase($n);\n\n?>\n\n\n","offset":158,"fileType":"php","requestStartTime":1518014748797}}
{"body": {"column":30,"line":7,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction staircase($n) {\n    // Complete this function\n    for ($i=1;$i<=$n;$i++) {\n        echo str_repeat(' ' . ) . str_repeat('#', $i);\n    }\n}\n\nfscanf($handle, \"%i\",$n);\nstaircase($n);\n\n?>\n\n\n","offset":161,"fileType":"php","requestStartTime":1518014763959}}
{"body": {"column":62,"line":7,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction staircase($n) {\n    // Complete this function\n    for ($i=1;$i<=$n;$i++) {\n        echo str_repeat(' ' . $n - $i) . str_repeat('#', $i) .;\n    }\n}\n\nfscanf($handle, \"%i\",$n);\nstaircase($n);\n\n?>\n\n\n","offset":193,"fileType":"php","requestStartTime":1518014783877}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction twoCharaters($s) {\n   for($i=0, $len = strlen($s)-1;$i<$len;$i++){\n      $letter = $s[$i];\n      $letterNext = $s[$i+1];\n      if($letter === $letterNext){\n          $needDelete[$letter] =1;\n      }\n    }\n    if(!empty($needDelete)){\n        $newStr = '';\n        for($i=0, $len = strlen($s);$i<$len;$i++){\n            if(!isset($needDelete[$s[$i]])){\n                $newStr .= \n            }\n        }\n    }\n    for($i=0, $len = strlen($s);$i<$len;$i++){\n        if(!isset($letter[$s[$i]])){\n            $letter[$s[$i]] = 1;\n        }\n    }\n    $letters = array_keys($letter);\n    $maxLen = 0;\n    foreach($letters as $id=>$letter1){\n        for($j=$id, $num = count($letters);$j<$num;$j++){\n            $letter2 = $letters[$j];\n            $tempLen = 0;\n            for($i=0, $len = strlen($s)-1;$i<$len;$i++){\n                $letter = $s[$i];\n                $letterNext = $s[$i+1];\n                if($letter !== $letter1 && $letter !== $letter2){\n                    continue;\n                }\n                if($letter === $letterNext){\n                    $tempLen = 0;\n                    break;\n                }\n            }\n        }\n    }\n}\n\nfscanf($handle, \"%i\",$l);\nfscanf($handle, \"%s\",$s);\n$result = twoCharaters($s);\necho $result . \"\\n\";\n\n?>\n\n\n","offset":433,"fileType":"php","requestStartTime":1518017084393}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction miniMaxSum($arr) {\n    // Complete this function\n    \n    $sum = array_sum($arr);\n    \n    echo ($sum -) . ;\n}\n\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nminiMaxSum($arr);\n\n?>\n\n\n","offset":162,"fileType":"php","requestStartTime":1518017166679}}
{"body": {"column":35,"line":9,"wordToComplete":"","code":"\n<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction miniMaxSum($arr) {\n    // Complete this function\n    \n    $sum = array_sum($arr);\n    \n    echo ($sum - max($arr)) . ' ' . ($sum - min($arr));\n}\n\n$arr_temp = fgets($handle);\n$arr = explode(\" \",$arr_temp);\n$arr = array_map('intval', $arr);\nminiMaxSum($arr);\n\n?>\n\n\n","offset":178,"fileType":"php","requestStartTime":1518017245597}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\nfunction counts($nums, $maxes) {\n\n    $arrEqMaxes = array();\n    foreach ($maxes as $kMax => $max){\n        echo $kMax.'=>'.\n        if ($kMax == 0) continue;\n        $countMax = 0;\n        foreach ($nums as $kNum => $num){\n            if ($kNum == 0) continue;\n            if ($num <= $max) $countMax++;   \n        }\n        $arrEqMaxes[] = $countMax;\n    }\n    return $arrEqMaxes;\n}\n\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$nums_cnt = 0;\nfscanf($__fp, \"%d\", $nums_cnt);\n$nums = array();\nfor ($nums_i = 0; $nums_i < $nums_cnt; $nums_i++) {\n    fscanf($__fp, \"%d\", $nums_item);\n    $nums[] = $nums_item;\n}\n\n$maxes_cnt = 0;\nfscanf($__fp, \"%d\", $maxes_cnt);\n$maxes = array();\nfor ($maxes_i = 0; $maxes_i < $maxes_cnt; $maxes_i++) {\n    fscanf($__fp, \"%d\", $maxes_item);\n    $maxes[] = $maxes_item;\n}\n\n\n$res = counts($nums, $maxes);\nforeach ($res as $res_cur) {\n    fwrite($file, $res_cur . \"\\n\" );\n}\n\nfclose($file);\n?>\n\n","offset":173,"fileType":"php","requestStartTime":1518017314607}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"<?php\n\n\n\n/*\n * Complete the function below.\n */\nfunction counts($nums, $maxes) {\n\n    $arrEqMaxes = array();\n    foreach ($maxes as $kMax => $max){\n        echo $kMax.'=>'.$max;\n        //if ($kMax == 0) continue;\n        //$countMax = 0;\n        foreach ($nums as $kNum => $num){\n            echo $kNum.'=>'.\n            /*if ($kNum == 0) continue;\n            if ($num <= $max) $countMax++;   \n        }\n        $arrEqMaxes[] = $countMax;*/\n    }\n    return $arrEqMaxes;\n}\n\n$file = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"php://stdin\", \"r\");\n$nums_cnt = 0;\nfscanf($__fp, \"%d\", $nums_cnt);\n$nums = array();\nfor ($nums_i = 0; $nums_i < $nums_cnt; $nums_i++) {\n    fscanf($__fp, \"%d\", $nums_item);\n    $nums[] = $nums_item;\n}\n\n$maxes_cnt = 0;\nfscanf($__fp, \"%d\", $maxes_cnt);\n$maxes = array();\nfor ($maxes_i = 0; $maxes_i < $maxes_cnt; $maxes_i++) {\n    fscanf($__fp, \"%d\", $maxes_item);\n    $maxes[] = $maxes_item;\n}\n\n\n$res = counts($nums, $maxes);\nforeach ($res as $res_cur) {\n    fwrite($file, $res_cur . \"\\n\" );\n}\n\nfclose($file);\n?>\n\n","offset":310,"fileType":"php","requestStartTime":1518017345914}}
